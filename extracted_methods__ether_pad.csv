Commit Hash,File Name,Method Name,Method Java,Commit Link
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,encode_base64,"	private static String encode_base64(byte d[], int len)
		throws IllegalArgumentException {
		int off = 0;
		StringBuffer rs = new StringBuffer();
		int c1, c2;

		if (len <= 0 || len > d.length)
			throw new IllegalArgumentException (""Invalid len"");

		while (off < len) {
			c1 = d[off++] & 0xff;
			rs.append(base64_code[(c1 >> 2) & 0x3f]);
			c1 = (c1 & 0x03) << 4;
			if (off >= len) {
				rs.append(base64_code[c1 & 0x3f]);
				break;
			}
			c2 = d[off++] & 0xff;
			c1 |= (c2 >> 4) & 0x0f;
			rs.append(base64_code[c1 & 0x3f]);
			c1 = (c2 & 0x0f) << 2;
			if (off >= len) {
				rs.append(base64_code[c1 & 0x3f]);
				break;
			}
			c2 = d[off++] & 0xff;
			c1 |= (c2 >> 6) & 0x03;
			rs.append(base64_code[c1 & 0x3f]);
			rs.append(base64_code[c2 & 0x3f]);
		}
		return rs.toString();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,char64,"	private static byte char64(char x) {
		if ((int)x < 0 || (int)x > index_64.length)
			return -1;
		return index_64[(int)x];
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,decode_base64,"	private static byte[] decode_base64(String s, int maxolen)
		throws IllegalArgumentException {
		StringBuffer rs = new StringBuffer();
		int off = 0, slen = s.length(), olen = 0;
		byte ret[];
		byte c1, c2, c3, c4, o;

		if (maxolen <= 0)
			throw new IllegalArgumentException (""Invalid maxolen"");

		while (off < slen - 1 && olen < maxolen) {
			c1 = char64(s.charAt(off++));
			c2 = char64(s.charAt(off++));
			if (c1 == -1 || c2 == -1)
				break;
			o = (byte)(c1 << 2);
			o |= (c2 & 0x30) >> 4;
			rs.append((char)o);
			if (++olen >= maxolen || off >= slen)
				break;
			c3 = char64(s.charAt(off++));
			if (c3 == -1)
				break;
			o = (byte)((c2 & 0x0f) << 4);
			o |= (c3 & 0x3c) >> 2;
			rs.append((char)o);
			if (++olen >= maxolen || off >= slen)
				break;
			c4 = char64(s.charAt(off++));
			o = (byte)((c3 & 0x03) << 6);
			o |= c4;
			rs.append((char)o);
			++olen;
		}

		ret = new byte[olen];
		for (off = 0; off < olen; off++)
			ret[off] = (byte)rs.charAt(off);
		return ret;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,encipher,"	private final void encipher(int lr[], int off) {
		int i, n, l = lr[off], r = lr[off + 1];

		l ^= P[0];
		for (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {
			// Feistel substitution on left word
			n = S[(l >> 24) & 0xff];
			n += S[0x100 | ((l >> 16) & 0xff)];
			n ^= S[0x200 | ((l >> 8) & 0xff)];
			n += S[0x300 | (l & 0xff)];
			r ^= n ^ P[++i];

			// Feistel substitution on right word
			n = S[(r >> 24) & 0xff];
			n += S[0x100 | ((r >> 16) & 0xff)];
			n ^= S[0x200 | ((r >> 8) & 0xff)];
			n += S[0x300 | (r & 0xff)];
			l ^= n ^ P[++i];
		}
		lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];
		lr[off + 1] = l;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,streamtoword,"	private static int streamtoword(byte data[], int offp[]) {
		int i;
		int word = 0;
		int off = offp[0];

		for (i = 0; i < 4; i++) {
			word = (word << 8) | (data[off] & 0xff);
			off = (off + 1) % data.length;
		}

		offp[0] = off;
		return word;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,init_key,"	private void init_key() {
		P = (int[])P_orig.clone();
		S = (int[])S_orig.clone();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,key,"	private void key(byte key[]) {
		int i;
		int koffp[] = { 0 };
		int lr[] = { 0, 0 };
		int plen = P.length, slen = S.length;

		for (i = 0; i < plen; i++)
			P[i] = P[i] ^ streamtoword(key, koffp);

		for (i = 0; i < plen; i += 2) {
			encipher(lr, 0);
			P[i] = lr[0];
			P[i + 1] = lr[1];
		}

		for (i = 0; i < slen; i += 2) {
			encipher(lr, 0);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,ekskey,"	private void ekskey(byte data[], byte key[]) {
		int i;
		int koffp[] = { 0 }, doffp[] = { 0 };
		int lr[] = { 0, 0 };
		int plen = P.length, slen = S.length;

		for (i = 0; i < plen; i++)
			P[i] = P[i] ^ streamtoword(key, koffp);

		for (i = 0; i < plen; i += 2) {
			lr[0] ^= streamtoword(data, doffp);
			lr[1] ^= streamtoword(data, doffp);
			encipher(lr, 0);
			P[i] = lr[0];
			P[i + 1] = lr[1];
		}

		for (i = 0; i < slen; i += 2) {
			lr[0] ^= streamtoword(data, doffp);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,crypt_raw,"	private byte[] crypt_raw(byte password[], byte salt[], int log_rounds) {
		int rounds, i, j;
		int cdata[] = (int[])bf_crypt_ciphertext.clone();
		int clen = cdata.length;
		byte ret[];

		if (log_rounds < 4 || log_rounds > 31)
			throw new IllegalArgumentException (""Bad number of rounds"");
		rounds = 1 << log_rounds;
		if (salt.length != BCRYPT_SALT_LEN)
			throw new IllegalArgumentException (""Bad salt length"");

		init_key();
		ekskey(salt, password);
		for (i = 0; i < rounds; i++) {
			key(password);
			key(salt);
		}

		for (i = 0; i < 64; i++) {
			for (j = 0; j < (clen >> 1); j++)
				encipher(cdata, j << 1);
		}

		ret = new byte[clen * 4];
		for (i = 0, j = 0; i < clen; i++) {
			ret[j++] = (byte)((cdata[i] >> 24) & 0xff);
			ret[j++] = (byte)((cdata[i] >> 16) & 0xff);
			ret[j++] = (byte)((cdata[i] >> 8) & 0xff);
			ret[j++] = (byte)(cdata[i] & 0xff);
		}
		return ret;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,hashpw,"	public static String hashpw(String password, String salt) {
		BCrypt B;
		String real_salt;
		byte passwordb[], saltb[], hashed[];
		char minor = (char)0;
		int rounds, off = 0;
		StringBuffer rs = new StringBuffer();

		if (salt.charAt(0) != '$' || salt.charAt(1) != '2')
			throw new IllegalArgumentException (""Invalid salt version"");
		if (salt.charAt(1) != '$') {
			minor = salt.charAt(2);
			if (minor != 'a' || salt.charAt(3) != '$')
				throw new IllegalArgumentException (""Invalid salt revision"");
			off = 4;
		} else
			off = 3;

		// Extract number of rounds
		if (salt.charAt(off + 2) > '$')
			throw new IllegalArgumentException (""Missing salt rounds"");
		rounds = Integer.parseInt(salt.substring(off, off + 2));

		real_salt = salt.substring(off + 3, off + 25);
		try {
			passwordb = (password + (minor >= 'a' ? ""\000"" : """")).getBytes(""US-ASCII"");
		} catch (UnsupportedEncodingException uee) {
			// The JDK guarantees that US-ASCII is supported.
			throw new AssertionError(""US-ASCII is not supported"");
		}

		saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);

		B = new BCrypt();
		hashed = B.crypt_raw(passwordb, saltb, rounds);

		rs.append(""$2"");
		if (minor >= 'a')
			rs.append(minor);
		rs.append(""$"");
		if (rounds < 10)
			rs.append(""0"");
		rs.append(Integer.toString(rounds));
		rs.append(""$"");
		rs.append(encode_base64(saltb, saltb.length));
		rs.append(encode_base64(hashed,
		    bf_crypt_ciphertext.length * 4 - 1));
		return rs.toString();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,gensalt,"	public static String gensalt(int log_rounds, SecureRandom random) {
		StringBuffer rs = new StringBuffer();
		byte rnd[] = new byte[BCRYPT_SALT_LEN];

		random.nextBytes(rnd);

		rs.append(""$2a$"");
		if (log_rounds < 10)
			rs.append(""0"");
		rs.append(Integer.toString(log_rounds));
		rs.append(""$"");
		rs.append(encode_base64(rnd, rnd.length));
		return rs.toString();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,gensalt,"	public static String gensalt(int log_rounds) {
		return gensalt(log_rounds, new SecureRandom());
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,gensalt,"	public static String gensalt() {
		return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BCrypt.java,checkpw,"	public static boolean checkpw(String plaintext, String hashed) {
		return (hashed.compareTo(hashpw(plaintext, hashed)) == 0);
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getFileContents,"    public static String getFileContents(File f, boolean t) throws FileNotFoundException {
        FileInputStream in;
        try {
            in = new FileInputStream(f);
        } catch (FileNotFoundException e) {
            if (t) throw e;
            return null;
        }
        return getStreamContents(in);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getFileContents,"    public static String getFileContents(File f) {
        try {
            return getFileContents(f, false);
        } catch (FileNotFoundException e) {
            // won't ever get here.
        }  
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getBinaryFileContents,"    public static String getBinaryFileContents(File f) {
        FileInputStream in;
        try {
            in = new FileInputStream(f);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        }

        return getBinaryStreamContents(in);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getBinaryStreamContents,"    public static String getBinaryStreamContents(InputStream in) {
        StringBuilder out = new StringBuilder();
        byte[] b = new byte[4096];
        try {
            for (int n; (n = in.read(b)) != -1 ;) {
                out.append(new String(b, 0, 0, n));
            }
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return out.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getStreamContents,"    public static String getStreamContents(InputStream instream) {
        InputStreamReader in = new InputStreamReader(instream, java.nio.charset.Charset.forName(""UTF-8""));
        StringBuilder out = new StringBuilder();

        char[] b = new char[4096];
        try {
            for (int n; (n = in.read(b)) != -1; ){
                out.append(b, 0, n);
            }
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return out.toString();
    }        ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getBinaryFileContents,"    public static String getBinaryFileContents(String filename) {
        return getBinaryFileContents(new File(filename));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getFileContents,"    public static String getFileContents(String filename) {
        return getFileContents(new File(filename));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getFileContents,"    public static String getFileContents(String filename, boolean t) throws FileNotFoundException {
        return getFileContents(new File(filename), t);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getStreamBytes,"    public static byte[] getStreamBytes(InputStream instream) {
        byte[] b = new byte[8192];
        ByteArrayOutputStream baos = new ByteArrayOutputStream(16384);
        try {
            for (int n; (n = instream.read(b)) != -1;) {
                baos.write(b, 0, n);
            }
            instream.close();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return baos.toByteArray();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getReaderString,"    public static String getReaderString(BufferedReader reader) {
      StringBuffer out = new StringBuffer();
      char[] c = new char[8192];
      try {
        for (int n; (n = reader.read(c, 0, c.length)) != -1;) {
          out.append(c, 0, n);
        }
        reader.close();
      } catch (IOException e) {
        e.printStackTrace();
        return null;
      }
      return out.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getFileBytes,"    public static byte[] getFileBytes(File f) {
        try {
            return getStreamBytes(new FileInputStream(f));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getFileBytes,"    public static byte[] getFileBytes(String filename) {
        return getFileBytes(new File(filename));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getUnicodeFile,"    public static String getUnicodeFile(File f) throws FileNotFoundException {
            return getReaderString(new BufferedReader(new UnicodeReader(new FileInputStream(f), null)));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getUnicodeFile,"    public static String getUnicodeFile(String filename) throws FileNotFoundException {
            return getUnicodeFile(new File(filename));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,stringFromUnicode,"    public static String stringFromUnicode(byte[] bytes) {
            return getReaderString(new BufferedReader(new UnicodeReader(new ByteArrayInputStream(bytes), null)));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getDefaultEncoding,"       public String getDefaultEncoding() {
          return defaultEnc;
       }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,getEncoding,"       public String getEncoding() {
          if (internalIn2 == null) return null;
          return internalIn2.getEncoding();
       }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,init,"       protected void init() throws IOException {
          if (internalIn2 != null) return;

          String encoding;
          byte bom[] = new byte[BOM_SIZE];
          int n, unread;
          n = internalIn.read(bom, 0, bom.length);

          if ( (bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) &&
                      (bom[2] == (byte)0xFE) && (bom[3] == (byte)0xFF) ) {
             encoding = ""UTF-32BE"";
             unread = n - 4;
          } else if ( (bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) &&
                      (bom[2] == (byte)0x00) && (bom[3] == (byte)0x00) ) {
             encoding = ""UTF-32LE"";
             unread = n - 4;
          } else if (  (bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) &&
                (bom[2] == (byte)0xBF) ) {
             encoding = ""UTF-8"";
             unread = n - 3;
          } else if ( (bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF) ) {
             encoding = ""UTF-16BE"";
             unread = n - 2;
          } else if ( (bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) ) {
             encoding = ""UTF-16LE"";
             unread = n - 2;
          } else {
             // Unicode BOM mark not found, unread all bytes
             encoding = defaultEnc;
             unread = n;
          }    
          //System.out.println(""read="" + n + "", unread="" + unread);

          if (unread > 0) internalIn.unread(bom, (n - unread), unread);

          // Use given encoding
          if (encoding == null) {
             internalIn2 = new InputStreamReader(internalIn);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,close,"       public void close() throws IOException {
          init();
          internalIn2.close();
       }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BetterFile.java,read,"       public int read(char[] cbuf, int off, int len) throws IOException {
          init();
          return internalIn2.read(cbuf, off, len);
       }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,initCompilerArgs,"	public void initCompilerArgs(String... args) {
	    compilerArgs = new ArrayList<String>();
	    for(String a : args) compilerArgs.add(a);
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,compile,"	public boolean compile(String... sourceFiles) {
	    sourceFileList = new ArrayList<String>();
	    for(String a : sourceFiles) sourceFileList.add(a);
	    
	    sourceFileMap.clear();
	    outputFileMap.clear();
	    
	    File tempDir = makeTemporaryDir();
	    try {
		List<String> argsToPass = new ArrayList<String>();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,recompile,"	public ScalaSourceClassLoader recompile() {
	    ScalaSourceClassLoader sscl = new ScalaSourceClassLoader(getParent());
	    sscl.initCompilerArgs(compilerArgs.toArray(new String[0]));
	    sscl.compile(sourceFileList.toArray(new String[0]));
	    return sscl;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,isSuccessfulCompile,"	public boolean isSuccessfulCompile() {
	    return successfulCompile;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,isUpToDate,"	public boolean isUpToDate() {
	    for(Map.Entry<File,Long> entry : sourceFileMap.entrySet()) {
		long mod = entry.getKey().lastModified();
		if (mod == 0 || mod > entry.getValue()) {
		    return false;
		}
	    }
	    return true;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,loadClass,"	@Override protected synchronized Class<?> loadClass(String name,
							    boolean resolve)
	    throws ClassNotFoundException {
	    
	    // Based on java.lang.ClassLoader.loadClass(String,boolean)
	    
	    // First, check if the class has already been loaded
	    Class<?> c = findLoadedClass(name);
	    if (c == null) {
		String fileName = name.replace('.','/')+"".class"";
		if (outputFileMap.containsKey(fileName)) {
		    // define it ourselves
		    byte b[] = outputFileMap.get(fileName);
		    c = defineClass(name, b, 0, b.length);
		}
	    }
	    if (c != null) {
		if (resolve) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,readStreamFully,"    private static byte[] readStreamFully(InputStream in) throws IOException {
	InputStream from = new BufferedInputStream(in);
	ByteArrayOutputStream to = new ByteArrayOutputStream(in.available());
	ferry(from, to);
	return to.toByteArray();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,ferry,"    private static void ferry(InputStream from, OutputStream to)
	throws IOException {
	
	byte[] buf = new byte[1024];
	boolean done = false;
	while (! done) {
	    int numRead = from.read(buf);
	    if (numRead < 0) {
		done = true;
	    }
	    else {
		to.write(buf, 0, numRead);
	    }
	}
	from.close();
	to.close();	
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,classForName,"    private static Class<?> classForName(String name) {
	try {
	    return Class.forName(name);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,deleteRecursive,"    static boolean deleteRecursive(File f) {
	if(f.exists()) {
	    File[] files = f.listFiles();
	    for(File g : files) {
		if(g.isDirectory()) {
		    deleteRecursive(g);
		}
		else {
		    g.delete();
		}
	    }
	}
	return f.delete();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,getFileBytes,"    static byte[] getFileBytes(File f) {
	try {
	    return readStreamFully(new FileInputStream(f));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,listRecursive,"    static List<String> listRecursive(File dir) {
	List<String> L = new ArrayList<String>();
	listRecursive(dir, """", L);
	return L;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,listRecursive,"    static void listRecursive(File dir, String prefix, Collection<String> drop) {
	for(File f : dir.listFiles()) {
	    if (f.isDirectory()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,makeTemporaryDir,"    static File makeTemporaryDir() {
	try {
	    File f = File.createTempFile(""ajclsreload"", """").getAbsoluteFile();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassReload.java,invokeFSC,"    private static int invokeFSC(String[] args) {
	try {
	    Class<?> fsc =",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,hasExpired,"        public boolean hasExpired(long timeStamp, long now, int rank) {
          return now - timeStamp > maxAgeMillis;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,clear,"  public synchronized void clear() {
    keyToValue.clear();
    timeToKey.clear();
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,put,"  public synchronized void put(K key, V value) {
    TimeStampedValue old = keyToValue.get(key);
    if (old != null) {
      timeToKey.remove(old.getTimeStamp());
    }
    TimeStampedValue newVal = new TimeStampedValue(value);
    keyToValue.put(key, newVal);
    timeToKey.put(newVal.getTimeStamp(), key);
    checkExpiry();
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,touch,"  public synchronized void touch(K key) {
    TimeStampedValue old = keyToValue.get(key);
    if (old != null) {
      put(key, old.getValue());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,remove,"  public synchronized void remove(Object key) {
    TimeStampedValue old = keyToValue.get(key);
    if (old != null) {
      keyToValue.remove(key);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,get,"  public synchronized V get(Object key) {
    if (keyToValue.containsKey(key)) {
      return keyToValue.get(key).getValue();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,containsKey,"  public synchronized boolean containsKey(Object key) {
    return keyToValue.containsKey(key);
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,checkExpiry,"  public synchronized void checkExpiry() {
    while (timeToKey.size() > 0) {
      long oldestTime = timeToKey.firstKey();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,listAllKeys,"  public synchronized List<K> listAllKeys() {
    List<K> keyList = new java.util.ArrayList<K>(timeToKey.size());
    for(Map.Entry<Long,K> entry : timeToKey.entrySet()) {
      keyList.add(entry.getValue());
    }
    return Collections.unmodifiableList(keyList);
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,hasExpired,"  private boolean hasExpired(long time, int rank) {
    return policy.hasExpired(time, System.currentTimeMillis(), rank);
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,nowTimeStamp,"  private long nowTimeStamp() {
    // return ""now"", but unique
    long now = System.currentTimeMillis();
    if (now <= lastTimeStamp) {
      now = lastTimeStamp+1;
    }
    lastTimeStamp = now;
    return now;
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,setTimeStamp,"    public void setTimeStamp(long ts) {
      timeStamp = ts;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,getTimeStamp,"    public long getTimeStamp() {
      return timeStamp;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,getValue,"    public V getValue() {
      return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,toString,"    public String toString() {
      return ""(""+value+"", ""+new Date(timeStamp)+"")"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ExpiringMapping.java,toString,"  public synchronized String toString() {
    return keyToValue.toString();
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,createRequest,"    public static HttpServletRequest createRequest(String uri, Map<String, String> headers,
						   String method, String body) 
	throws java.net.URISyntaxException {
	return new InnerHttpServletRequest(new URI(uri), headers, method, body);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,createRequest,"    public static HttpServletRequest createRequest(HttpServletRequest req) 
      throws java.net.URISyntaxException {
      Map<String, String> headers = new java.util.HashMap<String, String>();
      Enumeration<String> headerNames = (Enumeration<String>) req.getHeaderNames();
      while (headerNames.hasMoreElements()) {
        String e = headerNames.nextElement();
        headers.put(e, req.getHeader(e));
      }
      return createRequest(
        req.getRequestURL() +",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,createResponse,"    public static HttpServletResponse createResponse() {
	return new InnerHttpServletResponse();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,createPair,"    public static RequestResponse createPair(String uri, Map<String, String> headers,
					     String method, String body) 
	throws java.net.URISyntaxException {
	return new RequestResponse(createRequest(uri, headers, method, body), createResponse());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,extractHeaders,"	private void extractHeaders(Map<String, String> headers) {
	    this.headers = new HashMap<String, String>();
	    for (Map.Entry<String, String> kv : headers.entrySet()) {
		this.headers.put(kv.getKey().toLowerCase(), kv.getValue());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,decodeUTF8,"	private String decodeUTF8(String s) {
	    try {
		return URLDecoder.decode(s, ""UTF-8"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,extractParameters,"	private void extractParameters() {
	    parameters = new HashMap<String, String[]>();
	    if (queryString == null)
		return;

	    Map<String, List<String> > params = new HashMap<String, List<String> >();
	    String[] pairs = queryString.split(""&"");
	    for (String s : pairs) {
		String[] kv = s.split(""="", 2);
		if (! params.containsKey(kv[0])) {
		    params.put(decodeUTF8(kv[0]), new ArrayList<String>());
		}
		params.get(decodeUTF8(kv[0])).add(decodeUTF8(kv[1]));
	    }
	    String[] stringArray = new String[0];

	    for (Map.Entry<String, List<String> > e : params.entrySet()) {
		parameters.put(e.getKey(), e.getValue().toArray(stringArray));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getAuthType,"	public String getAuthType() { return null; }
	public String getContextPath() { return """"; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getContextPath,"	public String getContextPath() { return """"; }
	public javax.servlet.http.Cookie[] getCookies() { return new javax.servlet.http.Cookie[0]; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getCookies,"	public javax.servlet.http.Cookie[] getCookies() { return new javax.servlet.http.Cookie[0]; }
	@SuppressWarnings({""deprecation""})",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getDateHeader,"	public long getDateHeader(String name) { return java.util.Date.parse(getHeader(name)); }
	public String getHeader(String name) { return headers.get(name.toLowerCase()); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getHeader,"	public String getHeader(String name) { return headers.get(name.toLowerCase()); }
	public Enumeration<String> getHeaders(String name) { ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getHeaders,"	public Enumeration<String> getHeaders(String name) { 
	    Vector<String> v = new Vector<String>();
	    v.add(getHeader(name));
	    return v.elements();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getHeaderNames,"	public Enumeration<String> getHeaderNames() {
	    return Collections.enumeration(headers.keySet());
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getIntHeader,"	public int getIntHeader(String name) { return Integer.parseInt(getHeader(name)); }
	public String getMethod() { return method.toUpperCase(); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getMethod,"	public String getMethod() { return method.toUpperCase(); }
	public String getPathInfo() { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getPathInfo,"	public String getPathInfo() { return null; }
	public String getPathTranslated() { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getPathTranslated,"	public String getPathTranslated() { return null; }
	public String getQueryString() { return queryString; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getQueryString,"	public String getQueryString() { return queryString; }
	public String getRemoteUser() { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRemoteUser,"	public String getRemoteUser() { return null; }
	public boolean isUserInRole(String role) { return false; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,isUserInRole,"	public boolean isUserInRole(String role) { return false; }
	public java.security.Principal getUserPrincipal() { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getUserPrincipal,"	public java.security.Principal getUserPrincipal() { return null; }
	public String getRequestedSessionId() { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRequestedSessionId,"	public String getRequestedSessionId() { return null; }
	public String getRequestURI() { return path; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRequestURI,"	public String getRequestURI() { return path; }
	public StringBuffer getRequestURL() { ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRequestURL,"	public StringBuffer getRequestURL() { 
	    return new StringBuffer(scheme+""://""+host+(port==-1?"""":"":""+port)+path);
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getServletPath,"	public String getServletPath() { return """"; }
	public javax.servlet.http.HttpSession getSession(boolean create) { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getSession,"	public javax.servlet.http.HttpSession getSession(boolean create) { return null; }
	public javax.servlet.http.HttpSession getSession() { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getSession,"	public javax.servlet.http.HttpSession getSession() { return null; }
	public boolean isRequestedSessionIdValid() { return false; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,isRequestedSessionIdValid,"	public boolean isRequestedSessionIdValid() { return false; }
	public boolean isRequestedSessionIdFromCookie() { return false; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,isRequestedSessionIdFromCookie,"	public boolean isRequestedSessionIdFromCookie() { return false; }
	public boolean isRequestedSessionIdFromURL() { return false; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,isRequestedSessionIdFromURL,"	public boolean isRequestedSessionIdFromURL() { return false; }
	public boolean isRequestedSessionIdFromUrl() { return isRequestedSessionIdFromURL(); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,isRequestedSessionIdFromUrl,"	public boolean isRequestedSessionIdFromUrl() { return isRequestedSessionIdFromURL(); }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getAttribute,"	public Object getAttribute(String name) { return null; }
	public Enumeration<String> getAttributeNames() { ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getAttributeNames,"	public Enumeration<String> getAttributeNames() { 
	    return Collections.enumeration(new ArrayList<String>());
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getCharacterEncoding,"	public String getCharacterEncoding() { return null; }
	public void setCharacterEncoding(String env) { }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getContentLength,"	public int getContentLength() {
	    return ((getHeader(""Content-Length"") == null)
		    ? (body == null ? 0 : body.length())",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getContentType,"	public String getContentType() { return getHeader(""Content-Type""); }
	public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException{",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getInputStream,"	public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException{
	    return new javax.servlet.ServletInputStream() {
		private java.io.InputStream istream = ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,read,"		public int read() throws java.io.IOException {
		    return istream.read();
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getParameter,"	public String getParameter(String name) {
	    String[] vals = getParameterValues(name);
	    if (vals == null) return null;
	    if (vals.length < 1) return null;
	    return vals[0];
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getParameterNames,"	public Enumeration<String> getParameterNames() {
	    return Collections.enumeration(parameters.keySet());
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getParameterValues,"	public String[] getParameterValues(String name) { return parameters.get(name); }
	public Map getParameterMap() { return Collections.unmodifiableMap(parameters); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getParameterMap,"	public Map getParameterMap() { return Collections.unmodifiableMap(parameters); }
	public String getProtocol() { return ""HTTP/1.1""; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getProtocol,"	public String getProtocol() { return ""HTTP/1.1""; }
	public String getScheme() { return scheme; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getScheme,"	public String getScheme() { return scheme; }
	public String getServerName() { return host; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getServerName,"	public String getServerName() { return host; }
	public int getServerPort() { return port; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getServerPort,"	public int getServerPort() { return port; }
	public java.io.BufferedReader getReader() { ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getReader,"	public java.io.BufferedReader getReader() { 
	    return new java.io.BufferedReader(new java.io.StringReader(body));
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRemoteAddr,"	public String getRemoteAddr() { return ""127.0.0.1""; }
	public String getRemoteHost() { return ""localhost""; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRemoteHost,"	public String getRemoteHost() { return ""localhost""; }
	public void setAttribute(String name, Object o) { }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getLocale,"	public java.util.Locale getLocale() { return java.util.Locale.US; }
	public Enumeration<java.util.Locale> getLocales() {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getLocales,"	public Enumeration<java.util.Locale> getLocales() {
	    Vector<java.util.Locale> v = new Vector<java.util.Locale>();
	    v.add(java.util.Locale.US);
	    return v.elements();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,isSecure,"	public boolean isSecure() { return false; }
	public javax.servlet.RequestDispatcher getRequestDispatcher(String path) { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRequestDispatcher,"	public javax.servlet.RequestDispatcher getRequestDispatcher(String path) { return null; }
	public String getRealPath(String path) { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRealPath,"	public String getRealPath(String path) { return null; }
	public int getRemotePort() { return -1; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getRemotePort,"	public int getRemotePort() { return -1; }
	public String getLocalName() { return ""localhost""; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getLocalName,"	public String getLocalName() { return ""localhost""; }
	public String getLocalAddr() { return ""127.0.0.1""; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getLocalAddr,"	public String getLocalAddr() { return ""127.0.0.1""; }
	public int getLocalPort() { return 80; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getLocalPort,"	public int getLocalPort() { return 80; }
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getStatusCode,"	public int getStatusCode() { return e_code; }
	public String getOutput() { ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getOutput,"	public String getOutput() { 
	    try {
		writer.flush(); 
		ostream.flush(); 
	    } catch (java.io.IOException e) {
		return ""(An IOException occurred while getting output: ""+e.getMessage()+"")"";
	    }
	    return ostream.toString();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,containsHeader,"	public boolean containsHeader(String name) { return true; }
	public String encodeRedirectUrl(String url) { return encodeRedirectURL(url); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,encodeRedirectUrl,"	public String encodeRedirectUrl(String url) { return encodeRedirectURL(url); }
	public String encodeRedirectURL(String url) { return url; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,encodeRedirectURL,"	public String encodeRedirectURL(String url) { return url; }
	public String encodeUrl(String url) { return encodeURL(url); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,encodeUrl,"	public String encodeUrl(String url) { return encodeURL(url); }
	public String encodeURL(String url) { return url; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,encodeURL,"	public String encodeURL(String url) { return url; }
	public void sendError(int sc) { e_code = sc; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,sendError,"	public void sendError(int sc) { e_code = sc; }
	public void sendError(int sc, String msg) { e_code = sc; e_msg = msg;}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,sendError,"	public void sendError(int sc, String msg) { e_code = sc; e_msg = msg;}
	public void sendRedirect(String location) { }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,setStatus,"	public void setStatus(int sc) { e_code = sc; }
	public void setStatus(int sc, String sm) { e_code = sc; e_msg = sm; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,setStatus,"	public void setStatus(int sc, String sm) { e_code = sc; e_msg = sm; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,write,"		public void write(int b) throws java.io.IOException {
		    ostream.write(b);
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getBufferSize,"	public int getBufferSize() { return 0; }
	public String getCharacterEncoding() { return c_enc; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getCharacterEncoding,"	public String getCharacterEncoding() { return c_enc; }
	public String getContentType() { return c_type; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getContentType,"	public String getContentType() { return c_type; }
	public java.util.Locale getLocale() { return locale; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getLocale,"	public java.util.Locale getLocale() { return locale; }
	public javax.servlet.ServletOutputStream getOutputStream() { return sostream; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getOutputStream,"	public javax.servlet.ServletOutputStream getOutputStream() { return sostream; }
	public java.io.PrintWriter getWriter() { return writer; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,getWriter,"	public java.io.PrintWriter getWriter() { return writer; }
	public boolean isCommitted() { return false; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,isCommitted,"	public boolean isCommitted() { return false; }
	public void reset() { }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,setCharacterEncoding,"	public void setCharacterEncoding(String charset) { c_enc = charset; }
	public void setContentLength(int len) { }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,setContentType,"	public void setContentType(String type) { c_type = type; }
	public void setLocale(java.util.Locale loc) { locale = loc; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,HttpServletRequestFactory.java,setLocale,"	public void setLocale(java.util.Locale loc) { locale = loc; }
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,checkClosed,"    private void checkClosed() {
        if (closed) {
            throw new FormatterClosedException();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,locale,"    public Locale locale() {
        checkClosed();
        return locale;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,out,"    public Appendable out() {
        checkClosed();
        return out;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,toString,"    public String toString() {
        checkClosed();
        return out.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,flush,"    public void flush() {
        checkClosed();
        if (out instanceof Flushable) {
            try {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,close,"    public void close() {
        closed = true;
        try {
            if (out instanceof Closeable) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,ioException,"    public IOException ioException() {
        return lastIOException;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,format,"    public LenientFormatter format(String format, Object... args) {
        return format(locale, format, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,format,"    public LenientFormatter format(Locale l, String format, Object... args) {
        checkClosed();
        CharBuffer formatBuffer = CharBuffer.wrap(format);
        ParserStateMachine parser = new ParserStateMachine(formatBuffer);
        Transformer transformer = new Transformer(this, l);

        int currentObjectIndex = 0;
        Object lastArgument = null;
        boolean hasLastArgumentSet = false;
        while (formatBuffer.hasRemaining()) {
            parser.reset();
            FormatToken token = parser.getNextFormatToken();
            String result;
            String plainText = token.getPlainText();
            if (token.getConversionType() == (char) FormatToken.UNSET) {
                result = plainText;
            } else {
                plainText = plainText.substring(0, plainText.indexOf('%'));
                Object argument = null;
                if (token.requireArgument()) {
                    int index = token.getArgIndex() == FormatToken.UNSET ? currentObjectIndex++
                            : token.getArgIndex();
                    argument = getArgument(args, index, token, lastArgument,
                            hasLastArgumentSet);
                    lastArgument = argument;
                    hasLastArgumentSet = true;
                }
                result = transformer.transform(token, argument);
                result = (null == result ? plainText : plainText + result);
            }
            // if output is made by formattable callback
            if (null != result) {
                try {
                    out.append(result);
                } catch (IOException e) {
                    lastIOException = e;
                }
            }
        }
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getArgument,"    private Object getArgument(Object[] args, int index, FormatToken token,
            Object lastArgument, boolean hasLastArgumentSet) {
        if (index == FormatToken.LAST_ARGUMENT_INDEX && !hasLastArgumentSet) {
            throw new MissingFormatArgumentException(""<""); //$NON-NLS-1$
        }

        if (null == args) {
            return null;
        }

        if (index >= args.length) {
            throw new MissingFormatArgumentException(token.getPlainText());
        }

        if (index == FormatToken.LAST_ARGUMENT_INDEX) {
            return lastArgument;
        }

        return args[index];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,closeOutputStream,"    private static void closeOutputStream(OutputStream os) {
        if (null == os) {
            return;
        }
        try {
            os.close();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,isPrecisionSet,"        boolean isPrecisionSet() {
            return precision != UNSET;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,isWidthSet,"        boolean isWidthSet() {
            return width != UNSET;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,isFlagSet,"        boolean isFlagSet(int flag) {
            return 0 != (flags & flag);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getArgIndex,"        int getArgIndex() {
            return argIndex;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setArgIndex,"        void setArgIndex(int index) {
            argIndex = index;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getPlainText,"        String getPlainText() {
            return plainText;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setPlainText,"        void setPlainText(String plainText) {
            this.plainText = plainText;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getWidth,"        int getWidth() {
            return width;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setWidth,"        void setWidth(int width) {
            this.width = width;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getPrecision,"        int getPrecision() {
            return precision;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setPrecision,"        void setPrecision(int precise) {
            this.precision = precise;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getStrFlags,"        String getStrFlags() {
            return strFlags.toString();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getFlags,"        int getFlags() {
            return flags;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setFlags,"        void setFlags(int flags) {
            this.flags = flags;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setFlag,"        boolean setFlag(char c) {
            int newFlag;
            switch (c) {
                case '-': {
                    newFlag = FLAG_MINUS;
                    break;
                }
                case '#': {
                    newFlag = FLAG_SHARP;
                    break;
                }
                case '+': {
                    newFlag = FLAG_ADD;
                    break;
                }
                case ' ': {
                    newFlag = FLAG_SPACE;
                    break;
                }
                case '0': {
                    newFlag = FLAG_ZERO;
                    break;
                }
                case ',': {
                    newFlag = FLAG_COMMA;
                    break;
                }
                case '(': {
                    newFlag = FLAG_PARENTHESIS;
                    break;
                }
                default:
                    return false;
            }
            if (0 != (flags & newFlag)) {
                throw new DuplicateFormatFlagsException(String.valueOf(c));
            }
            flags = (flags | newFlag);
            strFlags.append(c);
            return true;
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getFormatStringStartIndex,"        int getFormatStringStartIndex() {
            return formatStringStartIndex;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setFormatStringStartIndex,"        void setFormatStringStartIndex(int index) {
            formatStringStartIndex = index;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getConversionType,"        char getConversionType() {
            return conversionType;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setConversionType,"        void setConversionType(char c) {
            conversionType = c;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getDateSuffix,"        char getDateSuffix() {
            return dateSuffix;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,setDateSuffix,"        void setDateSuffix(char c) {
            dateSuffix = c;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,requireArgument,"        boolean requireArgument() {
            return conversionType != '%' && conversionType != 'n';
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getNumberFormat,"        private NumberFormat getNumberFormat() {
            if (null == numberFormat) {
                numberFormat = NumberFormat.getInstance(locale);
            }
            return numberFormat;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getDecimalFormatSymbols,"        private DecimalFormatSymbols getDecimalFormatSymbols() {
            if (null == decimalFormatSymbols) {
                decimalFormatSymbols = new DecimalFormatSymbols(locale);
            }
            return decimalFormatSymbols;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform,"        String transform(FormatToken token, Object argument) {

            /* init data member to print */
            this.formatToken = token;
            this.arg = argument;

            String result;
            switch (token.getConversionType()) {
                case 'B':
                case 'b': {
                    result = transformFromBoolean();
                    break;
                }
                case 'H':
                case 'h': {
                    result = transformFromHashCode();
                    break;
                }
                case 'S':
                case 's': {
                    result = transformFromString();
                    break;
                }
                case 'C':
                case 'c': {
                    result = transformFromCharacter();
                    break;
                }
                case 'd':
                case 'o':
                case 'x':
                case 'X': {
                    if (null == arg || arg instanceof BigInteger) {
                        result = transformFromBigInteger();
                    } else {
                        result = transformFromInteger();
                    }
                    break;
                }
                case 'e':
                case 'E':
                case 'g':
                case 'G':
                case 'f':
                case 'a':
                case 'A': {
                    result = transformFromFloat();
                    break;
                }
                case '%': {
                    result = transformFromPercent();
                    break;
                }
                case 'n': {
                    result = transformFromLineSeparator();
                    break;
                }
                case 't':
                case 'T': {
                    result = transformFromDateTime();
                    break;
                }
                default: {
                    throw new UnknownFormatConversionException(String
                            .valueOf(token.getConversionType()));
                }
            }

            if (Character.isUpperCase(token.getConversionType())) {
                if (null != result) {
                    result = result.toUpperCase(Locale.US);
                }
            }
            return result;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromBoolean,"        private String transformFromBoolean() {
            StringBuilder result = new StringBuilder();
            int startIndex = 0;
            int flags = formatToken.getFlags();

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    && !formatToken.isWidthSet()) {
                throw new MissingFormatWidthException(""-"" //$NON-NLS-1$
                        + formatToken.getConversionType());
            }

            // only '-' is valid for flags
            if (FormatToken.FLAGS_UNSET != flags
                    && FormatToken.FLAG_MINUS != flags) {
                throw new FormatFlagsConversionMismatchException(formatToken
                        .getStrFlags(), formatToken.getConversionType());
            }

            if (null == arg) {
                result.append(""false""); //$NON-NLS-1$
            } else if (arg instanceof Boolean) {
                result.append(arg);
            } else {
                result.append(""true""); //$NON-NLS-1$
            }
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromHashCode,"        private String transformFromHashCode() {
            StringBuilder result = new StringBuilder();

            int startIndex = 0;
            int flags = formatToken.getFlags();

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    && !formatToken.isWidthSet()) {
                throw new MissingFormatWidthException(""-"" //$NON-NLS-1$
                        + formatToken.getConversionType());
            }

            // only '-' is valid for flags
            if (FormatToken.FLAGS_UNSET != flags
                    && FormatToken.FLAG_MINUS != flags) {
                throw new FormatFlagsConversionMismatchException(formatToken
                        .getStrFlags(), formatToken.getConversionType());
            }

            if (null == arg) {
                result.append(""null""); //$NON-NLS-1$
            } else {
                result.append(Integer.toHexString(arg.hashCode()));
            }
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromString,"        private String transformFromString() {
            StringBuilder result = new StringBuilder();
            int startIndex = 0;
            int flags = formatToken.getFlags();

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    && !formatToken.isWidthSet()) {
                throw new MissingFormatWidthException(""-"" //$NON-NLS-1$
                        + formatToken.getConversionType());
            }

            // only '-' is valid for flags if the argument is not an
            // instance of Formattable
            if (FormatToken.FLAGS_UNSET != flags
                    && FormatToken.FLAG_MINUS != flags) {
                throw new FormatFlagsConversionMismatchException(formatToken
                        .getStrFlags(), formatToken.getConversionType());
            }

            result.append(arg);
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromCharacter,"        private String transformFromCharacter() {
            StringBuilder result = new StringBuilder();

            int startIndex = 0;
            int flags = formatToken.getFlags();

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    && !formatToken.isWidthSet()) {
                throw new MissingFormatWidthException(""-"" //$NON-NLS-1$
                        + formatToken.getConversionType());
            }

            // only '-' is valid for flags
            if (FormatToken.FLAGS_UNSET != flags
                    && FormatToken.FLAG_MINUS != flags) {
                throw new FormatFlagsConversionMismatchException(formatToken
                        .getStrFlags(), formatToken.getConversionType());
            }

            if (formatToken.isPrecisionSet()) {
                throw new IllegalFormatPrecisionException(formatToken
                        .getPrecision());
            }

            if (null == arg) {
                result.append(""null""); //$NON-NLS-1$
            } else {
                if (arg instanceof Character) {
                    result.append(arg);
                } else if (arg instanceof Byte) {
                    byte b = ((Byte) arg).byteValue();
                    if (!Character.isValidCodePoint(b)) {
                        throw new IllegalFormatCodePointException(b);
                    }
                    result.append((char) b);
                } else if (arg instanceof Short) {
                    short s = ((Short) arg).shortValue();
                    if (!Character.isValidCodePoint(s)) {
                        throw new IllegalFormatCodePointException(s);
                    }
                    result.append((char) s);
                } else if (arg instanceof Number) {
                    int codePoint = ((Number) arg).intValue();
                    if (!Character.isValidCodePoint(codePoint)) {
                        throw new IllegalFormatCodePointException(codePoint);
                    }
                    result.append(String.valueOf(Character.toChars(codePoint)));
                } else {
                    // argument of other class is not acceptable.
                    throw new IllegalFormatConversionException(formatToken
                            .getConversionType(), arg.getClass());
                }
            }
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromPercent,"        private String transformFromPercent() {
            StringBuilder result = new StringBuilder(""%""); //$NON-NLS-1$

            int startIndex = 0;
            int flags = formatToken.getFlags();

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    && !formatToken.isWidthSet()) {
                throw new MissingFormatWidthException(""-"" //$NON-NLS-1$
                        + formatToken.getConversionType());
            }

            if (FormatToken.FLAGS_UNSET != flags
                    && FormatToken.FLAG_MINUS != flags) {
                throw new FormatFlagsConversionMismatchException(formatToken
                        .getStrFlags(), formatToken.getConversionType());
            }
            if (formatToken.isPrecisionSet()) {
                throw new IllegalFormatPrecisionException(formatToken
                        .getPrecision());
            }
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromLineSeparator,"        private String transformFromLineSeparator() {
            if (formatToken.isPrecisionSet()) {
                throw new IllegalFormatPrecisionException(formatToken
                        .getPrecision());
            }

            if (formatToken.isWidthSet()) {
                throw new IllegalFormatWidthException(formatToken.getWidth());
            }

            int flags = formatToken.getFlags();
            if (FormatToken.FLAGS_UNSET != flags) {
                throw new IllegalFormatFlagsException(formatToken.getStrFlags());
            }

            if (null == lineSeparator) {
                lineSeparator = AccessController
                        .doPrivileged(new PrivilegedAction<String>() {

                            public String run() {
                                return System.getProperty(""line.separator""); //$NON-NLS-1$
                            }
                        });
            }
            return lineSeparator;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,run,"                            public String run() {
                                return System.getProperty(""line.separator""); //$NON-NLS-1$
                            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,padding,"        private String padding(StringBuilder source, int startIndex) {
            int start = startIndex;
            boolean paddingRight = formatToken
                    .isFlagSet(FormatToken.FLAG_MINUS);
            char paddingChar = '\u0020';// space as padding char.
            if (formatToken.isFlagSet(FormatToken.FLAG_ZERO)) {
                if ('d' == formatToken.getConversionType()) {
                    paddingChar = getDecimalFormatSymbols().getZeroDigit();
                } else {
                    paddingChar = '0';
                }
            } else {
                // if padding char is space, always padding from the head
                // location.
                start = 0;
            }
            int width = formatToken.getWidth();
            int precision = formatToken.getPrecision();

            int length = source.length();
            if (precision >= 0) {
                length = Math.min(length, precision);
                source.delete(length, source.length());
            }
            if (width > 0) {
                width = Math.max(source.length(), width);
            }
            if (length >= width) {
                return source.toString();
            }

            char[] paddings = new char[width - length];
            Arrays.fill(paddings, paddingChar);
            String insertString = new String(paddings);

            if (paddingRight) {
                source.append(insertString);
            } else {
                source.insert(start, insertString);
            }
            return source.toString();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromInteger,"        private String transformFromInteger() {
            int startIndex = 0;
            boolean isNegative = false;
            StringBuilder result = new StringBuilder();
            char currentConversionType = formatToken.getConversionType();
            long value;

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    || formatToken.isFlagSet(FormatToken.FLAG_ZERO)) {
                if (!formatToken.isWidthSet()) {
                    throw new MissingFormatWidthException(formatToken
                            .getStrFlags());
                }
            }
            // Combination of '+' & ' ' is illegal.
            if (formatToken.isFlagSet(FormatToken.FLAG_ADD)
                    && formatToken.isFlagSet(FormatToken.FLAG_SPACE)) {
                throw new IllegalFormatFlagsException(formatToken.getStrFlags());
            }
            if (formatToken.isPrecisionSet()) {
                throw new IllegalFormatPrecisionException(formatToken
                        .getPrecision());
            }
            if (arg instanceof Long) {
                value = ((Long) arg).longValue();
            } else if (arg instanceof Integer) {
                value = ((Integer) arg).longValue();
            } else if (arg instanceof Short) {
                value = ((Short) arg).longValue();
            } else if (arg instanceof Byte) {
                value = ((Byte) arg).longValue();
            }
            else if (arg instanceof Number) {
                value = ((Number) arg).longValue();
            } else {
                throw new IllegalFormatConversionException(formatToken
                        .getConversionType(), arg.getClass());
            }
            if ('d' != currentConversionType) {
                if (formatToken.isFlagSet(FormatToken.FLAG_ADD)
                        || formatToken.isFlagSet(FormatToken.FLAG_SPACE)
                        || formatToken.isFlagSet(FormatToken.FLAG_COMMA)
                        || formatToken.isFlagSet(FormatToken.FLAG_PARENTHESIS)) {
                    throw new FormatFlagsConversionMismatchException(
                            formatToken.getStrFlags(), formatToken
                                    .getConversionType());
                }
            }

            if (formatToken.isFlagSet(FormatToken.FLAG_SHARP)) {
                if ('d' == currentConversionType) {
                    throw new FormatFlagsConversionMismatchException(
                            formatToken.getStrFlags(), formatToken
                                    .getConversionType());
                } else if ('o' == currentConversionType) {
                    result.append(""0""); //$NON-NLS-1$
                    startIndex += 1;
                } else {
                    result.append(""0x""); //$NON-NLS-1$
                    startIndex += 2;
                }
            }

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    && formatToken.isFlagSet(FormatToken.FLAG_ZERO)) {
                throw new IllegalFormatFlagsException(formatToken.getStrFlags());
            }

            if (value < 0) {
                isNegative = true;
            }

            if ('d' == currentConversionType) {
                NumberFormat numberFormat = getNumberFormat();
                if (formatToken.isFlagSet(FormatToken.FLAG_COMMA)) {
                    numberFormat.setGroupingUsed(true);
                } else {
                    numberFormat.setGroupingUsed(false);
                }
                result.append(numberFormat.format(arg));
            } else {
                long BYTE_MASK = 0x00000000000000FFL;
                long SHORT_MASK = 0x000000000000FFFFL;
                long INT_MASK = 0x00000000FFFFFFFFL;
                if (isNegative) {
                    if (arg instanceof Byte) {
                        value &= BYTE_MASK;
                    } else if (arg instanceof Short) {
                        value &= SHORT_MASK;
                    } else if (arg instanceof Integer) {
                        value &= INT_MASK;
                    }
                }
                if ('o' == currentConversionType) {
                    result.append(Long.toOctalString(value));
                } else {
                    result.append(Long.toHexString(value));
                }
                isNegative = false;
            }

            if (!isNegative) {
                if (formatToken.isFlagSet(FormatToken.FLAG_ADD)) {
                    result.insert(0, '+');
                    startIndex += 1;
                }
                if (formatToken.isFlagSet(FormatToken.FLAG_SPACE)) {
                    result.insert(0, ' ');
                    startIndex += 1;
                }
            }

            /* pad paddingChar to the output */
            if (isNegative
                    && formatToken.isFlagSet(FormatToken.FLAG_PARENTHESIS)) {
                result = wrapParentheses(result);
                return result.toString();

            }
            if (isNegative && formatToken.isFlagSet(FormatToken.FLAG_ZERO)) {
                startIndex++;
            }
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,wrapParentheses,"        private StringBuilder wrapParentheses(StringBuilder result) {
            // delete the '-'
            result.deleteCharAt(0);
            result.insert(0, '(');
            if (formatToken.isFlagSet(FormatToken.FLAG_ZERO)) {
                formatToken.setWidth(formatToken.getWidth() - 1);
                padding(result, 1);
                result.append(')');
            } else {
                result.append(')');
                padding(result, 0);
            }
            return result;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromSpecialNumber,"        private String transformFromSpecialNumber() {
            String source = null;

            if (!(arg instanceof Number) || arg instanceof BigDecimal) {
                return null;
            }

            Number number = (Number) arg;
            double d = number.doubleValue();
            if (Double.isNaN(d)) {
                source = ""NaN""; //$NON-NLS-1$
            } else if (Double.isInfinite(d)) {
                if (d >= 0) {
                    if (formatToken.isFlagSet(FormatToken.FLAG_ADD)) {
                        source = ""+Infinity""; //$NON-NLS-1$
                    } else if (formatToken.isFlagSet(FormatToken.FLAG_SPACE)) {
                        source = "" Infinity""; //$NON-NLS-1$
                    } else {
                        source = ""Infinity""; //$NON-NLS-1$
                    }
                } else {
                    if (formatToken.isFlagSet(FormatToken.FLAG_PARENTHESIS)) {
                        source = ""(Infinity)""; //$NON-NLS-1$
                    } else {
                        source = ""-Infinity""; //$NON-NLS-1$
                    }
                }
            }

            if (null != source) {
                formatToken.setPrecision(FormatToken.UNSET);
                formatToken.setFlags(formatToken.getFlags()
                        & (~FormatToken.FLAG_ZERO));
                source = padding(new StringBuilder(source), 0);
            }
            return source;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromNull,"        private String transformFromNull() {
            formatToken.setFlags(formatToken.getFlags()
                    & (~FormatToken.FLAG_ZERO));
            return padding(new StringBuilder(""null""), 0); //$NON-NLS-1$
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromBigInteger,"        private String transformFromBigInteger() {
            int startIndex = 0;
            boolean isNegative = false;
            StringBuilder result = new StringBuilder();
            BigInteger bigInt = (BigInteger) arg;
            char currentConversionType = formatToken.getConversionType();

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    || formatToken.isFlagSet(FormatToken.FLAG_ZERO)) {
                if (!formatToken.isWidthSet()) {
                    throw new MissingFormatWidthException(formatToken
                            .getStrFlags());
                }
            }

            // Combination of '+' & ' ' is illegal.
            if (formatToken.isFlagSet(FormatToken.FLAG_ADD)
                    && formatToken.isFlagSet(FormatToken.FLAG_SPACE)) {
                throw new IllegalFormatFlagsException(formatToken.getStrFlags());
            }

            // Combination of '-' & '0' is illegal.
            if (formatToken.isFlagSet(FormatToken.FLAG_ZERO)
                    && formatToken.isFlagSet(FormatToken.FLAG_MINUS)) {
                throw new IllegalFormatFlagsException(formatToken.getStrFlags());
            }

            if (formatToken.isPrecisionSet()) {
                throw new IllegalFormatPrecisionException(formatToken
                        .getPrecision());
            }

            if ('d' != currentConversionType
                    && formatToken.isFlagSet(FormatToken.FLAG_COMMA)) {
                throw new FormatFlagsConversionMismatchException(formatToken
                        .getStrFlags(), currentConversionType);
            }

            if (formatToken.isFlagSet(FormatToken.FLAG_SHARP)
                    && 'd' == currentConversionType) {
                throw new FormatFlagsConversionMismatchException(formatToken
                        .getStrFlags(), currentConversionType);
            }

            if (null == bigInt) {
                return transformFromNull();
            }

            isNegative = (bigInt.compareTo(BigInteger.ZERO) < 0);

            if ('d' == currentConversionType) {
                NumberFormat numberFormat = getNumberFormat();
                boolean readableName = formatToken
                        .isFlagSet(FormatToken.FLAG_COMMA);
                numberFormat.setGroupingUsed(readableName);
                result.append(numberFormat.format(bigInt));
            } else if ('o' == currentConversionType) {
                // convert BigInteger to a string presentation using radix 8
                result.append(bigInt.toString(8));
            } else {
                // convert BigInteger to a string presentation using radix 16
                result.append(bigInt.toString(16));
            }
            if (formatToken.isFlagSet(FormatToken.FLAG_SHARP)) {
                startIndex = isNegative ? 1 : 0;
                if ('o' == currentConversionType) {
                    result.insert(startIndex, ""0""); //$NON-NLS-1$
                    startIndex += 1;
                } else if ('x' == currentConversionType
                        || 'X' == currentConversionType) {
                    result.insert(startIndex, ""0x""); //$NON-NLS-1$
                    startIndex += 2;
                }
            }

            if (!isNegative) {
                if (formatToken.isFlagSet(FormatToken.FLAG_ADD)) {
                    result.insert(0, '+');
                    startIndex += 1;
                }
                if (formatToken.isFlagSet(FormatToken.FLAG_SPACE)) {
                    result.insert(0, ' ');
                    startIndex += 1;
                }
            }

            /* pad paddingChar to the output */
            if (isNegative
                    && formatToken.isFlagSet(FormatToken.FLAG_PARENTHESIS)) {
                result = wrapParentheses(result);
                return result.toString();

            }
            if (isNegative && formatToken.isFlagSet(FormatToken.FLAG_ZERO)) {
                startIndex++;
            }
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromFloat,"        private String transformFromFloat() {
            StringBuilder result = new StringBuilder();
            int startIndex = 0;
            char currentConversionType = formatToken.getConversionType();

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS
                    | FormatToken.FLAG_ZERO)) {
                if (!formatToken.isWidthSet()) {
                    throw new MissingFormatWidthException(formatToken
                            .getStrFlags());
                }
            }

            if (formatToken.isFlagSet(FormatToken.FLAG_ADD)
                    && formatToken.isFlagSet(FormatToken.FLAG_SPACE)) {
                throw new IllegalFormatFlagsException(formatToken.getStrFlags());
            }

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    && formatToken.isFlagSet(FormatToken.FLAG_ZERO)) {
                throw new IllegalFormatFlagsException(formatToken.getStrFlags());
            }

            if ('e' == Character.toLowerCase(currentConversionType)) {
                if (formatToken.isFlagSet(FormatToken.FLAG_COMMA)) {
                    throw new FormatFlagsConversionMismatchException(
                            formatToken.getStrFlags(), currentConversionType);
                }
            }

            if ('g' == Character.toLowerCase(currentConversionType)) {
                if (formatToken.isFlagSet(FormatToken.FLAG_SHARP)) {
                    throw new FormatFlagsConversionMismatchException(
                            formatToken.getStrFlags(), currentConversionType);
                }
            }

            if ('a' == Character.toLowerCase(currentConversionType)) {
                if (formatToken.isFlagSet(FormatToken.FLAG_COMMA)
                        || formatToken.isFlagSet(FormatToken.FLAG_PARENTHESIS)) {
                    throw new FormatFlagsConversionMismatchException(
                            formatToken.getStrFlags(), currentConversionType);
                }
            }

            if (null == arg) {
                return transformFromNull();
            }

            Object arg2 = arg;
            
            if (!(arg2 instanceof Float || arg2 instanceof Double || arg2 instanceof BigDecimal)) {
                if (arg2 instanceof Number) {
                    arg2 = Double.valueOf(((Number)arg2).doubleValue());
                }
                else {
                    throw new IllegalFormatConversionException(currentConversionType, arg.getClass());
                }
            }

            String specialNumberResult = transformFromSpecialNumber();
            if (null != specialNumberResult) {
                return specialNumberResult;
            }

            if ('a' != Character.toLowerCase(currentConversionType)) {
                formatToken
                        .setPrecision(formatToken.isPrecisionSet() ? formatToken
                                .getPrecision()
                                : FormatToken.DEFAULT_PRECISION);
            }
            // output result
            FloatUtil floatUtil = new FloatUtil(result, formatToken,
                    (DecimalFormat) NumberFormat.getInstance(locale), arg2);
            floatUtil.transform(formatToken, result);

            formatToken.setPrecision(FormatToken.UNSET);

            if (getDecimalFormatSymbols().getMinusSign() == result.charAt(0)) {
                if (formatToken.isFlagSet(FormatToken.FLAG_PARENTHESIS)) {
                    result = wrapParentheses(result);
                    return result.toString();
                }
            } else {
                if (formatToken.isFlagSet(FormatToken.FLAG_SPACE)) {
                    result.insert(0, ' ');
                    startIndex++;
                }
                if (formatToken.isFlagSet(FormatToken.FLAG_ADD)) {
                    result.insert(0, floatUtil.getAddSign());
                    startIndex++;
                }
            }

            char firstChar = result.charAt(0);
            if (formatToken.isFlagSet(FormatToken.FLAG_ZERO)
                    && (firstChar == floatUtil.getAddSign() || firstChar == floatUtil
                            .getMinusSign())) {
                startIndex = 1;
            }

            if ('a' == Character.toLowerCase(currentConversionType)) {
                startIndex += 2;
            }
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transformFromDateTime,"        private String transformFromDateTime() {
            int startIndex = 0;
            char currentConversionType = formatToken.getConversionType();

            if (formatToken.isPrecisionSet()) {
                throw new IllegalFormatPrecisionException(formatToken
                        .getPrecision());
            }

            if (formatToken.isFlagSet(FormatToken.FLAG_SHARP)) {
                throw new FormatFlagsConversionMismatchException(formatToken
                        .getStrFlags(), currentConversionType);
            }

            if (formatToken.isFlagSet(FormatToken.FLAG_MINUS)
                    && FormatToken.UNSET == formatToken.getWidth()) {
                throw new MissingFormatWidthException(""-"" //$NON-NLS-1$
                        + currentConversionType);
            }

            if (null == arg) {
                return transformFromNull();
            }

            Calendar calendar;
            if (arg instanceof Calendar) {
                calendar = (Calendar) arg;
            } else {
                Date date = null;
                if (arg instanceof Number) {
                    date = new Date(((Number) arg).longValue());
                } else if (arg instanceof Date) {
                    date = (Date) arg;
                } else {
                    throw new IllegalFormatConversionException(
                            currentConversionType, arg.getClass());
                }
                calendar = Calendar.getInstance(locale);
                calendar.setTime(date);
            }

            if (null == dateTimeUtil) {
                dateTimeUtil = new DateTimeUtil(locale);
            }
            StringBuilder result = new StringBuilder();
            // output result
            dateTimeUtil.transform(formatToken, calendar, result);
            return padding(result, startIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform,"        void transform(FormatToken aFormatToken, StringBuilder aResult) {
            this.result = aResult;
            this.formatToken = aFormatToken;
            switch (formatToken.getConversionType()) {
                case 'e':",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getMinusSign,"        char getMinusSign() {
            return minusSign;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getAddSign,"        char getAddSign() {
            return '+';
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_e,"        void transform_e() {
            StringBuilder pattern = new StringBuilder();
            pattern.append('0');
            if (formatToken.getPrecision() > 0) {
                pattern.append('.');
                char[] zeros = new char[formatToken.getPrecision()];
                Arrays.fill(zeros, '0');
                pattern.append(zeros);
            }
            pattern.append('E');
            pattern.append(""+00""); //$NON-NLS-1$
            decimalFormat.applyPattern(pattern.toString());
            String formattedString = decimalFormat.format(argument);
            result.append(formattedString.replace('E', 'e'));

            // if the flag is sharp and decimal seperator is always given
            // out.
            if (formatToken.isFlagSet(FormatToken.FLAG_SHARP)
                    && 0 == formatToken.getPrecision()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_g,"        void transform_g() {
            int precision = formatToken.getPrecision();
            precision = (0 == precision ? 1 : precision);
            formatToken.setPrecision(precision);

            if (0.0 == ((Number) argument).doubleValue()) {
                precision--;
                formatToken.setPrecision(precision);
                transform_f();
                return;
            }

            boolean requireScientificRepresentation = true;
            double d = ((Number) argument).doubleValue();
            d = Math.abs(d);
            if (Double.isInfinite(d)) {
                precision = formatToken.getPrecision();
                precision--;
                formatToken.setPrecision(precision);
                transform_e();
                return;
            }
            BigDecimal b = new BigDecimal(d, new MathContext(precision));
            d = b.doubleValue();
            long l = b.longValue();

            if (d >= 1 && d < Math.pow(10, precision)) {
                if (l < Math.pow(10, precision)) {
                    requireScientificRepresentation = false;
                    precision -= String.valueOf(l).length();
                    precision = precision < 0 ? 0 : precision;
                    l = Math.round(d * Math.pow(10, precision + 1));
                    if (String.valueOf(l).length() <= formatToken
                            .getPrecision()) {
                        precision++;
                    }
                    formatToken.setPrecision(precision);
                }

            } else {
                l = b.movePointRight(4).longValue();
                if (d >= Math.pow(10, -4) && d < 1) {
                    requireScientificRepresentation = false;
                    precision += 4 - String.valueOf(l).length();
                    l = b.movePointRight(precision + 1).longValue();
                    if (String.valueOf(l).length() <= formatToken
                            .getPrecision()) {
                        precision++;
                    }
                    l = b.movePointRight(precision).longValue();
                    if (l >= Math.pow(10, precision - 4)) {
                        formatToken.setPrecision(precision);
                    }
                }
            }
            if (requireScientificRepresentation) {
                precision = formatToken.getPrecision();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_f,"        void transform_f() {
            StringBuilder pattern = new StringBuilder();
            if (formatToken.isFlagSet(FormatToken.FLAG_COMMA)) {
                pattern.append(',');
                int groupingSize = decimalFormat.getGroupingSize();
                if (groupingSize > 1) {
                    char[] sharps = new char[groupingSize - 1];
                    Arrays.fill(sharps, '#');
                    pattern.append(sharps);
                }
            }

            pattern.append(0);

            if (formatToken.getPrecision() > 0) {
                pattern.append('.');
                char[] zeros = new char[formatToken.getPrecision()];
                Arrays.fill(zeros, '0');
                pattern.append(zeros);
            }
            decimalFormat.applyPattern(pattern.toString());
            result.append(decimalFormat.format(argument));
            // if the flag is sharp and decimal seperator is always given
            // out.
            if (formatToken.isFlagSet(FormatToken.FLAG_SHARP)
                    && 0 == formatToken.getPrecision()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_a,"        void transform_a() {
            char currentConversionType = formatToken.getConversionType();

            if (argument instanceof Float) {
                Float F = (Float) argument;
                result.append(Float.toHexString(F.floatValue()));

            } else if (argument instanceof Double) {
                Double D = (Double) argument;
                result.append(Double.toHexString(D.doubleValue()));
            } else {
                // BigInteger is not supported.
                throw new IllegalFormatConversionException(
                        currentConversionType, argument.getClass());
            }

            if (!formatToken.isPrecisionSet()) {
                return;
            }

            int precision = formatToken.getPrecision();
            precision = (0 == precision ? 1 : precision);
            int indexOfFirstFracitoanlDigit = result.indexOf(""."") + 1; //$NON-NLS-1$
            int indexOfP = result.indexOf(""p""); //$NON-NLS-1$
            int fractionalLength = indexOfP - indexOfFirstFracitoanlDigit;

            if (fractionalLength == precision) {
                return;
            }

            if (fractionalLength < precision) {
                char zeros[] = new char[precision - fractionalLength];
                Arrays.fill(zeros, '0');
                result.insert(indexOfP, zeros);
                return;
            }
            result.delete(indexOfFirstFracitoanlDigit + precision, indexOfP);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform,"        void transform(FormatToken formatToken, Calendar aCalendar,
                StringBuilder aResult) {
            this.result = aResult;
            this.calendar = aCalendar;
            char suffix = formatToken.getDateSuffix();

            switch (suffix) {
                case 'H': {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_e,"        private void transform_e() {
            int day = calendar.get(Calendar.DAY_OF_MONTH);
            result.append(day);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_d,"        private void transform_d() {
            int day = calendar.get(Calendar.DAY_OF_MONTH);
            result.append(paddingZeros(day, 2));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_m,"        private void transform_m() {
            int month = calendar.get(Calendar.MONTH);
            // The returned month starts from zero, which needs to be
            // incremented by 1.
            month++;
            result.append(paddingZeros(month, 2));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_j,"        private void transform_j() {
            int day = calendar.get(Calendar.DAY_OF_YEAR);
            result.append(paddingZeros(day, 3));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_y,"        private void transform_y() {
            int year = calendar.get(Calendar.YEAR);
            year %= 100;
            result.append(paddingZeros(year, 2));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_Y,"        private void transform_Y() {
            int year = calendar.get(Calendar.YEAR);
            result.append(paddingZeros(year, 4));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_C,"        private void transform_C() {
            int year = calendar.get(Calendar.YEAR);
            year /= 100;
            result.append(paddingZeros(year, 2));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_a,"        private void transform_a() {
            int day = calendar.get(Calendar.DAY_OF_WEEK);
            result.append(getDateFormatSymbols().getShortWeekdays()[day]);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_A,"        private void transform_A() {
            int day = calendar.get(Calendar.DAY_OF_WEEK);
            result.append(getDateFormatSymbols().getWeekdays()[day]);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_b,"        private void transform_b() {
            int month = calendar.get(Calendar.MONTH);
            result.append(getDateFormatSymbols().getShortMonths()[month]);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_B,"        private void transform_B() {
            int month = calendar.get(Calendar.MONTH);
            result.append(getDateFormatSymbols().getMonths()[month]);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_Q,"        private void transform_Q() {
            long milliSeconds = calendar.getTimeInMillis();
            result.append(milliSeconds);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_s,"        private void transform_s() {
            long milliSeconds = calendar.getTimeInMillis();
            milliSeconds /= 1000;
            result.append(milliSeconds);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_Z,"        private void transform_Z() {
            TimeZone timeZone = calendar.getTimeZone();
            result.append(timeZone
                    .getDisplayName(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_z,"        private void transform_z() {
            int zoneOffset = calendar.get(Calendar.ZONE_OFFSET);
            zoneOffset /= 3600000;
            zoneOffset *= 100;
            if (zoneOffset >= 0) {
                result.append('+');
            }
            result.append(paddingZeros(zoneOffset, 4));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_p,"        private void transform_p(boolean isLowerCase) {
            int i = calendar.get(Calendar.AM_PM);
            String s = getDateFormatSymbols().getAmPmStrings()[i];
            if (isLowerCase) {
                s = s.toLowerCase(locale);
            }
            result.append(s);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_N,"        private void transform_N() {
            // TODO System.nanoTime();
            long nanosecond = calendar.get(Calendar.MILLISECOND) * 1000000L;
            result.append(paddingZeros(nanosecond, 9));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_L,"        private void transform_L() {
            int millisecond = calendar.get(Calendar.MILLISECOND);
            result.append(paddingZeros(millisecond, 3));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_S,"        private void transform_S() {
            int second = calendar.get(Calendar.SECOND);
            result.append(paddingZeros(second, 2));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_M,"        private void transform_M() {
            int minute = calendar.get(Calendar.MINUTE);
            result.append(paddingZeros(minute, 2));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_l,"        private void transform_l() {
            int hour = calendar.get(Calendar.HOUR);
            if (0 == hour) {
                hour = 12;
            }
            result.append(hour);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_k,"        private void transform_k() {
            int hour = calendar.get(Calendar.HOUR_OF_DAY);
            result.append(hour);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_I,"        private void transform_I() {
            int hour = calendar.get(Calendar.HOUR);
            if (0 == hour) {
                hour = 12;
            }
            result.append(paddingZeros(hour, 2));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_H,"        private void transform_H() {
            int hour = calendar.get(Calendar.HOUR_OF_DAY);
            result.append(paddingZeros(hour, 2));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_R,"        private void transform_R() {
            transform_H();
            result.append(':');
            transform_M();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_T,"        private void transform_T() {
            transform_H();
            result.append(':');
            transform_M();
            result.append(':');
            transform_S();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_r,"        private void transform_r() {
            transform_I();
            result.append(':');
            transform_M();
            result.append(':');
            transform_S();
            result.append(' ');
            transform_p(false);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_D,"        private void transform_D() {
            transform_m();
            result.append('/');
            transform_d();
            result.append('/');
            transform_y();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_F,"        private void transform_F() {
            transform_Y();
            result.append('-');
            transform_m();
            result.append('-');
            transform_d();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,transform_c,"        private void transform_c() {
            transform_a();
            result.append(' ');
            transform_b();
            result.append(' ');
            transform_d();
            result.append(' ');
            transform_T();
            result.append(' ');
            transform_Z();
            result.append(' ');
            transform_Y();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,paddingZeros,"        private static String paddingZeros(long number, int length) {
            int len = length;
            StringBuilder result = new StringBuilder();
            result.append(number);
            int startIndex = 0;
            if (number < 0) {
                len++;
                startIndex = 1;
            }
            len -= result.length();
            if (len > 0) {
                char[] zeros = new char[len];
                Arrays.fill(zeros, '0');
                result.insert(startIndex, zeros);
            }
            return result.toString();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getDateFormatSymbols,"        private DateFormatSymbols getDateFormatSymbols() {
            if (null == dateFormatSymbols) {
                dateFormatSymbols = new DateFormatSymbols(locale);
            }
            return dateFormatSymbols;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,reset,"        void reset() {
            this.currentChar = (char) FormatToken.UNSET;
            this.state = ENTRY_STATE;
            this.token = null;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getNextFormatToken,"        FormatToken getNextFormatToken() {
            token = new FormatToken();
            token.setFormatStringStartIndex(format.position());

            // FINITE AUTOMATIC MACHINE
            while (true) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getNextFormatChar,"        private char getNextFormatChar() {
            if (format.hasRemaining()) {
                return format.get();
            }
            return EOS;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,getFormatString,"        private String getFormatString() {
            int end = format.position();
            format.rewind();
            String formatString = format.subSequence(
                    token.getFormatStringStartIndex(), end).toString();
            format.position(end);
            return formatString;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,process_ENTRY_STATE,"        private void process_ENTRY_STATE() {
            if (EOS == currentChar) {
                state = ParserStateMachine.EXIT_STATE;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,process_START_CONVERSION_STATE,"        private void process_START_CONVERSION_STATE() {
            if (Character.isDigit(currentChar)) {
                int position = format.position() - 1;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,process_FlAGS_STATE,"        private void process_FlAGS_STATE() {
            if (token.setFlag(currentChar)) {
                // remains in FLAGS_STATE",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,process_WIDTH_STATE,"        private void process_WIDTH_STATE() {
            if ('.' == currentChar) {
                state = PRECISION_STATE;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,process_PRECISION_STATE,"        private void process_PRECISION_STATE() {
            if (Character.isDigit(currentChar)) {
                token.setPrecision(parseInt(format));
            } else {
                // the precision is required but not given by the
                // format string.
                throw new UnknownFormatConversionException(getFormatString());
            }
            state = CONVERSION_TYPE_STATE;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,process_CONVERSION_TYPE_STATE,"        private void process_CONVERSION_TYPE_STATE() {
            token.setConversionType(currentChar);
            if ('t' == currentChar || 'T' == currentChar) {
                state = SUFFIX_STATE;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,process_SUFFIX_STATE,"        private void process_SUFFIX_STATE() {
            token.setDateSuffix(currentChar);
            state = EXIT_STATE;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,process_EXIT_STATE,"        private void process_EXIT_STATE() {
            token.setPlainText(getFormatString());
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LenientFormatter.java,parseInt,"        private int parseInt(CharBuffer buffer) {
            int start = buffer.position() - 1;
            int end = buffer.limit();
            while (buffer.hasRemaining()) {
                if (!Character.isDigit(buffer.get())) {
                    end = buffer.position() - 1;
                    break;
                }
            }
            buffer.position(0);
            String intStr = buffer.subSequence(start, end).toString();
            buffer.position(end);
            try {
                return Integer.parseInt(intStr);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LimitedSizeMapping.java,hasExpired,"		public boolean hasExpired(long timeStamp, long now, int rank) {
		    return rank > maxSize;
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,nodesEqual,"    public static boolean nodesEqual(XmlCursor xmlOne, XmlCursor xmlTwo)
    {
        boolean result = false;

        if (xmlOne.isStartdoc())
        {
            xmlOne.toFirstContentToken();
        }

        if (xmlTwo.isStartdoc())
        {
            xmlTwo.toFirstContentToken();
        }

        if (xmlOne.currentTokenType() == xmlTwo.currentTokenType())
        {
            if (xmlOne.isEnddoc())
            {
                // Both empty
                result = true;
            }
            else if (xmlOne.isAttr())
            {
                result = attributesEqual(xmlOne, xmlTwo);
            }
            else if (xmlOne.isText())
            {
                result = textNodesEqual(xmlOne, xmlTwo);
            }
            else if (xmlOne.isComment())
            {
                result = commentsEqual(xmlOne, xmlTwo);
            }
            else if (xmlOne.isProcinst())
            {
                result = processingInstructionsEqual(xmlOne, xmlTwo);
            }
            else if (xmlOne.isStart())
            {
                // Compare root elements
                result = elementsEqual(xmlOne, xmlTwo);
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,elementsEqual,"    private static boolean elementsEqual(XmlCursor xmlOne, XmlCursor xmlTwo)
    {
        boolean result = true;

        if (!qnamesEqual(xmlOne.getName(), xmlTwo.getName()))
        {
            result = false;
        }
        else
        {
            // These filter out empty text nodes.
            nextToken(xmlOne);
            nextToken(xmlTwo);

            do
            {
                if (xmlOne.currentTokenType() != xmlTwo.currentTokenType())
                {
                    // Not same token
                    result = false;
                    break;
                }
                else if (xmlOne.isEnd())
                {
                    // Done with this element, step over end
                    break;
                }
                else if (xmlOne.isEnddoc())
                {
                    // Shouldn't get here
                    break;
                }
                else if (xmlOne.isAttr())
                {
                    // This one will move us to the first non-attr token.
                    result = attributeListsEqual(xmlOne, xmlTwo);
                }
                else
                {
                    if (xmlOne.isText())
                    {
                        result = textNodesEqual(xmlOne, xmlTwo);
                    }
                    else if (xmlOne.isComment())
                    {
                        result = commentsEqual(xmlOne, xmlTwo);
                    }
                    else if (xmlOne.isProcinst())
                    {
                        result = processingInstructionsEqual(xmlOne, xmlTwo);
                    }
                    else if (xmlOne.isStart())
                    {
                        result = elementsEqual(xmlOne, xmlTwo);
                    }
                    else
                    {
                        //XML.log(""Unknown token type"" + xmlOne.currentTokenType());
                    }

                    // These filter out empty text nodes.
                    nextToken(xmlOne);
                    nextToken(xmlTwo);
                }
            }
            while(result);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,attributeListsEqual,"    private static boolean attributeListsEqual(XmlCursor xmlOne, XmlCursor xmlTwo)
    {
        boolean result = true;
        TreeMap mapOne = loadAttributeMap(xmlOne);
        TreeMap mapTwo = loadAttributeMap(xmlTwo);

        if (mapOne.size() != mapTwo.size())
        {
            result = false;
        }
        else
        {
            Set keysOne = mapOne.keySet();
            Set keysTwo = mapTwo.keySet();
            Iterator itOne = keysOne.iterator();
            Iterator itTwo = keysTwo.iterator();

            while (result && itOne.hasNext())
            {
                String valueOne = (String) itOne.next();
                String valueTwo = (String) itTwo.next();

                if (!valueOne.equals(valueTwo))
                {
                    result = false;
                }
                else
                {
                    javax.xml.namespace.QName qnameOne = (javax.xml.namespace.QName) mapOne.get(valueOne);
                    javax.xml.namespace.QName qnameTwo = (javax.xml.namespace.QName) mapTwo.get(valueTwo);

                    if (!qnamesEqual(qnameOne, qnameTwo))
                    {
                        result = false;
                    }
                }
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,loadAttributeMap,"    private static TreeMap loadAttributeMap(XmlCursor xml)
    {
        TreeMap result = new TreeMap();

        while (xml.isAttr())
        {
            result.put(xml.getTextValue(), xml.getName());
            nextToken(xml);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,attributesEqual,"    private static boolean attributesEqual(XmlCursor xmlOne, XmlCursor xmlTwo)
    {
        boolean result = false;

        if (xmlOne.isAttr() && xmlTwo.isAttr())
        {
            if (qnamesEqual(xmlOne.getName(), xmlTwo.getName()))
            {
                if (xmlOne.getTextValue().equals(xmlTwo.getTextValue()))
                {
                    result = true;
                }
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,textNodesEqual,"    private static boolean textNodesEqual(XmlCursor xmlOne, XmlCursor xmlTwo)
    {
        boolean result = false;

        if (xmlOne.isText() && xmlTwo.isText())
        {
            if (xmlOne.getChars().equals(xmlTwo.getChars()))
            {
                result = true;
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,commentsEqual,"    private static boolean commentsEqual(XmlCursor xmlOne, XmlCursor xmlTwo)
    {
        boolean result = false;

        if (xmlOne.isComment() && xmlTwo.isComment())
        {
            if (xmlOne.getTextValue().equals(xmlTwo.getTextValue()))
            {
                result = true;
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,processingInstructionsEqual,"    private static boolean processingInstructionsEqual(XmlCursor xmlOne, XmlCursor xmlTwo)
    {
        boolean result = false;

        if (xmlOne.isProcinst() && xmlTwo.isProcinst())
        {
            if (qnamesEqual(xmlOne.getName(), xmlTwo.getName()))
            {
                if (xmlOne.getTextValue().equals(xmlTwo.getTextValue()))
                {
                    result = true;
                }
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,qnamesEqual,"    private static boolean qnamesEqual(javax.xml.namespace.QName qnameOne, javax.xml.namespace.QName qnameTwo)
    {
        boolean result = false;

        if (qnameOne.getNamespaceURI().equals(qnameTwo.getNamespaceURI()))
        {
            if (qnameOne.getLocalPart().equals(qnameTwo.getLocalPart()))
            {
                return true;
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LogicalEquality.java,nextToken,"    private static void nextToken(XmlCursor xml)
    {
        do
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,exportAsJSClass,"    public void exportAsJSClass(boolean sealed)
    {
        exportAsJSClass(MAX_PROTOTYPE_ID, lib.globalScope(), sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,uri,"    public String uri()
    {
        return uri;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,prefix,"    public String prefix()
    {
        return prefix;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,toString,"    public String toString ()
    {
        return uri();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,toLocaleString,"    public String toLocaleString ()
    {
        return toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,equals,"    public boolean equals(Object obj)
    {
        if (!(obj instanceof Namespace)) return false;
        return equals((Namespace)obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,equivalentValues,"    protected Object equivalentValues(Object value)
    {
        if (!(value instanceof Namespace)) return Scriptable.NOT_FOUND;
        boolean result = equals((Namespace)value);
        return result ? Boolean.TRUE : Boolean.FALSE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,equals,"    private boolean equals(Namespace n)
    {
        return uri().equals(n.uri());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getClassName,"    public String getClassName ()
    {
        return ""Namespace"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getDefaultValue,"    public Object getDefaultValue (Class hint)
    {
        return uri();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return super.getMaxInstanceId() + MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        int id;
// #generated# Last update: 2004-07-20 19:50:50 CEST
        L0: { id = 0; String X = null;
            int s_length = s.length();
            if (s_length==3) { X=""uri"";id=Id_uri; }
            else if (s_length==6) { X=""prefix"";id=Id_prefix; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_prefix:
          case Id_uri:
            attr = PERMANENT | READONLY;
            break;
          default: throw new IllegalStateException();
        }
        return instanceIdInfo(attr, super.getMaxInstanceId() + id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_prefix: return ""prefix"";
          case Id_uri: return ""uri"";
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_prefix:
            if (prefix == null) return Undefined.instance;
            return prefix;
          case Id_uri:
            return uri;
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2004-08-21 12:07:01 CEST
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==8) {
                c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
            }
            else if (s_length==11) { X=""constructor"";id=Id_constructor; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=2; s=""constructor""; break;
          case Id_toString:    arity=0; s=""toString"";    break;
          case Id_toSource:    arity=0; s=""toSource"";    break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(NAMESPACE_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,execIdCall,"    public Object execIdCall(IdFunctionObject f,
                             Context cx,
                             Scriptable scope,
                             Scriptable thisObj,
                             Object[] args)
    {
        if (!f.hasTag(NAMESPACE_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor:
            return jsConstructor(cx, (thisObj == null), args);
          case Id_toString:
            return realThis(thisObj, f).toString();
          case Id_toSource:
            return realThis(thisObj, f).js_toSource();
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,realThis,"    private Namespace realThis(Scriptable thisObj, IdFunctionObject f)
    {
        if(!(thisObj instanceof Namespace))
            throw incompatibleCallError(f);
        return (Namespace)thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,jsConstructor,"    private Object jsConstructor(Context cx, boolean inNewExpr, Object[] args)
    {
        if (!inNewExpr && args.length == 1) {
            return lib.castToNamespace(cx, args[0]);
        }

        if (args.length == 0) {
            return lib.constructNamespace(cx);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,js_toSource,"    private String js_toSource()
    {
        StringBuffer sb = new StringBuffer();
        sb.append('(');
        toSourceImpl(prefix, uri, sb);
        sb.append(')');
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,toSourceImpl,"    static void toSourceImpl(String prefix, String uri, StringBuffer sb)
    {
        sb.append(""new Namespace("");
        if (uri.length() == 0) {
            if (!"""".equals(prefix)) throw new IllegalArgumentException(prefix);
        } else {
            sb.append('\'');
            if (prefix != null) {
                sb.append(ScriptRuntime.escapeString(prefix, '\''));
                sb.append(""', '"");
            }
            sb.append(ScriptRuntime.escapeString(uri, '\''));
            sb.append('\'');
        }
        sb.append(')');
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,declareNamespace,"    private void declareNamespace(String prefix, String uri, ObjArray declarations)
    {
        Set prefixes = (Set)uriToPrefix.get(uri);
        if(prefixes == null)
        {
            prefixes = new HashSet();
            uriToPrefix.put(uri, prefixes);
        }

        if(!prefixes.contains(prefix))
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,processName,"    private void processName(XmlCursor cursor, ObjArray declarations)
    {
        javax.xml.namespace.QName qname = cursor.getName();
        String uri = qname.getNamespaceURI();
        Set prefixes = (Set)uriToPrefix.get(uri);
        if(prefixes == null || prefixes.size() == 0)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,update,"    private void update(XmlCursor cursor, ObjArray declarations)
    {
        // Process the Namespace declarations
        cursor.push();
        while(cursor.toNextToken().isAnyAttr())
        {
            if(cursor.isNamespace())
            {
                javax.xml.namespace.QName name = cursor.getName();
                String prefix = name.getLocalPart();
                String uri = name.getNamespaceURI();

                declareNamespace(prefix, uri, declarations);
            }
        }
        cursor.pop();

        // Process the element
        processName(cursor, declarations);

        // Process the attributes
        cursor.push();
        boolean hasNext = cursor.toFirstAttribute();
        while(hasNext)
        {
            processName(cursor, declarations);
            hasNext = cursor.toNextAttribute();
        }
        cursor.pop();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,inScopeNamespaces,"    public static Object[] inScopeNamespaces(XMLLibImpl lib, XmlCursor cursor)
    {
        ObjArray namespaces = new ObjArray();
        NamespaceHelper helper = new NamespaceHelper(lib);

        cursor.push();

        int depth = 0;
        while(cursor.hasPrevToken())
        {
            if(cursor.isContainer())
            {
                cursor.push();
                depth++;
            }

            cursor.toParent();
        }

        for(int i = 0; i < depth; i++)
        {
            cursor.pop();
            helper.update(cursor, null);
        }

        Iterator i = helper.prefixToURI.entrySet().iterator();
        while(i.hasNext())
        {
            Map.Entry entry = (Map.Entry)i.next();
            Namespace ns = new Namespace(lib, (String)entry.getKey(),
                                            (String)entry.getValue());
            namespaces.add(ns);
        }

        i = helper.undeclared.iterator();
        while(i.hasNext())
        {
            Namespace ns = new Namespace(lib, (String)i.next());
            namespaces.add(ns);
        }

        cursor.pop();

        return namespaces.toArray();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,getNamespace,"    static Namespace getNamespace(XMLLibImpl lib, XmlCursor cursor,
                                  Object[] inScopeNamespaces)
    {
        String uri;
        String prefix;

        if (cursor.isProcinst()) {
            uri = """";
            prefix = """";
        } else {
            javax.xml.namespace.QName qname = cursor.getName();
            uri = qname.getNamespaceURI();
            prefix = qname.getPrefix();
        }

        if (inScopeNamespaces == null)
            return new Namespace(lib, prefix, uri);

        Namespace result = null;
        for (int i = 0; i != inScopeNamespaces.length; ++i) {
            Namespace ns = (Namespace)inScopeNamespaces[i];
            if(ns == null) continue;

            String nsURI = ns.uri();
            if(nsURI.equals(uri))
            {
                if(prefix.equals(ns.prefix()))
                {
                    result = ns;
                    break;
                }

                if(result == null ||
                   (result.prefix() == null &&
                    ns.prefix() != null))
                    result = ns;
            }
        }

        if(result == null)
            result = new Namespace(lib, prefix, uri);

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,namespaceDeclarations,"    public static Object[] namespaceDeclarations(XMLLibImpl lib, XmlCursor cursor)
    {
        ObjArray declarations = new ObjArray();
        NamespaceHelper helper = new NamespaceHelper(lib);

        cursor.push();

        int depth = 0;
        while(cursor.hasPrevToken())
        {
            if(cursor.isContainer())
            {
                cursor.push();
                depth++;
            }

            cursor.toParent();
        }

        for(int i = 0; i < depth - 1; i++)
        {
            cursor.pop();
            helper.update(cursor, null);
        }

        if(depth > 0)
        {
            cursor.pop();
            helper.update(cursor, declarations);
        }

        cursor.pop();

        return declarations.toArray();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,getAllNamespaces,"    public static Map getAllNamespaces(XMLLibImpl lib, XmlCursor cursor)
    {
        NamespaceHelper helper = new NamespaceHelper(lib);

        cursor.push();

        int depth = 0;
        while(cursor.hasPrevToken())
        {
            if(cursor.isContainer())
            {
                cursor.push();
                depth++;
            }

            cursor.toParent();
        }

        for(int i = 0; i < depth; i++)
        {
            cursor.pop();
            helper.update(cursor, null);
        }

        cursor.pop();

        return helper.prefixToURI;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,getNamespaces,"    public static void getNamespaces(XmlCursor cursor, Map prefixToURI)
    {
        cursor.push();
        while(cursor.toNextToken().isAnyAttr())
        {
            if(cursor.isNamespace())
            {
                javax.xml.namespace.QName name = cursor.getName();
                String prefix = name.getLocalPart();
                String uri = name.getNamespaceURI();

                prefixToURI.put(prefix, uri);
            }
        }
        cursor.pop();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NamespaceHelper.java,removeNamespace,"    public static void removeNamespace(XmlCursor cursor, String prefix)
    {
        cursor.push();
        while(cursor.toNextToken().isAnyAttr())
        {
            if(cursor.isNamespace())
            {
                javax.xml.namespace.QName name = cursor.getName();
                if(name.getLocalPart().equals(prefix))
                {
                    cursor.removeXml();
                    break;
                }
            }
        }
        cursor.pop();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,exportAsJSClass,"    void exportAsJSClass(boolean sealed)
    {
        exportAsJSClass(MAX_PROTOTYPE_ID, lib.globalScope(), sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,toString,"    public String toString()
    {
        String result;

        if (uri == null)
        {
            result = ""*::"".concat(localName);
        }
        else if(uri.length() == 0)
        {
            result = localName;
        }
        else
        {
            result = uri + ""::"" + localName;
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,localName,"    public String localName()
    {
        return localName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,prefix,"    String prefix()
    {
        return (prefix == null) ? prefix : """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,uri,"    String uri()
    {
        return uri;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,equals,"    public boolean equals(Object obj)
    {
        if(!(obj instanceof QName)) return false;
        return equals((QName)obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,equivalentValues,"    protected Object equivalentValues(Object value)
    {
        if(!(value instanceof QName)) return Scriptable.NOT_FOUND;
        boolean result = equals((QName)value);
        return result ? Boolean.TRUE : Boolean.FALSE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,equals,"    private boolean equals(QName q)
    {
        boolean result;

        if (uri == null) {
            result = q.uri == null && localName.equals(q.localName);
        } else {
            result = uri.equals(q.uri) && localName.equals(q.localName);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getClassName,"    public String getClassName ()
    {
        return ""QName"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getDefaultValue,"    public Object getDefaultValue (Class hint)
    {
        return toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return super.getMaxInstanceId() + MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        int id;
// #generated# Last update: 2004-07-18 12:32:51 CEST
        L0: { id = 0; String X = null;
            int s_length = s.length();
            if (s_length==3) { X=""uri"";id=Id_uri; }
            else if (s_length==9) { X=""localName"";id=Id_localName; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_localName:
          case Id_uri:
            attr = PERMANENT | READONLY;
            break;
          default: throw new IllegalStateException();
        }
        return instanceIdInfo(attr, super.getMaxInstanceId() + id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_localName: return ""localName"";
          case Id_uri: return ""uri"";
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_localName: return localName;
          case Id_uri: return uri;
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2004-08-21 12:45:13 CEST
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==8) {
                c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
            }
            else if (s_length==11) { X=""constructor"";id=Id_constructor; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=2; s=""constructor""; break;
          case Id_toString:    arity=0; s=""toString"";    break;
          case Id_toSource:    arity=0; s=""toSource"";    break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(QNAME_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,execIdCall,"    public Object execIdCall(IdFunctionObject f,
                             Context cx,
                             Scriptable scope,
                             Scriptable thisObj,
                             Object[] args)
    {
        if (!f.hasTag(QNAME_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor:
            return jsConstructor(cx, (thisObj == null), args);
          case Id_toString:
            return realThis(thisObj, f).toString();
          case Id_toSource:
            return realThis(thisObj, f).js_toSource();
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,realThis,"    private QName realThis(Scriptable thisObj, IdFunctionObject f)
    {
        if(!(thisObj instanceof QName))
            throw incompatibleCallError(f);
        return (QName)thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,jsConstructor,"    private Object jsConstructor(Context cx, boolean inNewExpr, Object[] args)
    {
        if (!inNewExpr && args.length == 1) {
            return lib.castToQName(cx, args[0]);
        }
        if (args.length == 0) {
            return lib.constructQName(cx, Undefined.instance);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,js_toSource,"    private String js_toSource()
    {
        StringBuffer sb = new StringBuffer();
        sb.append('(');
        toSourceImpl(uri, localName, prefix, sb);
        sb.append(')');
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,toSourceImpl,"    private static void toSourceImpl(String uri, String localName,
                                     String prefix, StringBuffer sb)
    {
        sb.append(""new QName("");
        if (uri == null && prefix == null) {
            if (!""*"".equals(localName)) {
                sb.append(""null, "");
            }
        } else {
            Namespace.toSourceImpl(prefix, uri, sb);
            sb.append("", "");
        }
        sb.append('\'');
        sb.append(ScriptRuntime.escapeString(localName, '\''));
        sb.append(""')"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,addDecl,"        private void addDecl (String prefix, String ns)
        {
            _namespaceDecls.append((prefix.length() > 0 ?
                                        ""declare namespace "" + prefix :",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getNextPrefix,"        String getNextPrefix (String ns)
        {
            String prefix = ""NS"" + _prefixIdx++;

            _namespaceDecls.append(""declare namespace "" + prefix + "" = "" + ""\"""" + ns + ""\"""" + ""\n"");

            return prefix;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,isAnyDefaultNamespace,"        boolean isAnyDefaultNamespace ()
        {
            return _defaultNSURI != null ?_defaultNSURI.length() > 0 : false;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getDeclarations,"        String getDeclarations()
        {
            return _namespaceDecls.toString();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,createEmptyXML,"    static XML createEmptyXML(XMLLibImpl lib)
    {
        XScriptAnnotation anno;

        XmlObject xo = XmlObject.Factory.newInstance();
        XmlCursor curs = xo.newCursor();
        try {
            anno = new XScriptAnnotation(curs);
            curs.setBookmark(anno);
        } finally {
            curs.dispose();
        }

        return new XML(lib, anno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,createXML,"    private static XML createXML (XMLLibImpl lib, XmlCursor curs)
    {
        if (curs.currentTokenType().isStartdoc())
        {
            curs.toFirstContentToken();
        }

        XScriptAnnotation anno = findAnnotation(curs);

        return new XML(lib, anno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,createAttributeXML,"    private static XML createAttributeXML(XMLLibImpl lib, XmlCursor cursor)
    {
        if (!cursor.isAttr())
            throw new IllegalArgumentException();

        XScriptAnnotation anno = new XScriptAnnotation(cursor);
        cursor.setBookmark(anno);

        return new XML(lib, anno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,createTextElement,"    static XML createTextElement(XMLLibImpl lib, javax.xml.namespace.QName qname, String value)
    {
        XScriptAnnotation anno;

        XmlObject xo = XmlObject.Factory.newInstance();
        XmlCursor cursor = xo.newCursor();
        try {
            cursor.toNextToken();

            cursor.beginElement(qname.getLocalPart(), qname.getNamespaceURI());
            //if(namespace.length() > 0)
            //    cursor.insertNamespace("""", namespace);
            cursor.insertChars(value);

            cursor.toStartDoc();
            cursor.toNextToken();
            anno = new XScriptAnnotation(cursor);
            cursor.setBookmark(anno);
        } finally {
            cursor.dispose();
        }

        return new XML(lib, anno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,createFromXmlObject,"    static XML createFromXmlObject(XMLLibImpl lib, XmlObject xo)
    {
        XScriptAnnotation anno;
        XmlCursor curs = xo.newCursor();
        if (curs.currentTokenType().isStartdoc())
        {
            curs.toFirstContentToken();
        }
        try {
            anno = new XScriptAnnotation(curs);
            curs.setBookmark(anno);
        } finally {
            curs.dispose();
        }
        return new XML(lib, anno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,createFromJS,"    static XML createFromJS(XMLLibImpl lib, Object inputObject)
    {
        XmlObject xo;
        boolean isText = false;
        String frag;

        if (inputObject == null || inputObject == Undefined.instance) {
            frag = """";
        } else if (inputObject instanceof XMLObjectImpl) {
            // todo: faster way for XMLObjects?
            frag = ((XMLObjectImpl) inputObject).toXMLString(0);
        } else {
            if (inputObject instanceof Wrapper) {
                Object wrapped = ((Wrapper)inputObject).unwrap();
                if (wrapped instanceof XmlObject) {
                    return createFromXmlObject(lib, (XmlObject)wrapped);
                }
            }
            frag = ScriptRuntime.toString(inputObject);
        }

        if (frag.trim().startsWith(""<>""))
        {
            throw ScriptRuntime.typeError(""Invalid use of XML object anonymous tags <></>."");
        }

        if (frag.indexOf(""<"") == -1)
        {
            // Must be solo text node, wrap in XML fragment
            isText = true;
            frag = ""<textFragment>"" + frag + ""</textFragment>"";
        }

        XmlOptions options = new XmlOptions();

        if (lib.ignoreComments)
        {
            options.put(XmlOptions.LOAD_STRIP_COMMENTS);
        }

        if (lib.ignoreProcessingInstructions)
        {
            options.put(XmlOptions.LOAD_STRIP_PROCINSTS);
        }

        if (lib.ignoreWhitespace)
        {
            options.put(XmlOptions.LOAD_STRIP_WHITESPACE);
        }

        try
        {
            xo = XmlObject.Factory.parse(frag, options);

            // Apply the default namespace
            Context cx = Context.getCurrentContext();
            String defaultURI = lib.getDefaultNamespaceURI(cx);

            if(defaultURI.length() > 0)
            {
                XmlCursor cursor = xo.newCursor();
                boolean isRoot = true;
                while(!cursor.toNextToken().isEnddoc())
                {
                    if(!cursor.isStart()) continue;

                    // Check if this element explicitly sets the
                    // default namespace
                    boolean defaultNSDeclared = false;
                    cursor.push();
                    while(cursor.toNextToken().isAnyAttr())
                    {
                        if(cursor.isNamespace())
                        {
                            if(cursor.getName().getLocalPart().length() == 0)
                            {
                                defaultNSDeclared = true;
                                break;
                            }
                        }
                    }
                    cursor.pop();
                    if(defaultNSDeclared)
                    {
                        cursor.toEndToken();
                        continue;
                    }

                    // Check if this element's name is in no namespace
                    javax.xml.namespace.QName qname = cursor.getName();
                    if(qname.getNamespaceURI().length() == 0)
                    {
                        // Change the namespace
                        qname = new javax.xml.namespace.QName(defaultURI,
                                                              qname.getLocalPart());
                        cursor.setName(qname);
                    }

                    if(isRoot)
                    {
                        // Declare the default namespace
                        cursor.push();
                        cursor.toNextToken();
                        cursor.insertNamespace("""", defaultURI);
                        cursor.pop();

                        isRoot = false;
                    }
                }
                cursor.dispose();
            }
        }
        catch (XmlException xe)
        {
/*
todo need to handle namespace prefix not found in XML look for namespace type in the scope change.

            String errorMsg = ""Use of undefined namespace prefix: "";
            String msg = xe.getError().getMessage();
            if (msg.startsWith(errorMsg))
            {
                String prefix = msg.substring(errorMsg.length());
            }
*/
            String errMsg = xe.getMessage();
            if (errMsg.equals(""error: Unexpected end of file after null""))
            {
                // Create an empty document.
                xo = XmlObject.Factory.newInstance();
            }
            else
            {
                throw ScriptRuntime.typeError(xe.getMessage());
            }
        }
        catch (Throwable e)
        {
            // todo: TLL Catch specific exceptions during parse.
            throw ScriptRuntime.typeError(""Not Parsable as XML"");
        }

        XmlCursor curs = xo.newCursor();
        if (curs.currentTokenType().isStartdoc())
        {
            curs.toFirstContentToken();
        }

        if (isText)
        {
            // Move it to point to the text node
            curs.toFirstContentToken();
        }

        XScriptAnnotation anno;
        try
        {
            anno = new XScriptAnnotation(curs);
            curs.setBookmark(anno);
        }
        finally
        {
            curs.dispose();
        }

        return new XML(lib, anno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getFromAnnotation,"    static XML getFromAnnotation(XMLLibImpl lib, XScriptAnnotation anno)
    {
        if (anno._xScriptXML == null)
        {
            anno._xScriptXML = new XML(lib, anno);
        }

        return anno._xScriptXML;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,skipNonElements,"    private static TokenType skipNonElements (XmlCursor curs)
    {
        TokenType tt = curs.currentTokenType();
        while (tt.isComment() || tt.isProcinst())
        {
            tt = curs.toNextToken();
        }

        return tt;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,findAnnotation,"    protected static XScriptAnnotation findAnnotation(XmlCursor curs)
    {
        XmlBookmark anno = curs.getBookmark(XScriptAnnotation.class);
        if (anno == null)
        {
            anno = new XScriptAnnotation(curs);
            curs.setBookmark(anno);
        }

        return (XScriptAnnotation)anno;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getOptions,"    private XmlOptions getOptions()
    {
        XmlOptions options = new XmlOptions();

        if (lib.ignoreComments)
        {
            options.put(XmlOptions.LOAD_STRIP_COMMENTS);
        }

        if (lib.ignoreProcessingInstructions)
        {
            options.put(XmlOptions.LOAD_STRIP_PROCINSTS);
        }

        if (lib.ignoreWhitespace)
        {
            options.put(XmlOptions.LOAD_STRIP_WHITESPACE);
        }

        if (lib.prettyPrinting)
        {
            options.put(XmlOptions.SAVE_PRETTY_PRINT, null);
            options.put(XmlOptions.SAVE_PRETTY_PRINT_INDENT, new Integer(lib.prettyIndent));
        }

        return options;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,dumpNode,"    private static String dumpNode(XmlCursor cursor, XmlOptions opts)
    {
        if (cursor.isText())
            return cursor.getChars();

        if (cursor.isFinish())
            return """";

        cursor.push();
        boolean wanRawText = cursor.isStartdoc() && !cursor.toFirstChild();
        cursor.pop();

        return wanRawText ? cursor.getTextValue() : cursor.xmlText( opts );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,newCursor,"    private XmlCursor newCursor ()
    {
        XmlCursor curs;

        if (_anno != null)
        {
            curs = _anno.createCursor();
            if (curs == null)
            {
                // Orphaned case.
                XmlObject doc = XmlObject.Factory.newInstance();
                curs = doc.newCursor();

                if (_anno._name != null)
                {
                    curs.toNextToken();
                    curs.insertElement(_anno._name);
                    curs.toPrevSibling();
                }

                curs.setBookmark(_anno);
            }
        }
        else
        {
            XmlObject doc = XmlObject.Factory.newInstance();
            curs = doc.newCursor();
        }

        return curs;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,moveToChild,"    private boolean moveToChild(XmlCursor curs, long index, boolean fFirstChild, boolean fUseStartDoc)
    {
        if (index < 0)
            throw new IllegalArgumentException();

        long idxChild = 0;

        if (!fUseStartDoc && curs.currentTokenType().isStartdoc())
        {
            // We always move to the children of the top node.
            // todo:  This assumes that we want have multiple top-level nodes.  Which we should be able tohave.
            curs.toFirstContentToken();
        }

        TokenType tt = curs.toFirstContentToken();
        if (!tt.isNone() && !tt.isEnd())
        {
            while (true)
            {
                if (index == idxChild)
                {
                    return true;
                }

                tt = curs.currentTokenType();
                if (tt.isText())
                {
                    curs.toNextToken();
                }
                else if (tt.isStart())
                {
                    // Need to do this we want to be pointing at the text if that after the end token.
                    curs.toEndToken();
                    curs.toNextToken();
                }
                else if (tt.isComment() || tt.isProcinst())
                {
                    continue;
                }
                else
                {
                    break;
                }

                idxChild++;
            }
        }
        else if (fFirstChild && index == 0)
        {
            // Drill into where first child would be.
//            curs.toFirstContentToken();
            return true;
        }

        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,tokenType,"    XmlCursor.TokenType tokenType()
    {
        XmlCursor.TokenType result;

        XmlCursor curs = newCursor();

        if (curs.isStartdoc())
        {
            curs.toFirstContentToken();
        }

        result = curs.currentTokenType();

        curs.dispose();

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,moveSrcToDest,"    private boolean moveSrcToDest (XmlCursor srcCurs, XmlCursor destCurs, boolean fDontMoveIfSame)
    {
        boolean fMovedSomething = true;
        TokenType tt;
        do
        {
            if (fDontMoveIfSame && srcCurs.isInSameDocument(destCurs) && (srcCurs.comparePosition(destCurs) == 0))
            {
                // If the source and destination are pointing at the same place then there's nothing to move.
                fMovedSomething = false;
                break;
            }

            // todo ***TLL*** Use replaceContents (when added) and eliminate children removes (see above todo).
            if (destCurs.currentTokenType().isStartdoc())
            {
                destCurs.toNextToken();
            }

            // todo ***TLL*** Can Eric support notion of copy instead of me copying then moving???
            XmlCursor copyCurs = copy(srcCurs);

            copyCurs.moveXml(destCurs);

            copyCurs.dispose();

            tt = srcCurs.currentTokenType();
        } while (!tt.isStart() && !tt.isEnd() && !tt.isEnddoc());

        return fMovedSomething;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,copy,"    private XmlCursor copy (XmlCursor cursToCopy)
    {
        XmlObject xo = XmlObject.Factory.newInstance();

        XmlCursor copyCurs = null;

        if (cursToCopy.currentTokenType().isText())
        {
            try
            {
                // Try just as a textnode, to do that we need to wrap the text in a special fragment tag
                // that is not visible from the XmlCursor.
                copyCurs = XmlObject.Factory.parse(""<x:fragment xmlns:x=\""http://www.openuri.org/fragment\"">"" +
                                           cursToCopy.getChars() +
                                           ""</x:fragment>"").newCursor();
                if (!cursToCopy.toNextSibling())
                {
                    if (cursToCopy.currentTokenType().isText())
                    {
                        cursToCopy.toNextToken();   // It's not an element it's text so skip it.
                    }
                }
            }
            catch (Exception ex)
            {
                throw ScriptRuntime.typeError(ex.getMessage());
            }
        }
        else
        {
            copyCurs = xo.newCursor();
            copyCurs.toFirstContentToken();
            if (cursToCopy.currentTokenType() == XmlCursor.TokenType.STARTDOC)
            {
                cursToCopy.toNextToken();
            }
            
            cursToCopy.copyXml(copyCurs);
            if (!cursToCopy.toNextSibling())        // If element skip element.
            {
                if (cursToCopy.currentTokenType().isText())
                {
                    cursToCopy.toNextToken();       // It's not an element it's text so skip it.
                }
            }

        }

        copyCurs.toStartDoc();
        copyCurs.toFirstContentToken();

        return copyCurs;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,insertChild,"    private void insertChild(XmlCursor curs, Object xmlToInsert)
    {
        if (xmlToInsert == null || xmlToInsert instanceof Undefined)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,insertChild,"    private void insertChild(XML childToMatch, Object xmlToInsert, int addToType)
    {
        XmlCursor curs = newCursor();
        TokenType tt = curs.currentTokenType();
        XmlCursor xmlChildCursor = childToMatch.newCursor();

        if (tt.isStartdoc())
        {
            tt = curs.toFirstContentToken();
        }

        if (tt.isContainer())
        {
            tt = curs.toNextToken();

            while (!tt.isEnd())
            {
                if (tt.isStart())
                {
                    // See if this child is the same as the one thep passed in
                    if (curs.comparePosition(xmlChildCursor) == 0)
                    {
                        // Found it
                        if (addToType == APPEND_CHILD)
                        {
                            // Move the cursor to just past the end of this element
                            curs.toEndToken();
                            curs.toNextToken();
                        }

                        insertChild(curs, xmlToInsert);
                        break;
                    }
                }

                // Skip over child elements
                if (tt.isStart())
                {
                    tt = curs.toEndToken();
                }

                tt = curs.toNextToken();
            }

        }

        xmlChildCursor.dispose();
        curs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,removeToken,"    protected void removeToken (XmlCursor curs)
    {
        XmlObject xo = XmlObject.Factory.newInstance();

        // Don't delete anything move to another document so it gets orphaned nicely.
        XmlCursor tmpCurs = xo.newCursor();
        tmpCurs.toFirstContentToken();


        curs.moveXml(tmpCurs);

        tmpCurs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,removeChild,"    protected void removeChild(long index)
    {
        XmlCursor curs = newCursor();

        if (moveToChild(curs, index, false, false))
        {
            removeToken(curs);
        }

        curs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,computeQName,"    protected static javax.xml.namespace.QName computeQName (Object name)
    {
        if (name instanceof String)
        {
            String ns = null;
            String localName = null;

            String fullName = (String)name;
            localName = fullName;
            if (fullName.startsWith(""\""""))
            {
                int idx = fullName.indexOf("":"");
                if (idx != -1)
                {
                    ns = fullName.substring(1, idx - 1);    // Don't include the """" around the namespace
                    localName = fullName.substring(idx + 1);
                }
            }

            if (ns == null)
            {
                return new javax.xml.namespace.QName(localName);
            }
            else
            {
                return new javax.xml.namespace.QName(ns, localName);
            }
        }

        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,replace,"    private void replace(XmlCursor destCurs, XML newValue)
    {
        if (destCurs.isStartdoc())
        {
            // Can't overwrite a whole document (user really wants to overwrite the contents of).
            destCurs.toFirstContentToken();
        }

        // Orphan the token -- don't delete it outright on the XmlCursor.
        removeToken(destCurs);

        XmlCursor srcCurs = newValue.newCursor();
        if (srcCurs.currentTokenType().isStartdoc())
        {
            // Cann't append a whole document (user really wants to append the contents of).
            srcCurs.toFirstContentToken();
        }

        moveSrcToDest(srcCurs, destCurs, false);

        // Re-link a new annotation to this cursor -- we just deleted the previous annotation on entrance to replace.
        if (!destCurs.toPrevSibling())
        {
            destCurs.toPrevToken();
        }
        destCurs.setBookmark(new XScriptAnnotation(destCurs));

        // todo would be nice if destCurs.toNextSibling went to where the next token if the cursor was pointing at the last token in the stream.
        destCurs.toEndToken();
        destCurs.toNextToken();

        srcCurs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,doPut,"    private boolean doPut(XMLName name, XML currXMLNode, XMLObjectImpl xmlValue)
    {
        boolean result = false;
        XmlCursor curs = currXMLNode.newCursor();

        try
        {
            // Replace the node with this new xml value.
            XML xml;

            int toAssignLen = xmlValue.length();

            for (int i = 0; i < toAssignLen; i++)
            {
                if (xmlValue instanceof XMLList)
                {
                    xml = ((XMLList) xmlValue).item(i);
                }
                else
                {
                    xml = (XML) xmlValue;
                }

                // If it's an attribute or text node, make text node.
                XmlCursor.TokenType tt = xml.tokenType();
                if (tt == XmlCursor.TokenType.ATTR || tt == XmlCursor.TokenType.TEXT)
                {
                    xml = makeXmlFromString(lib, name, xml.toString());
                }

                if (i == 0)
                {
                    // 1st assignment is replaceChild all others are appendChild
                    replace(curs, xml);
                }
                else
                {
                    insertChild(curs, xml);
                }
            }

            // We're done we've blown away the node because the rvalue was XML...
            result = true;
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            throw ScriptRuntime.typeError(ex.getMessage());
        }
        finally
        {
            curs.dispose();
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,makeXmlFromString,"    private XML makeXmlFromString(XMLLibImpl lib, XMLName name,
                                      String value)
    {
        XML result;

        javax.xml.namespace.QName qname;

        try
        {
            qname = new javax.xml.namespace.QName(name.uri(), name.localName());
        }
        catch(Exception e)
        {
            throw ScriptRuntime.typeError(e.getMessage());
        }

        result = createTextElement(lib, qname, value);

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,matchAttributes,"    private XMLList matchAttributes(XMLName xmlName)
    {
        XMLList result = new XMLList(lib);
        XmlCursor curs = newCursor();

        if (curs.currentTokenType().isStartdoc())
        {
            curs.toFirstContentToken();
        }

        if (curs.isStart())
        {
            if (curs.toFirstAttribute())
            {
                do
                {
                    if (qnameMatches(xmlName, curs.getName()))
                    {
                        result.addToList(createAttributeObject(curs));
                    }
                } while (curs.toNextAttribute());
            }
        }

        curs.dispose();

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,createAttributeObject,"    private XML createAttributeObject (XmlCursor attrCurs)
    {
        XML result = null;

        if (attrCurs.currentTokenType().isAttr())
        {
            result = createAttributeXML(lib, attrCurs);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getClassName,"    public String getClassName ()
    {
        return ""XML"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,get,"    public Object get(int index, Scriptable start)
    {
        //Log(""get index: "" + index);

        if (index == 0)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,hasXMLProperty,"    boolean hasXMLProperty(XMLName xmlName)
    {
        boolean result = false;

        if (prototypeFlag)
        {
            String name = xmlName.localName();

            if (getMethod(name) != NOT_FOUND)
            {
                result = true;
            }
        }
        else
        {
            // Has now should return true if the property would have results > 0 or
            // if it's a method name
            String name = xmlName.localName();
            if ((getPropertyList(xmlName).length() > 0) ||
                (getMethod(name) != NOT_FOUND))
            {
                result = true;
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,has,"    public boolean has(int index, Scriptable start)
    {
        return (index == 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getIds,"    public Object[] getIds()
    {
        Object[] enumObjs;

        if (prototypeFlag)
        {
            enumObjs = new Object[0];
        }
        else
        {
            enumObjs = new Object[1];

            enumObjs[0] = new Integer(0);
        }

        return enumObjs;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getIdsForDebug,"    public Object [] getIdsForDebug()
    {
        return getIds();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getXMLProperty,"    Object getXMLProperty(XMLName xmlName)
    {
        Object result = NOT_FOUND;

        if (prototypeFlag)
        {
            String name = xmlName.localName();

            result = getMethod(name);
        }
        else
        {
            result = getPropertyList(xmlName);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,putXMLProperty,"    void putXMLProperty(XMLName xmlName, Object value)
    {
        //Log(""put property: "" + name + "" value: "" + value.getClass());

        if (prototypeFlag)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,put,"    public void put(int index, Scriptable start, Object value)
    {
        // Spec says assignment to indexed XML object should return type error
        throw ScriptRuntime.typeError(""Assignment to indexed XML is not allowed"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,deleteXMLProperty,"    void deleteXMLProperty(XMLName name)
    {
        if (!name.isDescendants() && name.isAttributeName())
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,delete,"    public void delete(int index)
    {
        if (index == 0)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getAnnotation,"    protected XScriptAnnotation getAnnotation ()
    { return _anno; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,changeNS,"    protected void changeNS (String oldURI, String newURI)
    {
        XmlCursor curs = newCursor();
        while (curs.toParent()) {
          /* Goto the top of the document */
        }

        TokenType tt = curs.currentTokenType();
        if (tt.isStartdoc())
        {
            tt = curs.toFirstContentToken();
        }

        if (tt.isStart())
        {
            do
            {
                if (tt.isStart() || tt.isAttr() || tt.isNamespace())
                {
                    javax.xml.namespace.QName currQName = curs.getName();
                    if (oldURI.equals(currQName.getNamespaceURI()))
                    {
                        curs.setName(new javax.xml.namespace.QName(newURI, currQName.getLocalPart()));
                    }
                }

                tt = curs.toNextToken();
            } while (!tt.isEnddoc() && !tt.isNone());
        }

        curs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,remove,"    void remove ()
    {
        XmlCursor childCurs = newCursor();

        if (childCurs.currentTokenType().isStartdoc())
        {
            // Remove on the document removes all children.
            TokenType tt = childCurs.toFirstContentToken();
            while (!tt.isEnd() && !tt.isEnddoc())
            {
                removeToken(childCurs);
                tt = childCurs.currentTokenType();      // Now see where we're pointing after the delete -- next token.
            }
        }
        else
        {
                removeToken(childCurs);
        }

        childCurs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,replaceAll,"    void replaceAll(XML value)
    {
        XmlCursor curs = newCursor();

        replace(curs, value);
        _anno = value._anno;

        curs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setAttribute,"    void setAttribute(XMLName xmlName, Object value)
    {
        if (xmlName.uri() == null &&
            xmlName.localName().equals(""*""))
        {
            throw ScriptRuntime.typeError(""@* assignment not supported."");
        }

        XmlCursor curs = newCursor();

        String strValue = ScriptRuntime.toString(value);
        if (curs.currentTokenType().isStartdoc())
        {
            curs.toFirstContentToken();
        }

        javax.xml.namespace.QName qName;

        try
        {
            qName = new javax.xml.namespace.QName(xmlName.uri(), xmlName.localName());
        }
        catch(Exception e)
        {
            throw ScriptRuntime.typeError(e.getMessage());
        }

        if (!curs.setAttributeText(qName, strValue))
        {
            if (curs.currentTokenType().isStart())
            {
                // Can only add attributes inside of a start.
                curs.toNextToken();
            }
            curs.insertAttributeWithValue(qName, strValue);
        }

        curs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,allChildNodes,"    private XMLList allChildNodes(String namespace)
    {
        XMLList result = new XMLList(lib);
        XmlCursor curs = newCursor();
        TokenType tt = curs.currentTokenType();
        javax.xml.namespace.QName targetProperty = new javax.xml.namespace.QName(namespace, ""*"");

        if (tt.isStartdoc())
        {
            tt = curs.toFirstContentToken();
        }

        if (tt.isContainer())
        {
            tt = curs.toFirstContentToken();

            while (!tt.isEnd())
            {
                if (!tt.isStart())
                {
                    // Not an element
                    result.addToList(findAnnotation(curs));

                    // Reset target property to null in this case
                    targetProperty = null;
                }
                else
                {
                    // Match namespace as well if specified
                    if (namespace == null ||
                        namespace.length() == 0 ||
                        namespace.equals(""*"") ||
                        curs.getName().getNamespaceURI().equals(namespace))
                    {
                        // Add it to the list
                        result.addToList(findAnnotation(curs));

                        // Set target property if target name is ""*"",
                        // Otherwise if target property does not match current, then
                        // set to null
                        if (targetProperty != null)
                        {
                            if (targetProperty.getLocalPart().equals(""*""))
                            {
                                targetProperty = curs.getName();
                            }
                            else if (!targetProperty.getLocalPart().equals(curs.getName().getLocalPart()))
                            {
                                // Not a match, unset target property
                                targetProperty = null;
                            }
                        }
                    }
                }

                // Skip over child elements
                if (tt.isStart())
                {
                    tt = curs.toEndToken();
                }

                tt = curs.toNextToken();
            }
        }

        curs.dispose();

        // Set the targets for this XMLList.
        result.setTargets(this, targetProperty);

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,matchDescendantAttributes,"    private XMLList matchDescendantAttributes(XMLName xmlName)
    {
        XMLList result = new XMLList(lib);
        XmlCursor curs = newCursor();
        TokenType tt = curs.currentTokenType();

        // Set the targets for this XMLList.
        result.setTargets(this, null);

        if (tt.isStartdoc())
        {
            tt = curs.toFirstContentToken();
        }

        if (tt.isContainer())
        {
            int nestLevel = 1;

            while (nestLevel > 0)
            {
                tt = curs.toNextToken();

                // Only try to match names for attributes
                if (tt.isAttr())
                {
                    if (qnameMatches(xmlName, curs.getName()))
                    {
                        result.addToList(findAnnotation(curs));
                    }
                }

                if (tt.isStart())
                {
                    nestLevel++;
                }
                else if (tt.isEnd())
                {
                    nestLevel--;
                }
                else if (tt.isEnddoc())
                {
                    // Shouldn't get here, but just in case.
                    break;
                }
            }
        }

        curs.dispose();

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,matchDescendantChildren,"    private XMLList matchDescendantChildren(XMLName xmlName)
    {
        XMLList result = new XMLList(lib);
        XmlCursor curs = newCursor();
        TokenType tt = curs.currentTokenType();

        // Set the targets for this XMLList.
        result.setTargets(this, null);

        if (tt.isStartdoc())
        {
            tt = curs.toFirstContentToken();
        }

        if (tt.isContainer())
        {
            int nestLevel = 1;

            while (nestLevel > 0)
            {
                tt = curs.toNextToken();

                if (!tt.isAttr() && !tt.isEnd() && !tt.isEnddoc())
                {
                    // Only try to match names for elements or processing instructions.
                    if (!tt.isStart() && !tt.isProcinst())
                    {
                        // Not an element or procinst, only add if qname is all
                        if (xmlName.localName().equals(""*""))
                        {
                            result.addToList(findAnnotation(curs));
                        }
                    }
                    else
                    {
                        if (qnameMatches(xmlName, curs.getName()))
                        {
                            result.addToList(findAnnotation(curs));
                        }
                    }
                }

                if (tt.isStart())
                {
                    nestLevel++;
                }
                else if (tt.isEnd())
                {
                    nestLevel--;
                }
                else if (tt.isEnddoc())
                {
                    // Shouldn't get here, but just in case.
                    break;
                }
            }
        }

        curs.dispose();

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,matchChildren,"    private XMLList matchChildren(XmlCursor.TokenType tokenType)
    {
        return matchChildren(tokenType, XMLName.formStar());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,matchChildren,"    private XMLList matchChildren(XmlCursor.TokenType tokenType, XMLName name)
    {
        XMLList result = new XMLList(lib);
        XmlCursor curs = newCursor();
        TokenType tt = curs.currentTokenType();
        javax.xml.namespace.QName qname = new javax.xml.namespace.QName(name.uri(), name.localName());
        javax.xml.namespace.QName targetProperty = qname;

        if (tt.isStartdoc())
        {
            tt = curs.toFirstContentToken();
        }

        if (tt.isContainer())
        {
            tt = curs.toFirstContentToken();

            while (!tt.isEnd())
            {
                if (tt == tokenType)
                {
                    // Only try to match names for elements or processing instructions.
                    if (!tt.isStart() && !tt.isProcinst())
                    {
                        // Not an element or no name specified.
                        result.addToList(findAnnotation(curs));

                        // Reset target property to null in this case
                        targetProperty = null;
                    }
                    else
                    {
                        // Match names as well
                        if (qnameMatches(name, curs.getName()))
                        {
                            // Add it to the list
                            result.addToList(findAnnotation(curs));

                            // Set target property if target name is ""*"",
                            // Otherwise if target property does not match current, then
                            // set to null
                            if (targetProperty != null)
                            {
                                if (targetProperty.getLocalPart().equals(""*""))
                                {
                                    targetProperty = curs.getName();
                                }
                                else if (!targetProperty.getLocalPart().equals(curs.getName().getLocalPart()))
                                {
                                    // Not a match, unset target property
                                    targetProperty = null;
                                }
                            }
                        }
                    }
                }

                // Skip over child elements
                if (tt.isStart())
                {
                    tt = curs.toEndToken();
                }

                tt = curs.toNextToken();
            }
        }

        curs.dispose();

        if (tokenType == XmlCursor.TokenType.START)
        {
            // Set the targets for this XMLList.
            result.setTargets(this, targetProperty);
        }

        return result;
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,qnameMatches,"    private boolean qnameMatches(XMLName template, javax.xml.namespace.QName match)
    {
        boolean matches = false;

        if (template.uri() == null ||
            template.uri().equals(match.getNamespaceURI()))
        {
            // URI OK, test name
            if (template.localName().equals(""*"") ||
                template.localName().equals(match.getLocalPart()))
            {
                matches = true;
            }
        }

        return matches;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,addNamespace,"    XML addNamespace(Namespace ns)
    {
        // When a namespace is used it will be added automatically
        // to the inScopeNamespaces set. There is no need to add
        // Namespaces with undefined prefixes.
        String nsPrefix = ns.prefix();
        if (nsPrefix == null) return this;

        XmlCursor cursor = newCursor();

        try
        {
            if(!cursor.isContainer()) return this;

            javax.xml.namespace.QName qname = cursor.getName();
            // Don't add a default namespace declarations to containers
            // with QNames in no namespace.
            if(qname.getNamespaceURI().equals("""") &&
               nsPrefix.equals("""")) return this;

            // Get all declared namespaces that are in scope
            Map prefixToURI = NamespaceHelper.getAllNamespaces(lib, cursor);

            String uri = (String)prefixToURI.get(nsPrefix);
            if(uri != null)
            {
                // Check if the Namespace is not already in scope
                if(uri.equals(ns.uri())) return this;

                cursor.push();

                // Let's see if we have to delete a namespace declaration
                while(cursor.toNextToken().isAnyAttr())
                {
                    if(cursor.isNamespace())
                    {
                        qname = cursor.getName();
                        String prefix = qname.getLocalPart();
                        if(prefix.equals(nsPrefix))
                        {
                            // Delete the current Namespace declaration
                            cursor.removeXml();
                            break;
                        }
                    }
                }

                cursor.pop();
            }

            cursor.toNextToken();
            cursor.insertNamespace(nsPrefix, ns.uri());
        }
        finally
        {
            cursor.dispose();
        }

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,appendChild,"    XML appendChild(Object xml)
    {
        XmlCursor curs = newCursor();

        if (curs.isStartdoc())
        {
            curs.toFirstContentToken();
        }

        // Move the cursor to the end of this element
        if (curs.isStart())
        {
            curs.toEndToken();
        }

        insertChild(curs, xml);

        curs.dispose();

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,attribute,"    XMLList attribute(XMLName xmlName)
    {
        return matchAttributes(xmlName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,attributes,"    XMLList attributes()
    {
        XMLName xmlName = XMLName.formStar();
        return matchAttributes(xmlName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,child,"    XMLList child(long index)
    {
        XMLList result = new XMLList(lib);
        result.setTargets(this, null);
        result.addToList(getXmlChild(index));
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,child,"    XMLList child(XMLName xmlName)
    {
        if (xmlName == null)
            return new XMLList(lib);

        XMLList result;
        if (xmlName.localName().equals(""*""))
        {
            result = allChildNodes(xmlName.uri());
        }
        else
        {
            result = matchChildren(XmlCursor.TokenType.START, xmlName);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getXmlChild,"    XML getXmlChild(long index)
    {
        XML result = null;
        XmlCursor curs = newCursor();

        if (moveToChild(curs, index, false, true))
        {
            result = createXML(lib, curs);
        }

        curs.dispose();

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,childIndex,"    int childIndex()
    {
        int index = 0;

        XmlCursor curs = newCursor();

        TokenType tt = curs.currentTokenType();
        while (true)
        {
            if (tt.isText())
            {
                index++;
                if (!curs.toPrevSibling())
                {
                    break;
                }
            }
            else if (tt.isStart())
            {
                tt = curs.toPrevToken();
                if (tt.isEnd())
                {
                    curs.toNextToken();
                    if (!curs.toPrevSibling())
                    {
                        break;
                    }

                    index++;
                }
                else
                {
                    // Hit the parent start tag so get out we're down counting children.
                    break;
                }
            }
            else if (tt.isComment() || tt.isProcinst())
            {
                curs.toPrevToken();
            }
            else
            {
                break;
            }

            tt = curs.currentTokenType();
        }

        index = curs.currentTokenType().isStartdoc() ? -1 : index;

        curs.dispose();

        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,children,"    XMLList children()
    {
        return allChildNodes(null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,comments,"    XMLList comments()
    {
        return matchChildren(XmlCursor.TokenType.COMMENT);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,contains,"    boolean contains(Object xml)
    {
        boolean result = false;

        if (xml instanceof XML)
        {
            result = equivalentXml(xml);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,copy,"    Object copy()
    {
        XmlCursor srcCurs = newCursor();

        if (srcCurs.isStartdoc())
        {
            srcCurs.toFirstContentToken();
        }

        XML xml = createEmptyXML(lib);

        XmlCursor destCurs = xml.newCursor();
        destCurs.toFirstContentToken();

        srcCurs.copyXml(destCurs);

        destCurs.dispose();
        srcCurs.dispose();

        return xml;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,descendants,"    XMLList descendants(XMLName xmlName)
    {
        XMLList result;
        if (xmlName.isAttributeName())
        {
            result = matchDescendantAttributes(xmlName);
        }
        else
        {
            result = matchDescendantChildren(xmlName);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,inScopeNamespaces,"    Object[] inScopeNamespaces()
    {
        XmlCursor cursor = newCursor();
        Object[] namespaces = NamespaceHelper.inScopeNamespaces(lib, cursor);
        cursor.dispose();
        return namespaces;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,insertChildAfter,"    XML insertChildAfter(Object child, Object xml)
    {
        if (child == null)
        {
            // Spec says inserting after nothing is the same as prepending
            prependChild(xml);
        }
        else if (child instanceof XML)
        {
            insertChild((XML) child, xml, APPEND_CHILD);
        }

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,insertChildBefore,"    XML insertChildBefore(Object child, Object xml)
    {
        if (child == null)
        {
            // Spec says inserting before nothing is the same as appending
            appendChild(xml);
        }
        else if (child instanceof XML)
        {
            insertChild((XML) child, xml, PREPEND_CHILD);
        }

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,hasOwnProperty,"    boolean hasOwnProperty(XMLName xmlName)
    {
        boolean hasProperty = false;

        if (prototypeFlag)
        {
            String property = xmlName.localName();
            hasProperty = (0 != findPrototypeId(property));
        }
        else
        {
            hasProperty = (getPropertyList(xmlName).length() > 0);
        }

        return hasProperty;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,hasComplexContent,"    boolean hasComplexContent()
    {
        return !hasSimpleContent();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,hasSimpleContent,"    boolean hasSimpleContent()
    {
        boolean simpleContent = false;

        XmlCursor curs = newCursor();

        if (curs.isAttr() || curs.isText()) {
            return true;
        }

        if (curs.isStartdoc())
        {
            curs.toFirstContentToken();
        }

        simpleContent = !(curs.toFirstChild());

        curs.dispose();

        return simpleContent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,length,"    int length()
    {
        return 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,localName,"    String localName()
    {
        XmlCursor cursor = newCursor();
        if (cursor.isStartdoc())
            cursor.toFirstContentToken();

        String name = null;

        if(cursor.isStart() ||
           cursor.isAttr() ||
           cursor.isProcinst())
        {
            javax.xml.namespace.QName qname = cursor.getName();
            name = qname.getLocalPart();
        }
        cursor.dispose();

        return name;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,name,"    QName name()
    {
        XmlCursor cursor = newCursor();
        if (cursor.isStartdoc())
            cursor.toFirstContentToken();

        QName name = null;

        if(cursor.isStart() ||
           cursor.isAttr() ||
           cursor.isProcinst())
        {
            javax.xml.namespace.QName qname = cursor.getName();
            if(cursor.isProcinst())
            {
                name = new QName(lib, """", qname.getLocalPart(), """");
            }
            else
            {
                String uri = qname.getNamespaceURI();
                String prefix = qname.getPrefix();
                name = new QName(lib, uri, qname.getLocalPart(), prefix);
            }
        }

        cursor.dispose();

        return name;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,namespace,"    Object namespace(String prefix)
    {
        XmlCursor cursor = newCursor();
        if (cursor.isStartdoc())
        {
            cursor.toFirstContentToken();
        }

        Object result = null;

        if (prefix == null)
        {
            if(cursor.isStart() ||
               cursor.isAttr())
            {
                Object[] inScopeNS = NamespaceHelper.inScopeNamespaces(lib, cursor);
                // XXX Is it reaaly necessary to create the second cursor?
                XmlCursor cursor2 = newCursor();
                if (cursor2.isStartdoc())
                    cursor2.toFirstContentToken();

                result = NamespaceHelper.getNamespace(lib, cursor2, inScopeNS);

                cursor2.dispose();
            }
        }
        else
        {
            Map prefixToURI = NamespaceHelper.getAllNamespaces(lib, cursor);
            String uri = (String)prefixToURI.get(prefix);
            result = (uri == null) ? Undefined.instance : new Namespace(lib, prefix, uri);
        }

        cursor.dispose();

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,namespaceDeclarations,"    Object[] namespaceDeclarations()
    {
        XmlCursor cursor = newCursor();
        Object[] namespaces = NamespaceHelper.namespaceDeclarations(lib, cursor);
        cursor.dispose();
        return namespaces;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,nodeKind,"    Object nodeKind()
    {
        String result;
        XmlCursor.TokenType tt = tokenType();

        if (tt == XmlCursor.TokenType.ATTR)
        {
            result = ""attribute"";
        }
        else if (tt == XmlCursor.TokenType.TEXT)
        {
            result = ""text"";
        }
        else if (tt == XmlCursor.TokenType.COMMENT)
        {
            result = ""comment"";
        }
        else if (tt == XmlCursor.TokenType.PROCINST)
        {
            result = ""processing-instruction"";
        }
        else if (tt == XmlCursor.TokenType.START)
        {
            result = ""element"";
        }
        else
        {
            // A non-existant node has the nodeKind() of text
            result = ""text"";
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,normalize,"    void normalize()
    {
        XmlCursor curs = newCursor();
        TokenType tt = curs.currentTokenType();

        // Walk through the tokens removing empty text nodes and merging adjacent text nodes.
        if (tt.isStartdoc())
        {
            tt = curs.toFirstContentToken();
        }

        if (tt.isContainer())
        {
            int nestLevel = 1;
            String previousText = null;

            while (nestLevel > 0)
            {
                tt = curs.toNextToken();

                if (tt == XmlCursor.TokenType.TEXT)
                {
                    String currentText = curs.getChars().trim();

                    if (currentText.trim().length() == 0)
                    {
                        // Empty text node, remove.
                        removeToken(curs);
                        curs.toPrevToken();
                    }
                    else if (previousText == null)
                    {
                        // No previous text node, reset to trimmed version
                        previousText = currentText;
                    }
                    else
                    {
                        // It appears that this case never happens with XBeans.
                        // Previous text node exists, concatenate
                        String newText = previousText + currentText;

                        curs.toPrevToken();
                        removeToken(curs);
                        removeToken(curs);
                        curs.insertChars(newText);
                    }
                }
                else
                {
                    previousText = null;
                }

                if (tt.isStart())
                {
                    nestLevel++;
                }
                else if (tt.isEnd())
                {
                    nestLevel--;
                }
                else if (tt.isEnddoc())
                {
                    // Shouldn't get here, but just in case.
                    break;
                }
            }
        }


        curs.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,parent,"    Object parent()
    {
        Object parent;

        XmlCursor curs = newCursor();

        if (curs.isStartdoc())
        {
            // At doc level - no parent
            parent = Undefined.instance;
        }
        else
        {
            if (curs.toParent())
            {
                if (curs.isStartdoc())
                {
                    // Was top-level - no parent
                    parent = Undefined.instance;
                }
                else
                {
                    parent = getFromAnnotation(lib, findAnnotation(curs));
                }
            }
            else
            {
                // No parent
                parent = Undefined.instance;
            }
        }

        curs.dispose();

        return parent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,prependChild,"    XML prependChild (Object xml)
    {
        XmlCursor curs = newCursor();

        if (curs.isStartdoc())
        {
            curs.toFirstContentToken();
        }

        // Move the cursor to the first content token
        curs.toFirstContentToken();

        insertChild(curs, xml);

        curs.dispose();

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,processingInstructions,"    Object processingInstructions(XMLName xmlName)
    {
        return matchChildren(XmlCursor.TokenType.PROCINST, xmlName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,propertyIsEnumerable,"    boolean propertyIsEnumerable(Object name)
    {
        boolean result;
        if (name instanceof Integer) {
            result = (((Integer)name).intValue() == 0);
        } else if (name instanceof Number) {
            double x = ((Number)name).doubleValue();
            // Check that number is posotive 0
            result = (x == 0.0 && 1.0 / x > 0);
        } else {
            result = ScriptRuntime.toString(name).equals(""0"");
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,removeNamespace,"    XML removeNamespace(Namespace ns)
    {
        XmlCursor cursor = newCursor();

        try
        {
            if(cursor.isStartdoc())
                cursor.toFirstContentToken();
            if(!cursor.isStart()) return this;

            String nsPrefix = ns.prefix();
            String nsURI = ns.uri();
            Map prefixToURI = new HashMap();
            int depth = 1;

            while(!(cursor.isEnd() && depth == 0))
            {
                if(cursor.isStart())
                {
                    // Get the namespaces declared in this element.
                    // The ones with undefined prefixes are not candidates
                    // for removal because they are used.
                    prefixToURI.clear();
                    NamespaceHelper.getNamespaces(cursor, prefixToURI);
                    ObjArray inScopeNSBag = new ObjArray();
                    Iterator i = prefixToURI.entrySet().iterator();
                    while(i.hasNext())
                    {
                        Map.Entry entry = (Map.Entry)i.next();
                        ns = new Namespace(lib, (String)entry.getKey(), (String)entry.getValue());
                        inScopeNSBag.add(ns);
                    }

                    // Add the URI we are looking for to avoid matching
                    // non-existing Namespaces.
                    ns = new Namespace(lib, nsURI);
                    inScopeNSBag.add(ns);

                    Object[] inScopeNS = inScopeNSBag.toArray();

                    // Check the element name
                    Namespace n = NamespaceHelper.getNamespace(lib, cursor,
                                                               inScopeNS);
                    if(nsURI.equals(n.uri()) &&
                       (nsPrefix == null ||
                        nsPrefix.equals(n.prefix())))
                    {
                        // This namespace is used
                        return this;
                    }

                    // Check the attributes
                    cursor.push();
                    boolean hasNext = cursor.toFirstAttribute();
                    while(hasNext)
                    {
                        n = NamespaceHelper.getNamespace(lib, cursor, inScopeNS);
                        if(nsURI.equals(n.uri()) &&
                           (nsPrefix == null ||
                            nsPrefix.equals(n.prefix())))
                        {
                            // This namespace is used
                            return this;
                        }

                        hasNext = cursor.toNextAttribute();
                    }
                    cursor.pop();

                    if(nsPrefix == null)
                    {
                        // Remove all namespaces declarations that match nsURI
                        i = prefixToURI.entrySet().iterator();
                        while(i.hasNext())
                        {
                            Map.Entry entry = (Map.Entry)i.next();
                            if(entry.getValue().equals(nsURI))
                                NamespaceHelper.removeNamespace(cursor, (String)entry.getKey());
                        }
                    }
                    else if(nsURI.equals(prefixToURI.get(nsPrefix)))
                    {
                        // Remove the namespace declaration that matches nsPrefix
                        NamespaceHelper.removeNamespace(cursor, String.valueOf(nsPrefix));
                    }
                }

                switch(cursor.toNextToken().intValue())
                {
                case XmlCursor.TokenType.INT_START:
                    depth++;
                    break;
                case XmlCursor.TokenType.INT_END:
                    depth--;
                    break;
                }
            }
        }
        finally
        {
            cursor.dispose();
        }

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,replace,"    XML replace(long index, Object xml)
    {
        XMLList xlChildToReplace = child(index);
        if (xlChildToReplace.length() > 0)
        {
            // One exists an that index
            XML childToReplace = xlChildToReplace.item(0);
            insertChildAfter(childToReplace, xml);
            removeChild(index);
        }
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,replace,"    XML replace(XMLName xmlName, Object xml)
    {
        putXMLProperty(xmlName, xml);
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setChildren,"    XML setChildren(Object xml)
    {
        // remove all children
        XMLName xmlName = XMLName.formStar();
        XMLList matches = getPropertyList(xmlName);
        matches.remove();

        // append new children
        appendChild(xml);

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setLocalName,"    void setLocalName(String localName)
    {
        XmlCursor cursor = newCursor();

        try
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setName,"    void setName(QName qname)
    {
        XmlCursor cursor = newCursor();

        try
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setNamespace,"    void setNamespace(Namespace ns)
    {
        XmlCursor cursor = newCursor();

        try
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,text,"    XMLList text()
    {
        return matchChildren(XmlCursor.TokenType.TEXT);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,toString,"    public String toString()
    {
        String result;
        XmlCursor curs = newCursor();

        if (curs.isStartdoc())
        {
            curs.toFirstContentToken();
        }

        if (curs.isText())
        {
             result = curs.getChars();
        }
        else if (curs.isStart() && hasSimpleContent())
        {
            result = curs.getTextValue();
        }
        else
        {
            result = toXMLString(0);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,toSource,"    String toSource(int indent)
    {
        // XXX Does toXMLString always return valid XML literal?
        return toXMLString(indent);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,toXMLString,"    String toXMLString(int indent)
    {
        // XXX indent is ignored

        String result;

        XmlCursor curs = newCursor();

        if (curs.isStartdoc())
        {
            curs.toFirstContentToken();
        }

        try
        {
            if (curs.isText())
            {
                result = curs.getChars();
            }
            else if (curs.isAttr())
            {
                result = curs.getTextValue();
            }
            else if (curs.isComment() || curs.isProcinst())
            {
                result = XML.dumpNode(curs, getOptions());

                // todo: XBeans-dependent hack here
                // If it's a comment or PI, take off the xml-frament stuff
                String start = ""<xml-fragment>"";
                String end = ""</xml-fragment>"";

                if (result.startsWith(start))
                {
                    result = result.substring(start.length());
                }

                if (result.endsWith(end))
                {
                    result = result.substring(0, result.length() - end.length());
                }
            }
            else
            {
                result = XML.dumpNode(curs, getOptions());
            }
        }
        finally
        {
            curs.dispose();
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,valueOf,"    Object valueOf()
    {
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,equivalentXml,"    boolean equivalentXml(Object target)
    {
        boolean result = false;

        if (target instanceof XML)
        {
            XML otherXml = (XML) target;

            // Compare with toString() if either side is text node or attribute
            // otherwise compare as XML
            XmlCursor.TokenType thisTT = tokenType();
            XmlCursor.TokenType otherTT = otherXml.tokenType();
            if (thisTT == XmlCursor.TokenType.ATTR || otherTT == XmlCursor.TokenType.ATTR ||
                thisTT == XmlCursor.TokenType.TEXT || otherTT == XmlCursor.TokenType.TEXT)
            {
                result = toString().equals(otherXml.toString());
            }
            else
            {
                XmlCursor cursOne = newCursor();
                XmlCursor cursTwo = otherXml.newCursor();

                result = LogicalEquality.nodesEqual(cursOne, cursTwo);

                cursOne.dispose();
                cursTwo.dispose();

// Old way of comparing by string.
//                boolean orgPrettyPrinting = prototype.prettyPrinting;
//                prototype.prettyPrinting = true;
//                result = toXMLString(0).equals(otherXml.toXMLString(0));
//                prototype.prettyPrinting = orgPrettyPrinting;
            }
        }
        else if (target instanceof XMLList)
        {
            XMLList otherList = (XMLList) target;

            if (otherList.length() == 1)
            {
                result = equivalentXml(otherList.getXmlFromAnnotation(0));
            }
        }
        else if (hasSimpleContent())
        {
            String otherStr = ScriptRuntime.toString(target);

            result = toString().equals(otherStr);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getPropertyList,"    XMLList getPropertyList(XMLName name)
    {
        XMLList result;

        // Get the named property
        if (name.isDescendants())
        {
            result = descendants(name);
        }
        else if (name.isAttributeName())
        {
            result = attribute(name);
        }
        else
        {
            result = child(name);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,jsConstructor,"    protected Object jsConstructor(Context cx, boolean inNewExpr,
                                   Object[] args)
    {
        if (args.length == 0) {
            return createFromJS(lib, """");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getExtraMethodSource,"    public Scriptable getExtraMethodSource(Context cx)
    {
        if (hasSimpleContent()) {
            String src = toString();
            return ScriptRuntime.toObjectOrNull(cx, src);
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getXmlObject,"    XmlObject getXmlObject()
    {
        XmlObject xo;
        XmlCursor cursor = newCursor();
        try {
            xo = cursor.getObject();
        } finally {
            cursor.dispose();
        }
        return xo;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,writeSetting,"    private void writeSetting(Scriptable target)
    {
        for (int i = 1; i <= MAX_INSTANCE_ID; ++i) {
            int id = super.getMaxInstanceId() + i;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,readSettings,"    private void readSettings(Scriptable source)
    {
        for (int i = 1; i <= MAX_INSTANCE_ID; ++i) {
            int id = super.getMaxInstanceId() + i;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return super.getMaxInstanceId() + MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s) {
        int id;
// #generated# Last update: 2004-07-19 13:03:52 CEST
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 12: X=""prettyIndent"";id=Id_prettyIndent; break L;
            case 14: c=s.charAt(0);
                if (c=='i') { X=""ignoreComments"";id=Id_ignoreComments; }
                else if (c=='p') { X=""prettyPrinting"";id=Id_prettyPrinting; }
                break L;
            case 16: X=""ignoreWhitespace"";id=Id_ignoreWhitespace; break L;
            case 28: X=""ignoreProcessingInstructions"";id=Id_ignoreProcessingInstructions; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_ignoreComments:
          case Id_ignoreProcessingInstructions:
          case Id_ignoreWhitespace:
          case Id_prettyIndent:
          case Id_prettyPrinting:
            attr = PERMANENT | DONTENUM;
            break;
          default: throw new IllegalStateException();
        }
        return instanceIdInfo(attr, super.getMaxInstanceId() + id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_ignoreComments:               return ""ignoreComments"";
          case Id_ignoreProcessingInstructions: return ""ignoreProcessingInstructions"";
          case Id_ignoreWhitespace:             return ""ignoreWhitespace"";
          case Id_prettyIndent:                 return ""prettyIndent"";
          case Id_prettyPrinting:               return ""prettyPrinting"";
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_ignoreComments:
            return ScriptRuntime.wrapBoolean(lib.ignoreComments);
          case Id_ignoreProcessingInstructions:
            return ScriptRuntime.wrapBoolean(lib.ignoreProcessingInstructions);
          case Id_ignoreWhitespace:
            return ScriptRuntime.wrapBoolean(lib.ignoreWhitespace);
          case Id_prettyIndent:
            return ScriptRuntime.wrapInt(lib.prettyIndent);
          case Id_prettyPrinting:
            return ScriptRuntime.wrapBoolean(lib.prettyPrinting);
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,setInstanceIdValue,"    protected void setInstanceIdValue(int id, Object value)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_ignoreComments:
            lib.ignoreComments = ScriptRuntime.toBoolean(value);
            return;
          case Id_ignoreProcessingInstructions:
            lib.ignoreProcessingInstructions = ScriptRuntime.toBoolean(value);
            return;
          case Id_ignoreWhitespace:
            lib.ignoreWhitespace = ScriptRuntime.toBoolean(value);
            return;
          case Id_prettyIndent:
            lib.prettyIndent = ScriptRuntime.toInt32(value);
            return;
          case Id_prettyPrinting:
            lib.prettyPrinting = ScriptRuntime.toBoolean(value);
            return;
        }
        super.setInstanceIdValue(id, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2004-07-19 13:03:52 CEST
        L0: { id = 0; String X = null;
            int s_length = s.length();
            if (s_length==8) { X=""settings"";id=Id_settings; }
            else if (s_length==11) { X=""setSettings"";id=Id_setSettings; }
            else if (s_length==15) { X=""defaultSettings"";id=Id_defaultSettings; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_defaultSettings:  arity=0; s=""defaultSettings"";  break;
          case Id_settings:         arity=0; s=""settings"";         break;
          case Id_setSettings:      arity=1; s=""setSettings"";      break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(XMLCTOR_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(XMLCTOR_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_defaultSettings: {
            lib.defaultSettings();
            Scriptable obj = cx.newObject(scope);
            writeSetting(obj);
            return obj;
          }
          case Id_settings: {
            Scriptable obj = cx.newObject(scope);
            writeSetting(obj);
            return obj;
          }
          case Id_setSettings: {
            if (args.length == 0
                || args[0] == null
                || args[0] == Undefined.instance)
            {
                lib.defaultSettings();
            } else if (args[0] instanceof Scriptable) {
                readSettings((Scriptable)args[0]);
            }
            return Undefined.instance;
          }
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,globalScope,"    Scriptable globalScope()
    {
        return globalScope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,init,"    public static void init(Context cx, Scriptable scope, boolean sealed)
    {
        // To force LinkageError if XmlObject is not available
        XmlObject.class.getName();

        XMLLibImpl lib = new XMLLibImpl(scope);
        XMLLib bound = lib.bindToScope(scope);
        if (bound == lib) {
            lib.exportToScope(sealed);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,exportToScope,"    private void exportToScope(boolean sealed)
    {
        xmlPrototype = XML.createEmptyXML(this);
        xmlListPrototype = new XMLList(this);
        namespacePrototype = new Namespace(this, """", """");
        qnamePrototype = new QName(this, """", """", """");

        xmlPrototype.exportAsJSClass(sealed);
        xmlListPrototype.exportAsJSClass(sealed);
        namespacePrototype.exportAsJSClass(sealed);
        qnamePrototype.exportAsJSClass(sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,defaultSettings,"    void defaultSettings()
    {
        ignoreComments = true;
        ignoreProcessingInstructions = true;
        ignoreWhitespace = true;
        prettyPrinting = true;
        prettyIndent = 2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toAttributeName,"    XMLName toAttributeName(Context cx, Object nameValue)
    {
        String uri;
        String localName;

        if (nameValue instanceof String) {
            uri = """";
            localName = (String)nameValue;
        } else if (nameValue instanceof XMLName) {
            XMLName xmlName = (XMLName)nameValue;
            if (!xmlName.isAttributeName()) {
                xmlName.setAttributeName();
            }
            return xmlName;
        } else if (nameValue instanceof QName) {
            QName qname = (QName)nameValue;
            uri = qname.uri();
            localName = qname.localName();
        } else if (nameValue instanceof Boolean
                   || nameValue instanceof Number
                   || nameValue == Undefined.instance
                   || nameValue == null)
        {
            throw badXMLName(nameValue);
        } else {
            uri = """";
            localName = ScriptRuntime.toString(nameValue);
        }
        XMLName xmlName = XMLName.formProperty(uri, localName);
        xmlName.setAttributeName();
        return xmlName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,badXMLName,"    private static RuntimeException badXMLName(Object value)
    {
        String msg;
        if (value instanceof Number) {
            msg = ""Can not construct XML name from number: "";
        } else if (value instanceof Boolean) {
            msg = ""Can not construct XML name from boolean: "";
        } else if (value == Undefined.instance || value == null) {
            msg = ""Can not construct XML name from "";
        } else {
            throw new IllegalArgumentException(value.toString());
        }
        return ScriptRuntime.typeError(msg+ScriptRuntime.toString(value));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toXMLName,"    XMLName toXMLName(Context cx, Object nameValue)
    {
        XMLName result;

        if (nameValue instanceof XMLName) {
            result = (XMLName)nameValue;
        } else if (nameValue instanceof QName) {
            QName qname = (QName)nameValue;
            result = XMLName.formProperty(qname.uri(), qname.localName());
        } else if (nameValue instanceof String) {
            result = toXMLNameFromString(cx, (String)nameValue);
        } else if (nameValue instanceof Boolean
                   || nameValue instanceof Number
                   || nameValue == Undefined.instance
                   || nameValue == null)
        {
            throw badXMLName(nameValue);
        } else {
            String name = ScriptRuntime.toString(nameValue);
            result = toXMLNameFromString(cx, name);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toXMLNameOrIndex,"    XMLName toXMLNameOrIndex(Context cx, Object value)
    {
        XMLName result;

        if (value instanceof XMLName) {
            result = (XMLName)value;
        } else if (value instanceof String) {
            String str = (String)value;
            long test = ScriptRuntime.testUint32String(str);
            if (test >= 0) {
                ScriptRuntime.storeUint32Result(cx, test);
                result = null;
            } else {
                result = toXMLNameFromString(cx, str);
            }
        } else if (value instanceof Number) {
            double d = ((Number)value).doubleValue();
            long l = (long)d;
            if (l == d && 0 <= l && l <= 0xFFFFFFFFL) {
                ScriptRuntime.storeUint32Result(cx, l);
                result = null;
            } else {
                throw badXMLName(value);
            }
        } else if (value instanceof QName) {
            QName qname = (QName)value;
            String uri = qname.uri();
            boolean number = false;
            result = null;
            if (uri != null && uri.length() == 0) {
                // Only in this case qname.toString() can resemble uint32
                long test = ScriptRuntime.testUint32String(uri);
                if (test >= 0) {
                    ScriptRuntime.storeUint32Result(cx, test);
                    number = true;
                }
            }
            if (!number) {
                result = XMLName.formProperty(uri, qname.localName());
            }
        } else if (value instanceof Boolean
                   || value == Undefined.instance
                   || value == null)
        {
            throw badXMLName(value);
        } else {
            String str = ScriptRuntime.toString(value);
            long test = ScriptRuntime.testUint32String(str);
            if (test >= 0) {
                ScriptRuntime.storeUint32Result(cx, test);
                result = null;
            } else {
                result = toXMLNameFromString(cx, str);
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toXMLNameFromString,"    XMLName toXMLNameFromString(Context cx, String name)
    {
        if (name == null)
            throw new IllegalArgumentException();

        int l = name.length();
        if (l != 0) {
            char firstChar = name.charAt(0);
            if (firstChar == '*') {
                if (l == 1) {
                    return XMLName.formStar();
                }
            } else if (firstChar == '@') {
                XMLName xmlName = XMLName.formProperty("""", name.substring(1));
                xmlName.setAttributeName();
                return xmlName;
            }
        }

        String uri = getDefaultNamespaceURI(cx);

        return XMLName.formProperty(uri, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,constructNamespace,"    Namespace constructNamespace(Context cx, Object uriValue)
    {
        String prefix;
        String uri;

        if (uriValue instanceof Namespace) {
            Namespace ns = (Namespace)uriValue;
            prefix = ns.prefix();
            uri = ns.uri();
        } else if (uriValue instanceof QName) {
            QName qname = (QName)uriValue;
            uri = qname.uri();
            if (uri != null) {
                prefix = qname.prefix();
            } else {
                uri = qname.toString();
                prefix = null;
            }
        } else {
            uri = ScriptRuntime.toString(uriValue);
            prefix = (uri.length() == 0) ? """" : null;
        }

        return new Namespace(this, prefix, uri);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,castToNamespace,"    Namespace castToNamespace(Context cx, Object namescapeObj)
    {
        if (namescapeObj instanceof Namespace) {
            return (Namespace)namescapeObj;
        }
        return constructNamespace(cx, namescapeObj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,constructNamespace,"    Namespace constructNamespace(Context cx)
    {
        return new Namespace(this, """", """");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,constructNamespace,"    public Namespace constructNamespace(Context cx, Object prefixValue,
                                        Object uriValue)
    {
        String prefix;
        String uri;

        if (uriValue instanceof QName) {
            QName qname = (QName)uriValue;
            uri = qname.uri();
            if (uri == null) {
                uri = qname.toString();
            }
        } else {
            uri = ScriptRuntime.toString(uriValue);
        }

        if (uri.length() == 0) {
            if (prefixValue == Undefined.instance) {
                prefix = """";
            } else {
                prefix = ScriptRuntime.toString(prefixValue);
                if (prefix.length() != 0) {
                    throw ScriptRuntime.typeError(
                        ""Illegal prefix '""+prefix+""' for 'no namespace'."");
                }
            }
        } else if (prefixValue == Undefined.instance) {
            prefix = """";
        } else if (!isXMLName(cx, prefixValue)) {
            prefix = """";
        } else {
            prefix = ScriptRuntime.toString(prefixValue);
        }

        return new Namespace(this, prefix, uri);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,getDefaultNamespaceURI,"    String getDefaultNamespaceURI(Context cx)
    {
        String uri = """";
        if (cx == null) {
            cx = Context.getCurrentContext();
        }
        if (cx != null) {
            Object ns = ScriptRuntime.searchDefaultNamespace(cx);
            if (ns != null) {
                if (ns instanceof Namespace) {
                    uri = ((Namespace)ns).uri();
                } else {
                    // Should not happen but for now it could
                    // due to bad searchDefaultNamespace implementation.
                }
            }
        }
        return uri;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,getDefaultNamespace,"    Namespace getDefaultNamespace(Context cx)
    {
        if (cx == null) {
            cx = Context.getCurrentContext();
            if (cx == null) {
                return namespacePrototype;
            }
        }

        Namespace result;
        Object ns = ScriptRuntime.searchDefaultNamespace(cx);
        if (ns == null) {
            result = namespacePrototype;
        } else {
            if (ns instanceof Namespace) {
                result = (Namespace)ns;
            } else {
                // Should not happen but for now it could
                // due to bad searchDefaultNamespace implementation.
                result = namespacePrototype;
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,castToQName,"    QName castToQName(Context cx, Object qnameValue)
    {
        if (qnameValue instanceof QName) {
            return (QName)qnameValue;
        }
        return constructQName(cx, qnameValue);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,constructQName,"    QName constructQName(Context cx, Object nameValue)
    {
        QName result;

        if (nameValue instanceof QName) {
            QName qname = (QName)nameValue;
            result = new QName(this, qname.uri(), qname.localName(),
                               qname.prefix());
        } else {
            String localName = ScriptRuntime.toString(nameValue);
            result = constructQNameFromString(cx, localName);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,constructQNameFromString,"    QName constructQNameFromString(Context cx, String localName)
    {
        if (localName == null)
            throw new IllegalArgumentException();

        String uri;
        String prefix;

        if (""*"".equals(localName)) {
            uri = null;
            prefix = null;
        } else {
            Namespace ns = getDefaultNamespace(cx);
            uri = ns.uri();
            prefix = ns.prefix();
        }

        return new QName(this, uri, localName, prefix);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,constructQName,"    QName constructQName(Context cx, Object namespaceValue, Object nameValue)
    {
        String uri;
        String localName;
        String prefix;

        if (nameValue instanceof QName) {
            QName qname = (QName)nameValue;
            localName = qname.localName();
        } else {
            localName = ScriptRuntime.toString(nameValue);
        }

        Namespace ns;
        if (namespaceValue == Undefined.instance) {
            if (""*"".equals(localName)) {
                ns = null;
            } else {
                ns = getDefaultNamespace(cx);
            }
        } else if (namespaceValue == null) {
            ns = null;
        } else if (namespaceValue instanceof Namespace) {
            ns = (Namespace)namespaceValue;
        } else {
            ns = constructNamespace(cx, namespaceValue);
        }

        if (ns == null) {
            uri = null;
            prefix = null;
        } else {
            uri = ns.uri();
            prefix = ns.prefix();
        }

        return new QName(this, uri, localName, prefix);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,addXMLObjects,"    Object addXMLObjects(Context cx, XMLObject obj1, XMLObject obj2)
    {
        XMLList listToAdd = new XMLList(this);

        if (obj1 instanceof XMLList) {
            XMLList list1 = (XMLList)obj1;
            if (list1.length() == 1) {
                listToAdd.addToList(list1.item(0));
            } else {
                // Might be xmlFragment + xmlFragment + xmlFragment + ...;
                // then the result will be an XMLList which we want to be an
                // rValue and allow it to be assigned to an lvalue.
                listToAdd = new XMLList(this, obj1);
            }
        } else {
            listToAdd.addToList(obj1);
        }

        if (obj2 instanceof XMLList) {
            XMLList list2 = (XMLList)obj2;
            for (int i = 0; i < list2.length(); i++) {
                listToAdd.addToList(list2.item(i));
            }
        } else if (obj2 instanceof XML) {
            listToAdd.addToList(obj2);
        }

        return listToAdd;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,isXMLName,"    public boolean isXMLName(Context cx, Object nameObj)
    {
        String name;
        try {
            name = ScriptRuntime.toString(nameObj);
        } catch (EcmaError ee) {
            if (""TypeError"".equals(ee.getName())) {
                return false;
            }
            throw ee;
        }

        // See http://w3.org/TR/xml-names11/#NT-NCName
        int length = name.length();
        if (length != 0) {
            if (isNCNameStartChar(name.charAt(0))) {
                for (int i = 1; i != length; ++i) {
                    if (!isNCNameChar(name.charAt(i))) {
                        return false;
                    }
                }
                return true;
            }
        }

        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,isNCNameStartChar,"    private static boolean isNCNameStartChar(int c)
    {
        if ((c & ~0x7F) == 0) {
            // Optimize for ASCII and use A..Z < _ < a..z
            if (c >= 'a') {
                return c <= 'z';
            } else if (c >= 'A') {
                if (c <= 'Z') {
                    return true;
                }
                return c == '_';
            }
        } else if ((c & ~0x1FFF) == 0) {
            return (0xC0 <= c && c <= 0xD6)
                   || (0xD8 <= c && c <= 0xF6)
                   || (0xF8 <= c && c <= 0x2FF)
                   || (0x370 <= c && c <= 0x37D)
                   || 0x37F <= c;
        }
        return (0x200C <= c && c <= 0x200D)
               || (0x2070 <= c && c <= 0x218F)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,isNCNameChar,"    private static boolean isNCNameChar(int c)
    {
        if ((c & ~0x7F) == 0) {
            // Optimize for ASCII and use - < . < 0..9 < A..Z < _ < a..z
            if (c >= 'a') {
                return c <= 'z';
            } else if (c >= 'A') {
                if (c <= 'Z') {
                    return true;
                }
                return c == '_';
            } else if (c >= '0') {
                return c <= '9';
            } else {
                return c == '-' || c == '.';
            }
        } else if ((c & ~0x1FFF) == 0) {
            return isNCNameStartChar(c) || c == 0xB7
                   || (0x300 <= c && c <= 0x36F);
        }
        return isNCNameStartChar(c) || (0x203F <= c && c <= 0x2040);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toQualifiedName,"    XMLName toQualifiedName(Context cx, Object namespaceValue,
                            Object nameValue)
    {
        // This is duplication of constructQName(cx, namespaceValue, nameValue)
        // but for XMLName

        String uri;
        String localName;

        if (nameValue instanceof QName) {
            QName qname = (QName)nameValue;
            localName = qname.localName();
        } else {
            localName = ScriptRuntime.toString(nameValue);
        }

        Namespace ns;
        if (namespaceValue == Undefined.instance) {
            if (""*"".equals(localName)) {
                ns = null;
            } else {
                ns = getDefaultNamespace(cx);
            }
        } else if (namespaceValue == null) {
            ns = null;
        } else if (namespaceValue instanceof Namespace) {
            ns = (Namespace)namespaceValue;
        } else {
            ns = constructNamespace(cx, namespaceValue);
        }

        if (ns == null) {
            uri = null;
        } else {
            uri = ns.uri();
        }

        return XMLName.formProperty(uri, localName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,nameRef,"    public Ref nameRef(Context cx, Object name,
                       Scriptable scope, int memberTypeFlags)
    {
        if ((memberTypeFlags & Node.ATTRIBUTE_FLAG) == 0) {
            // should only be called foir cases like @name or @[expr]
            throw Kit.codeBug();
        }
        XMLName xmlName = toAttributeName(cx, name);
        return xmlPrimaryReference(cx, xmlName, scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,nameRef,"    public Ref nameRef(Context cx, Object namespace, Object name,
                       Scriptable scope, int memberTypeFlags)
    {
        XMLName xmlName = toQualifiedName(cx, namespace, name);
        if ((memberTypeFlags & Node.ATTRIBUTE_FLAG) != 0) {
            if (!xmlName.isAttributeName()) {
                xmlName.setAttributeName();
            }
        }
        return xmlPrimaryReference(cx, xmlName, scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,xmlPrimaryReference,"    private Ref xmlPrimaryReference(Context cx, XMLName xmlName,
                                    Scriptable scope)
    {
        XMLObjectImpl xmlObj;
        XMLObjectImpl firstXmlObject = null;
        for (;;) {
            // XML object can only present on scope chain as a wrapper
            // of XMLWithScope
            if (scope instanceof XMLWithScope) {
                xmlObj = (XMLObjectImpl)scope.getPrototype();
                if (xmlObj.hasXMLProperty(xmlName)) {
                    break;
                }
                if (firstXmlObject == null) {
                    firstXmlObject = xmlObj;
                }
            }
            scope = scope.getParentScope();
            if (scope == null) {
                xmlObj = firstXmlObject;
                break;
            }
        }

        // xmlObj == null corresponds to undefined as the target of
        // the reference
        if (xmlObj != null) {
            xmlName.initXMLObject(xmlObj);
        }
        return xmlName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,escapeAttributeValue,"    public String escapeAttributeValue(Object value)
    {
        String text = ScriptRuntime.toString(value);

        if (text.length() == 0) return """";

        XmlObject xo = XmlObject.Factory.newInstance();

        XmlCursor cursor = xo.newCursor();
        cursor.toNextToken();
        cursor.beginElement(""a"");
        cursor.insertAttributeWithValue(""a"", text);
        cursor.dispose();

        String elementText = xo.toString();
        int begin = elementText.indexOf('""');
        int end = elementText.lastIndexOf('""');
        return elementText.substring(begin + 1, end);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,escapeTextValue,"    public String escapeTextValue(Object value)
    {
        if (value instanceof XMLObjectImpl) {
            return ((XMLObjectImpl)value).toXMLString(0);
        }

        String text = ScriptRuntime.toString(value);

        if (text.length() == 0) return text;

        XmlObject xo = XmlObject.Factory.newInstance();

        XmlCursor cursor = xo.newCursor();
        cursor.toNextToken();
        cursor.beginElement(""a"");
        cursor.insertChars(text);
        cursor.dispose();

        String elementText = xo.toString();
        int begin = elementText.indexOf('>') + 1;
        int end = elementText.lastIndexOf('<');
        return (begin < end) ? elementText.substring(begin, end) : """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toDefaultXmlNamespace,"    public Object toDefaultXmlNamespace(Context cx, Object uriValue)
    {
        return constructNamespace(cx, uriValue);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,add,"        void add (XML.XScriptAnnotation n)
        {
            v.add(n);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,item,"        XML.XScriptAnnotation item(int index)
        {
            return (XML.XScriptAnnotation)(v.get(index));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,remove,"        void remove (int index)
        {
            v.remove(index);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,length,"        int length()
        {
            return v.size();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,setTargets,"    void setTargets(XMLObjectImpl object, javax.xml.namespace.QName property)
    {
        targetObject = object;
        targetProperty = property;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getXmlFromAnnotation,"    XML getXmlFromAnnotation(int index)
    {
        XML retVal;

        if (index >= 0 && index < length())
        {
            XML.XScriptAnnotation anno = _annos.item(index);
            retVal = XML.getFromAnnotation(lib, anno);
        }
        else
        {
            retVal = null;
        }

        return retVal;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,internalRemoveFromList,"    private void internalRemoveFromList (int index)
    {
        _annos.remove(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,replace,"    void replace(int index, XML xml)
    {
        if (index < length())
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,insert,"    private void insert(int index, XML xml)
    {
        if (index < length())
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getClassName,"    public String getClassName ()
    {
        return ""XMLList"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,get,"    public Object get(int index, Scriptable start)
    {
        //Log(""get index: "" + index);

        if (index >= 0 && index < length())
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,hasXMLProperty,"    boolean hasXMLProperty(XMLName xmlName)
    {
        boolean result = false;

        // Has now should return true if the property would have results > 0 or
        // if it's a method name
        String name = xmlName.localName();
        if ((getPropertyList(xmlName).length() > 0) ||
            (getMethod(name) != NOT_FOUND))
        {
            result = true;
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,has,"    public boolean has(int index, Scriptable start)
    {
        return 0 <= index && index < length();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,putXMLProperty,"    void putXMLProperty(XMLName xmlName, Object value)
    {
        //Log(""put property: "" + name);

        // Special-case checks for undefined and null
        if (value == null)
        {
            value = ""null"";
        }
        else if (value instanceof Undefined)
        {
            value = ""undefined"";
        }

        if (length() > 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getXMLProperty,"    Object getXMLProperty(XMLName name)
    {
        return getPropertyList(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,put,"    public void put(int index, Scriptable start, Object value)
    {
        Object parent = Undefined.instance;
        // Convert text into XML if needed.
        XMLObject xmlValue;

        // Special-case checks for undefined and null
        if (value == null)
        {
            value = ""null"";
        }
        else if (value instanceof Undefined)
        {
            value = ""undefined"";
        }

        if (value instanceof XMLObject)
        {
            xmlValue = (XMLObject) value;
        }
        else
        {
            if (targetProperty == null)
            {
                xmlValue = XML.createFromJS(lib, value.toString());
            }
            else
            {
                xmlValue = XML.createTextElement(lib, targetProperty, value.toString());
            }
        }

        // Find the parent
        if (index < length())
        {
            parent = item(index).parent();
        }
        else
        {
            // Appending
            parent = parent();
        }

        if (parent instanceof XML)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,deleteXMLProperty,"    void deleteXMLProperty(XMLName name)
    {
        for (int i = 0; i < length(); i++)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,delete,"    public void delete(int index)
    {
        if (index >= 0 && index < length())
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getIds,"    public Object[] getIds()
    {
        Object enumObjs[];

        if (prototypeFlag)
        {
            enumObjs = new Object[0];
        }
        else
        {
            enumObjs = new Object[length()];

            for (int i = 0; i < enumObjs.length; i++)
            {
                enumObjs[i] = new Integer(i);
            }
        }

        return enumObjs;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getIdsForDebug,"    public Object[] getIdsForDebug()
    {
        return getIds();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,remove,"    void remove ()
    {
        int nLen = length();
        for (int i = nLen - 1; i >= 0; i--)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,item,"    XML item (int index)
    {
        return _annos != null
            ? getXmlFromAnnotation(index) : XML.createEmptyXML(lib);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,setAttribute,"    private void setAttribute (XMLName xmlName, Object value)
    {
        for (int i = 0; i < length(); i++)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,addToList,"    void addToList(Object toAdd)
    {
        if (toAdd instanceof Undefined)
        {
            // Missing argument do nothing...
            return;
        }

        if (toAdd instanceof XMLList)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,addNamespace,"    XML addNamespace(Namespace ns)
    {
        if(length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,appendChild,"    XML appendChild(Object xml)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,attribute,"    XMLList attribute(XMLName xmlName)
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            XML xml = getXmlFromAnnotation(i);
            result.addToList(xml.attribute(xmlName));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,attributes,"    XMLList attributes()
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            XML xml = getXmlFromAnnotation(i);
            result.addToList(xml.attributes());
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,child,"    XMLList child(long index)
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            result.addToList(getXmlFromAnnotation(i).child(index));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,child,"    XMLList child(XMLName xmlName)
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            result.addToList(getXmlFromAnnotation(i).child(xmlName));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,childIndex,"    int childIndex()
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,children,"    XMLList children()
    {
        Vector v = new Vector();

        for (int i = 0; i < length(); i++)
        {
            XML xml = getXmlFromAnnotation(i);

            if (xml != null)
            {
                Object o = xml.children();
                if (o instanceof XMLList)
                {
                    XMLList childList = (XMLList)o;

                    int cChildren = childList.length();
                    for (int j = 0; j < cChildren; j++)
                    {
                        v.addElement(childList.item(j));
                    }
                }
            }
        }

        XMLList allChildren = new XMLList(lib);
        int sz = v.size();

        for (int i = 0; i < sz; i++)
        {
            allChildren.addToList(v.get(i));
        }

        return allChildren;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,comments,"    XMLList comments()
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            XML xml = getXmlFromAnnotation(i);

            result.addToList(xml.comments());
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,contains,"    boolean contains(Object xml)
    {
        boolean result = false;

        for (int i = 0; i < length(); i++)
        {
            XML member = getXmlFromAnnotation(i);

            if (member.equivalentXml(xml))
            {
                result = true;
                break;
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,copy,"    Object copy()
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            XML xml = getXmlFromAnnotation(i);
            result.addToList(xml.copy());
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,descendants,"    XMLList descendants(XMLName xmlName)
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            XML xml = getXmlFromAnnotation(i);
            result.addToList(xml.descendants(xmlName));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,inScopeNamespaces,"    Object[] inScopeNamespaces()
    {
        if(length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,insertChildAfter,"    XML insertChildAfter(Object child, Object xml)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,insertChildBefore,"    XML insertChildBefore(Object child, Object xml)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,hasOwnProperty,"    boolean hasOwnProperty(XMLName xmlName)
    {
        boolean hasProperty = false;

        if (prototypeFlag)
        {
            String property = xmlName.localName();
            hasProperty = (0 != findPrototypeId(property));
        }
        else
        {
            hasProperty = (getPropertyList(xmlName).length() > 0);
        }

        return hasProperty;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,hasComplexContent,"    boolean hasComplexContent()
    {
        boolean complexContent;
        int length = length();

        if (length == 0)
        {
            complexContent = false;
        }
        else if (length == 1)
        {
            complexContent = getXmlFromAnnotation(0).hasComplexContent();
        }
        else
        {
            complexContent = false;

            for (int i = 0; i < length; i++)
            {
                XML nextElement = getXmlFromAnnotation(i);
                if (nextElement.tokenType() == XmlCursor.TokenType.START)
                {
                    complexContent = true;
                    break;
                }
            }
        }

        return complexContent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,hasSimpleContent,"    boolean hasSimpleContent()
    {
        boolean simpleContent;
        int length = length();

        if (length == 0)
        {
            simpleContent = true;
        }
        else if (length == 1)
        {
            simpleContent = getXmlFromAnnotation(0).hasSimpleContent();
        }
        else
        {
            simpleContent = true;

            for (int i = 0; i < length; i++)
            {
                XML nextElement = getXmlFromAnnotation(i);
                if (nextElement.tokenType() == XmlCursor.TokenType.START)
                {
                    simpleContent = false;
                    break;
                }
            }
        }

        return simpleContent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,length,"    int length()
    {
        int result = 0;

        if (_annos != null)
        {
            result = _annos.length();
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,localName,"    String localName()
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,name,"    QName name()
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,namespace,"    Object namespace(String prefix)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,namespaceDeclarations,"    Object[] namespaceDeclarations()
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,nodeKind,"    Object nodeKind()
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,normalize,"    void normalize()
    {
        for (int i = 0; i < length(); i++)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,parent,"    Object parent()
    {
        Object sameParent = Undefined.instance;

        if ((length() == 0) && (targetObject != null) && (targetObject instanceof XML))
        {
            sameParent = targetObject;
        }
        else
        {
            for (int i = 0; i < length(); i++)
            {
                Object currParent = getXmlFromAnnotation(i).parent();

                if (i == 0)
                {
                    // Set the first for the rest to compare to.
                    sameParent = currParent;
                }
                else if (sameParent != currParent)
                {
                    sameParent = Undefined.instance;
                    break;
                }
            }
        }

        // If everything in the list is the sameParent then return that as the parent.
        return sameParent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,prependChild,"    XML prependChild(Object xml)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,processingInstructions,"    Object processingInstructions(XMLName xmlName)
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            XML xml = getXmlFromAnnotation(i);

            result.addToList(xml.processingInstructions(xmlName));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,propertyIsEnumerable,"    boolean propertyIsEnumerable(Object name)
    {
        long index;
        if (name instanceof Integer) {
            index = ((Integer)name).intValue();
        } else if (name instanceof Number) {
            double x = ((Number)name).doubleValue();
            index = (long)x;
            if (index != x) {
                return false;
            }
            if (index == 0 && 1.0 / x < 0) {
                // Negative 0
                return false;
            }
        } else {
            String s = ScriptRuntime.toString(name);
            index = ScriptRuntime.testUint32String(s);
        }
        return (0 <= index && index < length());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,removeNamespace,"    XML removeNamespace(Namespace ns)
    {
        if(length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,replace,"    XML replace(long index, Object xml)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,replace,"    XML replace(XMLName xmlName, Object xml)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,setChildren,"    XML setChildren(Object xml)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,setLocalName,"    void setLocalName(String localName)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,setName,"    void setName(QName qname)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,setNamespace,"    void setNamespace(Namespace ns)
    {
        if (length() == 1)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,text,"    XMLList text()
    {
        XMLList result = new XMLList(lib);

        for (int i = 0; i < length(); i++)
        {
            result.addToList(getXmlFromAnnotation(i).text());
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,toString,"    public String toString()
    {
        if (hasSimpleContent())
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,toSource,"    String toSource(int indent)
    {
        // XXX indent is ignored
        return ""<>""+toXMLString(0)+""</>"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,toXMLString,"    String toXMLString(int indent)
    {
        StringBuffer sb = new StringBuffer();

        for(int i = 0; i < length(); i++)
        {
            if (i > 0)
            {
                sb.append('\n');
            }

            sb.append(getXmlFromAnnotation(i).toXMLString(indent));
        }

        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,valueOf,"    Object valueOf()
    {
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,equivalentXml,"    boolean equivalentXml(Object target)
    {
        boolean result = false;

        // Zero length list should equate to undefined
        if (target instanceof Undefined && length() == 0)
        {
            result = true;
        }
        else if (length() == 1)
        {
            result = getXmlFromAnnotation(0).equivalentXml(target);
        }
        else if (target instanceof XMLList)
        {
            XMLList otherList = (XMLList) target;

            if (otherList.length() == length())
            {
                result = true;

                for (int i = 0; i < length(); i++)
                {
                    if (!getXmlFromAnnotation(i).equivalentXml(otherList.getXmlFromAnnotation(i)))
                    {
                        result = false;
                        break;
                    }
                }
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getPropertyList,"    private XMLList getPropertyList(XMLName name)
    {
        XMLList propertyList = new XMLList(lib);
        javax.xml.namespace.QName qname = null;

        if (!name.isDescendants() && !name.isAttributeName())
        {
            // Only set the targetProperty if this is a regular child get
            // and not a descendant or attribute get
            qname = new javax.xml.namespace.QName(name.uri(), name.localName());
        }

        propertyList.setTargets(this, qname);

        for (int i = 0; i < length(); i++)
        {
            propertyList.addToList(
                getXmlFromAnnotation(i).getPropertyList(name));
        }

        return propertyList;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,applyOrCall,"    private Object applyOrCall(boolean isApply,
                               Context cx, Scriptable scope,
                               Scriptable thisObj, Object[] args)
    {
        String methodName = isApply ? ""apply"" : ""call"";
        if(!(thisObj instanceof XMLList) ||
           ((XMLList)thisObj).targetProperty == null)
            throw ScriptRuntime.typeError1(""msg.isnt.function"",
                                           methodName);

        return ScriptRuntime.applyOrCall(isApply, cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,jsConstructor,"    protected Object jsConstructor(Context cx, boolean inNewExpr,
                                   Object[] args)
    {
        if (args.length == 0) {
            return new XMLList(lib);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getXmlObject,"    org.apache.xmlbeans.XmlObject getXmlObject()
    {
        if (length() == 1) {
            return getXmlFromAnnotation(0).getXmlObject();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getExtraMethodSource,"    public Scriptable getExtraMethodSource(Context cx)
    {
        if (length() == 1) {
            return getXmlFromAnnotation(0);
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        // This XMLList is being called as a Function.
        // Let's find the real Function object.
        if(targetProperty == null)
            throw ScriptRuntime.notFunctionError(this);

        String methodName = targetProperty.getLocalPart();

        boolean isApply = methodName.equals(""apply"");
        if(isApply || methodName.equals(""call""))
            return applyOrCall(isApply, cx, scope, thisObj, args);

        Callable method = ScriptRuntime.getElemFunctionAndThis(
                              this, methodName, cx);
        // Call lastStoredScriptable to clear stored thisObj
        // but ignore the result as the method should use the supplied
        // thisObj, not one from redirected call
        ScriptRuntime.lastStoredScriptable(cx);
        return method.call(cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        throw ScriptRuntime.typeError1(""msg.not.ctor"", ""XMLList"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,formStar,"    static XMLName formStar()
    {
        return new XMLName(null, ""*"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,formProperty,"    static XMLName formProperty(String uri, String localName)
    {
        return new XMLName(uri, localName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,initXMLObject,"    void initXMLObject(XMLObjectImpl xmlObject)
    {
        if (xmlObject == null) throw new IllegalArgumentException();
        if (this.xmlObject != null) throw new IllegalStateException();
        this.xmlObject = xmlObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,uri,"    String uri()
    {
        return uri;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,localName,"    String localName()
    {
        return localName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,isAttributeName,"    boolean isAttributeName()
    {
        return isAttributeName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,setAttributeName,"    void setAttributeName()
    {
        if (isAttributeName) throw new IllegalStateException();
        isAttributeName = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,isDescendants,"    boolean isDescendants()
    {
        return isDescendants;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,setIsDescendants,"    void setIsDescendants()
    {
        if (isDescendants) throw new IllegalStateException();
        isDescendants = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,has,"    public boolean has(Context cx)
    {
        if (xmlObject == null) {
            return false;
        }
        return xmlObject.hasXMLProperty(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,get,"    public Object get(Context cx)
    {
        if (xmlObject == null) {
            throw ScriptRuntime.undefReadError(Undefined.instance,
                                               toString());
        }
        return xmlObject.getXMLProperty(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,set,"    public Object set(Context cx, Object value)
    {
        if (xmlObject == null) {
            throw ScriptRuntime.undefWriteError(Undefined.instance,
                                                toString(),
                                                value);
        }
        // Assignment to descendants causes parse error on bad reference
        // and this should not be called
        if (isDescendants) throw Kit.codeBug();
        xmlObject.putXMLProperty(this, value);
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,delete,"    public boolean delete(Context cx)
    {
        if (xmlObject == null) {
            return true;
        }
        xmlObject.deleteXMLProperty(this);
        return !xmlObject.hasXMLProperty(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,toString,"    public String toString()
    {
        //return qname.localName();
        StringBuffer buff = new StringBuffer();
        if (isDescendants) buff.append("".."");
        if (isAttributeName) buff.append('@');
        if (uri == null) {
            buff.append('*');
            if(localName().equals(""*"")) {
                return buff.toString();
            }
        } else {
            buff.append('""').append(uri()).append('""');
        }
        buff.append(':').append(localName());
        return buff.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getMethod,"    final Object getMethod(String id)
    {
        return super.get(id, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getDefaultValue,"    public final Object getDefaultValue(Class hint)
    {
        return toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,delete,"    public void delete(String name)
    {
        throw new IllegalArgumentException(""String: ["" + name + ""]"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,equivalentValues,"    protected final Object equivalentValues(Object value)
    {
        boolean result = equivalentXml(value);
        return result ? Boolean.TRUE : Boolean.FALSE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,lib,"    public final XMLLib lib()
    {
        return lib;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaHas,"    public final boolean ecmaHas(Context cx, Object id)
    {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this cast
            return has((int)index, this);
        }
        return hasXMLProperty(xmlName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaGet,"    public final Object ecmaGet(Context cx, Object id)
    {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this cast
            Object result = get((int)index, this);
            if (result == Scriptable.NOT_FOUND) {
                result = Undefined.instance;
            }
            return result;
        }
        return getXMLProperty(xmlName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaPut,"    public final void ecmaPut(Context cx, Object id, Object value)
    {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this cast
            put((int)index, this, value);
            return;
        }
        putXMLProperty(xmlName, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaDelete,"    public final boolean ecmaDelete(Context cx, Object id)
    {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this
            delete((int)index);
            return true;
        }
        deleteXMLProperty(xmlName);
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,memberRef,"    public Ref memberRef(Context cx, Object elem, int memberTypeFlags)
    {
        XMLName xmlName;
        if ((memberTypeFlags & Node.ATTRIBUTE_FLAG) != 0) {
            xmlName = lib.toAttributeName(cx, elem);
        } else {
            if ((memberTypeFlags & Node.DESCENDANTS_FLAG) == 0) {
                // Code generation would use ecma(Get|Has|Delete|Set) for
                // normal name idenrifiers so one ATTRIBUTE_FLAG
                // or DESCENDANTS_FLAG has to be set
                throw Kit.codeBug();
            }
            xmlName = lib.toXMLName(cx, elem);
        }
        if ((memberTypeFlags & Node.DESCENDANTS_FLAG) != 0) {
            xmlName.setIsDescendants();
        }
        xmlName.initXMLObject(this);
        return xmlName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,memberRef,"    public Ref memberRef(Context cx, Object namespace, Object elem,
                         int memberTypeFlags)
    {
        XMLName xmlName = lib.toQualifiedName(cx, namespace, elem);
        if ((memberTypeFlags & Node.ATTRIBUTE_FLAG) != 0) {
            if (!xmlName.isAttributeName()) {
                xmlName.setAttributeName();
            }
        }
        if ((memberTypeFlags & Node.DESCENDANTS_FLAG) != 0) {
            xmlName.setIsDescendants();
        }
        xmlName.initXMLObject(this);
        return xmlName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,enterWith,"    public NativeWith enterWith(Scriptable scope)
    {
        return new XMLWithScope(lib, scope, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,enterDotQuery,"    public NativeWith enterDotQuery(Scriptable scope)
    {
        XMLWithScope xws = new XMLWithScope(lib, scope, this);
        xws.initAsDotQuery();
        return xws;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,addValues,"    public final Object addValues(Context cx, boolean thisIsLeft,
                                     Object value)
    {
        if (value instanceof XMLObject) {
            XMLObject v1, v2;
            if (thisIsLeft) {
                v1 = this;
                v2 = (XMLObject)value;
            } else {
                v1 = (XMLObject)value;
                v2 = this;
            }
            return lib.addXMLObjects(cx, v1, v2);
        }
        if (value == Undefined.instance) {
            // both ""xml + undefined"" and ""undefined + xml"" gives String(xml)
            return ScriptRuntime.toString(this);
        }

        return super.addValues(cx, thisIsLeft, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,exportAsJSClass,"    final void exportAsJSClass(boolean sealed)
    {
        prototypeFlag = true;
        exportAsJSClass(MAX_PROTOTYPE_ID, lib.globalScope(), sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2004-11-10 15:38:11 CET
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 4: c=s.charAt(0);
                if (c=='c') { X=""copy"";id=Id_copy; }
                else if (c=='n') { X=""name"";id=Id_name; }
                else if (c=='t') { X=""text"";id=Id_text; }
                break L;
            case 5: X=""child"";id=Id_child; break L;
            case 6: c=s.charAt(0);
                if (c=='l') { X=""length"";id=Id_length; }
                else if (c=='p') { X=""parent"";id=Id_parent; }
                break L;
            case 7: c=s.charAt(0);
                if (c=='r') { X=""replace"";id=Id_replace; }
                else if (c=='s') { X=""setName"";id=Id_setName; }
                else if (c=='v') { X=""valueOf"";id=Id_valueOf; }
                break L;
            case 8: switch (s.charAt(4)) {
                case 'K': X=""nodeKind"";id=Id_nodeKind; break L;
                case 'a': X=""contains"";id=Id_contains; break L;
                case 'd': X=""children"";id=Id_children; break L;
                case 'e': X=""comments"";id=Id_comments; break L;
                case 'r': X=""toString"";id=Id_toString; break L;
                case 'u': X=""toSource"";id=Id_toSource; break L;
                } break L;
            case 9: switch (s.charAt(2)) {
                case 'c': X=""localName"";id=Id_localName; break L;
                case 'm': X=""namespace"";id=Id_namespace; break L;
                case 'r': X=""normalize"";id=Id_normalize; break L;
                case 't': X=""attribute"";id=Id_attribute; break L;
                } break L;
            case 10: c=s.charAt(0);
                if (c=='a') { X=""attributes"";id=Id_attributes; }
                else if (c=='c') { X=""childIndex"";id=Id_childIndex; }
                break L;
            case 11: switch (s.charAt(0)) {
                case 'a': X=""appendChild"";id=Id_appendChild; break L;
                case 'c': X=""constructor"";id=Id_constructor; break L;
                case 'd': X=""descendants"";id=Id_descendants; break L;
                case 's': X=""setChildren"";id=Id_setChildren; break L;
                case 't': X=""toXMLString"";id=Id_toXMLString; break L;
                } break L;
            case 12: switch (s.charAt(0)) {
                case 'a': X=""addNamespace"";id=Id_addNamespace; break L;
                case 'g': X=""getXmlObject"";id=Id_getXmlObject; break L;
                case 'p': X=""prependChild"";id=Id_prependChild; break L;
                case 's': c=s.charAt(3);
                    if (c=='L') { X=""setLocalName"";id=Id_setLocalName; }
                    else if (c=='N') { X=""setNamespace"";id=Id_setNamespace; }
                    break L;
                } break L;
            case 14: X=""hasOwnProperty"";id=Id_hasOwnProperty; break L;
            case 15: X=""removeNamespace"";id=Id_removeNamespace; break L;
            case 16: c=s.charAt(0);
                if (c=='h') { X=""hasSimpleContent"";id=Id_hasSimpleContent; }
                else if (c=='i') { X=""insertChildAfter"";id=Id_insertChildAfter; }
                break L;
            case 17: c=s.charAt(3);
                if (c=='C') { X=""hasComplexContent"";id=Id_hasComplexContent; }
                else if (c=='c') { X=""inScopeNamespaces"";id=Id_inScopeNamespaces; }
                else if (c=='e') { X=""insertChildBefore"";id=Id_insertChildBefore; }
                break L;
            case 20: X=""propertyIsEnumerable"";id=Id_propertyIsEnumerable; break L;
            case 21: X=""namespaceDeclarations"";id=Id_namespaceDeclarations; break L;
            case 22: X=""processingInstructions"";id=Id_processingInstructions; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: {
            IdFunctionObject ctor;
            if (this instanceof XML) {
                ctor = new XMLCtor((XML)this, XMLOBJECT_TAG, id, 1);
            } else {
                ctor = new IdFunctionObject(this, XMLOBJECT_TAG, id, 1);
            }
            initPrototypeConstructor(ctor);
            return;
          }

          case Id_addNamespace:      arity=1; s=""addNamespace"";      break;
          case Id_appendChild:       arity=1; s=""appendChild"";       break;
          case Id_attribute:         arity=1; s=""attribute"";         break;
          case Id_attributes:        arity=0; s=""attributes"";        break;
          case Id_child:             arity=1; s=""child"";             break;
          case Id_childIndex:        arity=0; s=""childIndex"";        break;
          case Id_children:          arity=0; s=""children"";          break;
          case Id_comments:          arity=0; s=""comments"";          break;
          case Id_contains:          arity=1; s=""contains"";          break;
          case Id_copy:              arity=0; s=""copy"";              break;
          case Id_descendants:       arity=1; s=""descendants"";       break;
          case Id_hasComplexContent: arity=0; s=""hasComplexContent""; break;
          case Id_hasOwnProperty:    arity=1; s=""hasOwnProperty"";    break;
          case Id_hasSimpleContent:  arity=0; s=""hasSimpleContent"";  break;
          case Id_inScopeNamespaces: arity=0; s=""inScopeNamespaces""; break;
          case Id_insertChildAfter:  arity=2; s=""insertChildAfter"";  break;
          case Id_insertChildBefore: arity=2; s=""insertChildBefore""; break;
          case Id_length:            arity=0; s=""length"";            break;
          case Id_localName:         arity=0; s=""localName"";         break;
          case Id_name:              arity=0; s=""name"";              break;
          case Id_namespace:         arity=1; s=""namespace"";         break;
          case Id_namespaceDeclarations:
            arity=0; s=""namespaceDeclarations""; break;
          case Id_nodeKind:          arity=0; s=""nodeKind"";          break;
          case Id_normalize:         arity=0; s=""normalize"";         break;
          case Id_parent:            arity=0; s=""parent"";            break;
          case Id_prependChild:      arity=1; s=""prependChild"";      break;
          case Id_processingInstructions:
            arity=1; s=""processingInstructions""; break;
          case Id_propertyIsEnumerable:
            arity=1; s=""propertyIsEnumerable""; break;
          case Id_removeNamespace:   arity=1; s=""removeNamespace"";   break;
          case Id_replace:           arity=2; s=""replace"";           break;
          case Id_setChildren:       arity=1; s=""setChildren"";       break;
          case Id_setLocalName:      arity=1; s=""setLocalName"";      break;
          case Id_setName:           arity=1; s=""setName"";           break;
          case Id_setNamespace:      arity=1; s=""setNamespace"";      break;
          case Id_text:              arity=0; s=""text"";              break;
          case Id_toString:          arity=0; s=""toString"";          break;
          case Id_toSource:          arity=1; s=""toSource"";          break;
          case Id_toXMLString:       arity=1; s=""toXMLString"";       break;
          case Id_valueOf:           arity=0; s=""valueOf"";           break;

          case Id_getXmlObject:      arity=0; s=""getXmlObject"";      break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(XMLOBJECT_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(XMLOBJECT_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        if (id == Id_constructor) {
            return jsConstructor(cx, thisObj == null, args);
        }

        // All (XML|XMLList).prototype methods require thisObj to be XML
        if (!(thisObj instanceof XMLObjectImpl))
            throw incompatibleCallError(f);
        XMLObjectImpl realThis = (XMLObjectImpl)thisObj;

        switch (id) {
          case Id_addNamespace: {
            Namespace ns = lib.castToNamespace(cx, arg(args, 0));
            return realThis.addNamespace(ns);
          }
          case Id_appendChild:
            return realThis.appendChild(arg(args, 0));
          case Id_attribute: {
            XMLName xmlName = lib.toAttributeName(cx, arg(args, 0));
            return realThis.attribute(xmlName);
          }
          case Id_attributes:
            return realThis.attributes();
          case Id_child: {
            XMLName xmlName = lib.toXMLNameOrIndex(cx, arg(args, 0));
            if (xmlName == null) {
                long index = ScriptRuntime.lastUint32Result(cx);
                return realThis.child(index);
            } else {
                return realThis.child(xmlName);
            }
          }
          case Id_childIndex:
            return ScriptRuntime.wrapInt(realThis.childIndex());
          case Id_children:
            return realThis.children();
          case Id_comments:
            return realThis.comments();
          case Id_contains:
            return ScriptRuntime.wrapBoolean(
                       realThis.contains(arg(args, 0)));
          case Id_copy:
            return realThis.copy();
          case Id_descendants: {
            XMLName xmlName = (args.length == 0)
                              ? XMLName.formStar()
                              : lib.toXMLName(cx, args[0]);
            return realThis.descendants(xmlName);
          }
          case Id_inScopeNamespaces: {
            Object[] array = realThis.inScopeNamespaces();
            return cx.newArray(scope, array);
          }
          case Id_insertChildAfter:
            return realThis.insertChildAfter(arg(args, 0), arg(args, 1));
          case Id_insertChildBefore:
            return realThis.insertChildBefore(arg(args, 0), arg(args, 1));
          case Id_hasOwnProperty: {
            XMLName xmlName = lib.toXMLName(cx, arg(args, 0));
            return ScriptRuntime.wrapBoolean(
                       realThis.hasOwnProperty(xmlName));
          }
          case Id_hasComplexContent:
            return ScriptRuntime.wrapBoolean(realThis.hasComplexContent());
          case Id_hasSimpleContent:
            return ScriptRuntime.wrapBoolean(realThis.hasSimpleContent());
          case Id_length:
            return ScriptRuntime.wrapInt(realThis.length());
          case Id_localName:
            return realThis.localName();
          case Id_name:
            return realThis.name();
          case Id_namespace: {
            String prefix = (args.length > 0)
                            ? ScriptRuntime.toString(args[0]) : null;
            return realThis.namespace(prefix);
          }
          case Id_namespaceDeclarations: {
            Object[] array = realThis.namespaceDeclarations();
            return cx.newArray(scope, array);
          }
          case Id_nodeKind:
            return realThis.nodeKind();
          case Id_normalize:
            realThis.normalize();
            return Undefined.instance;
          case Id_parent:
            return realThis.parent();
          case Id_prependChild:
            return realThis.prependChild(arg(args, 0));
          case Id_processingInstructions: {
            XMLName xmlName = (args.length > 0)
                              ? lib.toXMLName(cx, args[0])
                              : XMLName.formStar();
            return realThis.processingInstructions(xmlName);
          }
          case Id_propertyIsEnumerable: {
            return ScriptRuntime.wrapBoolean(
                       realThis.propertyIsEnumerable(arg(args, 0)));
          }
          case Id_removeNamespace: {
            Namespace ns = lib.castToNamespace(cx, arg(args, 0));
            return realThis.removeNamespace(ns);
          }
          case Id_replace: {
            XMLName xmlName = lib.toXMLNameOrIndex(cx, arg(args, 0));
            Object arg1 = arg(args, 1);
            if (xmlName == null) {
                long index = ScriptRuntime.lastUint32Result(cx);
                return realThis.replace(index, arg1);
            } else {
                return realThis.replace(xmlName, arg1);
            }
          }
          case Id_setChildren:
            return realThis.setChildren(arg(args, 0));
          case Id_setLocalName: {
            String localName;
            Object arg = arg(args, 0);
            if (arg instanceof QName) {
                localName = ((QName)arg).localName();
            } else {
                localName = ScriptRuntime.toString(arg);
            }
            realThis.setLocalName(localName);
            return Undefined.instance;
          }
          case Id_setName: {
            Object arg = (args.length != 0) ? args[0] : Undefined.instance;
            QName qname;
            if (arg instanceof QName) {
                qname = (QName)arg;
                if (qname.uri() == null) {
                    qname = lib.constructQNameFromString(cx, qname.localName());
                } else {
                    // E4X 13.4.4.35 requires to always construct QName
                    qname = lib.constructQName(cx, qname);
                }
            } else {
                qname = lib.constructQName(cx, arg);
            }
            realThis.setName(qname);
            return Undefined.instance;
          }
          case Id_setNamespace: {
            Namespace ns = lib.castToNamespace(cx, arg(args, 0));
            realThis.setNamespace(ns);
            return Undefined.instance;
          }
          case Id_text:
            return realThis.text();
          case Id_toString:
            return realThis.toString();
          case Id_toSource: {
            int indent = ScriptRuntime.toInt32(args, 0);
            return realThis.toSource(indent);
          }
          case Id_toXMLString: {
            int indent = ScriptRuntime.toInt32(args, 0);
            return realThis.toXMLString(indent);
          }
          case Id_valueOf:
            return realThis.valueOf();

          case Id_getXmlObject: {
            org.apache.xmlbeans.XmlObject xmlObject = realThis.getXmlObject();
            return Context.javaToJS(xmlObject, scope);
          }
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,arg,"    private static Object arg(Object[] args, int i)
    {
        return (i < args.length) ? args[i] : Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLWithScope.java,initAsDotQuery,"    void initAsDotQuery()
    {
        XMLObject prototype = (XMLObject)getPrototype();
        // XMLWithScope also handles the .(xxx) DotQuery for XML
        // basically DotQuery is a for/in/with statement and in
        // the following 3 statements we setup to signal it's
        // DotQuery,
        // the index and the object being looped over.  The
        // xws.setPrototype is the scope of the object which is
        // is a element of the lhs (XMLList).
        _currIndex = 0;
        _dqPrototype = prototype;
        if (prototype instanceof XMLList) {
            XMLList xl = (XMLList)prototype;
            if (xl.length() > 0) {
                setPrototype((Scriptable)(xl.get(0, null)));
            }
        }
        // Always return the outer-most type of XML lValue of
        // XML to left of dotQuery.
        _xmlList = new XMLList(lib);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLWithScope.java,updateDotQuery,"    protected Object updateDotQuery(boolean value)
    {
        // Return null to continue looping

        XMLObject seed = _dqPrototype;
        XMLList xmlL = _xmlList;

        if (seed instanceof XMLList) {
            // We're a list so keep testing each element of the list if the
            // result on the top of stack is true then that element is added
            // to our result list.  If false, we try the next element.
            XMLList orgXmlL = (XMLList)seed;

            int idx = _currIndex;

            if (value) {
                xmlL.addToList(orgXmlL.get(idx, null));
            }

            // More elements to test?
            if (++idx < orgXmlL.length()) {
                // Yes, set our new index, get the next element and
                // reset the expression to run with this object as
                // the WITH selector.
                _currIndex = idx;
                setPrototype((Scriptable)(orgXmlL.get(idx, null)));

                // continue looping
                return null;
            }
        } else {
            // If we're not a XMLList then there's no looping
            // just return DQPrototype if the result is true.
            if (value) {
              xmlL.addToList(seed);
            }
        }

        return xmlL;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Control.java,main,"    public static void main(String[] args)
    {
        Context cx = Context.enter();
        try {
            // Set version to JavaScript1.2 so that we get object-literal style",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Counter.java,jsConstructor,"    public void jsConstructor(int a) { count = a; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Counter.java,getClassName,"    public String getClassName() { return ""Counter""; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Counter.java,jsGet_count,"    public int jsGet_count() { return count++; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Counter.java,jsFunction_resetCount,"    public void jsFunction_resetCount() { count = 0; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CounterTest.java,main,"    public static void main(String[] args) throws Exception
    {
        Context cx = Context.enter();
        try {
            Scriptable scope = cx.initStandardObjects();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DynamicScopes.java,hasFeature,"        protected boolean hasFeature(Context cx, int featureIndex)
        {
            if (featureIndex == Context.FEATURE_DYNAMIC_SCOPE) {
                return useDynamicScope;
            }
            return super.hasFeature(cx, featureIndex);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DynamicScopes.java,main,"    public static void main(String[] args)
    {
        Context cx = Context.enter();
        try {
            // Precompile source only once",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DynamicScopes.java,runScripts,"    static void runScripts(Context cx, Script script)
    {
        // Initialize the standard objects (Object, Function, etc.)
        // This must be done before scripts can be executed. The call
        // returns a new scope that we will share.
        ScriptableObject sharedScope = cx.initStandardObjects(null, true);

        // Now we can execute the precompiled script against the scope
        // to define x variable and f function in the shared scope.
        script.exec(cx, sharedScope);

        // Now we spawn some threads that execute a script that calls the
        // function 'f'. The scope chain looks like this:
        // <pre>
        //            ------------------                ------------------
        //           | per-thread scope | -prototype-> |   shared scope   |
        //            ------------------                ------------------
        //                    ^
        //                    |
        //               parentScope
        //                    |
        //            ------------------
        //           | f's activation   |
        //            ------------------
        // </pre>
        // Both the shared scope and the per-thread scope have variables 'x'
        // defined in them. If 'f' is compiled with dynamic scope enabled,
        // the 'x' from the per-thread scope will be used. Otherwise, the 'x'
        // from the shared scope will be used. The 'x' defined in 'g' (which
        // calls 'f') should not be seen by 'f'.
        final int threadCount = 3;
        Thread[] t = new Thread[threadCount];
        for (int i=0; i < threadCount; i++) {
            String source2 = """"
                +""function g() { var x = 'local'; return f(); }\n""
                +""java.lang.System.out.println(g());\n""
                +""function g2() { var x = 'local'; return closure(); }\n""
                +""java.lang.System.out.println(g2());\n""
                +"""";
            t[i] = new Thread(new PerThread(sharedScope, source2,
                                            ""thread"" + i));
        }
        for (int i=0; i < threadCount; i++)
            t[i].start();
        // Don't return in this thread until all the spawned threads have
        // completed.
        for (int i=0; i < threadCount; i++) {
            try {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DynamicScopes.java,run,"        public void run() {
            // We need a new Context for this thread.
            Context cx = Context.enter();
            try {
                // We can share the scope.",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsConstructor,"    public static Scriptable jsConstructor(Context cx, Object[] args,
                                           Function ctorObj,
                                           boolean inNewExpr)
    {
        File result = new File();
        if (args.length == 0 || args[0] == Context.getUndefinedValue()) {
            result.name = """";
            result.file = null;
        } else {
            result.name = Context.toString(args[0]);
            result.file = new java.io.File(result.name);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,getClassName,"    public String getClassName() {
        return ""File"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsGet_name,"    public String jsGet_name() {
        return name;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsFunction_readLines,"    public Object jsFunction_readLines()
        throws IOException
    {
        Vector v = new Vector();
        String s;
        while ((s = jsFunction_readLine()) != null) {
            v.addElement(s);
        }
        Object[] lines = new Object[v.size()];
        v.copyInto(lines);

        Scriptable scope = ScriptableObject.getTopLevelScope(this);
        Context cx = Context.getCurrentContext();
        return cx.newObject(scope, ""Array"", lines);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsFunction_readLine,"    public String jsFunction_readLine() throws IOException {
        return getReader().readLine();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsFunction_readChar,"    public String jsFunction_readChar() throws IOException {
        int i = getReader().read();
        if (i == -1)
            return null;
        char[] charArray = { (char) i };
        return new String(charArray);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsFunction_write,"    public static void jsFunction_write(Context cx, Scriptable thisObj,
                                        Object[] args, Function funObj)
        throws IOException
    {
        write0(thisObj, args, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsFunction_writeLine,"    public static void jsFunction_writeLine(Context cx, Scriptable thisObj,
                                            Object[] args, Function funObj)
        throws IOException
    {
        write0(thisObj, args, true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsGet_lineNumber,"    public int jsGet_lineNumber()
        throws FileNotFoundException
    {
        return getReader().getLineNumber();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsFunction_close,"    public void jsFunction_close() throws IOException {
        if (reader != null) {
            reader.close();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,finalize,"    protected void finalize() {
        try {
            jsFunction_close();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsFunction_getReader,"    public Object jsFunction_getReader() {
        if (reader == null)
            return null;
        // Here we use toObject() to ""wrap"" the BufferedReader object
        // in a Scriptable object so that it can be manipulated by
        // JavaScript.
        Scriptable parent = ScriptableObject.getTopLevelScope(this);
        return Context.javaToJS(reader, parent);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,jsFunction_getWriter,"    public Object jsFunction_getWriter() {
        if (writer == null)
            return null;
        Scriptable parent = ScriptableObject.getTopLevelScope(this);
        return Context.javaToJS(writer, parent);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,getReader,"    private LineNumberReader getReader() throws FileNotFoundException {
        if (writer != null) {
            throw Context.reportRuntimeError(""already writing file \""""
                                             + name
                                             + ""\"""");
        }
        if (reader == null)
            reader = new LineNumberReader(file == null
                                        ? new InputStreamReader(System.in)
                                        : new FileReader(file));
        return reader;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,write0,"    private static void write0(Scriptable thisObj, Object[] args, boolean eol)
        throws IOException
    {
        File thisFile = checkInstance(thisObj);
        if (thisFile.reader != null) {
            throw Context.reportRuntimeError(""already writing file \""""
                                             + thisFile.name
                                             + ""\"""");
        }
        if (thisFile.writer == null)
            thisFile.writer = new BufferedWriter(
                thisFile.file == null ? new OutputStreamWriter(System.out)
                                      : new FileWriter(thisFile.file));
        for (int i=0; i < args.length; i++) {
            String s = Context.toString(args[i]);
            thisFile.writer.write(s, 0, s.length());
        }
        if (eol)
            thisFile.writer.newLine();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,File.java,checkInstance,"    private static File checkInstance(Scriptable obj) {
        if (obj == null || !(obj instanceof File)) {
            throw Context.reportRuntimeError(""called on incompatible object"");
        }
        return (File) obj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Foo.java,getClassName,"    public String getClassName() {
        return ""Foo"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Foo.java,jsFunction_resetCounter,"    public void jsFunction_resetCounter() {
        counter = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Foo.java,jsGet_counter,"    public int jsGet_counter() {
        return counter++;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Foo.java,jsFunction_varargs,"    public static Object jsFunction_varargs(Context cx, Scriptable thisObj,
                                            Object[] args, Function funObj)
    {
        StringBuffer buf = new StringBuffer();
        buf.append(""this = "");
        buf.append(Context.toString(thisObj));
        buf.append(""; args = ["");
        for (int i=0; i < args.length; i++) {
            buf.append(Context.toString(args[i]));
            if (i+1 != args.length)
                buf.append("", "");
        }
        buf.append(""]"");
        return buf.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,getClassName,"    public String getClassName() {
        return ""Matrix"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,has,"    public boolean has(String name, Scriptable start) {
        return name.equals(""dim"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,has,"    public boolean has(int index, Scriptable start) {
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,get,"    public Object get(String name, Scriptable start) {
        if (name.equals(""dim""))
            return new Integer(dim);

        return NOT_FOUND;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,get,"    public Object get(int index, Scriptable start) {
        if (index >= v.size())
            v.setSize(index+1);
        Object result = v.elementAt(index);
        if (result != null)
            return result;
        if (dim > 2) {
            Matrix m = new Matrix(dim-1);
            m.setParentScope(getParentScope());
            m.setPrototype(getPrototype());
            result = m;
        } else {
            Context cx = Context.getCurrentContext();
            Scriptable scope = ScriptableObject.getTopLevelScope(start);
            result = cx.newArray(scope, 0);
        }
        v.setElementAt(result, index);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,getPrototype,"    public Scriptable getPrototype() {
        return prototype;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,setPrototype,"    public void setPrototype(Scriptable prototype) {
        this.prototype = prototype;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,getParentScope,"    public Scriptable getParentScope() {
        return parent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,setParentScope,"    public void setParentScope(Scriptable parent) {
        this.parent = parent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,getIds,"    public Object[] getIds() {
        return new Object[0];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,getDefaultValue,"    public Object getDefaultValue(Class typeHint) {
        return ""[object Matrix]"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Matrix.java,hasInstance,"    public boolean hasInstance(Scriptable value) {
        Scriptable proto = value.getPrototype();
        while (proto != null) {
            if (proto.equals(this))
                return true;
            proto = proto.getPrototype();
        }

        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PrimitiveWrapFactory.java,wrap,"  public Object wrap(Context cx, Scriptable scope, Object obj,
                     Class staticType)
  {
    if (obj instanceof String || obj instanceof Number ||
        obj instanceof Boolean)
    {
      return obj;
    } else if (obj instanceof Character) {
      char[] a = { ((Character)obj).charValue() };
      return new String(a);
    }
    return super.wrap(cx, scope, obj, staticType);
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RunScript.java,main,"    public static void main(String args[])
    {
        // Creates and enters a Context. The Context stores information
        // about the execution environment of a script.
        Context cx = Context.enter();
        try {
            // Initialize the standard objects (Object, Function, etc.)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RunScript2.java,main,"    public static void main(String args[])
    {
        Context cx = Context.enter();
        try {
            Scriptable scope = cx.initStandardObjects();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RunScript3.java,main,"    public static void main(String args[])
    {
        Context cx = Context.enter();
        try {
            Scriptable scope = cx.initStandardObjects();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RunScript4.java,main,"    public static void main(String args[])
        throws Exception
    {
        Context cx = Context.enter();
        try {
            Scriptable scope = cx.initStandardObjects();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,getClassName,"    public String getClassName()
    {
        return ""global"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,main,"    public static void main(String args[]) {
        // Associate a new Context with this thread
        Context cx = Context.enter();
        try {
            // Initialize the standard objects (Object, Function, etc.)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,processOptions,"    public static String[] processOptions(Context cx, String args[]) {
        for (int i=0; i < args.length; i++) {
            String arg = args[i];
            if (!arg.startsWith(""-"")) {
                String[] result = new String[args.length - i];
                for (int j=i; j < args.length; j++)
                    result[j-i] = args[j];
                return result;
            }
            if (arg.equals(""-version"")) {
                if (++i == args.length)
                    usage(arg);
                double d = Context.toNumber(args[i]);
                if (d != d)
                    usage(arg);
                cx.setLanguageVersion((int) d);
                continue;
            }
            usage(arg);
        }
        return new String[0];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,usage,"    private static void usage(String s) {
        p(""Didn't understand \"""" + s + ""\""."");
        p(""Valid arguments are:"");
        p(""-version 100|110|120|130|140|150|160|170"");
        System.exit(1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,help,"    public void help() {
        p("""");
        p(""Command                Description"");
        p(""=======                ==========="");
        p(""help()                 Display usage and help messages. "");
        p(""defineClass(className) Define an extension using the Java class"");
        p(""                       named with the string argument. "");
        p(""                       Uses ScriptableObject.defineClass(). "");
        p(""load(['foo.js', ...])  Load JavaScript source files named by "");
        p(""                       string arguments. "");
        p(""loadClass(className)   Load a class named by a string argument."");
        p(""                       The class must be a script compiled to a"");
        p(""                       class file. "");
        p(""print([expr ...])      Evaluate and print expressions. "");
        p(""quit()                 Quit the shell. "");
        p(""version([number])      Get or set the JavaScript version number."");
        p("""");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,print,"    public static void print(Context cx, Scriptable thisObj,
                             Object[] args, Function funObj)
    {
        for (int i=0; i < args.length; i++) {
            if (i > 0)
                System.out.print("" "");

            // Convert the arbitrary JavaScript value into a string form.
            String s = Context.toString(args[i]);

            System.out.print(s);
        }
        System.out.println();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,quit,"    public void quit()
    {
        quitting = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,version,"    public static double version(Context cx, Scriptable thisObj,
                                 Object[] args, Function funObj)
    {
        double result = cx.getLanguageVersion();
        if (args.length > 0) {
            double d = Context.toNumber(args[0]);
            cx.setLanguageVersion((int) d);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,load,"    public static void load(Context cx, Scriptable thisObj,
                            Object[] args, Function funObj)
    {
        Shell shell = (Shell)getTopLevelScope(thisObj);
        for (int i = 0; i < args.length; i++) {
            shell.processSource(cx, Context.toString(args[i]));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,processSource,"    private void processSource(Context cx, String filename)
    {
        if (filename == null) {
            BufferedReader in = new BufferedReader",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Shell.java,p,"    private static void p(String s) {
        System.out.println(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getClassName,"    public final String getClassName()
    {
        return generatedClassName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addInterface,"    public void addInterface(String interfaceName) {
        short interfaceIndex = itsConstantPool.addClass(interfaceName);
        itsInterfaces.add(new Short(interfaceIndex));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,setFlags,"    public void setFlags(short flags) {
        itsFlags = flags;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getSlashedForm,"    static String getSlashedForm(String name)
    {
        return name.replace('.', '/');
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,classNameToSignature,"    public static String classNameToSignature(String name)
    {
        int nameLength = name.length();
        int colonPos = 1 + nameLength;
        char[] buf = new char[colonPos + 1];
        buf[0] = 'L';
        buf[colonPos] = ';';
        name.getChars(0, nameLength, buf, 1);
        for (int i = 1; i != colonPos; ++i) {
            if (buf[i] == '.') {
                buf[i] = '/';
            }
        }
        return new String(buf, 0, colonPos + 1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addField,"    public void addField(String fieldName, String type, short flags) {
        short fieldNameIndex = itsConstantPool.addUtf8(fieldName);
        short typeIndex = itsConstantPool.addUtf8(type);
        itsFields.add(new ClassFileField(fieldNameIndex, typeIndex, flags));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addField,"    public void addField(String fieldName, String type, short flags,
                         int value)
    {
        short fieldNameIndex = itsConstantPool.addUtf8(fieldName);
        short typeIndex = itsConstantPool.addUtf8(type);
        ClassFileField field = new ClassFileField(fieldNameIndex, typeIndex,
                                                  flags);
        field.setAttributes(itsConstantPool.addUtf8(""ConstantValue""),
                            (short)0,
                            (short)0,
                            itsConstantPool.addConstant(value));
        itsFields.add(field);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addField,"    public void addField(String fieldName, String type, short flags,
                         long value)
    {
        short fieldNameIndex = itsConstantPool.addUtf8(fieldName);
        short typeIndex = itsConstantPool.addUtf8(type);
        ClassFileField field = new ClassFileField(fieldNameIndex, typeIndex,
                                                  flags);
        field.setAttributes(itsConstantPool.addUtf8(""ConstantValue""),
                            (short)0,
                            (short)2,
                            itsConstantPool.addConstant(value));
        itsFields.add(field);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addField,"    public void addField(String fieldName, String type, short flags,
                         double value)
    {
        short fieldNameIndex = itsConstantPool.addUtf8(fieldName);
        short typeIndex = itsConstantPool.addUtf8(type);
        ClassFileField field = new ClassFileField(fieldNameIndex, typeIndex,
                                                  flags);
        field.setAttributes(itsConstantPool.addUtf8(""ConstantValue""),
                            (short)0,
                            (short)2,
                            itsConstantPool.addConstant(value));
        itsFields.add(field);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addVariableDescriptor,"    public void addVariableDescriptor(String name, String type, int startPC, int register)
    {
        int nameIndex = itsConstantPool.addUtf8(name);
        int descriptorIndex = itsConstantPool.addUtf8(type);
        int [] chunk = { nameIndex, descriptorIndex, startPC, register };
        if (itsVarDescriptors == null) {
            itsVarDescriptors = new ObjArray();
        }
        itsVarDescriptors.add(chunk);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,startMethod,"    public void startMethod(String methodName, String type, short flags) {
        short methodNameIndex = itsConstantPool.addUtf8(methodName);
        short typeIndex = itsConstantPool.addUtf8(type);
        itsCurrentMethod = new ClassFileMethod(methodNameIndex, typeIndex,
                                               flags);
        itsMethods.add(itsCurrentMethod);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,stopMethod,"    public void stopMethod(short maxLocals) {
        if (itsCurrentMethod == null)
            throw new IllegalStateException(""No method to stop"");

        fixLabelGotos();

        itsMaxLocals = maxLocals;

        int lineNumberTableLength = 0;
        if (itsLineNumberTable != null) {
            // 6 bytes for the attribute header
            // 2 bytes for the line number count
            // 4 bytes for each entry
            lineNumberTableLength = 6 + 2 + (itsLineNumberTableTop * 4);
        }

        int variableTableLength = 0;
        if (itsVarDescriptors != null) {
            // 6 bytes for the attribute header
            // 2 bytes for the variable count
            // 10 bytes for each entry
            variableTableLength = 6 + 2 + (itsVarDescriptors.size() * 10);
        }

        int attrLength = 2 +                    // attribute_name_index
                         4 +                    // attribute_length
                         2 +                    // max_stack
                         2 +                    // max_locals
                         4 +                    // code_length
                         itsCodeBufferTop +
                         2 +                    // exception_table_length
                         (itsExceptionTableTop * 8) +
                         2 +                    // attributes_count
                         lineNumberTableLength +
                         variableTableLength;

        if (attrLength > 65536) {
            // See http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html,
            // section 4.10, ""The amount of code per non-native, non-abstract 
            // method is limited to 65536 bytes...
            throw new ClassFileFormatException(
                ""generated bytecode for method exceeds 64K limit."");
        }
        byte[] codeAttribute = new byte[attrLength];
        int index = 0;
        int codeAttrIndex = itsConstantPool.addUtf8(""Code"");
        index = putInt16(codeAttrIndex, codeAttribute, index);
        attrLength -= 6;                 // discount the attribute header
        index = putInt32(attrLength, codeAttribute, index);
        index = putInt16(itsMaxStack, codeAttribute, index);
        index = putInt16(itsMaxLocals, codeAttribute, index);
        index = putInt32(itsCodeBufferTop, codeAttribute, index);
        System.arraycopy(itsCodeBuffer, 0, codeAttribute, index,
                         itsCodeBufferTop);
        index += itsCodeBufferTop;

        if (itsExceptionTableTop > 0) {
            index = putInt16(itsExceptionTableTop, codeAttribute, index);
            for (int i = 0; i < itsExceptionTableTop; i++) {
                ExceptionTableEntry ete = itsExceptionTable[i];
                short startPC = (short)getLabelPC(ete.itsStartLabel);
                short endPC = (short)getLabelPC(ete.itsEndLabel);
                short handlerPC = (short)getLabelPC(ete.itsHandlerLabel);
                short catchType = ete.itsCatchType;
                if (startPC == -1)
                    throw new IllegalStateException(""start label not defined"");
                if (endPC == -1)
                    throw new IllegalStateException(""end label not defined"");
                if (handlerPC == -1)
                    throw new IllegalStateException(
                        ""handler label not defined"");

                index = putInt16(startPC, codeAttribute, index);
                index = putInt16(endPC, codeAttribute, index);
                index = putInt16(handlerPC, codeAttribute, index);
                index = putInt16(catchType, codeAttribute, index);
            }
        }
        else {
            // write 0 as exception table length
            index = putInt16(0, codeAttribute, index);
        }

        int attributeCount = 0;
        if (itsLineNumberTable != null)
            attributeCount++;
        if (itsVarDescriptors != null)
            attributeCount++;
        index = putInt16(attributeCount, codeAttribute, index);

        if (itsLineNumberTable != null) {
            int lineNumberTableAttrIndex
                    = itsConstantPool.addUtf8(""LineNumberTable"");
            index = putInt16(lineNumberTableAttrIndex, codeAttribute, index);
            int tableAttrLength = 2 + (itsLineNumberTableTop * 4);
            index = putInt32(tableAttrLength, codeAttribute, index);
            index = putInt16(itsLineNumberTableTop, codeAttribute, index);
            for (int i = 0; i < itsLineNumberTableTop; i++) {
                index = putInt32(itsLineNumberTable[i], codeAttribute, index);
            }
        }

        if (itsVarDescriptors != null) {
            int variableTableAttrIndex
                    = itsConstantPool.addUtf8(""LocalVariableTable"");
            index = putInt16(variableTableAttrIndex, codeAttribute, index);
            int varCount = itsVarDescriptors.size();
            int tableAttrLength = 2 + (varCount * 10);
            index = putInt32(tableAttrLength, codeAttribute, index);
            index = putInt16(varCount, codeAttribute, index);
            for (int i = 0; i < varCount; i++) {
                int[] chunk = (int[])itsVarDescriptors.get(i);
                int nameIndex       = chunk[0];
                int descriptorIndex = chunk[1];
                int startPC         = chunk[2];
                int register        = chunk[3];
                int length = itsCodeBufferTop - startPC;

                index = putInt16(startPC, codeAttribute, index);
                index = putInt16(length, codeAttribute, index);
                index = putInt16(nameIndex, codeAttribute, index);
                index = putInt16(descriptorIndex, codeAttribute, index);
                index = putInt16(register, codeAttribute, index);
            }
        }

        itsCurrentMethod.setCodeAttribute(codeAttribute);

        itsExceptionTable = null;
        itsExceptionTableTop = 0;
        itsLineNumberTableTop = 0;
        itsCodeBufferTop = 0;
        itsCurrentMethod = null;
        itsMaxStack = 0;
        itsStackTop = 0;
        itsLabelTableTop = 0;
        itsFixupTableTop = 0;
        itsVarDescriptors = null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,add,"    public void add(int theOpCode) {
        if (opcodeCount(theOpCode) != 0)
            throw new IllegalArgumentException(""Unexpected operands"");
        int newStack = itsStackTop + stackChange(theOpCode);
        if (newStack < 0 || Short.MAX_VALUE < newStack) badStack(newStack);
        if (DEBUGCODE)
            System.out.println(""Add "" + bytecodeStr(theOpCode));
        addToCodeBuffer(theOpCode);
        itsStackTop = (short)newStack;
        if (newStack > itsMaxStack) itsMaxStack = (short)newStack;
        if (DEBUGSTACK) {
            System.out.println(""After ""+bytecodeStr(theOpCode)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,add,"    public void add(int theOpCode, int theOperand) {
        if (DEBUGCODE) {
            System.out.println(""Add ""+bytecodeStr(theOpCode)
                               +"", ""+Integer.toHexString(theOperand));
        }
        int newStack = itsStackTop + stackChange(theOpCode);
        if (newStack < 0 || Short.MAX_VALUE < newStack) badStack(newStack);

        switch (theOpCode) {
            case ByteCode.GOTO :
                // fallthru...
            case ByteCode.IFEQ :
            case ByteCode.IFNE :
            case ByteCode.IFLT :
            case ByteCode.IFGE :
            case ByteCode.IFGT :
            case ByteCode.IFLE :
            case ByteCode.IF_ICMPEQ :
            case ByteCode.IF_ICMPNE :
            case ByteCode.IF_ICMPLT :
            case ByteCode.IF_ICMPGE :
            case ByteCode.IF_ICMPGT :
            case ByteCode.IF_ICMPLE :
            case ByteCode.IF_ACMPEQ :
            case ByteCode.IF_ACMPNE :
            case ByteCode.JSR :
            case ByteCode.IFNULL :
            case ByteCode.IFNONNULL : {
                    if ((theOperand & 0x80000000) != 0x80000000) {
                        if ((theOperand < 0) || (theOperand > 65535))
                            throw new IllegalArgumentException(
                                ""Bad label for branch"");
                    }
                    int branchPC = itsCodeBufferTop;
                    addToCodeBuffer(theOpCode);
                    if ((theOperand & 0x80000000) != 0x80000000) {
                            // hard displacement
                        addToCodeInt16(theOperand);
                    }
                    else {  // a label
                        int targetPC = getLabelPC(theOperand);
                        if (DEBUGLABELS) {
                            int theLabel = theOperand & 0x7FFFFFFF;
                            System.out.println(""Fixing branch to "" +
                                               theLabel + "" at "" + targetPC +
                                               "" from "" + branchPC);
                        }
                        if (targetPC != -1) {
                            int offset = targetPC - branchPC;
                            addToCodeInt16(offset);
                        }
                        else {
                            addLabelFixup(theOperand, branchPC + 1);
                            addToCodeInt16(0);
                        }
                    }
                }
                break;

            case ByteCode.BIPUSH :
                if ((byte)theOperand != theOperand)
                    throw new IllegalArgumentException(""out of range byte"");
                addToCodeBuffer(theOpCode);
                addToCodeBuffer((byte)theOperand);
                break;

            case ByteCode.SIPUSH :
                if ((short)theOperand != theOperand)
                    throw new IllegalArgumentException(""out of range short"");
                addToCodeBuffer(theOpCode);
                   addToCodeInt16(theOperand);
                break;

            case ByteCode.NEWARRAY :
                if (!(0 <= theOperand && theOperand < 256))
                    throw new IllegalArgumentException(""out of range index"");
                addToCodeBuffer(theOpCode);
                addToCodeBuffer(theOperand);
                break;

            case ByteCode.GETFIELD :
            case ByteCode.PUTFIELD :
                if (!(0 <= theOperand && theOperand < 65536))
                    throw new IllegalArgumentException(""out of range field"");
                addToCodeBuffer(theOpCode);
                addToCodeInt16(theOperand);
                break;

            case ByteCode.LDC :
            case ByteCode.LDC_W :
            case ByteCode.LDC2_W :
                if (!(0 <= theOperand && theOperand < 65536))
                    throw new IllegalArgumentException(""out of range index"");
                if (theOperand >= 256
                    || theOpCode == ByteCode.LDC_W
                    || theOpCode == ByteCode.LDC2_W)
                {
                    if (theOpCode == ByteCode.LDC) {
                        addToCodeBuffer(ByteCode.LDC_W);
                    } else {
                        addToCodeBuffer(theOpCode);
                    }
                    addToCodeInt16(theOperand);
                } else {
                    addToCodeBuffer(theOpCode);
                    addToCodeBuffer(theOperand);
                }
                break;

            case ByteCode.RET :
            case ByteCode.ILOAD :
            case ByteCode.LLOAD :
            case ByteCode.FLOAD :
            case ByteCode.DLOAD :
            case ByteCode.ALOAD :
            case ByteCode.ISTORE :
            case ByteCode.LSTORE :
            case ByteCode.FSTORE :
            case ByteCode.DSTORE :
            case ByteCode.ASTORE :
                if (!(0 <= theOperand && theOperand < 65536))
                    throw new ClassFileFormatException(""out of range variable"");
                if (theOperand >= 256) {
                    addToCodeBuffer(ByteCode.WIDE);
                    addToCodeBuffer(theOpCode);
                    addToCodeInt16(theOperand);
                }
                else {
                    addToCodeBuffer(theOpCode);
                    addToCodeBuffer(theOperand);
                }
                break;

            default :
                throw new IllegalArgumentException(
                    ""Unexpected opcode for 1 operand"");
        }

        itsStackTop = (short)newStack;
        if (newStack > itsMaxStack) itsMaxStack = (short)newStack;
        if (DEBUGSTACK) {
            System.out.println(""After ""+bytecodeStr(theOpCode)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLoadConstant,"    public void addLoadConstant(int k) {
        switch (k) {
            case 0: add(ByteCode.ICONST_0); break;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLoadConstant,"    public void addLoadConstant(long k) {
        add(ByteCode.LDC2_W, itsConstantPool.addConstant(k));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLoadConstant,"    public void addLoadConstant(float k) {
        add(ByteCode.LDC, itsConstantPool.addConstant(k));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLoadConstant,"    public void addLoadConstant(double k) {
        add(ByteCode.LDC2_W, itsConstantPool.addConstant(k));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLoadConstant,"    public void addLoadConstant(String k) {
        add(ByteCode.LDC, itsConstantPool.addConstant(k));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,add,"    public void add(int theOpCode, int theOperand1, int theOperand2) {
        if (DEBUGCODE) {
            System.out.println(""Add ""+bytecodeStr(theOpCode)
                               +"", ""+Integer.toHexString(theOperand1)
                               +"", ""+Integer.toHexString(theOperand2));
        }
        int newStack = itsStackTop + stackChange(theOpCode);
        if (newStack < 0 || Short.MAX_VALUE < newStack) badStack(newStack);

        if (theOpCode == ByteCode.IINC) {
            if (!(0 <= theOperand1 && theOperand1 < 65536))
                throw new ClassFileFormatException(""out of range variable"");
            if (!(0 <= theOperand2 && theOperand2 < 65536))
                throw new ClassFileFormatException(""out of range increment"");

            if (theOperand1 > 255 || theOperand2 < -128 || theOperand2 > 127) {
                addToCodeBuffer(ByteCode.WIDE);
                addToCodeBuffer(ByteCode.IINC);
                addToCodeInt16(theOperand1);
                addToCodeInt16(theOperand2);
            }
            else {
                addToCodeBuffer(ByteCode.WIDE);
                addToCodeBuffer(ByteCode.IINC);
                addToCodeBuffer(theOperand1);
                addToCodeBuffer(theOperand2);
            }
        }
        else if (theOpCode == ByteCode.MULTIANEWARRAY) {
            if (!(0 <= theOperand1 && theOperand1 < 65536))
                throw new IllegalArgumentException(""out of range index"");
            if (!(0 <= theOperand2 && theOperand2 < 256))
                throw new IllegalArgumentException(""out of range dimensions"");

            addToCodeBuffer(ByteCode.MULTIANEWARRAY);
            addToCodeInt16(theOperand1);
            addToCodeBuffer(theOperand2);
        }
        else {
            throw new IllegalArgumentException(
                ""Unexpected opcode for 2 operands"");
        }
        itsStackTop = (short)newStack;
        if (newStack > itsMaxStack) itsMaxStack = (short)newStack;
        if (DEBUGSTACK) {
            System.out.println(""After ""+bytecodeStr(theOpCode)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,add,"    public void add(int theOpCode, String className) {
        if (DEBUGCODE) {
            System.out.println(""Add ""+bytecodeStr(theOpCode)
                               +"", ""+className);
        }
        int newStack = itsStackTop + stackChange(theOpCode);
        if (newStack < 0 || Short.MAX_VALUE < newStack) badStack(newStack);
        switch (theOpCode) {
            case ByteCode.NEW :
            case ByteCode.ANEWARRAY :
            case ByteCode.CHECKCAST :
            case ByteCode.INSTANCEOF : {
                short classIndex = itsConstantPool.addClass(className);
                addToCodeBuffer(theOpCode);
                addToCodeInt16(classIndex);
            }
            break;

            default :
                throw new IllegalArgumentException(
                    ""bad opcode for class reference"");
        }
        itsStackTop = (short)newStack;
        if (newStack > itsMaxStack) itsMaxStack = (short)newStack;
        if (DEBUGSTACK) {
            System.out.println(""After ""+bytecodeStr(theOpCode)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,add,"    public void add(int theOpCode, String className, String fieldName,
                    String fieldType)
    {
        if (DEBUGCODE) {
            System.out.println(""Add ""+bytecodeStr(theOpCode)
                               +"", ""+className+"", ""+fieldName+"", ""+fieldType);
        }
        int newStack = itsStackTop + stackChange(theOpCode);
        char fieldTypeChar = fieldType.charAt(0);
        int fieldSize = (fieldTypeChar == 'J' || fieldTypeChar == 'D')
                        ? 2 : 1;
        switch (theOpCode) {
            case ByteCode.GETFIELD :
            case ByteCode.GETSTATIC :
                newStack += fieldSize;
                break;
            case ByteCode.PUTSTATIC :
            case ByteCode.PUTFIELD :
                newStack -= fieldSize;
                break;
            default :
                throw new IllegalArgumentException(
                    ""bad opcode for field reference"");
        }
        if (newStack < 0 || Short.MAX_VALUE < newStack) badStack(newStack);
        short fieldRefIndex = itsConstantPool.addFieldRef(className,
                                             fieldName, fieldType);
        addToCodeBuffer(theOpCode);
        addToCodeInt16(fieldRefIndex);

        itsStackTop = (short)newStack;
        if (newStack > itsMaxStack) itsMaxStack = (short)newStack;
        if (DEBUGSTACK) {
            System.out.println(""After ""+bytecodeStr(theOpCode)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addInvoke,"    public void addInvoke(int theOpCode, String className, String methodName,
                          String methodType)
    {
        if (DEBUGCODE) {
            System.out.println(""Add ""+bytecodeStr(theOpCode)
                               +"", ""+className+"", ""+methodName+"", ""
                               +methodType);
        }
        int parameterInfo = sizeOfParameters(methodType);
        int parameterCount = parameterInfo >>> 16;
        int stackDiff = (short)parameterInfo;

        int newStack = itsStackTop + stackDiff;
        newStack += stackChange(theOpCode);     // adjusts for 'this'
        if (newStack < 0 || Short.MAX_VALUE < newStack) badStack(newStack);

        switch (theOpCode) {
            case ByteCode.INVOKEVIRTUAL :
            case ByteCode.INVOKESPECIAL :
            case ByteCode.INVOKESTATIC :
            case ByteCode.INVOKEINTERFACE : {
                    addToCodeBuffer(theOpCode);
                    if (theOpCode == ByteCode.INVOKEINTERFACE) {
                        short ifMethodRefIndex
                                    = itsConstantPool.addInterfaceMethodRef(
                                               className, methodName,
                                               methodType);
                        addToCodeInt16(ifMethodRefIndex);
                        addToCodeBuffer(parameterCount + 1);
                        addToCodeBuffer(0);
                    }
                    else {
                        short methodRefIndex = itsConstantPool.addMethodRef(
                                               className, methodName,
                                               methodType);
                        addToCodeInt16(methodRefIndex);
                    }
                }
                break;

            default :
                throw new IllegalArgumentException(
                    ""bad opcode for method reference"");
        }
        itsStackTop = (short)newStack;
        if (newStack > itsMaxStack) itsMaxStack = (short)newStack;
        if (DEBUGSTACK) {
            System.out.println(""After ""+bytecodeStr(theOpCode)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addPush,"    public void addPush(int k)
    {
        if ((byte)k == k) {
            if (k == -1) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addPush,"    public void addPush(boolean k)
    {
        add(k ? ByteCode.ICONST_1 : ByteCode.ICONST_0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addPush,"    public void addPush(long k)
    {
        int ik = (int)k;
        if (ik == k) {
            addPush(ik);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addPush,"    public void addPush(double k)
    {
        if (k == 0.0) {
            // zero",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addPush,"    public void addPush(String k) {
        int length = k.length();
        int limit = itsConstantPool.getUtfEncodingLimit(k, 0, length);
        if (limit == length) {
            addLoadConstant(k);
            return;
        }
        // Split string into picies fitting the UTF limit and generate code for
        // StringBuffer sb = new StringBuffer(length);
        // sb.append(loadConstant(piece_1));
        // ...
        // sb.append(loadConstant(piece_N));
        // sb.toString();
        final String SB = ""java/lang/StringBuffer"";
        add(ByteCode.NEW, SB);
        add(ByteCode.DUP);
        addPush(length);
        addInvoke(ByteCode.INVOKESPECIAL, SB, ""<init>"", ""(I)V"");
        int cursor = 0;
        for (;;) {
            add(ByteCode.DUP);
            String s = k.substring(cursor, limit);
            addLoadConstant(s);
            addInvoke(ByteCode.INVOKEVIRTUAL, SB, ""append"",
                      ""(Ljava/lang/String;)Ljava/lang/StringBuffer;"");
            add(ByteCode.POP);
            if (limit == length) {
                break;
            }
            cursor = limit;
            limit = itsConstantPool.getUtfEncodingLimit(k, limit, length);
        }
        addInvoke(ByteCode.INVOKEVIRTUAL, SB, ""toString"",
                  ""()Ljava/lang/String;"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,isUnderStringSizeLimit,"    public boolean isUnderStringSizeLimit(String k)
    {
        return itsConstantPool.isUnderUtfEncodingLimit(k);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addIStore,"    public void addIStore(int local)
    {
        xop(ByteCode.ISTORE_0, ByteCode.ISTORE, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLStore,"    public void addLStore(int local)
    {
        xop(ByteCode.LSTORE_0, ByteCode.LSTORE, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addFStore,"    public void addFStore(int local)
    {
        xop(ByteCode.FSTORE_0, ByteCode.FSTORE, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addDStore,"    public void addDStore(int local)
    {
        xop(ByteCode.DSTORE_0, ByteCode.DSTORE, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addAStore,"    public void addAStore(int local)
    {
        xop(ByteCode.ASTORE_0, ByteCode.ASTORE, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addILoad,"    public void addILoad(int local)
    {
        xop(ByteCode.ILOAD_0, ByteCode.ILOAD, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLLoad,"    public void addLLoad(int local)
    {
        xop(ByteCode.LLOAD_0, ByteCode.LLOAD, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addFLoad,"    public void addFLoad(int local)
    {
        xop(ByteCode.FLOAD_0, ByteCode.FLOAD, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addDLoad,"    public void addDLoad(int local)
    {
        xop(ByteCode.DLOAD_0, ByteCode.DLOAD, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addALoad,"    public void addALoad(int local)
    {
        xop(ByteCode.ALOAD_0, ByteCode.ALOAD, local);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLoadThis,"    public void addLoadThis()
    {
        add(ByteCode.ALOAD_0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,xop,"    private void xop(int shortOp, int op, int local)
    {
        switch (local) {
          case 0:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addTableSwitch,"    public int addTableSwitch(int low, int high)
    {
        if (DEBUGCODE) {
            System.out.println(""Add ""+bytecodeStr(ByteCode.TABLESWITCH)
                               +"" ""+low+"" ""+high);
        }
        if (low > high)
            throw new ClassFileFormatException(""Bad bounds: ""+low+' '+ high);

        int newStack = itsStackTop + stackChange(ByteCode.TABLESWITCH);
        if (newStack < 0 || Short.MAX_VALUE < newStack) badStack(newStack);

        int entryCount = high - low + 1;
        int padSize = 3 & ~itsCodeBufferTop; // == 3 - itsCodeBufferTop % 4

        int N = addReservedCodeSpace(1 + padSize + 4 * (1 + 2 + entryCount));
        int switchStart = N;
        itsCodeBuffer[N++] = (byte)ByteCode.TABLESWITCH;
        while (padSize != 0) {
            itsCodeBuffer[N++] = 0;
            --padSize;
        }
        N += 4; // skip default offset
        N = putInt32(low, itsCodeBuffer, N);
        putInt32(high, itsCodeBuffer, N);

        itsStackTop = (short)newStack;
        if (newStack > itsMaxStack) itsMaxStack = (short)newStack;
        if (DEBUGSTACK) {
            System.out.println(""After ""+bytecodeStr(ByteCode.TABLESWITCH)
                               +"" stack = ""+itsStackTop);
        }

        return switchStart;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,markTableSwitchDefault,"    public final void markTableSwitchDefault(int switchStart)
    {
        setTableSwitchJump(switchStart, -1, itsCodeBufferTop);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,markTableSwitchCase,"    public final void markTableSwitchCase(int switchStart, int caseIndex)
    {
        setTableSwitchJump(switchStart, caseIndex, itsCodeBufferTop);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,markTableSwitchCase,"    public final void markTableSwitchCase(int switchStart, int caseIndex,
                                          int stackTop)
    {
        if (!(0 <= stackTop && stackTop <= itsMaxStack))
            throw new IllegalArgumentException(""Bad stack index: ""+stackTop);
        itsStackTop = (short)stackTop;
        setTableSwitchJump(switchStart, caseIndex, itsCodeBufferTop);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,setTableSwitchJump,"    public void setTableSwitchJump(int switchStart, int caseIndex,
                                   int jumpTarget)
    {
        if (!(0 <= jumpTarget && jumpTarget <= itsCodeBufferTop))
            throw new IllegalArgumentException(""Bad jump target: ""+jumpTarget);
        if (!(caseIndex >= -1))
            throw new IllegalArgumentException(""Bad case index: ""+caseIndex);

        int padSize = 3 & ~switchStart; // == 3 - switchStart % 4
        int caseOffset;
        if (caseIndex < 0) {
            // default label
            caseOffset = switchStart + 1 + padSize;
        } else {
            caseOffset = switchStart + 1 + padSize + 4 * (3 + caseIndex);
        }
        if (!(0 <= switchStart
              && switchStart <= itsCodeBufferTop - 4 * 4 - padSize - 1))
        {
            throw new IllegalArgumentException(
                switchStart+"" is outside a possible range of tableswitch""
                +"" in already generated code"");
        }
        if ((0xFF & itsCodeBuffer[switchStart]) != ByteCode.TABLESWITCH) {
            throw new IllegalArgumentException(
                switchStart+"" is not offset of tableswitch statement"");
        }
        if (!(0 <= caseOffset && caseOffset + 4 <= itsCodeBufferTop)) {
            // caseIndex >= -1 does not guarantee that caseOffset >= 0 due
            // to a possible overflow.
            throw new ClassFileFormatException(
                ""Too big case index: ""+caseIndex);
        }
        // ALERT: perhaps check against case bounds?
        putInt32(jumpTarget - switchStart, itsCodeBuffer, caseOffset);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,acquireLabel,"    public int acquireLabel()
    {
        int top = itsLabelTableTop;
        if (itsLabelTable == null || top == itsLabelTable.length) {
            if (itsLabelTable == null) {
                itsLabelTable = new int[MIN_LABEL_TABLE_SIZE];
            }else {
                int[] tmp = new int[itsLabelTable.length * 2];
                System.arraycopy(itsLabelTable, 0, tmp, 0, top);
                itsLabelTable = tmp;
            }
        }
        itsLabelTableTop = top + 1;
        itsLabelTable[top] = -1;
        return top | 0x80000000;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,markLabel,"    public void markLabel(int label)
    {
        if (!(label < 0))
            throw new IllegalArgumentException(""Bad label, no biscuit"");

        label &= 0x7FFFFFFF;
        if (label > itsLabelTableTop)
            throw new IllegalArgumentException(""Bad label"");

        if (itsLabelTable[label] != -1) {
            throw new IllegalStateException(""Can only mark label once"");
        }

        itsLabelTable[label] = itsCodeBufferTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,markLabel,"    public void markLabel(int label, short stackTop)
    {
        markLabel(label);
        itsStackTop = stackTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,markHandler,"    public void markHandler(int theLabel) {
        itsStackTop = 1;
        markLabel(theLabel);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getLabelPC,"    private int getLabelPC(int label)
    {
        if (!(label < 0))
            throw new IllegalArgumentException(""Bad label, no biscuit"");
        label &= 0x7FFFFFFF;
        if (!(label < itsLabelTableTop))
            throw new IllegalArgumentException(""Bad label"");
        return itsLabelTable[label];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLabelFixup,"    private void addLabelFixup(int label, int fixupSite)
    {
        if (!(label < 0))
            throw new IllegalArgumentException(""Bad label, no biscuit"");
        label &= 0x7FFFFFFF;
        if (!(label < itsLabelTableTop))
            throw new IllegalArgumentException(""Bad label"");
        int top = itsFixupTableTop;
        if (itsFixupTable == null || top == itsFixupTable.length) {
            if (itsFixupTable == null) {
                itsFixupTable = new long[MIN_FIXUP_TABLE_SIZE];
            }else {
                long[] tmp = new long[itsFixupTable.length * 2];
                System.arraycopy(itsFixupTable, 0, tmp, 0, top);
                itsFixupTable = tmp;
            }
        }
        itsFixupTableTop = top + 1;
        itsFixupTable[top] = ((long)label << 32) | fixupSite;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,fixLabelGotos,"    private  void fixLabelGotos()
    {
        byte[] codeBuffer = itsCodeBuffer;
        for (int i = 0; i < itsFixupTableTop; i++) {
            long fixup = itsFixupTable[i];
            int label = (int)(fixup >> 32);
            int fixupSite = (int)fixup;
            int pc = itsLabelTable[label];
            if (pc == -1) {
                // Unlocated label
                throw new RuntimeException();
            }
            // -1 to get delta from instruction start
            int offset = pc - (fixupSite - 1);
            if ((short)offset != offset) {
                throw new ClassFileFormatException
                    (""Program too complex: too big jump offset"");
            }
            codeBuffer[fixupSite] = (byte)(offset >> 8);
            codeBuffer[fixupSite + 1] = (byte)offset;
        }
        itsFixupTableTop = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getCurrentCodeOffset,"    public int getCurrentCodeOffset() {
        return itsCodeBufferTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getStackTop,"    public short getStackTop() {
        return itsStackTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,setStackTop,"    public void setStackTop(short n) {
        itsStackTop = n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,adjustStackTop,"    public void adjustStackTop(int delta) {
        int newStack = itsStackTop + delta;
        if (newStack < 0 || Short.MAX_VALUE < newStack) badStack(newStack);
        itsStackTop = (short)newStack;
        if (newStack > itsMaxStack) itsMaxStack = (short)newStack;
        if (DEBUGSTACK) {
            System.out.println(""After ""+""adjustStackTop(""+delta+"")""",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addToCodeBuffer,"    private void addToCodeBuffer(int b)
    {
        int N = addReservedCodeSpace(1);
        itsCodeBuffer[N] = (byte)b;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addToCodeInt16,"    private void addToCodeInt16(int value)
    {
        int N = addReservedCodeSpace(2);
        putInt16(value, itsCodeBuffer, N);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addReservedCodeSpace,"    private int addReservedCodeSpace(int size)
    {
        if (itsCurrentMethod == null)
            throw new IllegalArgumentException(""No method to add to"");
        int oldTop = itsCodeBufferTop;
        int newTop = oldTop + size;
        if (newTop > itsCodeBuffer.length) {
            int newSize = itsCodeBuffer.length * 2;
            if (newTop > newSize) { newSize = newTop; }
            byte[] tmp = new byte[newSize];
            System.arraycopy(itsCodeBuffer, 0, tmp, 0, oldTop);
            itsCodeBuffer = tmp;
        }
        itsCodeBufferTop = newTop;
        return oldTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addExceptionHandler,"    public void addExceptionHandler(int startLabel, int endLabel,
                                    int handlerLabel, String catchClassName)
    {
        if ((startLabel & 0x80000000) != 0x80000000)
            throw new IllegalArgumentException(""Bad startLabel"");
        if ((endLabel & 0x80000000) != 0x80000000)
            throw new IllegalArgumentException(""Bad endLabel"");
        if ((handlerLabel & 0x80000000) != 0x80000000)
            throw new IllegalArgumentException(""Bad handlerLabel"");

        /*
         * If catchClassName is null, use 0 for the catch_type_index; which
         * means catch everything.  (Even when the verifier has let you throw
         * something other than a Throwable.)
         */
        short catch_type_index = (catchClassName == null)
                                 ? 0
                                 : itsConstantPool.addClass(catchClassName);
        ExceptionTableEntry newEntry = new ExceptionTableEntry(
                                           startLabel,
                                           endLabel,
                                           handlerLabel,
                                           catch_type_index);
        int N = itsExceptionTableTop;
        if (N == 0) {
            itsExceptionTable = new ExceptionTableEntry[ExceptionTableSize];
        } else if (N == itsExceptionTable.length) {
            ExceptionTableEntry[] tmp = new ExceptionTableEntry[N * 2];
            System.arraycopy(itsExceptionTable, 0, tmp, 0, N);
            itsExceptionTable = tmp;
        }
        itsExceptionTable[N] = newEntry;
        itsExceptionTableTop = N + 1;
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addLineNumberEntry,"    public void addLineNumberEntry(short lineNumber) {
        if (itsCurrentMethod == null)
            throw new IllegalArgumentException(""No method to stop"");
        int N = itsLineNumberTableTop;
        if (N == 0) {
            itsLineNumberTable = new int[LineNumberTableSize];
        } else if (N == itsLineNumberTable.length) {
            int[] tmp = new int[N * 2];
            System.arraycopy(itsLineNumberTable, 0, tmp, 0, N);
            itsLineNumberTable = tmp;
        }
        itsLineNumberTable[N] = (itsCodeBufferTop << 16) + lineNumber;
        itsLineNumberTableTop = N + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,write,"    public void write(OutputStream oStream)
        throws IOException
    {
        byte[] array = toByteArray();
        oStream.write(array);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getWriteSize,"    private int getWriteSize()
    {
        int size = 0;

        if (itsSourceFileNameIndex != 0) {
            itsConstantPool.addUtf8(""SourceFile"");
        }

        size += 8; //writeLong(FileHeaderConstant);
        size += itsConstantPool.getWriteSize();
        size += 2; //writeShort(itsFlags);
        size += 2; //writeShort(itsThisClassIndex);
        size += 2; //writeShort(itsSuperClassIndex);
        size += 2; //writeShort(itsInterfaces.size());
        size += 2 * itsInterfaces.size();

        size += 2; //writeShort(itsFields.size());
        for (int i = 0; i < itsFields.size(); i++) {
            size += ((ClassFileField)(itsFields.get(i))).getWriteSize();
        }

        size += 2; //writeShort(itsMethods.size());
        for (int i = 0; i < itsMethods.size(); i++) {
            size += ((ClassFileMethod)(itsMethods.get(i))).getWriteSize();
        }

        if (itsSourceFileNameIndex != 0) {
            size += 2; //writeShort(1);  attributes count
            size += 2; //writeShort(sourceFileAttributeNameIndex);
            size += 4; //writeInt(2);
            size += 2; //writeShort(itsSourceFileNameIndex);
        }else {
            size += 2; //out.writeShort(0);  no attributes
        }

        return size;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,toByteArray,"    public byte[] toByteArray()
    {
        int dataSize = getWriteSize();
        byte[] data = new byte[dataSize];
        int offset = 0;

        short sourceFileAttributeNameIndex = 0;
        if (itsSourceFileNameIndex != 0) {
            sourceFileAttributeNameIndex = itsConstantPool.addUtf8(
                                               ""SourceFile"");
        }

        offset = putInt64(FileHeaderConstant, data, offset);
        offset = itsConstantPool.write(data, offset);
        offset = putInt16(itsFlags, data, offset);
        offset = putInt16(itsThisClassIndex, data, offset);
        offset = putInt16(itsSuperClassIndex, data, offset);
        offset = putInt16(itsInterfaces.size(), data, offset);
        for (int i = 0; i < itsInterfaces.size(); i++) {
            int interfaceIndex = ((Short)(itsInterfaces.get(i))).shortValue();
            offset = putInt16(interfaceIndex, data, offset);
        }
        offset = putInt16(itsFields.size(), data, offset);
        for (int i = 0; i < itsFields.size(); i++) {
            ClassFileField field = (ClassFileField)itsFields.get(i);
            offset = field.write(data, offset);
        }
        offset = putInt16(itsMethods.size(), data, offset);
        for (int i = 0; i < itsMethods.size(); i++) {
            ClassFileMethod method = (ClassFileMethod)itsMethods.get(i);
            offset = method.write(data, offset);
        }
        if (itsSourceFileNameIndex != 0) {
            offset = putInt16(1, data, offset); // attributes count
            offset = putInt16(sourceFileAttributeNameIndex, data, offset);
            offset = putInt32(2, data, offset);
            offset = putInt16(itsSourceFileNameIndex, data, offset);
        } else {
            offset = putInt16(0, data, offset); // no attributes
        }

        if (offset != dataSize) {
            // Check getWriteSize is consistent with write!
            throw new RuntimeException();
        }

        return data;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,putInt64,"    static int putInt64(long value, byte[] array, int offset)
    {
        offset = putInt32((int)(value >>> 32), array, offset);
        return putInt32((int)value, array, offset);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,badStack,"    private static void badStack(int value)
    {
        String s;
        if (value < 0) { s = ""Stack underflow: ""+value; }
        else { s = ""Too big stack: ""+value; }
        throw new IllegalStateException(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,sizeOfParameters,"    private static int sizeOfParameters(String pString)
    {
        int length = pString.length();
        int rightParenthesis = pString.lastIndexOf(')');
        if (3 <= length /* minimal signature takes at least 3 chars: ()V */
            && pString.charAt(0) == '('
            && 1 <= rightParenthesis && rightParenthesis + 1 < length)
        {
            boolean ok = true;
            int index = 1;
            int stackDiff = 0;
            int count = 0;
        stringLoop:
            while (index != rightParenthesis) {
                switch (pString.charAt(index)) {
                    default:
                        ok = false;
                        break stringLoop;
                    case 'J' :
                    case 'D' :
                        --stackDiff;
                        // fall thru
                    case 'B' :
                    case 'S' :
                    case 'C' :
                    case 'I' :
                    case 'Z' :
                    case 'F' :
                        --stackDiff;
                        ++count;
                        ++index;
                        continue;
                    case '[' :
                        ++index;
                        int c = pString.charAt(index);
                        while (c == '[') {
                            ++index;
                            c = pString.charAt(index);
                        }
                        switch (c) {
                            default:
                                ok = false;
                                break stringLoop;
                            case 'J' :
                            case 'D' :
                            case 'B' :
                            case 'S' :
                            case 'C' :
                            case 'I' :
                            case 'Z' :
                            case 'F' :
                                --stackDiff;
                                ++count;
                                ++index;
                                continue;
                            case 'L':
                                // fall thru
                        }
                          // fall thru
                    case 'L' : {
                        --stackDiff;
                        ++count;
                        ++index;
                        int semicolon = pString.indexOf(';',  index);
                        if (!(index + 1 <= semicolon
                            && semicolon < rightParenthesis))
                        {
                            ok = false;
                            break stringLoop;
                        }
                        index = semicolon + 1;
                        continue;
                    }
                }
            }
            if (ok) {
                switch (pString.charAt(rightParenthesis + 1)) {
                    default:
                        ok = false;
                        break;
                    case 'J' :
                    case 'D' :
                        ++stackDiff;
                        // fall thru
                    case 'B' :
                    case 'S' :
                    case 'C' :
                    case 'I' :
                    case 'Z' :
                    case 'F' :
                    case 'L' :
                    case '[' :
                        ++stackDiff;
                        // fall thru
                    case 'V' :
                        break;
                }
                if (ok) {
                    return ((count << 16) | (0xFFFF & stackDiff));
                }
            }
        }
        throw new IllegalArgumentException(
            ""Bad parameter signature: ""+pString);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,putInt16,"    static int putInt16(int value, byte[] array, int offset)
    {
        array[offset + 0] = (byte)(value >>> 8);
        array[offset + 1] = (byte)value;
        return offset + 2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,putInt32,"    static int putInt32(int value, byte[] array, int offset)
    {
        array[offset + 0] = (byte)(value >>> 24);
        array[offset + 1] = (byte)(value >>> 16);
        array[offset + 2] = (byte)(value >>> 8);
        array[offset + 3] = (byte)value;
        return offset + 4;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,opcodeCount,"    static int opcodeCount(int opcode)
    {
        switch (opcode) {
            case ByteCode.AALOAD:
            case ByteCode.AASTORE:
            case ByteCode.ACONST_NULL:
            case ByteCode.ALOAD_0:
            case ByteCode.ALOAD_1:
            case ByteCode.ALOAD_2:
            case ByteCode.ALOAD_3:
            case ByteCode.ARETURN:
            case ByteCode.ARRAYLENGTH:
            case ByteCode.ASTORE_0:
            case ByteCode.ASTORE_1:
            case ByteCode.ASTORE_2:
            case ByteCode.ASTORE_3:
            case ByteCode.ATHROW:
            case ByteCode.BALOAD:
            case ByteCode.BASTORE:
            case ByteCode.BREAKPOINT:
            case ByteCode.CALOAD:
            case ByteCode.CASTORE:
            case ByteCode.D2F:
            case ByteCode.D2I:
            case ByteCode.D2L:
            case ByteCode.DADD:
            case ByteCode.DALOAD:
            case ByteCode.DASTORE:
            case ByteCode.DCMPG:
            case ByteCode.DCMPL:
            case ByteCode.DCONST_0:
            case ByteCode.DCONST_1:
            case ByteCode.DDIV:
            case ByteCode.DLOAD_0:
            case ByteCode.DLOAD_1:
            case ByteCode.DLOAD_2:
            case ByteCode.DLOAD_3:
            case ByteCode.DMUL:
            case ByteCode.DNEG:
            case ByteCode.DREM:
            case ByteCode.DRETURN:
            case ByteCode.DSTORE_0:
            case ByteCode.DSTORE_1:
            case ByteCode.DSTORE_2:
            case ByteCode.DSTORE_3:
            case ByteCode.DSUB:
            case ByteCode.DUP:
            case ByteCode.DUP2:
            case ByteCode.DUP2_X1:
            case ByteCode.DUP2_X2:
            case ByteCode.DUP_X1:
            case ByteCode.DUP_X2:
            case ByteCode.F2D:
            case ByteCode.F2I:
            case ByteCode.F2L:
            case ByteCode.FADD:
            case ByteCode.FALOAD:
            case ByteCode.FASTORE:
            case ByteCode.FCMPG:
            case ByteCode.FCMPL:
            case ByteCode.FCONST_0:
            case ByteCode.FCONST_1:
            case ByteCode.FCONST_2:
            case ByteCode.FDIV:
            case ByteCode.FLOAD_0:
            case ByteCode.FLOAD_1:
            case ByteCode.FLOAD_2:
            case ByteCode.FLOAD_3:
            case ByteCode.FMUL:
            case ByteCode.FNEG:
            case ByteCode.FREM:
            case ByteCode.FRETURN:
            case ByteCode.FSTORE_0:
            case ByteCode.FSTORE_1:
            case ByteCode.FSTORE_2:
            case ByteCode.FSTORE_3:
            case ByteCode.FSUB:
            case ByteCode.I2B:
            case ByteCode.I2C:
            case ByteCode.I2D:
            case ByteCode.I2F:
            case ByteCode.I2L:
            case ByteCode.I2S:
            case ByteCode.IADD:
            case ByteCode.IALOAD:
            case ByteCode.IAND:
            case ByteCode.IASTORE:
            case ByteCode.ICONST_0:
            case ByteCode.ICONST_1:
            case ByteCode.ICONST_2:
            case ByteCode.ICONST_3:
            case ByteCode.ICONST_4:
            case ByteCode.ICONST_5:
            case ByteCode.ICONST_M1:
            case ByteCode.IDIV:
            case ByteCode.ILOAD_0:
            case ByteCode.ILOAD_1:
            case ByteCode.ILOAD_2:
            case ByteCode.ILOAD_3:
            case ByteCode.IMPDEP1:
            case ByteCode.IMPDEP2:
            case ByteCode.IMUL:
            case ByteCode.INEG:
            case ByteCode.IOR:
            case ByteCode.IREM:
            case ByteCode.IRETURN:
            case ByteCode.ISHL:
            case ByteCode.ISHR:
            case ByteCode.ISTORE_0:
            case ByteCode.ISTORE_1:
            case ByteCode.ISTORE_2:
            case ByteCode.ISTORE_3:
            case ByteCode.ISUB:
            case ByteCode.IUSHR:
            case ByteCode.IXOR:
            case ByteCode.L2D:
            case ByteCode.L2F:
            case ByteCode.L2I:
            case ByteCode.LADD:
            case ByteCode.LALOAD:
            case ByteCode.LAND:
            case ByteCode.LASTORE:
            case ByteCode.LCMP:
            case ByteCode.LCONST_0:
            case ByteCode.LCONST_1:
            case ByteCode.LDIV:
            case ByteCode.LLOAD_0:
            case ByteCode.LLOAD_1:
            case ByteCode.LLOAD_2:
            case ByteCode.LLOAD_3:
            case ByteCode.LMUL:
            case ByteCode.LNEG:
            case ByteCode.LOR:
            case ByteCode.LREM:
            case ByteCode.LRETURN:
            case ByteCode.LSHL:
            case ByteCode.LSHR:
            case ByteCode.LSTORE_0:
            case ByteCode.LSTORE_1:
            case ByteCode.LSTORE_2:
            case ByteCode.LSTORE_3:
            case ByteCode.LSUB:
            case ByteCode.LUSHR:
            case ByteCode.LXOR:
            case ByteCode.MONITORENTER:
            case ByteCode.MONITOREXIT:
            case ByteCode.NOP:
            case ByteCode.POP:
            case ByteCode.POP2:
            case ByteCode.RETURN:
            case ByteCode.SALOAD:
            case ByteCode.SASTORE:
            case ByteCode.SWAP:
            case ByteCode.WIDE:
                return 0;
            case ByteCode.ALOAD:
            case ByteCode.ANEWARRAY:
            case ByteCode.ASTORE:
            case ByteCode.BIPUSH:
            case ByteCode.CHECKCAST:
            case ByteCode.DLOAD:
            case ByteCode.DSTORE:
            case ByteCode.FLOAD:
            case ByteCode.FSTORE:
            case ByteCode.GETFIELD:
            case ByteCode.GETSTATIC:
            case ByteCode.GOTO:
            case ByteCode.GOTO_W:
            case ByteCode.IFEQ:
            case ByteCode.IFGE:
            case ByteCode.IFGT:
            case ByteCode.IFLE:
            case ByteCode.IFLT:
            case ByteCode.IFNE:
            case ByteCode.IFNONNULL:
            case ByteCode.IFNULL:
            case ByteCode.IF_ACMPEQ:
            case ByteCode.IF_ACMPNE:
            case ByteCode.IF_ICMPEQ:
            case ByteCode.IF_ICMPGE:
            case ByteCode.IF_ICMPGT:
            case ByteCode.IF_ICMPLE:
            case ByteCode.IF_ICMPLT:
            case ByteCode.IF_ICMPNE:
            case ByteCode.ILOAD:
            case ByteCode.INSTANCEOF:
            case ByteCode.INVOKEINTERFACE:
            case ByteCode.INVOKESPECIAL:
            case ByteCode.INVOKESTATIC:
            case ByteCode.INVOKEVIRTUAL:
            case ByteCode.ISTORE:
            case ByteCode.JSR:
            case ByteCode.JSR_W:
            case ByteCode.LDC:
            case ByteCode.LDC2_W:
            case ByteCode.LDC_W:
            case ByteCode.LLOAD:
            case ByteCode.LSTORE:
            case ByteCode.NEW:
            case ByteCode.NEWARRAY:
            case ByteCode.PUTFIELD:
            case ByteCode.PUTSTATIC:
            case ByteCode.RET:
            case ByteCode.SIPUSH:
                return 1;

            case ByteCode.IINC:
            case ByteCode.MULTIANEWARRAY:
                return 2;

            case ByteCode.LOOKUPSWITCH:
            case ByteCode.TABLESWITCH:
                return -1;
        }
        throw new IllegalArgumentException(""Bad opcode: ""+opcode);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,stackChange,"    static int stackChange(int opcode)
    {
        // For INVOKE... accounts only for popping this (unless static),
        // ignoring parameters and return type
        switch (opcode) {
            case ByteCode.DASTORE:
            case ByteCode.LASTORE:
                return -4;

            case ByteCode.AASTORE:
            case ByteCode.BASTORE:
            case ByteCode.CASTORE:
            case ByteCode.DCMPG:
            case ByteCode.DCMPL:
            case ByteCode.FASTORE:
            case ByteCode.IASTORE:
            case ByteCode.LCMP:
            case ByteCode.SASTORE:
                return -3;

            case ByteCode.DADD:
            case ByteCode.DDIV:
            case ByteCode.DMUL:
            case ByteCode.DREM:
            case ByteCode.DRETURN:
            case ByteCode.DSTORE:
            case ByteCode.DSTORE_0:
            case ByteCode.DSTORE_1:
            case ByteCode.DSTORE_2:
            case ByteCode.DSTORE_3:
            case ByteCode.DSUB:
            case ByteCode.IF_ACMPEQ:
            case ByteCode.IF_ACMPNE:
            case ByteCode.IF_ICMPEQ:
            case ByteCode.IF_ICMPGE:
            case ByteCode.IF_ICMPGT:
            case ByteCode.IF_ICMPLE:
            case ByteCode.IF_ICMPLT:
            case ByteCode.IF_ICMPNE:
            case ByteCode.LADD:
            case ByteCode.LAND:
            case ByteCode.LDIV:
            case ByteCode.LMUL:
            case ByteCode.LOR:
            case ByteCode.LREM:
            case ByteCode.LRETURN:
            case ByteCode.LSTORE:
            case ByteCode.LSTORE_0:
            case ByteCode.LSTORE_1:
            case ByteCode.LSTORE_2:
            case ByteCode.LSTORE_3:
            case ByteCode.LSUB:
            case ByteCode.LXOR:
            case ByteCode.POP2:
                return -2;

            case ByteCode.AALOAD:
            case ByteCode.ARETURN:
            case ByteCode.ASTORE:
            case ByteCode.ASTORE_0:
            case ByteCode.ASTORE_1:
            case ByteCode.ASTORE_2:
            case ByteCode.ASTORE_3:
            case ByteCode.ATHROW:
            case ByteCode.BALOAD:
            case ByteCode.CALOAD:
            case ByteCode.D2F:
            case ByteCode.D2I:
            case ByteCode.FADD:
            case ByteCode.FALOAD:
            case ByteCode.FCMPG:
            case ByteCode.FCMPL:
            case ByteCode.FDIV:
            case ByteCode.FMUL:
            case ByteCode.FREM:
            case ByteCode.FRETURN:
            case ByteCode.FSTORE:
            case ByteCode.FSTORE_0:
            case ByteCode.FSTORE_1:
            case ByteCode.FSTORE_2:
            case ByteCode.FSTORE_3:
            case ByteCode.FSUB:
            case ByteCode.GETFIELD:
            case ByteCode.IADD:
            case ByteCode.IALOAD:
            case ByteCode.IAND:
            case ByteCode.IDIV:
            case ByteCode.IFEQ:
            case ByteCode.IFGE:
            case ByteCode.IFGT:
            case ByteCode.IFLE:
            case ByteCode.IFLT:
            case ByteCode.IFNE:
            case ByteCode.IFNONNULL:
            case ByteCode.IFNULL:
            case ByteCode.IMUL:
            case ByteCode.INVOKEINTERFACE:       //
            case ByteCode.INVOKESPECIAL:         // but needs to account for
            case ByteCode.INVOKEVIRTUAL:         // pops 'this' (unless static)
            case ByteCode.IOR:
            case ByteCode.IREM:
            case ByteCode.IRETURN:
            case ByteCode.ISHL:
            case ByteCode.ISHR:
            case ByteCode.ISTORE:
            case ByteCode.ISTORE_0:
            case ByteCode.ISTORE_1:
            case ByteCode.ISTORE_2:
            case ByteCode.ISTORE_3:
            case ByteCode.ISUB:
            case ByteCode.IUSHR:
            case ByteCode.IXOR:
            case ByteCode.L2F:
            case ByteCode.L2I:
            case ByteCode.LOOKUPSWITCH:
            case ByteCode.LSHL:
            case ByteCode.LSHR:
            case ByteCode.LUSHR:
            case ByteCode.MONITORENTER:
            case ByteCode.MONITOREXIT:
            case ByteCode.POP:
            case ByteCode.PUTFIELD:
            case ByteCode.SALOAD:
            case ByteCode.TABLESWITCH:
                return -1;

            case ByteCode.ANEWARRAY:
            case ByteCode.ARRAYLENGTH:
            case ByteCode.BREAKPOINT:
            case ByteCode.CHECKCAST:
            case ByteCode.D2L:
            case ByteCode.DALOAD:
            case ByteCode.DNEG:
            case ByteCode.F2I:
            case ByteCode.FNEG:
            case ByteCode.GETSTATIC:
            case ByteCode.GOTO:
            case ByteCode.GOTO_W:
            case ByteCode.I2B:
            case ByteCode.I2C:
            case ByteCode.I2F:
            case ByteCode.I2S:
            case ByteCode.IINC:
            case ByteCode.IMPDEP1:
            case ByteCode.IMPDEP2:
            case ByteCode.INEG:
            case ByteCode.INSTANCEOF:
            case ByteCode.INVOKESTATIC:
            case ByteCode.L2D:
            case ByteCode.LALOAD:
            case ByteCode.LNEG:
            case ByteCode.NEWARRAY:
            case ByteCode.NOP:
            case ByteCode.PUTSTATIC:
            case ByteCode.RET:
            case ByteCode.RETURN:
            case ByteCode.SWAP:
            case ByteCode.WIDE:
                return 0;

            case ByteCode.ACONST_NULL:
            case ByteCode.ALOAD:
            case ByteCode.ALOAD_0:
            case ByteCode.ALOAD_1:
            case ByteCode.ALOAD_2:
            case ByteCode.ALOAD_3:
            case ByteCode.BIPUSH:
            case ByteCode.DUP:
            case ByteCode.DUP_X1:
            case ByteCode.DUP_X2:
            case ByteCode.F2D:
            case ByteCode.F2L:
            case ByteCode.FCONST_0:
            case ByteCode.FCONST_1:
            case ByteCode.FCONST_2:
            case ByteCode.FLOAD:
            case ByteCode.FLOAD_0:
            case ByteCode.FLOAD_1:
            case ByteCode.FLOAD_2:
            case ByteCode.FLOAD_3:
            case ByteCode.I2D:
            case ByteCode.I2L:
            case ByteCode.ICONST_0:
            case ByteCode.ICONST_1:
            case ByteCode.ICONST_2:
            case ByteCode.ICONST_3:
            case ByteCode.ICONST_4:
            case ByteCode.ICONST_5:
            case ByteCode.ICONST_M1:
            case ByteCode.ILOAD:
            case ByteCode.ILOAD_0:
            case ByteCode.ILOAD_1:
            case ByteCode.ILOAD_2:
            case ByteCode.ILOAD_3:
            case ByteCode.JSR:
            case ByteCode.JSR_W:
            case ByteCode.LDC:
            case ByteCode.LDC_W:
            case ByteCode.MULTIANEWARRAY:
            case ByteCode.NEW:
            case ByteCode.SIPUSH:
                return 1;

            case ByteCode.DCONST_0:
            case ByteCode.DCONST_1:
            case ByteCode.DLOAD:
            case ByteCode.DLOAD_0:
            case ByteCode.DLOAD_1:
            case ByteCode.DLOAD_2:
            case ByteCode.DLOAD_3:
            case ByteCode.DUP2:
            case ByteCode.DUP2_X1:
            case ByteCode.DUP2_X2:
            case ByteCode.LCONST_0:
            case ByteCode.LCONST_1:
            case ByteCode.LDC2_W:
            case ByteCode.LLOAD:
            case ByteCode.LLOAD_0:
            case ByteCode.LLOAD_1:
            case ByteCode.LLOAD_2:
            case ByteCode.LLOAD_3:
                return 2;
        }
        throw new IllegalArgumentException(""Bad opcode: ""+opcode);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,bytecodeStr,"    private static String bytecodeStr(int code)
    {
        if (DEBUGSTACK || DEBUGCODE) {
            switch (code) {
                case ByteCode.NOP:              return ""nop"";
                case ByteCode.ACONST_NULL:      return ""aconst_null"";
                case ByteCode.ICONST_M1:        return ""iconst_m1"";
                case ByteCode.ICONST_0:         return ""iconst_0"";
                case ByteCode.ICONST_1:         return ""iconst_1"";
                case ByteCode.ICONST_2:         return ""iconst_2"";
                case ByteCode.ICONST_3:         return ""iconst_3"";
                case ByteCode.ICONST_4:         return ""iconst_4"";
                case ByteCode.ICONST_5:         return ""iconst_5"";
                case ByteCode.LCONST_0:         return ""lconst_0"";
                case ByteCode.LCONST_1:         return ""lconst_1"";
                case ByteCode.FCONST_0:         return ""fconst_0"";
                case ByteCode.FCONST_1:         return ""fconst_1"";
                case ByteCode.FCONST_2:         return ""fconst_2"";
                case ByteCode.DCONST_0:         return ""dconst_0"";
                case ByteCode.DCONST_1:         return ""dconst_1"";
                case ByteCode.BIPUSH:           return ""bipush"";
                case ByteCode.SIPUSH:           return ""sipush"";
                case ByteCode.LDC:              return ""ldc"";
                case ByteCode.LDC_W:            return ""ldc_w"";
                case ByteCode.LDC2_W:           return ""ldc2_w"";
                case ByteCode.ILOAD:            return ""iload"";
                case ByteCode.LLOAD:            return ""lload"";
                case ByteCode.FLOAD:            return ""fload"";
                case ByteCode.DLOAD:            return ""dload"";
                case ByteCode.ALOAD:            return ""aload"";
                case ByteCode.ILOAD_0:          return ""iload_0"";
                case ByteCode.ILOAD_1:          return ""iload_1"";
                case ByteCode.ILOAD_2:          return ""iload_2"";
                case ByteCode.ILOAD_3:          return ""iload_3"";
                case ByteCode.LLOAD_0:          return ""lload_0"";
                case ByteCode.LLOAD_1:          return ""lload_1"";
                case ByteCode.LLOAD_2:          return ""lload_2"";
                case ByteCode.LLOAD_3:          return ""lload_3"";
                case ByteCode.FLOAD_0:          return ""fload_0"";
                case ByteCode.FLOAD_1:          return ""fload_1"";
                case ByteCode.FLOAD_2:          return ""fload_2"";
                case ByteCode.FLOAD_3:          return ""fload_3"";
                case ByteCode.DLOAD_0:          return ""dload_0"";
                case ByteCode.DLOAD_1:          return ""dload_1"";
                case ByteCode.DLOAD_2:          return ""dload_2"";
                case ByteCode.DLOAD_3:          return ""dload_3"";
                case ByteCode.ALOAD_0:          return ""aload_0"";
                case ByteCode.ALOAD_1:          return ""aload_1"";
                case ByteCode.ALOAD_2:          return ""aload_2"";
                case ByteCode.ALOAD_3:          return ""aload_3"";
                case ByteCode.IALOAD:           return ""iaload"";
                case ByteCode.LALOAD:           return ""laload"";
                case ByteCode.FALOAD:           return ""faload"";
                case ByteCode.DALOAD:           return ""daload"";
                case ByteCode.AALOAD:           return ""aaload"";
                case ByteCode.BALOAD:           return ""baload"";
                case ByteCode.CALOAD:           return ""caload"";
                case ByteCode.SALOAD:           return ""saload"";
                case ByteCode.ISTORE:           return ""istore"";
                case ByteCode.LSTORE:           return ""lstore"";
                case ByteCode.FSTORE:           return ""fstore"";
                case ByteCode.DSTORE:           return ""dstore"";
                case ByteCode.ASTORE:           return ""astore"";
                case ByteCode.ISTORE_0:         return ""istore_0"";
                case ByteCode.ISTORE_1:         return ""istore_1"";
                case ByteCode.ISTORE_2:         return ""istore_2"";
                case ByteCode.ISTORE_3:         return ""istore_3"";
                case ByteCode.LSTORE_0:         return ""lstore_0"";
                case ByteCode.LSTORE_1:         return ""lstore_1"";
                case ByteCode.LSTORE_2:         return ""lstore_2"";
                case ByteCode.LSTORE_3:         return ""lstore_3"";
                case ByteCode.FSTORE_0:         return ""fstore_0"";
                case ByteCode.FSTORE_1:         return ""fstore_1"";
                case ByteCode.FSTORE_2:         return ""fstore_2"";
                case ByteCode.FSTORE_3:         return ""fstore_3"";
                case ByteCode.DSTORE_0:         return ""dstore_0"";
                case ByteCode.DSTORE_1:         return ""dstore_1"";
                case ByteCode.DSTORE_2:         return ""dstore_2"";
                case ByteCode.DSTORE_3:         return ""dstore_3"";
                case ByteCode.ASTORE_0:         return ""astore_0"";
                case ByteCode.ASTORE_1:         return ""astore_1"";
                case ByteCode.ASTORE_2:         return ""astore_2"";
                case ByteCode.ASTORE_3:         return ""astore_3"";
                case ByteCode.IASTORE:          return ""iastore"";
                case ByteCode.LASTORE:          return ""lastore"";
                case ByteCode.FASTORE:          return ""fastore"";
                case ByteCode.DASTORE:          return ""dastore"";
                case ByteCode.AASTORE:          return ""aastore"";
                case ByteCode.BASTORE:          return ""bastore"";
                case ByteCode.CASTORE:          return ""castore"";
                case ByteCode.SASTORE:          return ""sastore"";
                case ByteCode.POP:              return ""pop"";
                case ByteCode.POP2:             return ""pop2"";
                case ByteCode.DUP:              return ""dup"";
                case ByteCode.DUP_X1:           return ""dup_x1"";
                case ByteCode.DUP_X2:           return ""dup_x2"";
                case ByteCode.DUP2:             return ""dup2"";
                case ByteCode.DUP2_X1:          return ""dup2_x1"";
                case ByteCode.DUP2_X2:          return ""dup2_x2"";
                case ByteCode.SWAP:             return ""swap"";
                case ByteCode.IADD:             return ""iadd"";
                case ByteCode.LADD:             return ""ladd"";
                case ByteCode.FADD:             return ""fadd"";
                case ByteCode.DADD:             return ""dadd"";
                case ByteCode.ISUB:             return ""isub"";
                case ByteCode.LSUB:             return ""lsub"";
                case ByteCode.FSUB:             return ""fsub"";
                case ByteCode.DSUB:             return ""dsub"";
                case ByteCode.IMUL:             return ""imul"";
                case ByteCode.LMUL:             return ""lmul"";
                case ByteCode.FMUL:             return ""fmul"";
                case ByteCode.DMUL:             return ""dmul"";
                case ByteCode.IDIV:             return ""idiv"";
                case ByteCode.LDIV:             return ""ldiv"";
                case ByteCode.FDIV:             return ""fdiv"";
                case ByteCode.DDIV:             return ""ddiv"";
                case ByteCode.IREM:             return ""irem"";
                case ByteCode.LREM:             return ""lrem"";
                case ByteCode.FREM:             return ""frem"";
                case ByteCode.DREM:             return ""drem"";
                case ByteCode.INEG:             return ""ineg"";
                case ByteCode.LNEG:             return ""lneg"";
                case ByteCode.FNEG:             return ""fneg"";
                case ByteCode.DNEG:             return ""dneg"";
                case ByteCode.ISHL:             return ""ishl"";
                case ByteCode.LSHL:             return ""lshl"";
                case ByteCode.ISHR:             return ""ishr"";
                case ByteCode.LSHR:             return ""lshr"";
                case ByteCode.IUSHR:            return ""iushr"";
                case ByteCode.LUSHR:            return ""lushr"";
                case ByteCode.IAND:             return ""iand"";
                case ByteCode.LAND:             return ""land"";
                case ByteCode.IOR:              return ""ior"";
                case ByteCode.LOR:              return ""lor"";
                case ByteCode.IXOR:             return ""ixor"";
                case ByteCode.LXOR:             return ""lxor"";
                case ByteCode.IINC:             return ""iinc"";
                case ByteCode.I2L:              return ""i2l"";
                case ByteCode.I2F:              return ""i2f"";
                case ByteCode.I2D:              return ""i2d"";
                case ByteCode.L2I:              return ""l2i"";
                case ByteCode.L2F:              return ""l2f"";
                case ByteCode.L2D:              return ""l2d"";
                case ByteCode.F2I:              return ""f2i"";
                case ByteCode.F2L:              return ""f2l"";
                case ByteCode.F2D:              return ""f2d"";
                case ByteCode.D2I:              return ""d2i"";
                case ByteCode.D2L:              return ""d2l"";
                case ByteCode.D2F:              return ""d2f"";
                case ByteCode.I2B:              return ""i2b"";
                case ByteCode.I2C:              return ""i2c"";
                case ByteCode.I2S:              return ""i2s"";
                case ByteCode.LCMP:             return ""lcmp"";
                case ByteCode.FCMPL:            return ""fcmpl"";
                case ByteCode.FCMPG:            return ""fcmpg"";
                case ByteCode.DCMPL:            return ""dcmpl"";
                case ByteCode.DCMPG:            return ""dcmpg"";
                case ByteCode.IFEQ:             return ""ifeq"";
                case ByteCode.IFNE:             return ""ifne"";
                case ByteCode.IFLT:             return ""iflt"";
                case ByteCode.IFGE:             return ""ifge"";
                case ByteCode.IFGT:             return ""ifgt"";
                case ByteCode.IFLE:             return ""ifle"";
                case ByteCode.IF_ICMPEQ:        return ""if_icmpeq"";
                case ByteCode.IF_ICMPNE:        return ""if_icmpne"";
                case ByteCode.IF_ICMPLT:        return ""if_icmplt"";
                case ByteCode.IF_ICMPGE:        return ""if_icmpge"";
                case ByteCode.IF_ICMPGT:        return ""if_icmpgt"";
                case ByteCode.IF_ICMPLE:        return ""if_icmple"";
                case ByteCode.IF_ACMPEQ:        return ""if_acmpeq"";
                case ByteCode.IF_ACMPNE:        return ""if_acmpne"";
                case ByteCode.GOTO:             return ""goto"";
                case ByteCode.JSR:              return ""jsr"";
                case ByteCode.RET:              return ""ret"";
                case ByteCode.TABLESWITCH:      return ""tableswitch"";
                case ByteCode.LOOKUPSWITCH:     return ""lookupswitch"";
                case ByteCode.IRETURN:          return ""ireturn"";
                case ByteCode.LRETURN:          return ""lreturn"";
                case ByteCode.FRETURN:          return ""freturn"";
                case ByteCode.DRETURN:          return ""dreturn"";
                case ByteCode.ARETURN:          return ""areturn"";
                case ByteCode.RETURN:           return ""return"";
                case ByteCode.GETSTATIC:        return ""getstatic"";
                case ByteCode.PUTSTATIC:        return ""putstatic"";
                case ByteCode.GETFIELD:         return ""getfield"";
                case ByteCode.PUTFIELD:         return ""putfield"";
                case ByteCode.INVOKEVIRTUAL:    return ""invokevirtual"";
                case ByteCode.INVOKESPECIAL:    return ""invokespecial"";
                case ByteCode.INVOKESTATIC:     return ""invokestatic"";
                case ByteCode.INVOKEINTERFACE:  return ""invokeinterface"";
                case ByteCode.NEW:              return ""new"";
                case ByteCode.NEWARRAY:         return ""newarray"";
                case ByteCode.ANEWARRAY:        return ""anewarray"";
                case ByteCode.ARRAYLENGTH:      return ""arraylength"";
                case ByteCode.ATHROW:           return ""athrow"";
                case ByteCode.CHECKCAST:        return ""checkcast"";
                case ByteCode.INSTANCEOF:       return ""instanceof"";
                case ByteCode.MONITORENTER:     return ""monitorenter"";
                case ByteCode.MONITOREXIT:      return ""monitorexit"";
                case ByteCode.WIDE:             return ""wide"";
                case ByteCode.MULTIANEWARRAY:   return ""multianewarray"";
                case ByteCode.IFNULL:           return ""ifnull"";
                case ByteCode.IFNONNULL:        return ""ifnonnull"";
                case ByteCode.GOTO_W:           return ""goto_w"";
                case ByteCode.JSR_W:            return ""jsr_w"";
                case ByteCode.BREAKPOINT:       return ""breakpoint"";

                case ByteCode.IMPDEP1:          return ""impdep1"";
                case ByteCode.IMPDEP2:          return ""impdep2"";
            }
        }
        return """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getCharBuffer,"    final char[] getCharBuffer(int minimalSize)
    {
        if (minimalSize > tmpCharBuffer.length) {
            int newSize = tmpCharBuffer.length * 2;
            if (minimalSize > newSize) { newSize = minimalSize; }
            tmpCharBuffer = new char[newSize];
        }
        return tmpCharBuffer;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,setAttributes,"    void setAttributes(short attr1, short attr2, short attr3, int index)
    {
        itsHasAttributes = true;
        itsAttr1 = attr1;
        itsAttr2 = attr2;
        itsAttr3 = attr3;
        itsIndex = index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,write,"    int write(byte[] data, int offset)
    {
        offset = ClassFileWriter.putInt16(itsFlags, data, offset);
        offset = ClassFileWriter.putInt16(itsNameIndex, data, offset);
        offset = ClassFileWriter.putInt16(itsTypeIndex, data, offset);
        if (!itsHasAttributes) {
            // write 0 attributes
            offset = ClassFileWriter.putInt16(0, data, offset);
        } else {
            offset = ClassFileWriter.putInt16(1, data, offset);
            offset = ClassFileWriter.putInt16(itsAttr1, data, offset);
            offset = ClassFileWriter.putInt16(itsAttr2, data, offset);
            offset = ClassFileWriter.putInt16(itsAttr3, data, offset);
            offset = ClassFileWriter.putInt16(itsIndex, data, offset);
        }
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getWriteSize,"    int getWriteSize()
    {
        int size = 2 * 3;
        if (!itsHasAttributes) {
            size += 2;
        } else {
            size += 2 + 2 * 4;
        }
        return size;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,setCodeAttribute,"    void setCodeAttribute(byte codeAttribute[])
    {
        itsCodeAttribute = codeAttribute;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,write,"    int write(byte[] data, int offset)
    {
        offset = ClassFileWriter.putInt16(itsFlags, data, offset);
        offset = ClassFileWriter.putInt16(itsNameIndex, data, offset);
        offset = ClassFileWriter.putInt16(itsTypeIndex, data, offset);
        // Code attribute only
        offset = ClassFileWriter.putInt16(1, data, offset);
        System.arraycopy(itsCodeAttribute, 0, data, offset,
                         itsCodeAttribute.length);
        offset += itsCodeAttribute.length;
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getWriteSize,"    int getWriteSize()
    {
        return 2 * 4 + itsCodeAttribute.length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,write,"    int write(byte[] data, int offset)
    {
        offset = ClassFileWriter.putInt16((short)itsTopIndex, data, offset);
        System.arraycopy(itsPool, 0, data, offset, itsTop);
        offset += itsTop;
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getWriteSize,"    int getWriteSize()
    {
        return 2 + itsTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addConstant,"    int addConstant(int k)
    {
        ensure(5);
        itsPool[itsTop++] = CONSTANT_Integer;
        itsTop = ClassFileWriter.putInt32(k, itsPool, itsTop);
        return (short)(itsTopIndex++);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addConstant,"    int addConstant(long k)
    {
        ensure(9);
        itsPool[itsTop++] = CONSTANT_Long;
        itsTop = ClassFileWriter.putInt64(k, itsPool, itsTop);
        int index = itsTopIndex;
        itsTopIndex += 2;
        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addConstant,"    int addConstant(float k)
    {
        ensure(5);
        itsPool[itsTop++] = CONSTANT_Float;
        int bits = Float.floatToIntBits(k);
        itsTop = ClassFileWriter.putInt32(bits, itsPool, itsTop);
        return itsTopIndex++;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addConstant,"    int addConstant(double k)
    {
        ensure(9);
        itsPool[itsTop++] = CONSTANT_Double;
        long bits = Double.doubleToLongBits(k);
        itsTop = ClassFileWriter.putInt64(bits, itsPool, itsTop);
        int index = itsTopIndex;
        itsTopIndex += 2;
        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addConstant,"    int addConstant(String k)
    {
        int utf8Index = 0xFFFF & addUtf8(k);
        int theIndex = itsStringConstHash.getInt(utf8Index, -1);
        if (theIndex == -1) {
            theIndex = itsTopIndex++;
            ensure(3);
            itsPool[itsTop++] = CONSTANT_String;
            itsTop = ClassFileWriter.putInt16(utf8Index, itsPool, itsTop);
            itsStringConstHash.put(utf8Index, theIndex);
        }
        return theIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,isUnderUtfEncodingLimit,"    boolean isUnderUtfEncodingLimit(String s)
    {
        int strLen = s.length();
        if (strLen * 3 <= MAX_UTF_ENCODING_SIZE) {
            return true;
        } else if (strLen > MAX_UTF_ENCODING_SIZE) {
            return false;
        }
        return strLen == getUtfEncodingLimit(s, 0, strLen);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,getUtfEncodingLimit,"    int getUtfEncodingLimit(String s, int start, int end)
    {
        if ((end - start) * 3 <= MAX_UTF_ENCODING_SIZE) {
            return end;
        }
        int limit = MAX_UTF_ENCODING_SIZE;
        for (int i = start; i != end; i++) {
            int c = s.charAt(i);
            if (0 != c && c <= 0x7F) {
                --limit;
            } else if (c < 0x7FF) {
                limit -= 2;
            } else {
                limit -= 3;
            }
            if (limit < 0) {
                return i;
            }
        }
        return end;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addUtf8,"    short addUtf8(String k)
    {
        int theIndex = itsUtf8Hash.get(k, -1);
        if (theIndex == -1) {
            int strLen = k.length();
            boolean tooBigString;
            if (strLen > MAX_UTF_ENCODING_SIZE) {
                tooBigString = true;
            } else {
                tooBigString = false;
                // Ask for worst case scenario buffer when each char takes 3
                // bytes
                ensure(1 + 2 + strLen * 3);
                int top = itsTop;

                itsPool[top++] = CONSTANT_Utf8;
                top += 2; // skip length

                char[] chars = cfw.getCharBuffer(strLen);
                k.getChars(0, strLen, chars, 0);

                for (int i = 0; i != strLen; i++) {
                    int c = chars[i];
                    if (c != 0 && c <= 0x7F) {
                        itsPool[top++] = (byte)c;
                    } else if (c > 0x7FF) {
                        itsPool[top++] = (byte)(0xE0 | (c >> 12));
                        itsPool[top++] = (byte)(0x80 | ((c >> 6) & 0x3F));
                        itsPool[top++] = (byte)(0x80 | (c & 0x3F));
                    } else {
                        itsPool[top++] = (byte)(0xC0 | (c >> 6));
                        itsPool[top++] = (byte)(0x80 | (c & 0x3F));
                    }
                }

                int utfLen = top - (itsTop + 1 + 2);
                if (utfLen > MAX_UTF_ENCODING_SIZE) {
                    tooBigString = true;
                } else {
                    // Write back length
                    itsPool[itsTop + 1] = (byte)(utfLen >>> 8);
                    itsPool[itsTop + 2] = (byte)utfLen;

                    itsTop = top;
                    theIndex = itsTopIndex++;
                    itsUtf8Hash.put(k, theIndex);
                }
            }
            if (tooBigString) {
                throw new IllegalArgumentException(""Too big string"");
            }
        }
        return (short)theIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addNameAndType,"    private short addNameAndType(String name, String type)
    {
        short nameIndex = addUtf8(name);
        short typeIndex = addUtf8(type);
        ensure(5);
        itsPool[itsTop++] = CONSTANT_NameAndType;
        itsTop = ClassFileWriter.putInt16(nameIndex, itsPool, itsTop);
        itsTop = ClassFileWriter.putInt16(typeIndex, itsPool, itsTop);
        return (short)(itsTopIndex++);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addClass,"    short addClass(String className)
    {
        int theIndex = itsClassHash.get(className, -1);
        if (theIndex == -1) {
            String slashed = className;
            if (className.indexOf('.') > 0) {
                slashed = ClassFileWriter.getSlashedForm(className);
                theIndex = itsClassHash.get(slashed, -1);
                if (theIndex != -1) {
                    itsClassHash.put(className, theIndex);
                }
            }
            if (theIndex == -1) {
                int utf8Index = addUtf8(slashed);
                ensure(3);
                itsPool[itsTop++] = CONSTANT_Class;
                itsTop = ClassFileWriter.putInt16(utf8Index, itsPool, itsTop);
                theIndex = itsTopIndex++;
                itsClassHash.put(slashed, theIndex);
                if (className != slashed) {
                    itsClassHash.put(className, theIndex);
                }
            }
        }
        return (short)theIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addFieldRef,"    short addFieldRef(String className, String fieldName, String fieldType)
    {
        FieldOrMethodRef ref = new FieldOrMethodRef(className, fieldName,
                                                    fieldType);

        int theIndex = itsFieldRefHash.get(ref, -1);
        if (theIndex == -1) {
            short ntIndex = addNameAndType(fieldName, fieldType);
            short classIndex = addClass(className);
            ensure(5);
            itsPool[itsTop++] = CONSTANT_Fieldref;
            itsTop = ClassFileWriter.putInt16(classIndex, itsPool, itsTop);
            itsTop = ClassFileWriter.putInt16(ntIndex, itsPool, itsTop);
            theIndex = itsTopIndex++;
            itsFieldRefHash.put(ref, theIndex);
        }
        return (short)theIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addMethodRef,"    short addMethodRef(String className, String methodName,
                       String methodType)
    {
        FieldOrMethodRef ref = new FieldOrMethodRef(className, methodName,
                                                    methodType);

        int theIndex = itsMethodRefHash.get(ref, -1);
        if (theIndex == -1) {
            short ntIndex = addNameAndType(methodName, methodType);
            short classIndex = addClass(className);
            ensure(5);
            itsPool[itsTop++] = CONSTANT_Methodref;
            itsTop = ClassFileWriter.putInt16(classIndex, itsPool, itsTop);
            itsTop = ClassFileWriter.putInt16(ntIndex, itsPool, itsTop);
            theIndex = itsTopIndex++;
            itsMethodRefHash.put(ref, theIndex);
        }
        return (short)theIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,addInterfaceMethodRef,"    short addInterfaceMethodRef(String className,
                                String methodName, String methodType)
    {
        short ntIndex = addNameAndType(methodName, methodType);
        short classIndex = addClass(className);
        ensure(5);
        itsPool[itsTop++] = CONSTANT_InterfaceMethodref;
        itsTop = ClassFileWriter.putInt16(classIndex, itsPool, itsTop);
        itsTop = ClassFileWriter.putInt16(ntIndex, itsPool, itsTop);
        return (short)(itsTopIndex++);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,ensure,"    void ensure(int howMuch)
    {
        if (itsTop + howMuch > itsPool.length) {
            int newCapacity = itsPool.length * 2;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,equals,"    public boolean equals(Object obj)
    {
        if (!(obj instanceof FieldOrMethodRef)) { return false; }
        FieldOrMethodRef x = (FieldOrMethodRef)obj;
        return className.equals(x.className)
            && name.equals(x.name)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassFileWriter.java,hashCode,"    public int hashCode()
    {
        if (hashCode == -1) {
            int h1 = className.hashCode();
            int h2 = name.hashCode();
            int h3 = type.hashCode();
            hashCode = h1 ^ h2 ^ h3;
        }
        return hashCode;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,getClassName,"    public String getClassName()
    {
        return ""Object"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,has,"    public boolean has(int index, Scriptable start)
    {
        if (0 <= index && index < args.length) {
            if (args[index] != NOT_FOUND) {
                return true;
            }
        }
        return super.has(index, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,get,"    public Object get(int index, Scriptable start)
    {
        if (0 <= index && index < args.length) {
            Object value = args[index];
            if (value != NOT_FOUND) {
                if (sharedWithActivation(index)) {
                    NativeFunction f = activation.function;
                    String argName = f.getParamOrVarName(index);
                    value = activation.get(argName, activation);
                    if (value == NOT_FOUND) Kit.codeBug();
                }
                return value;
            }
        }
        return super.get(index, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,sharedWithActivation,"    private boolean sharedWithActivation(int index)
    {
        NativeFunction f = activation.function;
        int definedCount = f.getParamCount();
        if (index < definedCount) {
            // Check if argument is not hidden by later argument with the same
            // name as hidden arguments are not shared with activation
            if (index < definedCount - 1) {
                String argName = f.getParamOrVarName(index);
                for (int i = index + 1; i < definedCount; i++) {
                    if (argName.equals(f.getParamOrVarName(i))) {
                        return false;
                    }
                }
            }
            return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,put,"    public void put(int index, Scriptable start, Object value)
    {
        if (0 <= index && index < args.length) {
            if (args[index] != NOT_FOUND) {
                if (sharedWithActivation(index)) {
                    String argName;
                    argName = activation.function.getParamOrVarName(index);
                    activation.put(argName, activation, value);
                    return;
                }
                synchronized (this) {
                    if (args[index] != NOT_FOUND) {
                        if (args == activation.originalArgs) {
                            args = args.clone();
                        }
                        args[index] = value;
                        return;
                    }
                }
            }
        }
        super.put(index, start, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,delete,"    public void delete(int index)
    {
        if (0 <= index && index < args.length) {
            synchronized (this) {
                if (args[index] != NOT_FOUND) {
                    if (args == activation.originalArgs) {
                        args = args.clone();
                    }
                    args[index] = NOT_FOUND;
                    return;
                }
            }
        }
        super.delete(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:15:04 EDT
        L0: { id = 0; String X = null; int c;
            if (s.length()==6) {
                c=s.charAt(5);
                if (c=='e') { X=""callee"";id=Id_callee; }
                else if (c=='h') { X=""length"";id=Id_length; }
                else if (c=='r') { X=""caller"";id=Id_caller; }
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_callee:
          case Id_caller:
          case Id_length:
            attr = DONTENUM;
            break;
          default: throw new IllegalStateException();
        }
        return instanceIdInfo(attr, id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id) {
            case Id_callee: return ""callee"";
            case Id_length: return ""length"";
            case Id_caller: return ""caller"";
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id) {
            case Id_callee: return calleeObj;
            case Id_length: return lengthObj;
            case Id_caller: {
                Object value = callerObj;
                if (value == UniqueTag.NULL_VALUE) { value = null; }
                else if (value == null) {
                    NativeCall caller = activation.parentActivationCall;
                    if (caller != null) {
                        value = caller.get(""arguments"", caller);
                    }
                }
                return value;
            }
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,setInstanceIdValue,"    protected void setInstanceIdValue(int id, Object value)
    {
        switch (id) {
            case Id_callee: calleeObj = value; return;
            case Id_length: lengthObj = value; return;
            case Id_caller:
                callerObj = (value != null) ? value : UniqueTag.NULL_VALUE;
                return;
        }
        super.setInstanceIdValue(id, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Arguments.java,getIds,"    Object[] getIds(boolean getAll)
    {
        Object[] ids = super.getIds(getAll);
        if (getAll && args.length != 0) {
            boolean[] present = null;
            int extraCount = args.length;
            for (int i = 0; i != ids.length; ++i) {
                Object id = ids[i];
                if (id instanceof Integer) {
                    int index = ((Integer)id).intValue();
                    if (0 <= index && index < args.length) {
                        if (present == null) {
                            present = new boolean[args.length];
                        }
                        if (!present[index]) {
                            present[index] = true;
                            extraCount--;
                        }
                    }
                }
            }
            if (extraCount != 0) {
                Object[] tmp = new Object[extraCount + ids.length];
                System.arraycopy(ids, 0, tmp, extraCount, ids.length);
                ids = tmp;
                int offset = 0;
                for (int i = 0; i != args.length; ++i) {
                    if (present == null || !present[i]) {
                        ids[offset] = new Integer(i);
                        ++offset;
                    }
                }
                if (offset != extraCount) Kit.codeBug();
            }
        }
        return ids;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        BaseFunction obj = new BaseFunction();
        // Function.prototype attributes: see ECMA 15.3.3.1 
        obj.prototypePropertyAttributes = DONTENUM | READONLY | PERMANENT;
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getClassName,"    public String getClassName() {
        return ""Function"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,hasInstance,"    public boolean hasInstance(Scriptable instance)
    {
        Object protoProp = ScriptableObject.getProperty(this, ""prototype"");
        if (protoProp instanceof Scriptable) {
            return ScriptRuntime.jsDelegatesTo(instance, (Scriptable)protoProp);
        }
        throw ScriptRuntime.typeError1(""msg.instanceof.bad.prototype"",
                                       getFunctionName());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:15:15 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 4: X=""name"";id=Id_name; break L;
            case 5: X=""arity"";id=Id_arity; break L;
            case 6: X=""length"";id=Id_length; break L;
            case 9: c=s.charAt(0);
                if (c=='a') { X=""arguments"";id=Id_arguments; }
                else if (c=='p') { X=""prototype"";id=Id_prototype; }
                break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
// #/string_id_map#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_length:
          case Id_arity:
          case Id_name:
            attr = DONTENUM | READONLY | PERMANENT;
            break;
          case Id_prototype:
            attr = prototypePropertyAttributes;
            break;
          case Id_arguments:
            attr = DONTENUM | PERMANENT;
            break;
          default: throw new IllegalStateException();
        }
        return instanceIdInfo(attr, id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id) {
            case Id_length:       return ""length"";
            case Id_arity:        return ""arity"";
            case Id_name:         return ""name"";
            case Id_prototype:    return ""prototype"";
            case Id_arguments:    return ""arguments"";
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id) {
          case Id_length:    return ScriptRuntime.wrapInt(getLength());
          case Id_arity:     return ScriptRuntime.wrapInt(getArity());
          case Id_name:      return getFunctionName();
          case Id_prototype: return getPrototypeProperty();
          case Id_arguments: return getArguments();
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,setInstanceIdValue,"    protected void setInstanceIdValue(int id, Object value)
    {
        if (id == Id_prototype) {
            if ((prototypePropertyAttributes & READONLY) == 0) {
                prototypeProperty = (value != null)
                                    ? value : UniqueTag.NULL_VALUE;
            }
            return;
        } else if (id == Id_arguments) {
            if (value == NOT_FOUND) {
                // This should not be called since ""arguments"" is PERMANENT
                Kit.codeBug();
            }
            defaultPut(""arguments"", value);
        }
        super.setInstanceIdValue(id, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,fillConstructorProperties,"    protected void fillConstructorProperties(IdFunctionObject ctor)
    {
        // Fix up bootstrapping problem: getPrototype of the IdFunctionObject
        // can not return Function.prototype because Function object is not
        // yet defined.
        ctor.setPrototype(this);
        super.fillConstructorProperties(ctor);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=1; s=""constructor""; break;
          case Id_toString:    arity=1; s=""toString"";    break;
          case Id_toSource:    arity=1; s=""toSource"";    break;
          case Id_apply:       arity=2; s=""apply"";       break;
          case Id_call:        arity=1; s=""call"";        break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(FUNCTION_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,isApply,"    static boolean isApply(IdFunctionObject f) {
        return f.hasTag(FUNCTION_TAG) && f.methodId() == Id_apply;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,isApplyOrCall,"    static boolean isApplyOrCall(IdFunctionObject f) {
        if(f.hasTag(FUNCTION_TAG)) {
            switch(f.methodId()) {
                case Id_apply:
                case Id_call:
                    return true;
            }
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(FUNCTION_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor:
            return jsConstructor(cx, scope, args);

          case Id_toString: {
            BaseFunction realf = realFunction(thisObj, f);
            int indent = ScriptRuntime.toInt32(args, 0);
            return realf.decompile(indent, 0);
          }

          case Id_toSource: {
            BaseFunction realf = realFunction(thisObj, f);
            int indent = 0;
            int flags = Decompiler.TO_SOURCE_FLAG;
            if (args.length != 0) {
                indent = ScriptRuntime.toInt32(args[0]);
                if (indent >= 0) {
                    flags = 0;
                } else {
                    indent = 0;
                }
            }
            return realf.decompile(indent, flags);
          }

          case Id_apply:
          case Id_call:
            return ScriptRuntime.applyOrCall(id == Id_apply,
                                             cx, scope, thisObj, args);
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,realFunction,"    private BaseFunction realFunction(Scriptable thisObj, IdFunctionObject f)
    {
        Object x = thisObj.getDefaultValue(ScriptRuntime.FunctionClass);
        if (x instanceof BaseFunction) {
            return (BaseFunction)x;
        }
        throw ScriptRuntime.typeError1(""msg.incompat.call"",
                                       f.getFunctionName());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,setImmunePrototypeProperty,"    public void setImmunePrototypeProperty(Object value)
    {
        if ((prototypePropertyAttributes & READONLY) != 0) {
            throw new IllegalStateException();
        }
        prototypeProperty = (value != null) ? value : UniqueTag.NULL_VALUE;
        prototypePropertyAttributes = DONTENUM | PERMANENT | READONLY;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getClassPrototype,"    protected Scriptable getClassPrototype()
    {
        Object protoVal = getPrototypeProperty();
        if (protoVal instanceof Scriptable) {
            return (Scriptable) protoVal;
        }
        return getClassPrototype(this, ""Object"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        return Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        Scriptable result = createObject(cx, scope);
        if (result != null) {
            Object val = call(cx, scope, result, args);
            if (val instanceof Scriptable) {
                result = (Scriptable)val;
            }
        } else {
            Object val = call(cx, scope, null, args);
            if (!(val instanceof Scriptable)) {
                // It is program error not to return Scriptable from
                // the call method if createObject returns null.
                throw new IllegalStateException(
                    ""Bad implementaion of call as constructor, name=""
                    +getFunctionName()+"" in ""+getClass().getName());
            }
            result = (Scriptable)val;
            if (result.getPrototype() == null) {
                result.setPrototype(getClassPrototype());
            }
            if (result.getParentScope() == null) {
                Scriptable parent = getParentScope();
                if (result != parent) {
                    result.setParentScope(parent);
                }
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,createObject,"    public Scriptable createObject(Context cx, Scriptable scope)
    {
        Scriptable newInstance = new NativeObject();
        newInstance.setPrototype(getClassPrototype());
        newInstance.setParentScope(getParentScope());
        return newInstance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,decompile,"    String decompile(int indent, int flags)
    {
        StringBuffer sb = new StringBuffer();
        boolean justbody = (0 != (flags & Decompiler.ONLY_BODY_FLAG));
        if (!justbody) {
            sb.append(""function "");
            sb.append(getFunctionName());
            sb.append(""() {\n\t"");
        }
        sb.append(""[native code, arity="");
        sb.append(getArity());
        sb.append(""]\n"");
        if (!justbody) {
            sb.append(""}\n"");
        }
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getArity,"    public int getArity() { return 0; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getLength,"    public int getLength() { return 0; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getFunctionName,"    public String getFunctionName()
    {
        return """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getPrototypeProperty,"    final Object getPrototypeProperty() {
        Object result = prototypeProperty;
        if (result == null) {
            synchronized (this) {
                result = prototypeProperty;
                if (result == null) {
                    setupDefaultPrototype();
                    result = prototypeProperty;
                }
            }
        }
        else if (result == UniqueTag.NULL_VALUE) { result = null; }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,setupDefaultPrototype,"    private void setupDefaultPrototype()
    {
        NativeObject obj = new NativeObject();
        final int attr = ScriptableObject.DONTENUM;
        obj.defineProperty(""constructor"", this, attr);
        // put the prototype property into the object now, then in the
        // wacky case of a user defining a function Object(), we don't
        // get an infinite loop trying to find the prototype.
        prototypeProperty = obj;
        Scriptable proto = getObjectPrototype(this);
        if (proto != obj) {
            // not the one we just made, it must remain grounded",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,getArguments,"    private Object getArguments()
    {
      // <Function name>.arguments is deprecated, so we use a slow
      // way of getting it that doesn't add to the invocation cost.
      // TODO: add warning, error based on version
      Object value = defaultGet(""arguments"");
      if (value != NOT_FOUND) {
          // Should after changing <Function name>.arguments its
          // activation still be available during Function call?
          // This code assumes it should not:
          // defaultGet(""arguments"") != NOT_FOUND
          // means assigned arguments
          return value;
      }
      Context cx = Context.getContext();
      NativeCall activation = ScriptRuntime.findFunctionActivation(cx, this);
      return (activation == null)
             ? null",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,jsConstructor,"    private static Object jsConstructor(Context cx, Scriptable scope,
                                        Object[] args)
    {
        int arglen = args.length;
        StringBuffer sourceBuf = new StringBuffer();

        sourceBuf.append(""function "");
        /* version != 1.2 Function constructor behavior -
         * print 'anonymous' as the function name if the
         * version (under which the function was compiled) is
         * less than 1.2... or if it's greater than 1.2, because
         * we need to be closer to ECMA.
         */
        if (cx.getLanguageVersion() != Context.VERSION_1_2) {
            sourceBuf.append(""anonymous"");
        }
        sourceBuf.append('(');

        // Append arguments as coma separated strings
        for (int i = 0; i < arglen - 1; i++) {
            if (i > 0) {
                sourceBuf.append(',');
            }
            sourceBuf.append(ScriptRuntime.toString(args[i]));
        }
        sourceBuf.append("") {"");
        if (arglen != 0) {
            // append function body
            String funBody = ScriptRuntime.toString(args[arglen - 1]);
            sourceBuf.append(funBody);
        }
        sourceBuf.append('}');
        String source = sourceBuf.toString();

        int[] linep = new int[1];
        String filename = Context.getSourcePositionFromStack(linep);
        if (filename == null) {
            filename = ""<eval'ed string>"";
            linep[0] = 1;
        }

        String sourceURI = ScriptRuntime.
            makeUrlForGeneratedScript(false, filename, linep[0]);

        Scriptable global = ScriptableObject.getTopLevelScope(scope);

        ErrorReporter reporter;
        reporter = DefaultErrorReporter.forEval(cx.getErrorReporter());

        Evaluator evaluator = Context.createInterpreter();
        if (evaluator == null) {
            throw new JavaScriptException(""Interpreter not present"",
                    filename, linep[0]);            
        }

        // Compile with explicit interpreter instance to force interpreter
        // mode.
        return cx.compileFunction(global, source, evaluator, reporter,
                                  sourceURI, 1, null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,BaseFunction.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #string_id_map#
// #generated# Last update: 2007-05-09 08:15:15 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 4: X=""call"";id=Id_call; break L;
            case 5: X=""apply"";id=Id_apply; break L;
            case 8: c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
                break L;
            case 11: X=""constructor"";id=Id_constructor; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,get,"    public static ClassCache get(Scriptable scope)
    {
        ClassCache cache = (ClassCache)
                ScriptableObject.getTopScopeValue(scope, AKEY);
        if (cache == null) {
            throw new RuntimeException(""Can't find top level scope for "" +
                    ""ClassCache.get"");
        }
        return cache;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,associate,"    public boolean associate(ScriptableObject topScope)
    {
        if (topScope.getParentScope() != null) {
            // Can only associate cache with top level scope
            throw new IllegalArgumentException();
        }
        if (this == topScope.associateValue(AKEY, this)) {
            return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,clearCaches,"    public synchronized void clearCaches()
    {
        classTable.clear();
        javaAdapterGeneratedClasses.clear();
        classAdapterCache.clear();
        interfaceAdapterCache = null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,isCachingEnabled,"    public final boolean isCachingEnabled()
    {
        return cachingIsEnabled;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,setCachingEnabled,"    public synchronized void setCachingEnabled(boolean enabled)
    {
        if (enabled == cachingIsEnabled)
            return;
        if (!enabled)
            clearCaches();
        cachingIsEnabled = enabled;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,getClassCacheMap,"    Map<Class<?>,JavaMembers> getClassCacheMap() {
        return classTable;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,getInterfaceAdapterCacheMap,"    Map<JavaAdapter.JavaAdapterSignature,Class<?>> getInterfaceAdapterCacheMap()
    {
        return classAdapterCache;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,isInvokerOptimizationEnabled,"    public boolean isInvokerOptimizationEnabled()
    {
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,newClassSerialNumber,"    public final synchronized int newClassSerialNumber()
    {
        return ++generatedClassSerial;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,getInterfaceAdapter,"    Object getInterfaceAdapter(Class<?> cl)
    {
        return interfaceAdapterCache == null 
                    ? null ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCache.java,cacheInterfaceAdapter,"    synchronized void cacheInterfaceAdapter(Class<?> cl, Object iadapter)
    {
        if (cachingIsEnabled) {
            if (interfaceAdapterCache == null) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,initFromContext,"    public void initFromContext(Context cx)
    {
        setErrorReporter(cx.getErrorReporter());
        this.languageVersion = cx.getLanguageVersion();
        useDynamicScope = cx.compileFunctionsWithDynamicScopeFlag;
        generateDebugInfo = (!cx.isGeneratingDebugChanged()
                             || cx.isGeneratingDebug());
        reservedKeywordAsIdentifier
            = cx.hasFeature(Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
        allowMemberExprAsFunctionName
            = cx.hasFeature(Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
        strictMode
            = cx.hasFeature(Context.FEATURE_STRICT_MODE);
        warningAsError = cx.hasFeature(Context.FEATURE_WARNING_AS_ERROR);
        xmlAvailable
            = cx.hasFeature(Context.FEATURE_E4X);

        optimizationLevel = cx.getOptimizationLevel();

        generatingSource = cx.isGeneratingSource();
        activationNames = cx.activationNames;
        
        // Observer code generation in compiled code :
        generateObserverCount = cx.generateObserverCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,getErrorReporter,"    public final ErrorReporter getErrorReporter()
    {
        return errorReporter;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setErrorReporter,"    public void setErrorReporter(ErrorReporter errorReporter)
    {
        if (errorReporter == null) throw new IllegalArgumentException();
        this.errorReporter = errorReporter;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,getLanguageVersion,"    public final int getLanguageVersion()
    {
        return languageVersion;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setLanguageVersion,"    public void setLanguageVersion(int languageVersion)
    {
        Context.checkLanguageVersion(languageVersion);
        this.languageVersion = languageVersion;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,isGenerateDebugInfo,"    public final boolean isGenerateDebugInfo()
    {
        return generateDebugInfo;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setGenerateDebugInfo,"    public void setGenerateDebugInfo(boolean flag)
    {
        this.generateDebugInfo = flag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,isUseDynamicScope,"    public final boolean isUseDynamicScope()
    {
        return useDynamicScope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,isReservedKeywordAsIdentifier,"    public final boolean isReservedKeywordAsIdentifier()
    {
        return reservedKeywordAsIdentifier;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setReservedKeywordAsIdentifier,"    public void setReservedKeywordAsIdentifier(boolean flag)
    {
        reservedKeywordAsIdentifier = flag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,isAllowMemberExprAsFunctionName,"    public final boolean isAllowMemberExprAsFunctionName()
    {
        return allowMemberExprAsFunctionName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setAllowMemberExprAsFunctionName,"    public void setAllowMemberExprAsFunctionName(boolean flag)
    {
        allowMemberExprAsFunctionName = flag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,isXmlAvailable,"    public final boolean isXmlAvailable()
    {
        return xmlAvailable;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setXmlAvailable,"    public void setXmlAvailable(boolean flag)
    {
        xmlAvailable = flag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,getOptimizationLevel,"    public final int getOptimizationLevel()
    {
        return optimizationLevel;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setOptimizationLevel,"    public void setOptimizationLevel(int level)
    {
        Context.checkOptimizationLevel(level);
        this.optimizationLevel = level;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,isGeneratingSource,"    public final boolean isGeneratingSource()
    {
        return generatingSource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,isStrictMode,"    public final boolean isStrictMode()
    {
        return strictMode;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,reportWarningAsError,"    public final boolean reportWarningAsError()
    {
        return warningAsError;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setGeneratingSource,"    public void setGeneratingSource(boolean generatingSource)
    {
        this.generatingSource = generatingSource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,isGenerateObserverCount,"    public boolean isGenerateObserverCount() {
    	return generateObserverCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CompilerEnvirons.java,setGenerateObserverCount,"    public void setGenerateObserverCount(boolean generateObserverCount) {
        this.generateObserverCount = generateObserverCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getCurrentContext,"    public static Context getCurrentContext()
    {
        Object helper = VMBridge.instance.getThreadContextHelper();
        return VMBridge.instance.getContext(helper);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,enter,"    public static Context enter()
    {
        return enter(null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,enter,"    public static Context enter(Context cx)
    {
        return enter(cx, ContextFactory.getGlobal());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,enter,"    static final Context enter(Context cx, ContextFactory factory)
    {
        Object helper = VMBridge.instance.getThreadContextHelper();
        Context old = VMBridge.instance.getContext(helper);
        if (old != null) {
            cx = old;
        } else {
            if (cx == null) {
                cx = factory.makeContext();
                if (cx.enterCount != 0) {
                    throw new IllegalStateException(""factory.makeContext() returned Context instance already associated with some thread"");
                }
                factory.onContextCreated(cx);
                if (factory.isSealed() && !cx.isSealed()) {
                    cx.seal(null);
                }
            } else {
                if (cx.enterCount != 0) {
                    throw new IllegalStateException(""can not use Context instance already associated with some thread"");
                }
            }
            VMBridge.instance.setContext(helper, cx);
        }
        ++cx.enterCount;
        return cx;
     }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,exit,"    public static void exit()
    {
        Object helper = VMBridge.instance.getThreadContextHelper();
        Context cx = VMBridge.instance.getContext(helper);
        if (cx == null) {
            throw new IllegalStateException(
                ""Calling Context.exit without previous Context.enter"");
        }
        if (cx.enterCount < 1) Kit.codeBug();
        if (--cx.enterCount == 0) {
            VMBridge.instance.setContext(helper, null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,call,"    public static Object call(ContextAction action)
    {
        return call(ContextFactory.getGlobal(), action);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,call,"    public static Object call(ContextFactory factory, final Callable callable,
                              final Scriptable scope, final Scriptable thisObj,
                              final Object[] args)
    {
        if(factory == null) {
            factory = ContextFactory.getGlobal();
        }
        return call(factory, new ContextAction() {
            public Object run(Context cx) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,run,"            public Object run(Context cx) {
                return callable.call(cx, scope, thisObj, args);
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,call,"    static Object call(ContextFactory factory, ContextAction action) {
        Context cx = enter(null, factory);
        try {
            return action.run(cx);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,addContextListener,"    public static void addContextListener(ContextListener listener)
    {
        // Special workaround for the debugger
        String DBG = ""org.mozilla.javascript.tools.debugger.Main"";
        if (DBG.equals(listener.getClass().getName())) {
            Class cl = listener.getClass();
            Class factoryClass = Kit.classOrNull(
                ""org.mozilla.javascript.ContextFactory"");
            Class[] sig = { factoryClass };
            Object[] args = { ContextFactory.getGlobal() };
            try {
                Method m = cl.getMethod(""attachTo"", sig);
                m.invoke(listener, args);
            } catch (Exception ex) {
                RuntimeException rex = new RuntimeException();
                Kit.initCause(rex, ex);
                throw rex;
            }
            return;
        }

        ContextFactory.getGlobal().addListener(listener);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,removeContextListener,"    public static void removeContextListener(ContextListener listener)
    {
        ContextFactory.getGlobal().addListener(listener);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getFactory,"    public final ContextFactory getFactory()
    {
        return factory;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,isSealed,"    public final boolean isSealed()
    {
        return sealed;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,seal,"    public final void seal(Object sealKey)
    {
        if (sealed) onSealedMutation();
        sealed = true;
        this.sealKey = sealKey;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,unseal,"    public final void unseal(Object sealKey)
    {
        if (sealKey == null) throw new IllegalArgumentException();
        if (this.sealKey != sealKey) throw new IllegalArgumentException();
        if (!sealed) throw new IllegalStateException();
        sealed = false;
        this.sealKey = null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,onSealedMutation,"    static void onSealedMutation()
    {
        throw new IllegalStateException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getLanguageVersion,"    public final int getLanguageVersion()
    {
       return version;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setLanguageVersion,"    public void setLanguageVersion(int version)
    {
        if (sealed) onSealedMutation();
        checkLanguageVersion(version);
        Object listeners = propertyListeners;
        if (listeners != null && version != this.version) {
            firePropertyChangeImpl(listeners, languageVersionProperty,
                               new Integer(this.version),
                               new Integer(version));
        }
        this.version = version;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,isValidLanguageVersion,"    public static boolean isValidLanguageVersion(int version)
    {
        switch (version) {
            case VERSION_DEFAULT:
            case VERSION_1_0:
            case VERSION_1_1:
            case VERSION_1_2:
            case VERSION_1_3:
            case VERSION_1_4:
            case VERSION_1_5:
            case VERSION_1_6:
            case VERSION_1_7:
                return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,checkLanguageVersion,"    public static void checkLanguageVersion(int version)
    {
        if (isValidLanguageVersion(version)) {
            return;
        }
        throw new IllegalArgumentException(""Bad language version: ""+version);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getImplementationVersion,"    public final String getImplementationVersion()
    {
        // XXX Probably it would be better to embed this directly into source
        // with special build preprocessing but that would require some ant
        // tweaking and then replacing token in resource files was simpler
        if (implementationVersion == null) {
            implementationVersion
                = ScriptRuntime.getMessage0(""implementation.version"");
        }
        return implementationVersion;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getErrorReporter,"    public final ErrorReporter getErrorReporter()
    {
        if (errorReporter == null) {
            return DefaultErrorReporter.instance;
        }
        return errorReporter;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setErrorReporter,"    public final ErrorReporter setErrorReporter(ErrorReporter reporter)
    {
        if (sealed) onSealedMutation();
        if (reporter == null) throw new IllegalArgumentException();
        ErrorReporter old = getErrorReporter();
        if (reporter == old) {
            return old;
        }
        Object listeners = propertyListeners;
        if (listeners != null) {
            firePropertyChangeImpl(listeners, errorReporterProperty,
                                   old, reporter);
        }
        this.errorReporter = reporter;
        return old;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getLocale,"    public final Locale getLocale()
    {
        if (locale == null)
            locale = Locale.getDefault();
        return locale;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setLocale,"    public final Locale setLocale(Locale loc)
    {
        if (sealed) onSealedMutation();
        Locale result = locale;
        locale = loc;
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,addPropertyChangeListener,"    public final void addPropertyChangeListener(PropertyChangeListener l)
    {
        if (sealed) onSealedMutation();
        propertyListeners = Kit.addListener(propertyListeners, l);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,removePropertyChangeListener,"    public final void removePropertyChangeListener(PropertyChangeListener l)
    {
        if (sealed) onSealedMutation();
        propertyListeners = Kit.removeListener(propertyListeners, l);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,firePropertyChange,"    final void firePropertyChange(String property, Object oldValue,
                                  Object newValue)
    {
        Object listeners = propertyListeners;
        if (listeners != null) {
            firePropertyChangeImpl(listeners, property, oldValue, newValue);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,firePropertyChangeImpl,"    private void firePropertyChangeImpl(Object listeners, String property,
                                        Object oldValue, Object newValue)
    {
        for (int i = 0; ; ++i) {
            Object l = Kit.getListener(listeners, i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportWarning,"    public static void reportWarning(String message, String sourceName,
                                     int lineno, String lineSource,
                                     int lineOffset)
    {
        Context cx = Context.getContext();
        if (cx.hasFeature(FEATURE_WARNING_AS_ERROR))
            reportError(message, sourceName, lineno, lineSource, lineOffset);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportWarning,"    public static void reportWarning(String message)
    {
        int[] linep = { 0 };
        String filename = getSourcePositionFromStack(linep);
        Context.reportWarning(message, filename, linep[0], null, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportWarning,"    public static void reportWarning(String message, Throwable t)
    {
        int[] linep = { 0 };
        String filename = getSourcePositionFromStack(linep);
        Writer sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        pw.println(message);
        t.printStackTrace(pw);
        pw.flush();
        Context.reportWarning(sw.toString(), filename, linep[0], null, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportError,"    public static void reportError(String message, String sourceName,
                                   int lineno, String lineSource,
                                   int lineOffset)
    {
        Context cx = getCurrentContext();
        if (cx != null) {
            cx.getErrorReporter().error(message, sourceName, lineno,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportError,"    public static void reportError(String message)
    {
        int[] linep = { 0 };
        String filename = getSourcePositionFromStack(linep);
        Context.reportError(message, filename, linep[0], null, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportRuntimeError,"    public static EvaluatorException reportRuntimeError(String message,
                                                        String sourceName,
                                                        int lineno,
                                                        String lineSource,
                                                        int lineOffset)
    {
        Context cx = getCurrentContext();
        if (cx != null) {
            return cx.getErrorReporter().",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportRuntimeError0,"    static EvaluatorException reportRuntimeError0(String messageId)
    {
        String msg = ScriptRuntime.getMessage0(messageId);
        return reportRuntimeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportRuntimeError1,"    static EvaluatorException reportRuntimeError1(String messageId,
                                                  Object arg1)
    {
        String msg = ScriptRuntime.getMessage1(messageId, arg1);
        return reportRuntimeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportRuntimeError2,"    static EvaluatorException reportRuntimeError2(String messageId,
                                                  Object arg1, Object arg2)
    {
        String msg = ScriptRuntime.getMessage2(messageId, arg1, arg2);
        return reportRuntimeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportRuntimeError3,"    static EvaluatorException reportRuntimeError3(String messageId,
                                                  Object arg1, Object arg2,
                                                  Object arg3)
    {
        String msg = ScriptRuntime.getMessage3(messageId, arg1, arg2, arg3);
        return reportRuntimeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportRuntimeError4,"    static EvaluatorException reportRuntimeError4(String messageId,
                                                  Object arg1, Object arg2,
                                                  Object arg3, Object arg4)
    {
        String msg
            = ScriptRuntime.getMessage4(messageId, arg1, arg2, arg3, arg4);
        return reportRuntimeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,reportRuntimeError,"    public static EvaluatorException reportRuntimeError(String message)
    {
        int[] linep = { 0 };
        String filename = getSourcePositionFromStack(linep);
        return Context.reportRuntimeError(message, filename, linep[0], null, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,initStandardObjects,"    public final ScriptableObject initStandardObjects()
    {
        return initStandardObjects(null, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,initStandardObjects,"    public final Scriptable initStandardObjects(ScriptableObject scope)
    {
        return initStandardObjects(scope, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,initStandardObjects,"    public ScriptableObject initStandardObjects(ScriptableObject scope,
                                                boolean sealed)
    {
        return ScriptRuntime.initStandardObjects(this, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getUndefinedValue,"    public static Object getUndefinedValue()
    {
        return Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,evaluateString,"    public final Object evaluateString(Scriptable scope, String source,
                                       String sourceName, int lineno,
                                       Object securityDomain)
    {
        Script script = compileString(source, sourceName, lineno,
                                      securityDomain);
        if (script != null) {
            return script.exec(this, scope);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,evaluateReader,"    public final Object evaluateReader(Scriptable scope, Reader in,
                                       String sourceName, int lineno,
                                       Object securityDomain)
        throws IOException
    {
        Script script = compileReader(scope, in, sourceName, lineno,
                                      securityDomain);
        if (script != null) {
            return script.exec(this, scope);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,stringIsCompilableUnit,"    public final boolean stringIsCompilableUnit(String source)
    {
        boolean errorseen = false;
        CompilerEnvirons compilerEnv = new CompilerEnvirons();
        compilerEnv.initFromContext(this);
        // no source name or source text manager, because we're just
        // going to throw away the result.
        compilerEnv.setGeneratingSource(false);
        /*APPJET*/
        Parser p = InformativeParser.makeParser(compilerEnv,
                                                DefaultErrorReporter.instance);
        try {
            p.parse(source, null, 1);
        } catch (EvaluatorException ee) {
            errorseen = true;
        }
        // Return false only if an error occurred as a result of reading past
        // the end of the file, i.e. if the source could be fixed by
        // appending more source.
        if (errorseen && p.eof())
            return false;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,compileReader,"    public final Script compileReader(Scriptable scope, Reader in,
                                      String sourceName, int lineno,
                                      Object securityDomain)
        throws IOException
    {
        return compileReader(in, sourceName, lineno, securityDomain);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,compileReader,"    public final Script compileReader(Reader in, String sourceName,
                                      int lineno, Object securityDomain)
        throws IOException
    {
        if (lineno < 0) {
            // For compatibility IllegalArgumentException can not be thrown here
            lineno = 0;
        }
        return (Script) compileImpl(null, in, null, sourceName, lineno,
                                    securityDomain, false, null, null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,compileString,"    public final Script compileString(String source,
                                      String sourceName, int lineno,
                                      Object securityDomain)
    {
        if (lineno < 0) {
            // For compatibility IllegalArgumentException can not be thrown here
            lineno = 0;
        }
        return compileString(source, null, null, sourceName, lineno,
                             securityDomain);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,compileString,"    final Script compileString(String source,
                               Evaluator compiler,
                               ErrorReporter compilationErrorReporter,
                               String sourceName, int lineno,
                               Object securityDomain)
    {
        try {
            return (Script) compileImpl(null, null, source, sourceName, lineno,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,compileFunction,"    public final Function compileFunction(Scriptable scope, String source,
                                          String sourceName, int lineno,
                                          Object securityDomain)
    {
        return compileFunction(scope, source, null, null, sourceName, lineno,
                               securityDomain);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,compileFunction,"    final Function compileFunction(Scriptable scope, String source,
                                   Evaluator compiler,
                                   ErrorReporter compilationErrorReporter,
                                   String sourceName, int lineno,
                                   Object securityDomain)
    {
        try {
            return (Function) compileImpl(scope, null, source, sourceName,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,decompileScript,"    public final String decompileScript(Script script, int indent)
    {
        NativeFunction scriptImpl = (NativeFunction) script;
        return scriptImpl.decompile(indent, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,decompileFunction,"    public final String decompileFunction(Function fun, int indent)
    {
        if (fun instanceof BaseFunction)
            return ((BaseFunction)fun).decompile(indent, 0);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,decompileFunctionBody,"    public final String decompileFunctionBody(Function fun, int indent)
    {
        if (fun instanceof BaseFunction) {
            BaseFunction bf = (BaseFunction)fun;
            return bf.decompile(indent, Decompiler.ONLY_BODY_FLAG);
        }
        // ALERT: not sure what the right response here is.
        return ""[native code]\n"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,newObject,"    public final Scriptable newObject(Scriptable scope)
    {
        return newObject(scope, ""Object"", ScriptRuntime.emptyArgs);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,newObject,"    public final Scriptable newObject(Scriptable scope, String constructorName)
    {
        return newObject(scope, constructorName, ScriptRuntime.emptyArgs);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,newObject,"    public final Scriptable newObject(Scriptable scope, String constructorName,
                                      Object[] args)
    {
        scope = ScriptableObject.getTopLevelScope(scope);
        Function ctor = ScriptRuntime.getExistingCtor(this, scope,
                                                      constructorName);
        if (args == null) { args = ScriptRuntime.emptyArgs; }
        return ctor.construct(this, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,newArray,"    public final Scriptable newArray(Scriptable scope, int length)
    {
        NativeArray result = new NativeArray(length);
        ScriptRuntime.setObjectProtoAndParent(result, scope);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,newArray,"    public final Scriptable newArray(Scriptable scope, Object[] elements)
    {
        if (elements.getClass().getComponentType() != ScriptRuntime.ObjectClass)
            throw new IllegalArgumentException();
        NativeArray result = new NativeArray(elements);
        ScriptRuntime.setObjectProtoAndParent(result, scope);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getElements,"    public final Object[] getElements(Scriptable object)
    {
        return ScriptRuntime.getArrayElements(object);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,toBoolean,"    public static boolean toBoolean(Object value)
    {
        return ScriptRuntime.toBoolean(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,toNumber,"    public static double toNumber(Object value)
    {
        return ScriptRuntime.toNumber(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,toString,"    public static String toString(Object value)
    {
        return ScriptRuntime.toString(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,toObject,"    public static Scriptable toObject(Object value, Scriptable scope)
    {
        return ScriptRuntime.toObject(scope, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,toObject,"    public static Scriptable toObject(Object value, Scriptable scope,
                                      Class staticType)
    {
        return ScriptRuntime.toObject(scope, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,javaToJS,"    public static Object javaToJS(Object value, Scriptable scope)
    {
        if (value instanceof String || value instanceof Number
            || value instanceof Boolean || value instanceof Scriptable)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,jsToJava,"    public static Object jsToJava(Object value, Class desiredType)
        throws EvaluatorException
    {
        return NativeJavaObject.coerceTypeImpl(desiredType, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,toType,"    public static Object toType(Object value, Class desiredType)
        throws IllegalArgumentException
    {
        try {
            return jsToJava(value, desiredType);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,throwAsScriptRuntimeEx,"    public static RuntimeException throwAsScriptRuntimeEx(Throwable e)
    {
        while ((e instanceof InvocationTargetException)) {
            e = ((InvocationTargetException) e).getTargetException();
        }
        // special handling of Error so scripts would not catch them
        if (e instanceof Error) {
            Context cx = getContext();
            if (cx == null ||
                !cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS))
            {
                throw (Error)e;
            }
        }
        if (e instanceof RhinoException) {
            throw (RhinoException)e;
        }
        throw new WrappedException(e);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,isGeneratingDebug,"    public final boolean isGeneratingDebug()
    {
        return generatingDebug;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setGeneratingDebug,"    public final void setGeneratingDebug(boolean generatingDebug)
    {
        if (sealed) onSealedMutation();
        generatingDebugChanged = true;
        if (generatingDebug && getOptimizationLevel() > 0)
            setOptimizationLevel(0);
        this.generatingDebug = generatingDebug;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,isGeneratingSource,"    public final boolean isGeneratingSource()
    {
        return generatingSource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setGeneratingSource,"    public final void setGeneratingSource(boolean generatingSource)
    {
        if (sealed) onSealedMutation();
        this.generatingSource = generatingSource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getOptimizationLevel,"    public final int getOptimizationLevel()
    {
        return optimizationLevel;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setOptimizationLevel,"    public final void setOptimizationLevel(int optimizationLevel)
    {
        if (sealed) onSealedMutation();
        if (optimizationLevel == -2) {
            // To be compatible with Cocoon fork
            optimizationLevel = -1;
        }
        checkOptimizationLevel(optimizationLevel);
        if (codegenClass == null)
            optimizationLevel = -1;
        this.optimizationLevel = optimizationLevel;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,isValidOptimizationLevel,"    public static boolean isValidOptimizationLevel(int optimizationLevel)
    {
        return -1 <= optimizationLevel && optimizationLevel <= 9;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,checkOptimizationLevel,"    public static void checkOptimizationLevel(int optimizationLevel)
    {
        if (isValidOptimizationLevel(optimizationLevel)) {
            return;
        }
        throw new IllegalArgumentException(
            ""Optimization level outside [-1..9]: ""+optimizationLevel);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getMaximumInterpreterStackDepth,"    public final int getMaximumInterpreterStackDepth()
    {
        return maximumInterpreterStackDepth;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setMaximumInterpreterStackDepth,"    public final void setMaximumInterpreterStackDepth(int max)
    {
        if(sealed) onSealedMutation();
        if(optimizationLevel != -1) {
            throw new IllegalStateException(""Cannot set maximumInterpreterStackDepth when optimizationLevel != -1"");
        }
        if(max < 1) {
            throw new IllegalArgumentException(""Cannot set maximumInterpreterStackDepth to less than 1"");
        }
        maximumInterpreterStackDepth = max;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setSecurityController,"    public final void setSecurityController(SecurityController controller)
    {
        if (sealed) onSealedMutation();
        if (controller == null) throw new IllegalArgumentException();
        if (securityController != null) {
            throw new SecurityException(""Can not overwrite existing SecurityController object"");
        }
        if (SecurityController.hasGlobal()) {
            throw new SecurityException(""Can not overwrite existing global SecurityController object"");
        }
        securityController = controller;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setClassShutter,"    public final void setClassShutter(ClassShutter shutter)
    {
        if (sealed) onSealedMutation();
        if (shutter == null) throw new IllegalArgumentException();
        if (classShutter != null) {
            throw new SecurityException(""Cannot overwrite existing "" +
                                        ""ClassShutter object"");
        }
        classShutter = shutter;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getClassShutter,"    final ClassShutter getClassShutter()
    {
        return classShutter;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getThreadLocal,"    public final Object getThreadLocal(Object key)
    {
        if (hashtable == null)
            return null;
        return hashtable.get(key);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,putThreadLocal,"    public final void putThreadLocal(Object key, Object value)
    {
        if (sealed) onSealedMutation();
        if (hashtable == null)
            hashtable = new Hashtable();
        hashtable.put(key, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,removeThreadLocal,"    public final void removeThreadLocal(Object key)
    {
        if (sealed) onSealedMutation();
        if (hashtable == null)
            return;
        hashtable.remove(key);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,hasCompileFunctionsWithDynamicScope,"    public final boolean hasCompileFunctionsWithDynamicScope()
    {
        return compileFunctionsWithDynamicScopeFlag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setCompileFunctionsWithDynamicScope,"    public final void setCompileFunctionsWithDynamicScope(boolean flag)
    {
        if (sealed) onSealedMutation();
        compileFunctionsWithDynamicScopeFlag = flag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setWrapFactory,"    public final void setWrapFactory(WrapFactory wrapFactory)
    {
        if (sealed) onSealedMutation();
        if (wrapFactory == null) throw new IllegalArgumentException();
        this.wrapFactory = wrapFactory;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getWrapFactory,"    public final WrapFactory getWrapFactory()
    {
        if (wrapFactory == null) {
            wrapFactory = new WrapFactory();
        }
        return wrapFactory;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getDebugger,"    public final Debugger getDebugger()
    {
        return debugger;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getDebuggerContextData,"    public final Object getDebuggerContextData()
    {
        return debuggerData;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setDebugger,"    public final void setDebugger(Debugger debugger, Object contextData)
    {
        if (sealed) onSealedMutation();
        this.debugger = debugger;
        debuggerData = contextData;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getDebuggableView,"    public static DebuggableScript getDebuggableView(Script script)
    {
        if (script instanceof NativeFunction) {
            return ((NativeFunction)script).getDebuggableView();
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,hasFeature,"    public boolean hasFeature(int featureIndex)
    {
        ContextFactory f = getFactory();
        return f.hasFeature(this, featureIndex);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getE4xImplementationFactory,"	public XMLLib.Factory getE4xImplementationFactory() {
		return getFactory().getE4xImplementationFactory();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getInstructionObserverThreshold,"    public final int getInstructionObserverThreshold()
    {
        return instructionThreshold;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setInstructionObserverThreshold,"    public final void setInstructionObserverThreshold(int threshold)
    {
        if (sealed) onSealedMutation();
        if (threshold < 0) throw new IllegalArgumentException();
        instructionThreshold = threshold;
        setGenerateObserverCount(threshold > 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setGenerateObserverCount,"    public void setGenerateObserverCount(boolean generateObserverCount) {
    	this.generateObserverCount = generateObserverCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,observeInstructionCount,"    protected void observeInstructionCount(int instructionCount)
    {
        ContextFactory f = getFactory();
        f.observeInstructionCount(this, instructionCount);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,createClassLoader,"    public GeneratedClassLoader createClassLoader(ClassLoader parent)
    {
        ContextFactory f = getFactory();
        return f.createClassLoader(parent);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getApplicationClassLoader,"    public final ClassLoader getApplicationClassLoader()
    {
        if (applicationClassLoader == null) {
            ContextFactory f = getFactory();
            ClassLoader loader = f.getApplicationClassLoader();
            if (loader == null) {
                ClassLoader threadLoader
                    = VMBridge.instance.getCurrentThreadClassLoader();
                if (threadLoader != null
                    && Kit.testIfCanLoadRhinoClasses(threadLoader))
                {
                    // Thread.getContextClassLoader is not cached since
                    // its caching prevents it from GC which may lead to
                    // a memory leak and hides updates to
                    // Thread.getContextClassLoader
                    return threadLoader;
                }
                // Thread.getContextClassLoader can not load Rhino classes,
                // try to use the loader of ContextFactory or Context
                // subclasses.
                Class fClass = f.getClass();
                if (fClass != ScriptRuntime.ContextFactoryClass) {
                    loader = fClass.getClassLoader();
                } else {
                    loader = getClass().getClassLoader();
                }
            }
            applicationClassLoader = loader;
        }
        return applicationClassLoader;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,setApplicationClassLoader,"    public final void setApplicationClassLoader(ClassLoader loader)
    {
        if (sealed) onSealedMutation();
        if (loader == null) {
            // restore default behaviour
            applicationClassLoader = null;
            return;
        }
        if (!Kit.testIfCanLoadRhinoClasses(loader)) {
            throw new IllegalArgumentException(
                ""Loader can not resolve Rhino classes"");
        }
        applicationClassLoader = loader;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getContext,"    static Context getContext()
    {
        Context cx = getCurrentContext();
        if (cx == null) {
            throw new RuntimeException(
                ""No Context associated with current Thread"");
        }
        return cx;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,compileImpl,"    private Object compileImpl(Scriptable scope,
                               Reader sourceReader, String sourceString,
                               String sourceName, int lineno,
                               Object securityDomain, boolean returnFunction,
                               Evaluator compiler,
                               ErrorReporter compilationErrorReporter)
        throws IOException
    {
        if(sourceName == null) {
            sourceName = ""unnamed script"";
        }
        if (securityDomain != null && getSecurityController() == null) {
            throw new IllegalArgumentException(
                ""securityDomain should be null if setSecurityController() was never called"");
        }

        // One of sourceReader or sourceString has to be null
        if (!(sourceReader == null ^ sourceString == null)) Kit.codeBug();
        // scope should be given if and only if compiling function
        if (!(scope == null ^ returnFunction)) Kit.codeBug();

        CompilerEnvirons compilerEnv = new CompilerEnvirons();
        compilerEnv.initFromContext(this);
        if (compilationErrorReporter == null) {
            compilationErrorReporter = compilerEnv.getErrorReporter();
        }

        if (debugger != null) {
            if (sourceReader != null) {
                sourceString = Kit.readReader(sourceReader);
                sourceReader = null;
            }
        }

        /*APPJET*/
        Parser p = InformativeParser.makeParser(compilerEnv,
                                                    compilationErrorReporter);
        if (returnFunction) {
            p.calledByCompileFunction = true;
        }
        ScriptOrFnNode tree;
        if (sourceString != null) {
            tree = p.parse(sourceString, sourceName, lineno);
        } else {
            tree = p.parse(sourceReader, sourceName, lineno);
        }
        if (returnFunction) {
            if (!(tree.getFunctionCount() == 1
                  && tree.getFirstChild() != null
                  && tree.getFirstChild().getType() == Token.FUNCTION))
            {
                // XXX: the check just look for the first child
                // and allows for more nodes after it for compatibility
                // with sources like function() {};;;
                throw new IllegalArgumentException(
                    ""compileFunction only accepts source with single JS function: ""+sourceString);
            }
        }

        if (compiler == null) {
            compiler = createCompiler();
        }

        String encodedSource = p.getEncodedSource();

        Object bytecode = compiler.compile(compilerEnv,
                                           tree, encodedSource,
                                           returnFunction);

        if (debugger != null) {
            if (sourceString == null) Kit.codeBug();
            if (bytecode instanceof DebuggableScript) {
                DebuggableScript dscript = (DebuggableScript)bytecode;
                notifyDebugger_r(this, dscript, sourceString);
            } else {
                throw new RuntimeException(""NOT SUPPORTED"");
            }
        }

        Object result;
        if (returnFunction) {
            result = compiler.createFunctionObject(this, scope, bytecode, securityDomain);
        } else {
            result = compiler.createScriptObject(bytecode, securityDomain);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,notifyDebugger_r,"    private static void notifyDebugger_r(Context cx, DebuggableScript dscript,
                                         String debugSource)
    {
        cx.debugger.handleCompilationDone(cx, dscript, debugSource);
        for (int i = 0; i != dscript.getFunctionCount(); ++i) {
            notifyDebugger_r(cx, dscript.getFunction(i), debugSource);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,createCompiler,"    private Evaluator createCompiler()
    {
        Evaluator result = null;
        if (optimizationLevel >= 0 && codegenClass != null) {
            result = (Evaluator)Kit.newInstanceOrNull(codegenClass);
        }
        if (result == null) {
            result = createInterpreter();
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,createInterpreter,"    static Evaluator createInterpreter()
    {
        return (Evaluator)Kit.newInstanceOrNull(interpreterClass);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getSourcePositionFromStack,"    static String getSourcePositionFromStack(int[] linep)
    {
        Context cx = getCurrentContext();
        if (cx == null)
            return null;
        if (cx.lastInterpreterFrame != null) {
            Evaluator evaluator = createInterpreter();
            if (evaluator != null)
                return evaluator.getSourcePositionFromStack(cx, linep);
        }
        /**
         * A bit of a hack, but the only way to get filename and line
         * number from an enclosing frame.
         */
        CharArrayWriter writer = new CharArrayWriter();
        RuntimeException re = new RuntimeException();
        re.printStackTrace(new PrintWriter(writer));
        String s = writer.toString();
        int open = -1;
        int close = -1;
        int colon = -1;
        for (int i=0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == ':')
                colon = i;
            else if (c == '(')
                open = i;
            else if (c == ')')
                close = i;
            else if (c == '\n' && open != -1 && close != -1 && colon != -1 &&
                     open < colon && colon < close)
            {
                String fileStr = s.substring(open + 1, colon);
                if (!fileStr.endsWith("".java"")) {
                    String lineStr = s.substring(colon + 1, close);
                    try {
                        linep[0] = Integer.parseInt(lineStr);
                        if (linep[0] < 0) {
                            linep[0] = 0;
                        }
                        return fileStr;
                    }
                    catch (NumberFormatException e) {
                        // fall through
                    }
                }
                open = close = colon = -1;
            }
        }

        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getRegExpProxy,"    RegExpProxy getRegExpProxy()
    {
        if (regExpProxy == null) {
            Class cl = Kit.classOrNull(
                          ""org.mozilla.javascript.regexp.RegExpImpl"");
            if (cl != null) {
                regExpProxy = (RegExpProxy)Kit.newInstanceOrNull(cl);
            }
        }
        return regExpProxy;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,isVersionECMA1,"    final boolean isVersionECMA1()
    {
        return version == VERSION_DEFAULT || version >= VERSION_1_3;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,getSecurityController,"    SecurityController getSecurityController()
    {
        SecurityController global = SecurityController.global();
        if (global != null) {
            return global;
        }
        return securityController;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,isGeneratingDebugChanged,"    public final boolean isGeneratingDebugChanged()
    {
        return generatingDebugChanged;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,addActivationName,"    public void addActivationName(String name)
    {
        if (sealed) onSealedMutation();
        if (activationNames == null)
            activationNames = new Hashtable(5);
        activationNames.put(name, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,isActivationNeeded,"    public final boolean isActivationNeeded(String name)
    {
        return activationNames != null && activationNames.containsKey(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Context.java,removeActivationName,"    public void removeActivationName(String name)
    {
        if (sealed) onSealedMutation();
        if (activationNames != null)
            activationNames.remove(name);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,getGlobal,"    public static ContextFactory getGlobal()
    {
        return global;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,hasExplicitGlobal,"    public static boolean hasExplicitGlobal()
    {
        return hasCustomGlobal;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,initGlobal,"    public synchronized static void initGlobal(ContextFactory factory)
    {
        if (factory == null) {
            throw new IllegalArgumentException();
        }
        if (hasCustomGlobal) {
            throw new IllegalStateException();
        }
        hasCustomGlobal = true;
        global = factory;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,makeContext,"    protected Context makeContext()
    {
        return new Context(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,hasFeature,"    protected boolean hasFeature(Context cx, int featureIndex)
    {
        int version;
        switch (featureIndex) {
          case Context.FEATURE_NON_ECMA_GET_YEAR:
           /*
            * During the great date rewrite of 1.3, we tried to track the
            * evolving ECMA standard, which then had a definition of
            * getYear which always subtracted 1900.  Which we
            * implemented, not realizing that it was incompatible with
            * the old behavior...  now, rather than thrash the behavior
            * yet again, we've decided to leave it with the - 1900
            * behavior and point people to the getFullYear method.  But
            * we try to protect existing scripts that have specified a
            * version...
            */
            version = cx.getLanguageVersion();
            return (version == Context.VERSION_1_0
                    || version == Context.VERSION_1_1
                    || version == Context.VERSION_1_2);

          case Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME:
            return false;

          case Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER:
            return false;

          case Context.FEATURE_TO_STRING_AS_SOURCE:
            version = cx.getLanguageVersion();
            return version == Context.VERSION_1_2;

          case Context.FEATURE_PARENT_PROTO_PROPERTIES:
            return true;

          case Context.FEATURE_E4X:
            version = cx.getLanguageVersion();
            return (version == Context.VERSION_DEFAULT
                    || version >= Context.VERSION_1_6);

          case Context.FEATURE_DYNAMIC_SCOPE:
            return false;

          case Context.FEATURE_STRICT_VARS:
            return false;

          case Context.FEATURE_STRICT_EVAL:
            return false;

          case Context.FEATURE_LOCATION_INFORMATION_IN_ERROR:
            return false;

          case Context.FEATURE_STRICT_MODE:
            return false;

          case Context.FEATURE_WARNING_AS_ERROR:
            return false;

          case Context.FEATURE_ENHANCED_JAVA_ACCESS:
            return false;
        }
        // It is a bug to call the method with unknown featureIndex
        throw new IllegalArgumentException(String.valueOf(featureIndex));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,isDom3Present,"    private boolean isDom3Present() {
        Class nodeClass = Kit.classOrNull(""org.w3c.dom.Node"");
        if (nodeClass == null) return false;
        // Check to see whether DOM3 is present; use a new method defined in
        // DOM3 that is vital to our implementation
        try {
            nodeClass.getMethod(""getUserData"", new Class[] { String.class });",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,getE4xImplementationFactory,"    protected org.mozilla.javascript.xml.XMLLib.Factory
        getE4xImplementationFactory()
    {
        // Must provide default implementation, rather than abstract method,
        // so that past implementors of ContextFactory do not fail at runtime
        // upon invocation of this method.
        // Note that the default implementation returns null if we
        // neither have XMLBeans nor a DOM3 implementation present.

        if (isDom3Present()) {
            return org.mozilla.javascript.xml.XMLLib.Factory.create(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,createClassLoader,"    protected GeneratedClassLoader createClassLoader(ClassLoader parent)
    {
        return new DefiningClassLoader(parent);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,getApplicationClassLoader,"    public final ClassLoader getApplicationClassLoader()
    {
        return applicationClassLoader;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,initApplicationClassLoader,"    public final void initApplicationClassLoader(ClassLoader loader)
    {
        if (loader == null)
            throw new IllegalArgumentException(""loader is null"");
        if (!Kit.testIfCanLoadRhinoClasses(loader))
            throw new IllegalArgumentException(
                ""Loader can not resolve Rhino classes"");

        if (this.applicationClassLoader != null)
            throw new IllegalStateException(
                ""applicationClassLoader can only be set once"");
        checkNotSealed();

        this.applicationClassLoader = loader;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,doTopCall,"    protected Object doTopCall(Callable callable,
                               Context cx, Scriptable scope,
                               Scriptable thisObj, Object[] args)
    {
        return callable.call(cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,onContextCreated,"    protected void onContextCreated(Context cx)
    {
        Object listeners = this.listeners;
        for (int i = 0; ; ++i) {
            Listener l = (Listener)Kit.getListener(listeners, i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,onContextReleased,"    protected void onContextReleased(Context cx)
    {
        Object listeners = this.listeners;
        for (int i = 0; ; ++i) {
            Listener l = (Listener)Kit.getListener(listeners, i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,addListener,"    public final void addListener(Listener listener)
    {
        checkNotSealed();
        synchronized (listenersLock) {
            if (disabledListening) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,removeListener,"    public final void removeListener(Listener listener)
    {
        checkNotSealed();
        synchronized (listenersLock) {
            if (disabledListening) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,disableContextListening,"    final void disableContextListening()
    {
        checkNotSealed();
        synchronized (listenersLock) {
            disabledListening = true;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,isSealed,"    public final boolean isSealed()
    {
        return sealed;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,seal,"    public final void seal()
    {
        checkNotSealed();
        sealed = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,checkNotSealed,"    protected final void checkNotSealed()
    {
        if (sealed) throw new IllegalStateException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,call,"    public final Object call(ContextAction action)
    {
        return Context.call(this, action);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,enterContext,"    public Context enterContext()
    {
        return enterContext(null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,enter,"    public final Context enter()
    {
        return enterContext(null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,exit,"    public final void exit()
    {
        Context.exit();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ContextFactory.java,enterContext,"    public final Context enterContext(Context cx)
    {
        return Context.enter(cx, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,BASEDIGIT,"    private static char BASEDIGIT(int digit) {
        return (char)((digit >= 10) ? 'a' - 10 + digit : '0' + digit);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,lo0bits,"    private static int lo0bits(int y)
    {
        int k;
        int x = y;

        if ((x & 7) != 0) {
            if ((x & 1) != 0)
                return 0;
            if ((x & 2) != 0) {
                return 1;
            }
            return 2;
        }
        k = 0;
        if ((x & 0xffff) == 0) {
            k = 16;
            x >>>= 16;
        }
        if ((x & 0xff) == 0) {
            k += 8;
            x >>>= 8;
        }
        if ((x & 0xf) == 0) {
            k += 4;
            x >>>= 4;
        }
        if ((x & 0x3) == 0) {
            k += 2;
            x >>>= 2;
        }
        if ((x & 1) == 0) {
            k++;
            x >>>= 1;
            if ((x & 1) == 0)
                return 32;
        }
        return k;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,hi0bits,"    private static int hi0bits(int x)
    {
        int k = 0;

        if ((x & 0xffff0000) == 0) {
            k = 16;
            x <<= 16;
        }
        if ((x & 0xff000000) == 0) {
            k += 8;
            x <<= 8;
        }
        if ((x & 0xf0000000) == 0) {
            k += 4;
            x <<= 4;
        }
        if ((x & 0xc0000000) == 0) {
            k += 2;
            x <<= 2;
        }
        if ((x & 0x80000000) == 0) {
            k++;
            if ((x & 0x40000000) == 0)
                return 32;
        }
        return k;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,stuffBits,"    private static void stuffBits(byte bits[], int offset, int val)
    {
        bits[offset] = (byte)(val >> 24);
        bits[offset + 1] = (byte)(val >> 16);
        bits[offset + 2] = (byte)(val >> 8);
        bits[offset + 3] = (byte)(val);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,d2b,"    private static BigInteger d2b(double d, int[] e, int[] bits)
    {
        byte dbl_bits[];
        int i, k, y, z, de;
        long dBits = Double.doubleToLongBits(d);
        int d0 = (int)(dBits >>> 32);
        int d1 = (int)(dBits);

        z = d0 & Frac_mask;
        d0 &= 0x7fffffff;   /* clear sign bit, which we ignore */

        if ((de = (d0 >>> Exp_shift)) != 0)
            z |= Exp_msk1;

        if ((y = d1) != 0) {
            dbl_bits = new byte[8];
            k = lo0bits(y);
            y >>>= k;
            if (k != 0) {
                stuffBits(dbl_bits, 4, y | z << (32 - k));
                z >>= k;
            }
            else
                stuffBits(dbl_bits, 4, y);
            stuffBits(dbl_bits, 0, z);
            i = (z != 0) ? 2 : 1;
        }
        else {
    //        JS_ASSERT(z);
            dbl_bits = new byte[4];
            k = lo0bits(z);
            z >>>= k;
            stuffBits(dbl_bits, 0, z);
            k += 32;
            i = 1;
        }
        if (de != 0) {
            e[0] = de - Bias - (P-1) + k;
            bits[0] = P - k;
        }
        else {
            e[0] = de - Bias - (P-1) + 1 + k;
            bits[0] = 32*i - hi0bits(z);
        }
        return new BigInteger(dbl_bits);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,JS_dtobasestr,"    static String JS_dtobasestr(int base, double d)
    {
        if (!(2 <= base && base <= 36))
            throw new IllegalArgumentException(""Bad base: ""+base);

        /* Check for Infinity and NaN */
        if (Double.isNaN(d)) {
            return ""NaN"";
        } else if (Double.isInfinite(d)) {
            return (d > 0.0) ? ""Infinity"" : ""-Infinity"";
        } else if (d == 0) {
            // ALERT: should it distinguish -0.0 from +0.0 ?
            return ""0"";
        }

        boolean negative;
        if (d >= 0.0) {
            negative = false;
        } else {
            negative = true;
            d = -d;
        }

        /* Get the integer part of d including '-' sign. */
        String intDigits;

        double dfloor = Math.floor(d);
        long lfloor = (long)dfloor;
        if (lfloor == dfloor) {
            // int part fits long
            intDigits = Long.toString((negative) ? -lfloor : lfloor, base);
        } else {
            // BigInteger should be used
            long floorBits = Double.doubleToLongBits(dfloor);
            int exp = (int)(floorBits >> Exp_shiftL) & Exp_mask_shifted;
            long mantissa;
            if (exp == 0) {
                mantissa = (floorBits & Frac_maskL) << 1;
            } else {
                mantissa = (floorBits & Frac_maskL) | Exp_msk1L;
            }
            if (negative) {
                mantissa = -mantissa;
            }
            exp -= 1075;
            BigInteger x = BigInteger.valueOf(mantissa);
            if (exp > 0) {
                x = x.shiftLeft(exp);
            } else if (exp < 0) {
                x = x.shiftRight(-exp);
            }
            intDigits = x.toString(base);
        }

        if (d == dfloor) {
            // No fraction part",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,word0,"    static int word0(double d)
    {
        long dBits = Double.doubleToLongBits(d);
        return (int)(dBits >> 32);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,setWord0,"    static double setWord0(double d, int i)
    {
        long dBits = Double.doubleToLongBits(d);
        dBits = ((long)i << 32) | (dBits & 0x0FFFFFFFFL);
        return Double.longBitsToDouble(dBits);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,word1,"    static int word1(double d)
    {
        long dBits = Double.doubleToLongBits(d);
        return (int)(dBits);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,pow5mult,"    static BigInteger pow5mult(BigInteger b, int k)
    {
        return b.multiply(BigInteger.valueOf(5).pow(k));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,roundOff,"    static boolean roundOff(StringBuffer buf)
    {
        int i = buf.length();
        while (i != 0) {
            --i;
            char c = buf.charAt(i);
            if (c != '9') {
                buf.setCharAt(i, (char)(c + 1));
                buf.setLength(i + 1);
                return false;
            }
        }
        buf.setLength(0);
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,JS_dtoa,"    static int
    JS_dtoa(double d, int mode, boolean biasUp, int ndigits,
                    boolean[] sign, StringBuffer buf)
    {
        /*  Arguments ndigits, decpt, sign are similar to those
            of ecvt and fcvt; trailing zeros are suppressed from
            the returned string.  If not null, *rve is set to point
            to the end of the return value.  If d is +-Infinity or NaN,
            then *decpt is set to 9999.

            mode:
            0 ==> shortest string that yields d when read in
            and rounded to nearest.
            1 ==> like 0, but with Steele & White stopping rule;
            e.g. with IEEE P754 arithmetic , mode 0 gives
            1e23 whereas mode 1 gives 9.999999999999999e22.
            2 ==> max(1,ndigits) significant digits.  This gives a
            return value similar to that of ecvt, except
            that trailing zeros are suppressed.
            3 ==> through ndigits past the decimal point.  This
            gives a return value similar to that from fcvt,
            except that trailing zeros are suppressed, and
            ndigits can be negative.
            4-9 should give the same return values as 2-3, i.e.,
            4 <= mode <= 9 ==> same return as mode
            2 + (mode & 1).  These modes are mainly for
            debugging; often they run slower but sometimes
            faster than modes 2-3.
            4,5,8,9 ==> left-to-right digit generation.
            6-9 ==> don't try fast floating-point estimate
            (if applicable).

            Values of mode other than 0-9 are treated as mode 0.

            Sufficient space is allocated to the return value
            to hold the suppressed trailing zeros.
        */

        int b2, b5, i, ieps, ilim, ilim0, ilim1,
            j, j1, k, k0, m2, m5, s2, s5;
        char dig;
        long L;
        long x;
        BigInteger b, b1, delta, mlo, mhi, S;
        int[] be = new int[1];
        int[] bbits = new int[1];
        double d2, ds, eps;
        boolean spec_case, denorm, k_check, try_quick, leftright;

        if ((word0(d) & Sign_bit) != 0) {
            /* set sign for everything, including 0's and NaNs */
            sign[0] = true;
            // word0(d) &= ~Sign_bit;  /* clear sign bit */
            d = setWord0(d, word0(d) & ~Sign_bit);
        }
        else
            sign[0] = false;

        if ((word0(d) & Exp_mask) == Exp_mask) {
            /* Infinity or NaN */
            buf.append(((word1(d) == 0) && ((word0(d) & Frac_mask) == 0)) ? ""Infinity"" : ""NaN"");
            return 9999;
        }
        if (d == 0) {
//          no_digits:
            buf.setLength(0);
            buf.append('0');        /* copy ""0"" to buffer */
            return 1;
        }

        b = d2b(d, be, bbits);
        if ((i = (word0(d) >>> Exp_shift1 & (Exp_mask>>Exp_shift1))) != 0) {
            d2 = setWord0(d, (word0(d) & Frac_mask1) | Exp_11);
            /* log(x)   ~=~ log(1.5) + (x-1.5)/1.5
             * log10(x)  =  log(x) / log(10)
             *      ~=~ log(1.5)/log(10) + (x-1.5)/(1.5*log(10))
             * log10(d) = (i-Bias)*log(2)/log(10) + log10(d2)
             *
             * This suggests computing an approximation k to log10(d) by
             *
             * k = (i - Bias)*0.301029995663981
             *  + ( (d2-1.5)*0.289529654602168 + 0.176091259055681 );
             *
             * We want k to be too large rather than too small.
             * The error in the first-order Taylor series approximation
             * is in our favor, so we just round up the constant enough
             * to compensate for any error in the multiplication of
             * (i - Bias) by 0.301029995663981; since |i - Bias| <= 1077,
             * and 1077 * 0.30103 * 2^-52 ~=~ 7.2e-14,
             * adding 1e-13 to the constant term more than suffices.
             * Hence we adjust the constant term to 0.1760912590558.
             * (We could get a more accurate k by invoking log10,
             *  but this is probably not worthwhile.)
             */
            i -= Bias;
            denorm = false;
        }
        else {
            /* d is denormalized */
            i = bbits[0] + be[0] + (Bias + (P-1) - 1);
            x = (i > 32) ? word0(d) << (64 - i) | word1(d) >>> (i - 32) : word1(d) << (32 - i);
//            d2 = x;
//            word0(d2) -= 31*Exp_msk1; /* adjust exponent */
            d2 = setWord0(x, word0(x) - 31*Exp_msk1);
            i -= (Bias + (P-1) - 1) + 1;
            denorm = true;
        }
        /* At this point d = f*2^i, where 1 <= f < 2.  d2 is an approximation of f. */
        ds = (d2-1.5)*0.289529654602168 + 0.1760912590558 + i*0.301029995663981;
        k = (int)ds;
        if (ds < 0.0 && ds != k)
            k--;    /* want k = floor(ds) */
        k_check = true;
        if (k >= 0 && k <= Ten_pmax) {
            if (d < tens[k])
                k--;
            k_check = false;
        }
        /* At this point floor(log10(d)) <= k <= floor(log10(d))+1.
           If k_check is zero, we're guaranteed that k = floor(log10(d)). */
        j = bbits[0] - i - 1;
        /* At this point d = b/2^j, where b is an odd integer. */
        if (j >= 0) {
            b2 = 0;
            s2 = j;
        }
        else {
            b2 = -j;
            s2 = 0;
        }
        if (k >= 0) {
            b5 = 0;
            s5 = k;
            s2 += k;
        }
        else {
            b2 -= k;
            b5 = -k;
            s5 = 0;
        }
        /* At this point d/10^k = (b * 2^b2 * 5^b5) / (2^s2 * 5^s5), where b is an odd integer,
           b2 >= 0, b5 >= 0, s2 >= 0, and s5 >= 0. */
        if (mode < 0 || mode > 9)
            mode = 0;
        try_quick = true;
        if (mode > 5) {
            mode -= 4;
            try_quick = false;
        }
        leftright = true;
        ilim = ilim1 = 0;
        switch(mode) {
            case 0:
            case 1:
                ilim = ilim1 = -1;
                i = 18;
                ndigits = 0;
                break;
            case 2:
                leftright = false;
                /* no break */
            case 4:
                if (ndigits <= 0)
                    ndigits = 1;
                ilim = ilim1 = i = ndigits;
                break;
            case 3:
                leftright = false;
                /* no break */
            case 5:
                i = ndigits + k + 1;
                ilim = i;
                ilim1 = i - 1;
                if (i <= 0)
                    i = 1;
        }
        /* ilim is the maximum number of significant digits we want, based on k and ndigits. */
        /* ilim1 is the maximum number of significant digits we want, based on k and ndigits,
           when it turns out that k was computed too high by one. */

        boolean fast_failed = false;
        if (ilim >= 0 && ilim <= Quick_max && try_quick) {

            /* Try to get by with floating-point arithmetic. */

            i = 0;
            d2 = d;
            k0 = k;
            ilim0 = ilim;
            ieps = 2; /* conservative */
            /* Divide d by 10^k, keeping track of the roundoff error and avoiding overflows. */
            if (k > 0) {
                ds = tens[k&0xf];
                j = k >> 4;
                if ((j & Bletch) != 0) {
                    /* prevent overflows */
                    j &= Bletch - 1;
                    d /= bigtens[n_bigtens-1];
                    ieps++;
                }
                for(; (j != 0); j >>= 1, i++)
                    if ((j & 1) != 0) {
                        ieps++;
                        ds *= bigtens[i];
                    }
                d /= ds;
            }
            else if ((j1 = -k) != 0) {
                d *= tens[j1 & 0xf];
                for(j = j1 >> 4; (j != 0); j >>= 1, i++)
                    if ((j & 1) != 0) {
                        ieps++;
                        d *= bigtens[i];
                    }
            }
            /* Check that k was computed correctly. */
            if (k_check && d < 1.0 && ilim > 0) {
                if (ilim1 <= 0)
                    fast_failed = true;
                else {
                    ilim = ilim1;
                    k--;
                    d *= 10.;
                    ieps++;
                }
            }
            /* eps bounds the cumulative error. */
//            eps = ieps*d + 7.0;
//            word0(eps) -= (P-1)*Exp_msk1;
            eps = ieps*d + 7.0;
            eps = setWord0(eps, word0(eps) - (P-1)*Exp_msk1);
            if (ilim == 0) {
                S = mhi = null;
                d -= 5.0;
                if (d > eps) {
                    buf.append('1');
                    k++;
                    return k + 1;
                }
                if (d < -eps) {
                    buf.setLength(0);
                    buf.append('0');        /* copy ""0"" to buffer */
                    return 1;
                }
                fast_failed = true;
            }
            if (!fast_failed) {
                fast_failed = true;
                if (leftright) {
                    /* Use Steele & White method of only
                     * generating digits needed.
                     */
                    eps = 0.5/tens[ilim-1] - eps;
                    for(i = 0;;) {
                        L = (long)d;
                        d -= L;
                        buf.append((char)('0' + L));
                        if (d < eps) {
                            return k + 1;
                        }
                        if (1.0 - d < eps) {
//                            goto bump_up;
                                char lastCh;
                                while (true) {
                                    lastCh = buf.charAt(buf.length() - 1);
                                    buf.setLength(buf.length() - 1);
                                    if (lastCh != '9') break;
                                    if (buf.length() == 0) {
                                        k++;
                                        lastCh = '0';
                                        break;
                                    }
                                }
                                buf.append((char)(lastCh + 1));
                                return k + 1;
                        }
                        if (++i >= ilim)
                            break;
                        eps *= 10.0;
                        d *= 10.0;
                    }
                }
                else {
                    /* Generate ilim digits, then fix them up. */
                    eps *= tens[ilim-1];
                    for(i = 1;; i++, d *= 10.0) {
                        L = (long)d;
                        d -= L;
                        buf.append((char)('0' + L));
                        if (i == ilim) {
                            if (d > 0.5 + eps) {
//                                goto bump_up;
                                char lastCh;
                                while (true) {
                                    lastCh = buf.charAt(buf.length() - 1);
                                    buf.setLength(buf.length() - 1);
                                    if (lastCh != '9') break;
                                    if (buf.length() == 0) {
                                        k++;
                                        lastCh = '0';
                                        break;
                                    }
                                }
                                buf.append((char)(lastCh + 1));
                                return k + 1;
                            }
                            else
                                if (d < 0.5 - eps) {
                                    stripTrailingZeroes(buf);                                    
//                                    while(*--s == '0') ;
//                                    s++;
                                    return k + 1;
                                }
                            break;
                        }
                    }
                }
            }
            if (fast_failed) {
                buf.setLength(0);
                d = d2;
                k = k0;
                ilim = ilim0;
            }
        }

        /* Do we have a ""small"" integer? */

        if (be[0] >= 0 && k <= Int_max) {
            /* Yes. */
            ds = tens[k];
            if (ndigits < 0 && ilim <= 0) {
                S = mhi = null;
                if (ilim < 0 || d < 5*ds || (!biasUp && d == 5*ds)) {
                    buf.setLength(0);
                    buf.append('0');        /* copy ""0"" to buffer */
                    return 1;
                }
                buf.append('1');
                k++;
                return k + 1;
            }
            for(i = 1;; i++) {
                L = (long) (d / ds);
                d -= L*ds;
                buf.append((char)('0' + L));
                if (i == ilim) {
                    d += d;
                    if ((d > ds) || (d == ds && (((L & 1) != 0) || biasUp))) {
//                    bump_up:
//                        while(*--s == '9')
//                            if (s == buf) {
//                                k++;
//                                *s = '0';
//                                break;
//                            }
//                        ++*s++;
                        char lastCh;
                        while (true) {
                            lastCh = buf.charAt(buf.length() - 1);
                            buf.setLength(buf.length() - 1);
                            if (lastCh != '9') break;
                            if (buf.length() == 0) {
                                k++;
                                lastCh = '0';
                                break;
                            }
                        }
                        buf.append((char)(lastCh + 1));
                    }
                    break;
                }
                d *= 10.0;
                if (d == 0)
                    break;
            }
            return k + 1;
        }

        m2 = b2;
        m5 = b5;
        mhi = mlo = null;
        if (leftright) {
            if (mode < 2) {
                i = (denorm) ? be[0] + (Bias + (P-1) - 1 + 1) : 1 + P - bbits[0];
                /* i is 1 plus the number of trailing zero bits in d's significand. Thus,
                   (2^m2 * 5^m5) / (2^(s2+i) * 5^s5) = (1/2 lsb of d)/10^k. */
            }
            else {
                j = ilim - 1;
                if (m5 >= j)
                    m5 -= j;
                else {
                    s5 += j -= m5;
                    b5 += j;
                    m5 = 0;
                }
                if ((i = ilim) < 0) {
                    m2 -= i;
                    i = 0;
                }
                /* (2^m2 * 5^m5) / (2^(s2+i) * 5^s5) = (1/2 * 10^(1-ilim))/10^k. */
            }
            b2 += i;
            s2 += i;
            mhi = BigInteger.valueOf(1);
            /* (mhi * 2^m2 * 5^m5) / (2^s2 * 5^s5) = one-half of last printed (when mode >= 2) or
               input (when mode < 2) significant digit, divided by 10^k. */
        }
        /* We still have d/10^k = (b * 2^b2 * 5^b5) / (2^s2 * 5^s5).  Reduce common factors in
           b2, m2, and s2 without changing the equalities. */
        if (m2 > 0 && s2 > 0) {
            i = (m2 < s2) ? m2 : s2;
            b2 -= i;
            m2 -= i;
            s2 -= i;
        }

        /* Fold b5 into b and m5 into mhi. */
        if (b5 > 0) {
            if (leftright) {
                if (m5 > 0) {
                    mhi = pow5mult(mhi, m5);
                    b1 = mhi.multiply(b);
                    b = b1;
                }
                if ((j = b5 - m5) != 0)
                    b = pow5mult(b, j);
            }
            else
                b = pow5mult(b, b5);
        }
        /* Now we have d/10^k = (b * 2^b2) / (2^s2 * 5^s5) and
           (mhi * 2^m2) / (2^s2 * 5^s5) = one-half of last printed or input significant digit, divided by 10^k. */

        S = BigInteger.valueOf(1);
        if (s5 > 0)
            S = pow5mult(S, s5);
        /* Now we have d/10^k = (b * 2^b2) / (S * 2^s2) and
           (mhi * 2^m2) / (S * 2^s2) = one-half of last printed or input significant digit, divided by 10^k. */

        /* Check for special case that d is a normalized power of 2. */
        spec_case = false;
        if (mode < 2) {
            if ( (word1(d) == 0) && ((word0(d) & Bndry_mask) == 0)
                && ((word0(d) & (Exp_mask & Exp_mask << 1)) != 0)
                ) {
                /* The special case.  Here we want to be within a quarter of the last input
                   significant digit instead of one half of it when the decimal output string's value is less than d.  */
                b2 += Log2P;
                s2 += Log2P;
                spec_case = true;
            }
        }

        /* Arrange for convenient computation of quotients:
         * shift left if necessary so divisor has 4 leading 0 bits.
         *
         * Perhaps we should just compute leading 28 bits of S once
         * and for all and pass them and a shift to quorem, so it
         * can do shifts and ors to compute the numerator for q.
         */
        byte [] S_bytes = S.toByteArray();
        int S_hiWord = 0;
        for (int idx = 0; idx < 4; idx++) {
            S_hiWord = (S_hiWord << 8);
            if (idx < S_bytes.length)
                S_hiWord |= (S_bytes[idx] & 0xFF);
        }
        if ((i = (((s5 != 0) ? 32 - hi0bits(S_hiWord) : 1) + s2) & 0x1f) != 0)
            i = 32 - i;
        /* i is the number of leading zero bits in the most significant word of S*2^s2. */
        if (i > 4) {
            i -= 4;
            b2 += i;
            m2 += i;
            s2 += i;
        }
        else if (i < 4) {
            i += 28;
            b2 += i;
            m2 += i;
            s2 += i;
        }
        /* Now S*2^s2 has exactly four leading zero bits in its most significant word. */
        if (b2 > 0)
            b = b.shiftLeft(b2);
        if (s2 > 0)
            S = S.shiftLeft(s2);
        /* Now we have d/10^k = b/S and
           (mhi * 2^m2) / S = maximum acceptable error, divided by 10^k. */
        if (k_check) {
            if (b.compareTo(S) < 0) {
                k--;
                b = b.multiply(BigInteger.valueOf(10));  /* we botched the k estimate */
                if (leftright)
                    mhi = mhi.multiply(BigInteger.valueOf(10));
                ilim = ilim1;
            }
        }
        /* At this point 1 <= d/10^k = b/S < 10. */

        if (ilim <= 0 && mode > 2) {
            /* We're doing fixed-mode output and d is less than the minimum nonzero output in this mode.
               Output either zero or the minimum nonzero output depending on which is closer to d. */
            if ((ilim < 0 )
                    || ((i = b.compareTo(S = S.multiply(BigInteger.valueOf(5)))) < 0)
                    || ((i == 0 && !biasUp))) {
            /* Always emit at least one digit.  If the number appears to be zero
               using the current mode, then emit one '0' digit and set decpt to 1. */
            /*no_digits:
                k = -1 - ndigits;
                goto ret; */
                buf.setLength(0);
                buf.append('0');        /* copy ""0"" to buffer */
                return 1;
//                goto no_digits;
            }
//        one_digit:
            buf.append('1');
            k++;
            return k + 1;
        }
        if (leftright) {
            if (m2 > 0)
                mhi = mhi.shiftLeft(m2);

            /* Compute mlo -- check for special case
             * that d is a normalized power of 2.
             */

            mlo = mhi;
            if (spec_case) {
                mhi = mlo;
                mhi = mhi.shiftLeft(Log2P);
            }
            /* mlo/S = maximum acceptable error, divided by 10^k, if the output is less than d. */
            /* mhi/S = maximum acceptable error, divided by 10^k, if the output is greater than d. */

            for(i = 1;;i++) {
                BigInteger[] divResult = b.divideAndRemainder(S);
                b = divResult[1];
                dig = (char)(divResult[0].intValue() + '0');
                /* Do we yet have the shortest decimal string
                 * that will round to d?
                 */
                j = b.compareTo(mlo);
                /* j is b/S compared with mlo/S. */
                delta = S.subtract(mhi);
                j1 = (delta.signum() <= 0) ? 1 : b.compareTo(delta);
                /* j1 is b/S compared with 1 - mhi/S. */
                if ((j1 == 0) && (mode == 0) && ((word1(d) & 1) == 0)) {
                    if (dig == '9') {
                        buf.append('9');
                        if (roundOff(buf)) {
                            k++;
                            buf.append('1');
                        }
                        return k + 1;
//                        goto round_9_up;
                    }
                    if (j > 0)
                        dig++;
                    buf.append(dig);
                    return k + 1;
                }
                if ((j < 0)
                        || ((j == 0)
                            && (mode == 0)
                            && ((word1(d) & 1) == 0)
                    )) {
                    if (j1 > 0) {
                        /* Either dig or dig+1 would work here as the least significant decimal digit.
                           Use whichever would produce a decimal value closer to d. */
                        b = b.shiftLeft(1);
                        j1 = b.compareTo(S);
                        if (((j1 > 0) || (j1 == 0 && (((dig & 1) == 1) || biasUp)))
                            && (dig++ == '9')) {
                                buf.append('9');
                                if (roundOff(buf)) {
                                    k++;
                                    buf.append('1');
                                }
                                return k + 1;
//                                goto round_9_up;
                        }
                    }
                    buf.append(dig);
                    return k + 1;
                }
                if (j1 > 0) {
                    if (dig == '9') { /* possible if i == 1 */
//                    round_9_up:
//                        *s++ = '9';
//                        goto roundoff;
                        buf.append('9');
                        if (roundOff(buf)) {
                            k++;
                            buf.append('1');
                        }
                        return k + 1;
                    }
                    buf.append((char)(dig + 1));
                    return k + 1;
                }
                buf.append(dig);
                if (i == ilim)
                    break;
                b = b.multiply(BigInteger.valueOf(10));
                if (mlo == mhi)
                    mlo = mhi = mhi.multiply(BigInteger.valueOf(10));
                else {
                    mlo = mlo.multiply(BigInteger.valueOf(10));
                    mhi = mhi.multiply(BigInteger.valueOf(10));
                }
            }
        }
        else
            for(i = 1;; i++) {
//                (char)(dig = quorem(b,S) + '0');
                BigInteger[] divResult = b.divideAndRemainder(S);
                b = divResult[1];
                dig = (char)(divResult[0].intValue() + '0');
                buf.append(dig);
                if (i >= ilim)
                    break;
                b = b.multiply(BigInteger.valueOf(10));
            }

        /* Round off last digit */

        b = b.shiftLeft(1);
        j = b.compareTo(S);
        if ((j > 0) || (j == 0 && (((dig & 1) == 1) || biasUp))) {
//        roundoff:
//            while(*--s == '9')
//                if (s == buf) {
//                    k++;
//                    *s++ = '1';
//                    goto ret;
//                }
//            ++*s++;
            if (roundOff(buf)) {
                k++;
                buf.append('1');
                return k + 1;
            }
        }
        else {
            stripTrailingZeroes(buf);
//            while(*--s == '0') ;
//            s++;
        }
//      ret:
//        Bfree(S);
//        if (mhi) {
//            if (mlo && mlo != mhi)
//                Bfree(mlo);
//            Bfree(mhi);
//        }
//      ret1:
//        Bfree(b);
//        JS_ASSERT(s < buf + bufsize);
        return k + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,stripTrailingZeroes,"    private static void 
    stripTrailingZeroes(StringBuffer buf)
    {
//      while(*--s == '0') ;
//      s++;
        int bl = buf.length();
        while(bl-->0 && buf.charAt(bl) == '0') {
          // empty
        }
        buf.setLength(bl + 1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DToA.java,JS_dtostr,"    static void
    JS_dtostr(StringBuffer buffer, int mode, int precision, double d)
    {
        int decPt;                                    /* Position of decimal point relative to first digit returned by JS_dtoa */
        boolean[] sign = new boolean[1];            /* true if the sign bit was set in d */
        int nDigits;                                /* Number of significand digits returned by JS_dtoa */

//        JS_ASSERT(bufferSize >= (size_t)(mode <= DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE :
//                DTOSTR_VARIABLE_BUFFER_SIZE(precision)));

        if (mode == DTOSTR_FIXED && (d >= 1e21 || d <= -1e21))
            mode = DTOSTR_STANDARD; /* Change mode here rather than below because the buffer may not be large enough to hold a large integer. */

        decPt = JS_dtoa(d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer);
        nDigits = buffer.length();

        /* If Infinity, -Infinity, or NaN, return the string regardless of the mode. */
        if (decPt != 9999) {
            boolean exponentialNotation = false;
            int minNDigits = 0;         /* Minimum number of significand digits required by mode and precision */
            int p;

            switch (mode) {
                case DTOSTR_STANDARD:
                    if (decPt < -5 || decPt > 21)
                        exponentialNotation = true;
                    else
                        minNDigits = decPt;
                    break;

                case DTOSTR_FIXED:
                    if (precision >= 0)
                        minNDigits = decPt + precision;
                    else
                        minNDigits = decPt;
                    break;

                case DTOSTR_EXPONENTIAL:
//                    JS_ASSERT(precision > 0);
                    minNDigits = precision;
                    /* Fall through */
                case DTOSTR_STANDARD_EXPONENTIAL:
                    exponentialNotation = true;
                    break;

                case DTOSTR_PRECISION:
//                    JS_ASSERT(precision > 0);
                    minNDigits = precision;
                    if (decPt < -5 || decPt > precision)
                        exponentialNotation = true;
                    break;
            }

            /* If the number has fewer than minNDigits, pad it with zeros at the end */
            if (nDigits < minNDigits) {
                p = minNDigits;
                nDigits = minNDigits;
                do {
                    buffer.append('0');
                } while (buffer.length() != p);
            }

            if (exponentialNotation) {
                /* Insert a decimal point if more than one significand digit */
                if (nDigits != 1) {
                    buffer.insert(1, '.');
                }
                buffer.append('e');
                if ((decPt - 1) >= 0)
                    buffer.append('+');
                buffer.append(decPt - 1);
//                JS_snprintf(numEnd, bufferSize - (numEnd - buffer), ""e%+d"", decPt-1);
            } else if (decPt != nDigits) {
                /* Some kind of a fraction in fixed notation */
//                JS_ASSERT(decPt <= nDigits);
                if (decPt > 0) {
                    /* dd...dd . dd...dd */
                    buffer.insert(decPt, '.');
                } else {
                    /* 0 . 00...00dd...dd */
                    for (int i = 0; i < 1 - decPt; i++)
                        buffer.insert(0, '0');
                    buffer.insert(1, '.');
                }
            }
        }

        /* If negative and neither -0.0 nor NaN, output a leading '-'. */
        if (sign[0] &&
                !(word0(d) == Sign_bit && word1(d) == 0) &&",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,getEncodedSource,"    String getEncodedSource()
    {
        return sourceToString(0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,getCurrentOffset,"    int getCurrentOffset()
    {
        return sourceTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,markFunctionStart,"    int markFunctionStart(int functionType)
    {
        int savedOffset = getCurrentOffset();
        addToken(Token.FUNCTION);
        append((char)functionType);
        return savedOffset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,markFunctionEnd,"    int markFunctionEnd(int functionStart)
    {
        int offset = getCurrentOffset();
        append((char)FUNCTION_END);
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addToken,"    void addToken(int token)
    {
        if (!(0 <= token && token <= Token.LAST_TOKEN))
            throw new IllegalArgumentException();

        append((char)token);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addEOL,"    void addEOL(int token)
    {
        if (!(0 <= token && token <= Token.LAST_TOKEN))
            throw new IllegalArgumentException();

        append((char)token);
        append((char)Token.EOL);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addName,"    void addName(String str)
    {
        addToken(Token.NAME);
        appendString(str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addString,"    void addString(String str)
    {
        addToken(Token.STRING);
        appendString(str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addRegexp,"    void addRegexp(String regexp, String flags)
    {
        addToken(Token.REGEXP);
        appendString('/' + regexp + '/' + flags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addNumber,"    void addNumber(double n)
    {
        addToken(Token.NUMBER);

        /* encode the number in the source stream.
         * Save as NUMBER type (char | char char char char)
         * where type is
         * 'D' - double, 'S' - short, 'J' - long.

         * We need to retain float vs. integer type info to keep the
         * behavior of liveconnect type-guessing the same after
         * decompilation.  (Liveconnect tries to present 1.0 to Java
         * as a float/double)
         * OPT: This is no longer true. We could compress the format.

         * This may not be the most space-efficient encoding;
         * the chars created below may take up to 3 bytes in
         * constant pool UTF-8 encoding, so a Double could take
         * up to 12 bytes.
         */

        long lbits = (long)n;
        if (lbits != n) {
            // if it's floating point, save as a Double bit pattern.",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,appendString,"    private void appendString(String str)
    {
        int L = str.length();
        int lengthEncodingSize = 1;
        if (L >= 0x8000) {
            lengthEncodingSize = 2;
        }
        int nextTop = sourceTop + lengthEncodingSize + L;
        if (nextTop > sourceBuffer.length) {
            increaseSourceCapacity(nextTop);
        }
        if (L >= 0x8000) {
            // Use 2 chars to encode strings exceeding 32K, were the highest
            // bit in the first char indicates presence of the next byte
            sourceBuffer[sourceTop] = (char)(0x8000 | (L >>> 16));
            ++sourceTop;
        }
        sourceBuffer[sourceTop] = (char)L;
        ++sourceTop;
        str.getChars(0, L, sourceBuffer, sourceTop);
        sourceTop = nextTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,append,"    private void append(char c)
    {
        if (sourceTop == sourceBuffer.length) {
            increaseSourceCapacity(sourceTop + 1);
        }
        sourceBuffer[sourceTop] = c;
        ++sourceTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,increaseSourceCapacity,"    private void increaseSourceCapacity(int minimalCapacity)
    {
        // Call this only when capacity increase is must
        if (minimalCapacity <= sourceBuffer.length) Kit.codeBug();
        int newCapacity = sourceBuffer.length * 2;
        if (newCapacity < minimalCapacity) {
            newCapacity = minimalCapacity;
        }
        char[] tmp = new char[newCapacity];
        System.arraycopy(sourceBuffer, 0, tmp, 0, sourceTop);
        sourceBuffer = tmp;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,sourceToString,"    private String sourceToString(int offset)
    {
        if (offset < 0 || sourceTop < offset) Kit.codeBug();
        return new String(sourceBuffer, offset, sourceTop - offset);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,decompile,"    public static String decompile(String source, int flags,
                                   UintMap properties)
    {
        int length = source.length();
        if (length == 0) { return """"; }

        int indent = properties.getInt(INITIAL_INDENT_PROP, 0);
        if (indent < 0) throw new IllegalArgumentException();
        int indentGap = properties.getInt(INDENT_GAP_PROP, 4);
        if (indentGap < 0) throw new IllegalArgumentException();
        int caseGap = properties.getInt(CASE_GAP_PROP, 2);
        if (caseGap < 0) throw new IllegalArgumentException();

        StringBuffer result = new StringBuffer();
        boolean justFunctionBody = (0 != (flags & Decompiler.ONLY_BODY_FLAG));
        boolean toSource = (0 != (flags & Decompiler.TO_SOURCE_FLAG));

        // Spew tokens in source, for debugging.
        // as TYPE number char
        if (printSource) {
            System.err.println(""length:"" + length);
            for (int i = 0; i < length; ++i) {
                // Note that tokenToName will fail unless Context.printTrees
                // is true.
                String tokenname = null;
                if (Token.printNames) {
                    tokenname = Token.name(source.charAt(i));
                }
                if (tokenname == null) {
                    tokenname = ""---"";
                }
                String pad = tokenname.length() > 7
                    ? ""\t""
                    : ""\t\t"";
                System.err.println
                    (tokenname
                     + pad + (int)source.charAt(i)
                     + ""\t'"" + ScriptRuntime.escapeString
                     (source.substring(i, i+1))
                     + ""'"");
            }
            System.err.println();
        }

        int braceNesting = 0;
        boolean afterFirstEOL = false;
        int i = 0;
        int topFunctionType;
        if (source.charAt(i) == Token.SCRIPT) {
            ++i;
            topFunctionType = -1;
        } else {
            topFunctionType = source.charAt(i + 1);
        }

        if (!toSource) {
            // add an initial newline to exactly match js.
            result.append('\n');
            for (int j = 0; j < indent; j++)
                result.append(' ');
        } else {
            if (topFunctionType == FunctionNode.FUNCTION_EXPRESSION) {
                result.append('(');
            }
        }

        while (i < length) {
            switch(source.charAt(i)) {
            case Token.GET:
            case Token.SET:
                result.append(source.charAt(i) == Token.GET ? ""get "" : ""set "");
                ++i;
                i = printSourceString(source, i + 1, false, result);
                // Now increment one more to get past the FUNCTION token
                ++i;
                break;

            case Token.NAME:
            case Token.REGEXP:  // re-wrapped in '/'s in parser...
                i = printSourceString(source, i + 1, false, result);
                continue;

            case Token.STRING:
                i = printSourceString(source, i + 1, true, result);
                continue;

            case Token.NUMBER:
                i = printSourceNumber(source, i + 1, result);
                continue;

            case Token.TRUE:
                result.append(""true"");
                break;

            case Token.FALSE:
                result.append(""false"");
                break;

            case Token.NULL:
                result.append(""null"");
                break;

            case Token.THIS:
                result.append(""this"");
                break;

            case Token.FUNCTION:
                ++i; // skip function type
                result.append(""function "");
                break;

            case FUNCTION_END:
                // Do nothing
                break;

            case Token.COMMA:
                result.append("", "");
                break;

            case Token.LC:
                ++braceNesting;
                if (Token.EOL == getNext(source, length, i))
                    indent += indentGap;
                result.append('{');
                break;

            case Token.RC: {
                --braceNesting;
                /* don't print the closing RC if it closes the
                 * toplevel function and we're called from
                 * decompileFunctionBody.
                 */
                if (justFunctionBody && braceNesting == 0)
                    break;

                result.append('}');
                switch (getNext(source, length, i)) {
                    case Token.EOL:
                    case FUNCTION_END:
                        indent -= indentGap;
                        break;
                    case Token.WHILE:
                    case Token.ELSE:
                        indent -= indentGap;
                        result.append(' ');
                        break;
                }
                break;
            }
            case Token.LP:
                result.append('(');
                break;

            case Token.RP:
                result.append(')');
                if (Token.LC == getNext(source, length, i))
                    result.append(' ');
                break;

            case Token.LB:
                result.append('[');
                break;

            case Token.RB:
                result.append(']');
                break;

            case Token.EOL: {
                if (toSource) break;
                boolean newLine = true;
                if (!afterFirstEOL) {
                    afterFirstEOL = true;
                    if (justFunctionBody) {
                        /* throw away just added 'function name(...) {'
                         * and restore the original indent
                         */
                        result.setLength(0);
                        indent -= indentGap;
                        newLine = false;
                    }
                }
                if (newLine) {
                    result.append('\n');
                }

                /* add indent if any tokens remain,
                 * less setback if next token is
                 * a label, case or default.
                 */
                if (i + 1 < length) {
                    int less = 0;
                    int nextToken = source.charAt(i + 1);
                    if (nextToken == Token.CASE
                        || nextToken == Token.DEFAULT)
                    {
                        less = indentGap - caseGap;
                    } else if (nextToken == Token.RC) {
                        less = indentGap;
                    }

                    /* elaborate check against label... skip past a
                     * following inlined NAME and look for a COLON.
                     */
                    else if (nextToken == Token.NAME) {
                        int afterName = getSourceStringEnd(source, i + 2);
                        if (source.charAt(afterName) == Token.COLON)
                            less = indentGap;
                    }

                    for (; less < indent; less++)
                        result.append(' ');
                }
                break;
            }
            case Token.DOT:
                result.append('.');
                break;

            case Token.NEW:
                result.append(""new "");
                break;

            case Token.DELPROP:
                result.append(""delete "");
                break;

            case Token.IF:
                result.append(""if "");
                break;

            case Token.ELSE:
                result.append(""else "");
                break;

            case Token.FOR:
                result.append(""for "");
                break;

            case Token.IN:
                result.append("" in "");
                break;

            case Token.WITH:
                result.append(""with "");
                break;

            case Token.WHILE:
                result.append(""while "");
                break;

            case Token.DO:
                result.append(""do "");
                break;

            case Token.TRY:
                result.append(""try "");
                break;

            case Token.CATCH:
                result.append(""catch "");
                break;

            case Token.FINALLY:
                result.append(""finally "");
                break;

            case Token.THROW:
                result.append(""throw "");
                break;

            case Token.SWITCH:
                result.append(""switch "");
                break;

            case Token.BREAK:
                result.append(""break"");
                if (Token.NAME == getNext(source, length, i))
                    result.append(' ');
                break;

            case Token.CONTINUE:
                result.append(""continue"");
                if (Token.NAME == getNext(source, length, i))
                    result.append(' ');
                break;

            case Token.CASE:
                result.append(""case "");
                break;

            case Token.DEFAULT:
                result.append(""default"");
                break;

            case Token.RETURN:
                result.append(""return"");
                if (Token.SEMI != getNext(source, length, i))
                    result.append(' ');
                break;

            case Token.VAR:
                result.append(""var "");
                break;

            case Token.LET:
              result.append(""let "");
              break;

            case Token.SEMI:
                result.append(';');
                if (Token.EOL != getNext(source, length, i)) {
                    // separators in FOR
                    result.append(' ');
                }
                break;

            case Token.ASSIGN:
                result.append("" = "");
                break;

            case Token.ASSIGN_ADD:
                result.append("" += "");
                break;

            case Token.ASSIGN_SUB:
                result.append("" -= "");
                break;

            case Token.ASSIGN_MUL:
                result.append("" *= "");
                break;

            case Token.ASSIGN_DIV:
                result.append("" /= "");
                break;

            case Token.ASSIGN_MOD:
                result.append("" %= "");
                break;

            case Token.ASSIGN_BITOR:
                result.append("" |= "");
                break;

            case Token.ASSIGN_BITXOR:
                result.append("" ^= "");
                break;

            case Token.ASSIGN_BITAND:
                result.append("" &= "");
                break;

            case Token.ASSIGN_LSH:
                result.append("" <<= "");
                break;

            case Token.ASSIGN_RSH:
                result.append("" >>= "");
                break;

            case Token.ASSIGN_URSH:
                result.append("" >>>= "");
                break;

            case Token.HOOK:
                result.append("" ? "");
                break;

            case Token.OBJECTLIT:
                // pun OBJECTLIT to mean colon in objlit property
                // initialization.
                // This needs to be distinct from COLON in the general case
                // to distinguish from the colon in a ternary... which needs
                // different spacing.
                result.append(':');
                break;

            case Token.COLON:
                if (Token.EOL == getNext(source, length, i))
                    // it's the end of a label
                    result.append(':');
                else
                    // it's the middle part of a ternary
                    result.append("" : "");
                break;

            case Token.OR:
                result.append("" || "");
                break;

            case Token.AND:
                result.append("" && "");
                break;

            case Token.BITOR:
                result.append("" | "");
                break;

            case Token.BITXOR:
                result.append("" ^ "");
                break;

            case Token.BITAND:
                result.append("" & "");
                break;

            case Token.SHEQ:
                result.append("" === "");
                break;

            case Token.SHNE:
                result.append("" !== "");
                break;

            case Token.EQ:
                result.append("" == "");
                break;

            case Token.NE:
                result.append("" != "");
                break;

            case Token.LE:
                result.append("" <= "");
                break;

            case Token.LT:
                result.append("" < "");
                break;

            case Token.GE:
                result.append("" >= "");
                break;

            case Token.GT:
                result.append("" > "");
                break;

            case Token.INSTANCEOF:
                result.append("" instanceof "");
                break;

            case Token.LSH:
                result.append("" << "");
                break;

            case Token.RSH:
                result.append("" >> "");
                break;

            case Token.URSH:
                result.append("" >>> "");
                break;

            case Token.TYPEOF:
                result.append(""typeof "");
                break;

            case Token.VOID:
                result.append(""void "");
                break;

            case Token.CONST:
                result.append(""const "");
                break;
                
            case Token.YIELD:
                result.append(""yield "");
                break;
            
            case Token.NOT:
                result.append('!');
                break;

            case Token.BITNOT:
                result.append('~');
                break;

            case Token.POS:
                result.append('+');
                break;

            case Token.NEG:
                result.append('-');
                break;

            case Token.INC:
                result.append(""++"");
                break;

            case Token.DEC:
                result.append(""--"");
                break;

            case Token.ADD:
                result.append("" + "");
                break;

            case Token.SUB:
                result.append("" - "");
                break;

            case Token.MUL:
                result.append("" * "");
                break;

            case Token.DIV:
                result.append("" / "");
                break;

            case Token.MOD:
                result.append("" % "");
                break;

            case Token.COLONCOLON:
                result.append(""::"");
                break;

            case Token.DOTDOT:
                result.append("".."");
                break;

            case Token.DOTQUERY:
                result.append("".("");
                break;

            case Token.XMLATTR:
                result.append('@');
                break;

            default:
                // If we don't know how to decompile it, raise an exception.
                throw new RuntimeException(""Token: "" +
                                               Token.name(source.charAt(i)));
            }
            ++i;
        }

        if (!toSource) {
            // add that trailing newline if it's an outermost function.
            if (!justFunctionBody)
                result.append('\n');
        } else {
            if (topFunctionType == FunctionNode.FUNCTION_EXPRESSION) {
                result.append(')');
            }
        }

        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,getNext,"    private static int getNext(String source, int length, int i)
    {
        return (i + 1 < length) ? source.charAt(i + 1) : Token.EOF;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,getSourceStringEnd,"    private static int getSourceStringEnd(String source, int offset)
    {
        return printSourceString(source, offset, false, null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,printSourceString,"    private static int printSourceString(String source, int offset,
                                         boolean asQuotedString,
                                         StringBuffer sb)
    {
        int length = source.charAt(offset);
        ++offset;
        if ((0x8000 & length) != 0) {
            length = ((0x7FFF & length) << 16) | source.charAt(offset);
            ++offset;
        }
        if (sb != null) {
            String str = source.substring(offset, offset + length);
            if (!asQuotedString) {
                sb.append(str);
            } else {
                sb.append('""');
                sb.append(ScriptRuntime.escapeString(str));
                sb.append('""');
            }
        }
        return offset + length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,printSourceNumber,"    private static int printSourceNumber(String source, int offset,
                                         StringBuffer sb)
    {
        double number = 0.0;
        char type = source.charAt(offset);
        ++offset;
        if (type == 'S') {
            if (sb != null) {
                int ival = source.charAt(offset);
                number = ival;
            }
            ++offset;
        } else if (type == 'J' || type == 'D') {
            if (sb != null) {
                long lbits;
                lbits = (long)source.charAt(offset) << 48;
                lbits |= (long)source.charAt(offset + 1) << 32;
                lbits |= (long)source.charAt(offset + 2) << 16;
                lbits |= source.charAt(offset + 3);
                if (type == 'J') {
                    number = lbits;
                } else {
                    number = Double.longBitsToDouble(lbits);
                }
            }
            offset += 4;
        } else {
            // Bad source
            throw new RuntimeException();
        }
        if (sb != null) {
            sb.append(ScriptRuntime.numberToString(number, 10));
        }
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DefaultErrorReporter.java,forEval,"    static ErrorReporter forEval(ErrorReporter reporter)
    {
        DefaultErrorReporter r = new DefaultErrorReporter();
        r.forEval = true;
        r.chainedReporter = reporter;
        return r;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DefaultErrorReporter.java,warning,"    public void warning(String message, String sourceURI, int line,
                        String lineText, int lineOffset)
    {
        if (chainedReporter != null) {
            chainedReporter.warning(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DefaultErrorReporter.java,error,"    public void error(String message, String sourceURI, int line,
                      String lineText, int lineOffset)
    {
        if (forEval) {
            // Assume error message strings that start with ""TypeError: ""
            // should become TypeError exceptions. A bit of a hack, but we
            // don't want to change the ErrorReporter interface.
            String error = ""SyntaxError"";
            final String TYPE_ERROR_NAME = ""TypeError"";
            final String DELIMETER = "": "";
            final String prefix = TYPE_ERROR_NAME + DELIMETER;
            if (message.startsWith(prefix)) {
                error = TYPE_ERROR_NAME;
                message = message.substring(prefix.length());
            }
            throw ScriptRuntime.constructError(error, message, sourceURI, 
                                               line, lineText, lineOffset);
        }
        if (chainedReporter != null) {
            chainedReporter.error(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DefaultErrorReporter.java,runtimeError,"    public EvaluatorException runtimeError(String message, String sourceURI,
                                           int line, String lineText,
                                           int lineOffset)
    {
        if (chainedReporter != null) {
            return chainedReporter.runtimeError(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DefiningClassLoader.java,defineClass,"    public Class defineClass(String name, byte[] data) {
        // Use our own protection domain for the generated classes.
        // TODO: we might want to use a separate protection domain for classes
        // compiled from scripts, based on where the script was loaded from.
        return super.defineClass(name, data, 0, data.length, 
                SecurityUtilities.getProtectionDomain(getClass()));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DefiningClassLoader.java,linkClass,"    public void linkClass(Class cl) {
        resolveClass(cl);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DefiningClassLoader.java,loadClass,"    public Class loadClass(String name, boolean resolve)
        throws ClassNotFoundException
    {
        Class cl = findLoadedClass(name);
        if (cl == null) {
            if (parentLoader != null) {
                cl = parentLoader.loadClass(name);
            } else {
                cl = findSystemClass(name);
            }
        }
        if (resolve) {
            resolveClass(cl);
        }
        return cl;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,newInstance,"    protected Delegator newInstance()
    {
        try {
            return this.getClass().newInstance();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,getDelegee,"    public Scriptable getDelegee() {
        return obj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,setDelegee,"    public void setDelegee(Scriptable obj) {
        this.obj = obj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,getClassName,"    public String getClassName() {
        return obj.getClassName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,get,"    public Object get(String name, Scriptable start) {
        return obj.get(name,start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,get,"    public Object get(int index, Scriptable start) {
        return obj.get(index,start);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,has,"    public boolean has(String name, Scriptable start) {
        return obj.has(name,start);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,has,"    public boolean has(int index, Scriptable start) {
        return obj.has(index,start);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,put,"    public void put(String name, Scriptable start, Object value) {
        obj.put(name,start,value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,put,"    public void put(int index, Scriptable start, Object value) {
        obj.put(index,start,value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,delete,"    public void delete(String name) {
        obj.delete(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,delete,"    public void delete(int index) {
        obj.delete(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,getPrototype,"    public Scriptable getPrototype() {
        return obj.getPrototype();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,setPrototype,"    public void setPrototype(Scriptable prototype) {
        obj.setPrototype(prototype);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,getParentScope,"    public Scriptable getParentScope() {
        return obj.getParentScope();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,setParentScope,"    public void setParentScope(Scriptable parent) {
        obj.setParentScope(parent);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,getIds,"    public Object[] getIds() {
        return obj.getIds();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,getDefaultValue,"    public Object getDefaultValue(Class hint) {
        return (hint == null ||
                hint == ScriptRuntime.ScriptableClass ||",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,hasInstance,"    public boolean hasInstance(Scriptable instance) {
        return obj.hasInstance(instance);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        return ((Function)obj).call(cx,scope,thisObj,args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Delegator.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        if (obj == null) {
            //this little trick allows us to declare prototype objects for",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EcmaError.java,details,"    public String details()
    {
        return errorName+"": ""+errorMessage;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EcmaError.java,getName,"    public String getName()
    {
        return errorName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EcmaError.java,getErrorMessage,"    public String getErrorMessage()
    {
        return errorMessage;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EcmaError.java,getSourceName,"    public String getSourceName()
    {
        return sourceName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EcmaError.java,getLineNumber,"    public int getLineNumber()
    {
        return lineNumber();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EcmaError.java,getColumnNumber,"    public int getColumnNumber() {
        return columnNumber();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EcmaError.java,getLineSource,"    public String getLineSource() {
        return lineSource();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EcmaError.java,getErrorObject,"    public Scriptable getErrorObject()
    {
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EvaluatorException.java,getSourceName,"    public String getSourceName()
    {
        return sourceName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EvaluatorException.java,getLineNumber,"    public int getLineNumber()
    {
        return lineNumber();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EvaluatorException.java,getColumnNumber,"    public int getColumnNumber()
    {
        return columnNumber();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,EvaluatorException.java,getLineSource,"    public String getLineSource()
    {
        return lineSource();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,getFunctionName,"    public String getFunctionName() {
        return functionName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,requiresActivation,"    public boolean requiresActivation() {
        return itsNeedsActivation;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,getIgnoreDynamicScope,"    public boolean getIgnoreDynamicScope() {
        return itsIgnoreDynamicScope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,isGenerator,"    public boolean isGenerator() {
      return itsIsGenerator;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,addResumptionPoint,"    public void addResumptionPoint(Node target) {
        if (generatorResumePoints == null)
            generatorResumePoints = new ArrayList();
        generatorResumePoints.add(target);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,getResumptionPoints,"    public ArrayList getResumptionPoints() {
        return generatorResumePoints;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,getLiveLocals,"    public HashMap getLiveLocals() {
        return liveLocals;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,addLiveLocals,"    public void addLiveLocals(Node node, int[] locals) {
        if (liveLocals == null)
            liveLocals = new HashMap();
        liveLocals.put(node, locals);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionNode.java,getFunctionType,"    public int getFunctionType() {
        return itsFunctionType;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,getTypeTag,"    public static int getTypeTag(Class type)
    {
        if (type == ScriptRuntime.StringClass)
            return JAVA_STRING_TYPE;
        if (type == ScriptRuntime.IntegerClass || type == Integer.TYPE)
            return JAVA_INT_TYPE;
        if (type == ScriptRuntime.BooleanClass || type == Boolean.TYPE)
            return JAVA_BOOLEAN_TYPE;
        if (type == ScriptRuntime.DoubleClass || type == Double.TYPE)
            return JAVA_DOUBLE_TYPE;
        if (ScriptRuntime.ScriptableClass.isAssignableFrom(type))
            return JAVA_SCRIPTABLE_TYPE;
        if (type == ScriptRuntime.ObjectClass)
            return JAVA_OBJECT_TYPE;

        // Note that the long type is not supported; see the javadoc for
        // the constructor for this class

        return JAVA_UNSUPPORTED_TYPE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,convertArg,"    public static Object convertArg(Context cx, Scriptable scope,
                                    Object arg, int typeTag)
    {
        switch (typeTag) {
          case JAVA_STRING_TYPE:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,getArity,"    public int getArity() {
        return parmsLength < 0 ? 1 : parmsLength;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,getLength,"    public int getLength() {
        return getArity();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,getFunctionName,"    public String getFunctionName()
    {
        return (functionName == null) ? """" : functionName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,getMethodOrConstructor,"    public Member getMethodOrConstructor()
    {
        if (member.isMethod()) {
            return member.method();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,findSingleMethod,"    static Method findSingleMethod(Method[] methods, String name)
    {
        Method found = null;
        for (int i = 0, N = methods.length; i != N; ++i) {
            Method method = methods[i];
            if (method != null && name.equals(method.getName())) {
                if (found != null) {
                    throw Context.reportRuntimeError2(
                        ""msg.no.overload"", name,
                        method.getDeclaringClass().getName());
                }
                found = method;
            }
        }
        return found;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,getMethodList,"    static Method[] getMethodList(Class clazz) {
        Method[] methods = null;
        try {
            // getDeclaredMethods may be rejected by the security manager
            // but getMethods is more expensive
            if (!sawSecurityException)
                methods = clazz.getDeclaredMethods();
        } catch (SecurityException e) {
            // If we get an exception once, give up on getDeclaredMethods
            sawSecurityException = true;
        }
        if (methods == null) {
            methods = clazz.getMethods();
        }
        int count = 0;
        for (int i=0; i < methods.length; i++) {
            if (sawSecurityException
                ? methods[i].getDeclaringClass() != clazz
                : !Modifier.isPublic(methods[i].getModifiers()))
            {
                methods[i] = null;
            } else {
                count++;
            }
        }
        Method[] result = new Method[count];
        int j=0;
        for (int i=0; i < methods.length; i++) {
            if (methods[i] != null)
                result[j++] = methods[i];
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,addAsConstructor,"    public void addAsConstructor(Scriptable scope, Scriptable prototype)
    {
        initAsConstructor(scope, prototype);
        defineProperty(scope, prototype.getClassName(),
                       this, ScriptableObject.DONTENUM);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,initAsConstructor,"    void initAsConstructor(Scriptable scope, Scriptable prototype)
    {
        ScriptRuntime.setFunctionProtoAndParent(this, scope);
        setImmunePrototypeProperty(prototype);

        prototype.setParentScope(this);

        defineProperty(prototype, ""constructor"", this,
                       ScriptableObject.DONTENUM  |
                       ScriptableObject.PERMANENT |
                       ScriptableObject.READONLY);
        setParentScope(scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,convertArg,"    public static Object convertArg(Context cx, Scriptable scope,
                                    Object arg, Class desired)
    {
        int tag = getTypeTag(desired);
        if (tag == JAVA_UNSUPPORTED_TYPE) {
            throw Context.reportRuntimeError1
                (""msg.cant.convert"", desired.getName());
        }
        return convertArg(cx, scope, arg, tag);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        Object result;
        boolean checkMethodResult = false;

        if (parmsLength < 0) {
            if (parmsLength == VARARGS_METHOD) {
                Object[] invokeArgs = { cx, thisObj, args, this };
                result = member.invoke(null, invokeArgs);
                checkMethodResult = true;
            } else {
                boolean inNewExpr = (thisObj == null);
                Boolean b = inNewExpr ? Boolean.TRUE : Boolean.FALSE;
                Object[] invokeArgs = { cx, args, this, b };
                result = (member.isCtor())
                         ? member.newInstance(invokeArgs)
                         : member.invoke(null, invokeArgs);
            }

        } else {
            if (!isStatic) {
                Class clazz = member.getDeclaringClass();
                if (!clazz.isInstance(thisObj)) {
                    boolean compatible = false;
                    if (thisObj == scope) {
                        Scriptable parentScope = getParentScope();
                        if (scope != parentScope) {
                            // Call with dynamic scope for standalone function,
                            // use parentScope as thisObj
                            compatible = clazz.isInstance(parentScope);
                            if (compatible) {
                                thisObj = parentScope;
                            }
                        }
                    }
                    if (!compatible) {
                        // Couldn't find an object to call this on.
                        throw ScriptRuntime.typeError1(""msg.incompat.call"",
                                                       functionName);
                    }
                }
            }

            Object[] invokeArgs;
            if (parmsLength == args.length) {
                // Do not allocate new argument array if java arguments are
                // the same as the original js ones.
                invokeArgs = args;
                for (int i = 0; i != parmsLength; ++i) {
                    Object arg = args[i];
                    Object converted = convertArg(cx, scope, arg, typeTags[i]);
                    if (arg != converted) {
                        if (invokeArgs == args) {
                            invokeArgs = args.clone();
                        }
                        invokeArgs[i] = converted;
                    }
                }
            } else if (parmsLength == 0) {
                invokeArgs = ScriptRuntime.emptyArgs;
            } else {
                invokeArgs = new Object[parmsLength];
                for (int i = 0; i != parmsLength; ++i) {
                    Object arg = (i < args.length)
                                 ? args[i]
                                 : Undefined.instance;
                    invokeArgs[i] = convertArg(cx, scope, arg, typeTags[i]);
                }
            }

            if (member.isMethod()) {
                result = member.invoke(thisObj, invokeArgs);
                checkMethodResult = true;
            } else {
                result = member.newInstance(invokeArgs);
            }

        }

        if (checkMethodResult) {
            if (hasVoidReturn) {
                result = Undefined.instance;
            } else if (returnTypeTag == JAVA_UNSUPPORTED_TYPE) {
                result = cx.getWrapFactory().wrap(cx, scope, result, null);
            }
            // XXX: the code assumes that if returnTypeTag == JAVA_OBJECT_TYPE
            // then the Java method did a proper job of converting the
            // result to JS primitive or Scriptable to avoid
            // potentially costly Context.javaToJS call.
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,createObject,"    public Scriptable createObject(Context cx, Scriptable scope) {
        if (member.isCtor() || parmsLength == VARARGS_CTOR) {
            return null;
        }
        Scriptable result;
        try {
            result = (Scriptable) member.getDeclaringClass().newInstance();
        } catch (Exception ex) {
            throw Context.throwAsScriptRuntimeEx(ex);
        }

        result.setPrototype(getClassPrototype());
        result.setParentScope(getParentScope());
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,isVarArgsMethod,"    boolean isVarArgsMethod() {
        return parmsLength == VARARGS_METHOD;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,isVarArgsConstructor,"    boolean isVarArgsConstructor() {
        return parmsLength == VARARGS_CTOR;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FunctionObject.java,readObject,"    private void readObject(ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        in.defaultReadObject();
        if (parmsLength > 0) {
            Class[] types = member.argTypes;
            typeTags = new byte[parmsLength];
            for (int i = 0; i != parmsLength; ++i) {
                typeTags[i] = (byte)getTypeTag(types[i]);
            }
        }
        if (member.isMethod()) {
            Method method = member.method();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createScript,"    ScriptOrFnNode createScript()
    {
        return new ScriptOrFnNode(Token.SCRIPT);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,initScript,"    void initScript(ScriptOrFnNode scriptNode, Node body)
    {
        Node children = body.getFirstChild();
        if (children != null) { scriptNode.addChildrenToBack(children); }
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createLeaf,"    Node createLeaf(int nodeType)
    {
        return new Node(nodeType);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createSwitch,"    Node createSwitch(Node expr, int lineno)
    {
        //
        // The switch will be rewritten from:
        //
        // switch (expr) {
        //   case test1: statements1;
        //   ...
        //   default: statementsDefault;
        //   ...
        //   case testN: statementsN;
        // }
        //
        // to:
        //
        // {
        //     switch (expr) {
        //       case test1: goto label1;
        //       ...
        //       case testN: goto labelN;
        //     }
        //     goto labelDefault;
        //   label1:
        //     statements1;
        //   ...
        //   labelDefault:
        //     statementsDefault;
        //   ...
        //   labelN:
        //     statementsN;
        //   breakLabel:
        // }
        //
        // where inside switch each ""break;"" without label will be replaced
        // by ""goto breakLabel"".
        //
        // If the original switch does not have the default label, then
        // the transformed code would contain after the switch instead of
        //     goto labelDefault;
        // the following goto:
        //     goto breakLabel;
        //

        Node.Jump switchNode = new Node.Jump(Token.SWITCH, expr, lineno);
        Node block = new Node(Token.BLOCK, switchNode);
        return block;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,addSwitchCase,"    void addSwitchCase(Node switchBlock, Node caseExpression, Node statements)
    {
        if (switchBlock.getType() != Token.BLOCK) throw Kit.codeBug();
        Node.Jump switchNode = (Node.Jump)switchBlock.getFirstChild();
        if (switchNode.getType() != Token.SWITCH) throw Kit.codeBug();

        Node gotoTarget = Node.newTarget();
        if (caseExpression != null) {
            Node.Jump caseNode = new Node.Jump(Token.CASE, caseExpression);
            caseNode.target = gotoTarget;
            switchNode.addChildToBack(caseNode);
        } else {
            switchNode.setDefault(gotoTarget);
        }
        switchBlock.addChildToBack(gotoTarget);
        switchBlock.addChildToBack(statements);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,closeSwitch,"    void closeSwitch(Node switchBlock)
    {
        if (switchBlock.getType() != Token.BLOCK) throw Kit.codeBug();
        Node.Jump switchNode = (Node.Jump)switchBlock.getFirstChild();
        if (switchNode.getType() != Token.SWITCH) throw Kit.codeBug();

        Node switchBreakTarget = Node.newTarget();
        // switchNode.target is only used by NodeTransformer
        // to detect switch end
        switchNode.target = switchBreakTarget;

        Node defaultTarget = switchNode.getDefault();
        if (defaultTarget == null) {
            defaultTarget = switchBreakTarget;
        }

        switchBlock.addChildAfter(makeJump(Token.GOTO, defaultTarget),
                                  switchNode);
        switchBlock.addChildToBack(switchBreakTarget);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createVariables,"    Node createVariables(int token, int lineno)
    {
        return new Node(token, lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createExprStatement,"    Node createExprStatement(Node expr, int lineno)
    {
        int type;
        if (parser.insideFunction()) {
            type = Token.EXPR_VOID;
        } else {
            type = Token.EXPR_RESULT;
        }
        return new Node(type, expr, lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createExprStatementNoReturn,"    Node createExprStatementNoReturn(Node expr, int lineno)
    {
        return new Node(Token.EXPR_VOID, expr, lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createDefaultNamespace,"    Node createDefaultNamespace(Node expr, int lineno)
    {
        // default xml namespace requires activation
        setRequiresActivation();
        Node n = createUnary(Token.DEFAULTNAMESPACE, expr);
        Node result = createExprStatement(n, lineno);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createName,"    Node createName(String name)
    {
        checkActivationName(name, Token.NAME);
        return Node.newString(Token.NAME, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createName,"    private Node createName(int type, String name, Node child)
    {
        Node result = createName(name);
        result.setType(type);
        if (child != null)
            result.addChildToBack(child);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createString,"    Node createString(String string)
    {
        return Node.newString(string);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createNumber,"    Node createNumber(double number)
    {
        return Node.newNumber(number);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createCatch,"    Node createCatch(String varName, Node catchCond, Node stmts, int lineno)
    {
        if (catchCond == null) {
            catchCond = new Node(Token.EMPTY);
        }
        return new Node(Token.CATCH, createName(varName),
                        catchCond, stmts, lineno);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createThrow,"    Node createThrow(Node expr, int lineno)
    {
        return new Node(Token.THROW, expr, lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createReturn,"    Node createReturn(Node expr, int lineno)
    {
        return expr == null
            ? new Node(Token.RETURN, lineno)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createDebugger,"    Node createDebugger(int lineno)
    {
        return new Node(Token.DEBUGGER,  lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createLabel,"    Node createLabel(int lineno)
    {
        return new Node.Jump(Token.LABEL, lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,getLabelLoop,"    Node getLabelLoop(Node label)
    {
        return ((Node.Jump)label).getLoop();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createLabeledStatement,"    Node createLabeledStatement(Node labelArg, Node statement)
    {
        Node.Jump label = (Node.Jump)labelArg;

        // Make a target and put it _after_ the statement
        // node.  And in the LABEL node, so breaks get the
        // right target.

        Node breakTarget = Node.newTarget();
        Node block = new Node(Token.BLOCK, label, statement, breakTarget);
        label.target = breakTarget;

        return block;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createBreak,"    Node createBreak(Node breakStatement, int lineno)
    {
        Node.Jump n = new Node.Jump(Token.BREAK, lineno);
        Node.Jump jumpStatement;
        int t = breakStatement.getType();
        if (t == Token.LOOP || t == Token.LABEL) {
            jumpStatement = (Node.Jump)breakStatement;
        } else if (t == Token.BLOCK
                   && breakStatement.getFirstChild().getType() == Token.SWITCH)
        {
            jumpStatement = (Node.Jump)breakStatement.getFirstChild();
        } else {
            throw Kit.codeBug();
        }
        n.setJumpStatement(jumpStatement);
        return n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createContinue,"    Node createContinue(Node loop, int lineno)
    {
        if (loop.getType() != Token.LOOP) Kit.codeBug();
        Node.Jump n = new Node.Jump(Token.CONTINUE, lineno);
        n.setJumpStatement((Node.Jump)loop);
        return n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createBlock,"    Node createBlock(int lineno)
    {
        return new Node(Token.BLOCK, lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createFunction,"    FunctionNode createFunction(String name)
    {
        return new FunctionNode(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,initFunction,"    Node initFunction(FunctionNode fnNode, int functionIndex,
                      Node statements, int functionType)
    {
        fnNode.itsFunctionType = functionType;
        fnNode.addChildToBack(statements);

        int functionCount = fnNode.getFunctionCount();
        if (functionCount != 0) {
            // Functions containing other functions require activation objects
            fnNode.itsNeedsActivation = true;
        }

        if (functionType == FunctionNode.FUNCTION_EXPRESSION) {
            String name = fnNode.getFunctionName();
            if (name != null && name.length() != 0) {
                // A function expression needs to have its name as a
                // variable (if it isn't already allocated as a variable).
                // See ECMA Ch. 13.  We add code to the beginning of the
                // function to initialize a local variable of the
                // function's name to the function value.
                Node setFn = new Node(Token.EXPR_VOID,
                                 new Node(Token.SETNAME,
                                     Node.newString(Token.BINDNAME, name),
                                     new Node(Token.THISFN)));
                statements.addChildrenToFront(setFn);
            }
        }

        // Add return to end if needed.
        Node lastStmt = statements.getLastChild();
        if (lastStmt == null || lastStmt.getType() != Token.RETURN) {
            statements.addChildToBack(new Node(Token.RETURN));
        }

        Node result = Node.newString(Token.FUNCTION,
                                     fnNode.getFunctionName());
        result.putIntProp(Node.FUNCTION_PROP, functionIndex);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,addChildToBack,"    void addChildToBack(Node parent, Node child)
    {
        parent.addChildToBack(child);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createScopeNode,"    Node createScopeNode(int token, int lineno) {
        return new Node.Scope(token, lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createLoopNode,"    Node createLoopNode(Node loopLabel, int lineno)
    {
        Node.Jump result = new Node.Scope(Token.LOOP, lineno);
        if (loopLabel != null) {
            ((Node.Jump)loopLabel).setLoop(result);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createWhile,"    Node createWhile(Node loop, Node cond, Node body)
    {
        return createLoop((Node.Jump)loop, LOOP_WHILE, body, cond,
                          null, null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createDoWhile,"    Node createDoWhile(Node loop, Node body, Node cond)
    {
        return createLoop((Node.Jump)loop, LOOP_DO_WHILE, body, cond,
                          null, null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createFor,"    Node createFor(Node loop, Node init, Node test, Node incr, Node body)
    {
        if (init.getType() == Token.LET) {
            // rewrite ""for (let i=s; i < N; i++)..."" as 
            // ""let (i=s) { for (; i < N; i++)..."" so that ""s"" is evaluated
            // outside the scope of the for.
            Node.Scope let = Node.Scope.splitScope((Node.Scope)loop);
            let.setType(Token.LET);
            let.addChildrenToBack(init);
            let.addChildToBack(createLoop((Node.Jump)loop, LOOP_FOR, body, test,
                new Node(Token.EMPTY), incr));
            return let;
        }
        return createLoop((Node.Jump)loop, LOOP_FOR, body, test, init, incr);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createLoop,"    private Node createLoop(Node.Jump loop, int loopType, Node body, Node cond,
                            Node init, Node incr)
    {
        Node bodyTarget = Node.newTarget();
        Node condTarget = Node.newTarget();
        if (loopType == LOOP_FOR && cond.getType() == Token.EMPTY) {
            cond = new Node(Token.TRUE);
        }
        Node.Jump IFEQ = new Node.Jump(Token.IFEQ, cond);
        IFEQ.target = bodyTarget;
        Node breakTarget = Node.newTarget();

        loop.addChildToBack(bodyTarget);
        loop.addChildrenToBack(body);
        if (loopType == LOOP_WHILE || loopType == LOOP_FOR) {
            // propagate lineno to condition
            loop.addChildrenToBack(new Node(Token.EMPTY, loop.getLineno()));
        }
        loop.addChildToBack(condTarget);
        loop.addChildToBack(IFEQ);
        loop.addChildToBack(breakTarget);

        loop.target = breakTarget;
        Node continueTarget = condTarget;

        if (loopType == LOOP_WHILE || loopType == LOOP_FOR) {
            // Just add a GOTO to the condition in the do..while
            loop.addChildToFront(makeJump(Token.GOTO, condTarget));

            if (loopType == LOOP_FOR) {
                int initType = init.getType();
                if (initType != Token.EMPTY) {
                    if (initType != Token.VAR && initType != Token.LET) {
                        init = new Node(Token.EXPR_VOID, init);
                    }
                    loop.addChildToFront(init);
                }
                Node incrTarget = Node.newTarget();
                loop.addChildAfter(incrTarget, body);
                if (incr.getType() != Token.EMPTY) {
                    incr = new Node(Token.EXPR_VOID, incr);
                    loop.addChildAfter(incr, incrTarget);
                }
                continueTarget = incrTarget;
            }
        }

        loop.setContinue(continueTarget);

        return loop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createForIn,"    Node createForIn(int declType, Node loop, Node lhs, Node obj, Node body,
                     boolean isForEach)
    {
        int destructuring = -1;
        int destructuringLen = 0;
        Node lvalue;
        int type = lhs.getType();
        if (type == Token.VAR || type == Token.LET) {
            Node lastChild = lhs.getLastChild();
            if (lhs.getFirstChild() != lastChild) {
                /*
                 * check that there was only one variable given.
                 * we can't do this in the parser, because then the
                 * parser would have to know something about the
                 * 'init' node of the for-in loop.
                 */
                parser.reportError(""msg.mult.index"");
            }
            if (lastChild.getType() == Token.ARRAYLIT ||
                lastChild.getType() == Token.OBJECTLIT)
            {
                type = destructuring = lastChild.getType();
                lvalue = lastChild;
                destructuringLen = lastChild.getIntProp(
                    Node.DESTRUCTURING_ARRAY_LENGTH, 0);
            } else if (lastChild.getType() == Token.NAME) {
                lvalue = Node.newString(Token.NAME, lastChild.getString());
            } else {
                parser.reportError(""msg.bad.for.in.lhs"");
                return obj;
            }
        } else if (type == Token.ARRAYLIT || type == Token.OBJECTLIT) {
            destructuring = type;
            lvalue = lhs;
            destructuringLen = lhs.getIntProp(Node.DESTRUCTURING_ARRAY_LENGTH, 0);
        } else {
            lvalue = makeReference(lhs);
            if (lvalue == null) {
                parser.reportError(""msg.bad.for.in.lhs"");
                return obj;
            }
        }

        Node localBlock = new Node(Token.LOCAL_BLOCK);
        int initType = (isForEach)           ? Token.ENUM_INIT_VALUES :
                       (destructuring != -1) ? Token.ENUM_INIT_ARRAY :
                                               Token.ENUM_INIT_KEYS;
        Node init = new Node(initType, obj);
        init.putProp(Node.LOCAL_BLOCK_PROP, localBlock);
        Node cond = new Node(Token.ENUM_NEXT);
        cond.putProp(Node.LOCAL_BLOCK_PROP, localBlock);
        Node id = new Node(Token.ENUM_ID);
        id.putProp(Node.LOCAL_BLOCK_PROP, localBlock);

        Node newBody = new Node(Token.BLOCK);
        Node assign;
        if (destructuring != -1) {
            assign = createDestructuringAssignment(declType, lvalue, id);
            if (!isForEach && (destructuring == Token.OBJECTLIT ||
                               destructuringLen != 2))
            {
                // destructuring assignment is only allowed in for..each or
                // with an array type of length 2 (to hold key and value)
                parser.reportError(""msg.bad.for.in.destruct"");
            }
        } else {
            assign = simpleAssignment(lvalue, id);
        }
        newBody.addChildToBack(new Node(Token.EXPR_VOID, assign));
        newBody.addChildToBack(body);

        loop = createWhile(loop, cond, newBody);
        loop.addChildToFront(init);
        if (type == Token.VAR || type == Token.LET)
            loop.addChildToFront(lhs);
        localBlock.addChildToBack(loop);

        return localBlock;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createTryCatchFinally,"    Node createTryCatchFinally(Node tryBlock, Node catchBlocks,
                               Node finallyBlock, int lineno)
    {
        boolean hasFinally = (finallyBlock != null)
                             && (finallyBlock.getType() != Token.BLOCK
                                 || finallyBlock.hasChildren());

        // short circuit
        if (tryBlock.getType() == Token.BLOCK && !tryBlock.hasChildren()
            && !hasFinally)
        {
            return tryBlock;
        }

        boolean hasCatch = catchBlocks.hasChildren();

        // short circuit
        if (!hasFinally && !hasCatch)  {
            // bc finally might be an empty block...
            return tryBlock;
        }


        Node handlerBlock  = new Node(Token.LOCAL_BLOCK);
        Node.Jump pn = new Node.Jump(Token.TRY, tryBlock, lineno);
        pn.putProp(Node.LOCAL_BLOCK_PROP, handlerBlock);

        if (hasCatch) {
            // jump around catch code
            Node endCatch = Node.newTarget();
            pn.addChildToBack(makeJump(Token.GOTO, endCatch));

            // make a TARGET for the catch that the tcf node knows about
            Node catchTarget = Node.newTarget();
            pn.target = catchTarget;
            // mark it
            pn.addChildToBack(catchTarget);

            //
            //  Given
            //
            //   try {
            //       tryBlock;
            //   } catch (e if condition1) {
            //       something1;
            //   ...
            //
            //   } catch (e if conditionN) {
            //       somethingN;
            //   } catch (e) {
            //       somethingDefault;
            //   }
            //
            //  rewrite as
            //
            //   try {
            //       tryBlock;
            //       goto after_catch:
            //   } catch (x) {
            //       with (newCatchScope(e, x)) {
            //           if (condition1) {
            //               something1;
            //               goto after_catch;
            //           }
            //       }
            //   ...
            //       with (newCatchScope(e, x)) {
            //           if (conditionN) {
            //               somethingN;
            //               goto after_catch;
            //           }
            //       }
            //       with (newCatchScope(e, x)) {
            //           somethingDefault;
            //           goto after_catch;
            //       }
            //   }
            // after_catch:
            //
            // If there is no default catch, then the last with block
            // arround  ""somethingDefault;"" is replaced by ""rethrow;""

            // It is assumed that catch handler generation will store
            // exeception object in handlerBlock register

            // Block with local for exception scope objects
            Node catchScopeBlock = new Node(Token.LOCAL_BLOCK);

            // expects catchblocks children to be (cond block) pairs.
            Node cb = catchBlocks.getFirstChild();
            boolean hasDefault = false;
            int scopeIndex = 0;
            while (cb != null) {
                int catchLineNo = cb.getLineno();

                Node name = cb.getFirstChild();
                Node cond = name.getNext();
                Node catchStatement = cond.getNext();
                cb.removeChild(name);
                cb.removeChild(cond);
                cb.removeChild(catchStatement);

                // Add goto to the catch statement to jump out of catch
                // but prefix it with LEAVEWITH since try..catch produces
                // ""with""code in order to limit the scope of the exception
                // object.
                catchStatement.addChildToBack(new Node(Token.LEAVEWITH));
                catchStatement.addChildToBack(makeJump(Token.GOTO, endCatch));

                // Create condition ""if"" when present
                Node condStmt;
                if (cond.getType() == Token.EMPTY) {
                    condStmt = catchStatement;
                    hasDefault = true;
                } else {
                    condStmt = createIf(cond, catchStatement, null,
                                        catchLineNo);
                }

                // Generate code to create the scope object and store
                // it in catchScopeBlock register
                Node catchScope = new Node(Token.CATCH_SCOPE, name,
                                           createUseLocal(handlerBlock));
                catchScope.putProp(Node.LOCAL_BLOCK_PROP, catchScopeBlock);
                catchScope.putIntProp(Node.CATCH_SCOPE_PROP, scopeIndex);
                catchScopeBlock.addChildToBack(catchScope);

                // Add with statement based on catch scope object
                catchScopeBlock.addChildToBack(
                    createWith(createUseLocal(catchScopeBlock), condStmt,
                               catchLineNo));

                // move to next cb
                cb = cb.getNext();
                ++scopeIndex;
            }
            pn.addChildToBack(catchScopeBlock);
            if (!hasDefault) {
                // Generate code to rethrow if no catch clause was executed
                Node rethrow = new Node(Token.RETHROW);
                rethrow.putProp(Node.LOCAL_BLOCK_PROP, handlerBlock);
                pn.addChildToBack(rethrow);
            }

            pn.addChildToBack(endCatch);
        }

        if (hasFinally) {
            Node finallyTarget = Node.newTarget();
            pn.setFinally(finallyTarget);

            // add jsr finally to the try block
            pn.addChildToBack(makeJump(Token.JSR, finallyTarget));

            // jump around finally code
            Node finallyEnd = Node.newTarget();
            pn.addChildToBack(makeJump(Token.GOTO, finallyEnd));

            pn.addChildToBack(finallyTarget);
            Node fBlock = new Node(Token.FINALLY, finallyBlock);
            fBlock.putProp(Node.LOCAL_BLOCK_PROP, handlerBlock);
            pn.addChildToBack(fBlock);

            pn.addChildToBack(finallyEnd);
        }
        handlerBlock.addChildToBack(pn);
        return handlerBlock;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createWith,"    Node createWith(Node obj, Node body, int lineno)
    {
        setRequiresActivation();
        Node result = new Node(Token.BLOCK, lineno);
        result.addChildToBack(new Node(Token.ENTERWITH, obj));
        Node bodyNode = new Node(Token.WITH, body, lineno);
        result.addChildrenToBack(bodyNode);
        result.addChildToBack(new Node(Token.LEAVEWITH));
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createDotQuery,"    public Node createDotQuery (Node obj, Node body, int lineno)
    {
        setRequiresActivation();
        Node result = new Node(Token.DOTQUERY, obj, body, lineno);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createArrayLiteral,"    Node createArrayLiteral(ObjArray elems, int skipCount, int destructuringLen)
    {
        int length = elems.size();
        int[] skipIndexes = null;
        if (skipCount != 0) {
            skipIndexes = new int[skipCount];
        }
        Node array = new Node(Token.ARRAYLIT);
        for (int i = 0, j = 0; i != length; ++i) {
            Node elem = (Node)elems.get(i);
            if (elem != null) {
                array.addChildToBack(elem);
            } else {
                skipIndexes[j] = i;
                ++j;
            }
        }
        if (skipCount != 0) {
            array.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);
        }
        array.putIntProp(Node.DESTRUCTURING_ARRAY_LENGTH, destructuringLen);
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createObjectLiteral,"    Node createObjectLiteral(ObjArray elems)
    {
        int size = elems.size() / 2;
        Node object = new Node(Token.OBJECTLIT);
        Object[] properties;
        if (size == 0) {
            properties = ScriptRuntime.emptyArgs;
        } else {
            properties = new Object[size];
            for (int i = 0; i != size; ++i) {
                properties[i] = elems.get(2 * i);
                Node value = (Node)elems.get(2 * i + 1);
                object.addChildToBack(value);
            }
        }
        object.putProp(Node.OBJECT_IDS_PROP, properties);
        return object;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createRegExp,"    Node createRegExp(int regexpIndex)
    {
        Node n = new Node(Token.REGEXP);
        n.putIntProp(Node.REGEXP_PROP, regexpIndex);
        return n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createIf,"    Node createIf(Node cond, Node ifTrue, Node ifFalse, int lineno)
    {
        int condStatus = isAlwaysDefinedBoolean(cond);
        if (condStatus == ALWAYS_TRUE_BOOLEAN) {
            return ifTrue;
        } else if (condStatus == ALWAYS_FALSE_BOOLEAN) {
            if (ifFalse != null) {
                return ifFalse;
            }
            // Replace if (false) xxx by empty block
            return new Node(Token.BLOCK, lineno);
        }

        Node result = new Node(Token.BLOCK, lineno);
        Node ifNotTarget = Node.newTarget();
        Node.Jump IFNE = new Node.Jump(Token.IFNE, cond);
        IFNE.target = ifNotTarget;

        result.addChildToBack(IFNE);
        result.addChildrenToBack(ifTrue);

        if (ifFalse != null) {
            Node endTarget = Node.newTarget();
            result.addChildToBack(makeJump(Token.GOTO, endTarget));
            result.addChildToBack(ifNotTarget);
            result.addChildrenToBack(ifFalse);
            result.addChildToBack(endTarget);
        } else {
            result.addChildToBack(ifNotTarget);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createCondExpr,"    Node createCondExpr(Node cond, Node ifTrue, Node ifFalse)
    {
        int condStatus = isAlwaysDefinedBoolean(cond);
        if (condStatus == ALWAYS_TRUE_BOOLEAN) {
            return ifTrue;
        } else if (condStatus == ALWAYS_FALSE_BOOLEAN) {
            return ifFalse;
        }
        return new Node(Token.HOOK, cond, ifTrue, ifFalse);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createUnary,"    Node createUnary(int nodeType, Node child)
    {
        int childType = child.getType();
        switch (nodeType) {
          case Token.DELPROP: {
            Node n;
            if (childType == Token.NAME) {
                // Transform Delete(Name ""a"")
                //  to Delete(Bind(""a""), String(""a""))
                child.setType(Token.BINDNAME);
                Node left = child;
                Node right = Node.newString(child.getString());
                n = new Node(nodeType, left, right);
            } else if (childType == Token.GETPROP ||
                       childType == Token.GETELEM)
            {
                Node left = child.getFirstChild();
                Node right = child.getLastChild();
                child.removeChild(left);
                child.removeChild(right);
                n = new Node(nodeType, left, right);
            } else if (childType == Token.GET_REF) {
                Node ref = child.getFirstChild();
                child.removeChild(ref);
                n = new Node(Token.DEL_REF, ref);
            } else {
                n = new Node(Token.TRUE);
            }
            return n;
          }
          case Token.TYPEOF:
            if (childType == Token.NAME) {
                child.setType(Token.TYPEOFNAME);
                return child;
            }
            break;
          case Token.BITNOT:
            if (childType == Token.NUMBER) {
                int value = ScriptRuntime.toInt32(child.getDouble());
                child.setDouble(~value);
                return child;
            }
            break;
          case Token.NEG:
            if (childType == Token.NUMBER) {
                child.setDouble(-child.getDouble());
                return child;
            }
            break;
          case Token.NOT: {
            int status = isAlwaysDefinedBoolean(child);
            if (status != 0) {
                int type;
                if (status == ALWAYS_TRUE_BOOLEAN) {
                    type = Token.FALSE;
                } else {
                    type = Token.TRUE;
                }
                if (childType == Token.TRUE || childType == Token.FALSE) {
                    child.setType(type);
                    return child;
                }
                return new Node(type);
            }
            break;
          }
        }
        return new Node(nodeType, child);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createYield,"    Node createYield(Node child, int lineno)
    {
      if (!parser.insideFunction()) {
        parser.reportError(""msg.bad.yield"");
      }
      setRequiresActivation();
      setIsGenerator();
      if (child != null)
        return new Node(Token.YIELD, child, lineno);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createCallOrNew,"    Node createCallOrNew(int nodeType, Node child)
    {
        int type = Node.NON_SPECIALCALL;
        if (child.getType() == Token.NAME) {
            String name = child.getString();
            if (name.equals(""eval"")) {
                type = Node.SPECIALCALL_EVAL;
            } else if (name.equals(""With"")) {
                type = Node.SPECIALCALL_WITH;
            }
        } else if (child.getType() == Token.GETPROP) {
            String name = child.getLastChild().getString();
            if (name.equals(""eval"")) {
                type = Node.SPECIALCALL_EVAL;
            }
        }
        Node node = new Node(nodeType, child);
        if (type != Node.NON_SPECIALCALL) {
            // Calls to these functions require activation objects.
            setRequiresActivation();
            node.putIntProp(Node.SPECIALCALL_PROP, type);
        }
        return node;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createIncDec,"    Node createIncDec(int nodeType, boolean post, Node child)
    {
        child = makeReference(child);
        if (child == null) {
            String msg;
            if (nodeType == Token.DEC) {
                msg = ""msg.bad.decr"";
            } else {
                msg = ""msg.bad.incr"";
            }
            parser.reportError(msg);
            return null;
        }

        int childType = child.getType();

        switch (childType) {
          case Token.NAME:
          case Token.GETPROP:
          case Token.GETELEM:
          case Token.GET_REF: {
            Node n = new Node(nodeType, child);
            int incrDecrMask = 0;
            if (nodeType == Token.DEC) {
                incrDecrMask |= Node.DECR_FLAG;
            }
            if (post) {
                incrDecrMask |= Node.POST_FLAG;
            }
            n.putIntProp(Node.INCRDECR_PROP, incrDecrMask);
            return n;
          }
        }
        throw Kit.codeBug();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createPropertyGet,"    Node createPropertyGet(Node target, String namespace, String name,
                           int memberTypeFlags)
    {
        if (namespace == null && memberTypeFlags == 0) {
            if (target == null) {
                return createName(name);
            }
            checkActivationName(name, Token.GETPROP);
            if (ScriptRuntime.isSpecialProperty(name)) {
                Node ref = new Node(Token.REF_SPECIAL, target);
                ref.putProp(Node.NAME_PROP, name);
                return new Node(Token.GET_REF, ref);
            }
            return new Node(Token.GETPROP, target, createString(name));
        }
        Node elem = createString(name);
        memberTypeFlags |= Node.PROPERTY_FLAG;
        return createMemberRefGet(target, namespace, elem, memberTypeFlags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createElementGet,"    Node createElementGet(Node target, String namespace, Node elem,
                          int memberTypeFlags)
    {
        // OPT: could optimize to createPropertyGet
        // iff elem is string that can not be number
        if (namespace == null && memberTypeFlags == 0) {
            // stand-alone [aaa] as primary expression is array literal
            // declaration and should not come here!
            if (target == null) throw Kit.codeBug();
            return new Node(Token.GETELEM, target, elem);
        }
        return createMemberRefGet(target, namespace, elem, memberTypeFlags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createMemberRefGet,"    private Node createMemberRefGet(Node target, String namespace, Node elem,
                                    int memberTypeFlags)
    {
        Node nsNode = null;
        if (namespace != null) {
            // See 11.1.2 in ECMA 357
            if (namespace.equals(""*"")) {
                nsNode = new Node(Token.NULL);
            } else {
                nsNode = createName(namespace);
            }
        }
        Node ref;
        if (target == null) {
            if (namespace == null) {
                ref = new Node(Token.REF_NAME, elem);
            } else {
                ref = new Node(Token.REF_NS_NAME, nsNode, elem);
            }
        } else {
            if (namespace == null) {
                ref = new Node(Token.REF_MEMBER, target, elem);
            } else {
                ref = new Node(Token.REF_NS_MEMBER, target, nsNode, elem);
            }
        }
        if (memberTypeFlags != 0) {
            ref.putIntProp(Node.MEMBER_TYPE_PROP, memberTypeFlags);
        }
        return new Node(Token.GET_REF, ref);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createBinary,"    Node createBinary(int nodeType, Node left, Node right)
    {
        switch (nodeType) {

          case Token.ADD:
            // numerical addition and string concatenation
            if (left.type == Token.STRING) {
                String s2;
                if (right.type == Token.STRING) {
                    s2 = right.getString();
                } else if (right.type == Token.NUMBER) {
                    s2 = ScriptRuntime.numberToString(right.getDouble(), 10);
                } else {
                    break;
                }
                String s1 = left.getString();
                left.setString(s1.concat(s2));
                return left;
            } else if (left.type == Token.NUMBER) {
                if (right.type == Token.NUMBER) {
                    left.setDouble(left.getDouble() + right.getDouble());
                    return left;
                } else if (right.type == Token.STRING) {
                    String s1, s2;
                    s1 = ScriptRuntime.numberToString(left.getDouble(), 10);
                    s2 = right.getString();
                    right.setString(s1.concat(s2));
                    return right;
                }
            }
            // can't do anything if we don't know  both types - since
            // 0 + object is supposed to call toString on the object and do
            // string concantenation rather than addition
            break;

          case Token.SUB:
            // numerical subtraction
            if (left.type == Token.NUMBER) {
                double ld = left.getDouble();
                if (right.type == Token.NUMBER) {
                    //both numbers
                    left.setDouble(ld - right.getDouble());
                    return left;
                } else if (ld == 0.0) {
                    // first 0: 0-x -> -x
                    return new Node(Token.NEG, right);
                }
            } else if (right.type == Token.NUMBER) {
                if (right.getDouble() == 0.0) {
                    //second 0: x - 0 -> +x
                    // can not make simply x because x - 0 must be number
                    return new Node(Token.POS, left);
                }
            }
            break;

          case Token.MUL:
            // numerical multiplication
            if (left.type == Token.NUMBER) {
                double ld = left.getDouble();
                if (right.type == Token.NUMBER) {
                    //both numbers
                    left.setDouble(ld * right.getDouble());
                    return left;
                } else if (ld == 1.0) {
                    // first 1: 1 *  x -> +x
                    return new Node(Token.POS, right);
                }
            } else if (right.type == Token.NUMBER) {
                if (right.getDouble() == 1.0) {
                    //second 1: x * 1 -> +x
                    // can not make simply x because x - 0 must be number
                    return new Node(Token.POS, left);
                }
            }
            // can't do x*0: Infinity * 0 gives NaN, not 0
            break;

          case Token.DIV:
            // number division
            if (right.type == Token.NUMBER) {
                double rd = right.getDouble();
                if (left.type == Token.NUMBER) {
                    // both constants -- just divide, trust Java to handle x/0
                    left.setDouble(left.getDouble() / rd);
                    return left;
               } else if (rd == 1.0) {
                    // second 1: x/1 -> +x
                    // not simply x to force number convertion
                    return new Node(Token.POS, left);
                }
            }
            break;

          case Token.AND: {
            // Since x && y gives x, not false, when Boolean(x) is false,
            // and y, not Boolean(y), when Boolean(x) is true, x && y
            // can only be simplified if x is defined. See bug 309957.

            int leftStatus = isAlwaysDefinedBoolean(left);
            if (leftStatus == ALWAYS_FALSE_BOOLEAN) {
                // if the first one is false, just return it
                return left;
            } else if (leftStatus == ALWAYS_TRUE_BOOLEAN) {
                // if first is true, set to second
                return right;
            }
            break;
          }

          case Token.OR: {
            // Since x || y gives x, not true, when Boolean(x) is true,
            // and y, not Boolean(y), when Boolean(x) is false, x || y
            // can only be simplified if x is defined. See bug 309957.

            int leftStatus = isAlwaysDefinedBoolean(left);
            if (leftStatus == ALWAYS_TRUE_BOOLEAN) {
                // if the first one is true, just return it
                return left;
            } else if (leftStatus == ALWAYS_FALSE_BOOLEAN) {
                // if first is false, set to second
                return right;
            }
            break;
          }
        }

        return new Node(nodeType, left, right);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,simpleAssignment,"    private Node simpleAssignment(Node left, Node right)
    {
        int nodeType = left.getType();
        switch (nodeType) {
          case Token.NAME:
            left.setType(Token.BINDNAME);
            return new Node(Token.SETNAME, left, right);

          case Token.GETPROP:
          case Token.GETELEM: {
            Node obj = left.getFirstChild();
            Node id = left.getLastChild();
            int type;
            if (nodeType == Token.GETPROP) {
                type = Token.SETPROP;
            } else {
                type = Token.SETELEM;
            }
            return new Node(type, obj, id, right);
          }
          case Token.GET_REF: {
            Node ref = left.getFirstChild();
            checkMutableReference(ref);
            return new Node(Token.SET_REF, ref, right);
          }
        }

        throw Kit.codeBug();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,checkMutableReference,"    private void checkMutableReference(Node n)
    {
        int memberTypeFlags = n.getIntProp(Node.MEMBER_TYPE_PROP, 0);
        if ((memberTypeFlags & Node.DESCENDANTS_FLAG) != 0) {
            parser.reportError(""msg.bad.assign.left"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createAssignment,"    Node createAssignment(int assignType, Node left, Node right)
    {
        Node ref = makeReference(left);
        if (ref == null) {
            if (left.getType() == Token.ARRAYLIT || 
                left.getType() == Token.OBJECTLIT)
            {
                if (assignType != Token.ASSIGN) {
                    parser.reportError(""msg.bad.destruct.op"");
                    return right;
                }
                return createDestructuringAssignment(-1, left, right);
            }
            parser.reportError(""msg.bad.assign.left"");
            return right;
        }
        left = ref;

        int assignOp;
        switch (assignType) {
          case Token.ASSIGN:
            return simpleAssignment(left, right);
          case Token.ASSIGN_BITOR:  assignOp = Token.BITOR;  break;
          case Token.ASSIGN_BITXOR: assignOp = Token.BITXOR; break;
          case Token.ASSIGN_BITAND: assignOp = Token.BITAND; break;
          case Token.ASSIGN_LSH:    assignOp = Token.LSH;    break;
          case Token.ASSIGN_RSH:    assignOp = Token.RSH;    break;
          case Token.ASSIGN_URSH:   assignOp = Token.URSH;   break;
          case Token.ASSIGN_ADD:    assignOp = Token.ADD;    break;
          case Token.ASSIGN_SUB:    assignOp = Token.SUB;    break;
          case Token.ASSIGN_MUL:    assignOp = Token.MUL;    break;
          case Token.ASSIGN_DIV:    assignOp = Token.DIV;    break;
          case Token.ASSIGN_MOD:    assignOp = Token.MOD;    break;
          default: throw Kit.codeBug();
        }

        int nodeType = left.getType();
        switch (nodeType) {
          case Token.NAME: {
            Node op = new Node(assignOp, left, right);
            Node lvalueLeft = Node.newString(Token.BINDNAME, left.getString());
            return new Node(Token.SETNAME, lvalueLeft, op);
          }
          case Token.GETPROP:
          case Token.GETELEM: {
            Node obj = left.getFirstChild();
            Node id = left.getLastChild();

            int type = nodeType == Token.GETPROP
                       ? Token.SETPROP_OP
                       : Token.SETELEM_OP;

            Node opLeft = new Node(Token.USE_STACK);
            Node op = new Node(assignOp, opLeft, right);
            return new Node(type, obj, id, op);
          }
          case Token.GET_REF: {
            ref = left.getFirstChild();
            checkMutableReference(ref);
            Node opLeft = new Node(Token.USE_STACK);
            Node op = new Node(assignOp, opLeft, right);
            return new Node(Token.SET_REF_OP, ref, op);
          }
        }

        throw Kit.codeBug();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createDestructuringAssignment,"    Node createDestructuringAssignment(int type, Node left, Node right)
    {
        String tempName = parser.currentScriptOrFn.getNextTempName();
        Node result = destructuringAssignmentHelper(type, left, right,
            tempName);
        Node comma = result.getLastChild();
        comma.addChildToBack(createName(tempName));
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,destructuringAssignmentHelper,"    private Node destructuringAssignmentHelper(int variableType, Node left, 
                                               Node right, String tempName)
    {
        Node result = createScopeNode(Token.LETEXPR,
            parser.getCurrentLineNumber());
        result.addChildToFront(new Node(Token.LET,
            createName(Token.NAME, tempName, right)));
        try {
            parser.pushScope(result);
            parser.defineSymbol(Token.LET, tempName);
        } finally {
            parser.popScope();
        }
        Node comma = new Node(Token.COMMA);
        result.addChildToBack(comma);
        final int setOp = variableType == Token.CONST ? Token.SETCONST
        		                                      : Token.SETNAME;
        List<String> destructuringNames = new ArrayList<String>();
        boolean empty = true;
        int type = left.getType();
        if (type == Token.ARRAYLIT) {
            int index = 0;
            int[] skipIndices = (int[])left.getProp(Node.SKIP_INDEXES_PROP);
            int skip = 0;
            Node n = left.getFirstChild();
            for (;;) {
                if (skipIndices != null) {
                    while (skip < skipIndices.length && 
                           skipIndices[skip] == index) {
                        skip++;
                        index++;
                    }
                }
                if (n == null)
                    break;
                Node rightElem = new Node(Token.GETELEM,
                    createName(tempName), 
                    createNumber(index));
                if (n.getType() == Token.NAME) {
                    String name = n.getString();
                    comma.addChildToBack(new Node(setOp, 
                        createName(Token.BINDNAME, name, null),
                        rightElem));
                    if (variableType != -1) {
                        parser.defineSymbol(variableType, name);
                        destructuringNames.add(name);
                    }
                } else {
                    comma.addChildToBack(
                        destructuringAssignmentHelper(variableType, n,
                            rightElem,
                            parser.currentScriptOrFn.getNextTempName()));
                }
                index++;
                empty = false;
                n = n.getNext();
            }
        } else if (type == Token.OBJECTLIT) {
            int index = 0;
            Object[] propertyIds = (Object[])
                left.getProp(Node.OBJECT_IDS_PROP);
            for (Node n = left.getFirstChild(); n != null; n = n.getNext())
            {
                Object id = propertyIds[index];
                Node rightElem = id instanceof String 
                    ? new Node(Token.GETPROP,
                        createName(tempName), 
                        createString((String)id))
                    : new Node(Token.GETELEM,
                        createName(tempName), 
                        createNumber(((Number)id).intValue()));
                if (n.getType() == Token.NAME) {
                    String name = n.getString();
                    comma.addChildToBack(new Node(setOp, 
                        createName(Token.BINDNAME, name, null),
                        rightElem));
                    if (variableType != -1) {
                        parser.defineSymbol(variableType, name);
                        destructuringNames.add(name);
                    }
                } else {
                    comma.addChildToBack(
                        destructuringAssignmentHelper(variableType, n,
                            rightElem,
                            parser.currentScriptOrFn.getNextTempName()));
                }
                index++;
                empty = false;
            }
        } else if (type == Token.GETPROP || type == Token.GETELEM) {
            comma.addChildToBack(simpleAssignment(left, createName(tempName)));
        } else {
            parser.reportError(""msg.bad.assign.left"");
        }
        if (empty) {
            // Don't want a COMMA node with no children. Just add a zero.
            comma.addChildToBack(createNumber(0));
        }
        result.putProp(Node.DESTRUCTURING_NAMES, destructuringNames);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,createUseLocal,"    Node createUseLocal(Node localBlock)
    {
        if (Token.LOCAL_BLOCK != localBlock.getType()) throw Kit.codeBug();
        Node result = new Node(Token.LOCAL_LOAD);
        result.putProp(Node.LOCAL_BLOCK_PROP, localBlock);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,makeJump,"    private Node.Jump makeJump(int type, Node target)
    {
        Node.Jump n = new Node.Jump(type);
        n.target = target;
        return n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,makeReference,"    private Node makeReference(Node node)
    {
        int type = node.getType();
        switch (type) {
          case Token.NAME:
          case Token.GETPROP:
          case Token.GETELEM:
          case Token.GET_REF:
            return node;
          case Token.CALL:
            node.setType(Token.REF_CALL);
            return new Node(Token.GET_REF, node);
        }
        // Signal caller to report error
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,isAlwaysDefinedBoolean,"    private static int isAlwaysDefinedBoolean(Node node)
    {
        switch (node.getType()) {
          case Token.FALSE:
          case Token.NULL:
            return ALWAYS_FALSE_BOOLEAN;
          case Token.TRUE:
            return ALWAYS_TRUE_BOOLEAN;
          case Token.NUMBER: {
            double num = node.getDouble();
            if (num == num && num != 0.0) {
                return ALWAYS_TRUE_BOOLEAN;
            } else {
                return ALWAYS_FALSE_BOOLEAN;
            }
          }
        }
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,checkActivationName,"    private void checkActivationName(String name, int token)
    {
        if (parser.insideFunction()) {
            boolean activation = false;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,setRequiresActivation,"    private void setRequiresActivation()
    {
        if (parser.insideFunction()) {
            ((FunctionNode)parser.currentScriptOrFn).itsNeedsActivation = true;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IRFactory.java,setIsGenerator,"    private void setIsGenerator()
    {
        if (parser.insideFunction()) {
            ((FunctionNode)parser.currentScriptOrFn).itsIsGenerator = true;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,initFunction,"    public void initFunction(String name, Scriptable scope)
    {
        if (name == null) throw new IllegalArgumentException();
        if (scope == null) throw new IllegalArgumentException();
        this.functionName = name;
        setParentScope(scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,hasTag,"    public final boolean hasTag(Object tag)
    {
        return this.tag == tag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,methodId,"    public final int methodId()
    {
        return methodId;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,markAsConstructor,"    public final void markAsConstructor(Scriptable prototypeProperty)
    {
        useCallAsConstructor = true;
        setImmunePrototypeProperty(prototypeProperty);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,addAsProperty,"    public final void addAsProperty(Scriptable target)
    {
        ScriptableObject.defineProperty(target, functionName, this,
                                        ScriptableObject.DONTENUM);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,exportAsScopeProperty,"    public void exportAsScopeProperty()
    {
        addAsProperty(getParentScope());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,getPrototype,"    public Scriptable getPrototype()
    {
        // Lazy initialization of prototype: for native functions this
        // may not be called at all
        Scriptable proto = super.getPrototype();
        if (proto == null) {
            proto = getFunctionPrototype(getParentScope());
            setPrototype(proto);
        }
        return proto;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        return idcall.execIdCall(this, cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,createObject,"    public Scriptable createObject(Context cx, Scriptable scope)
    {
        if (useCallAsConstructor) {
            return null;
        }
        // Throw error if not explicitly coded to be used as constructor,
        // to satisfy ECMAScript standard (see bugzilla 202019).
        // To follow current (2003-05-01) SpiderMonkey behavior, change it to:
        // return super.createObject(cx, scope);
        throw ScriptRuntime.typeError1(""msg.not.ctor"", functionName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,decompile,"    String decompile(int indent, int flags)
    {
        StringBuffer sb = new StringBuffer();
        boolean justbody = (0 != (flags & Decompiler.ONLY_BODY_FLAG));
        if (!justbody) {
            sb.append(""function "");
            sb.append(getFunctionName());
            sb.append(""() { "");
        }
        sb.append(""[native code for "");
        if (idcall instanceof Scriptable) {
            Scriptable sobj = (Scriptable)idcall;
            sb.append(sobj.getClassName());
            sb.append('.');
        }
        sb.append(getFunctionName());
        sb.append("", arity="");
        sb.append(getArity());
        sb.append(justbody ? ""]\n"" : ""] }\n"");
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,getArity,"    public int getArity()
    {
        return arity;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,getLength,"    public int getLength() { return getArity(); }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,getFunctionName,"    public String getFunctionName()
    {
        return (functionName == null) ? """" : functionName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdFunctionObject.java,unknown,"    public final RuntimeException unknown()
    {
        // It is program error to call id-like methods for unknown function
        return new IllegalArgumentException(
            ""BAD FUNCTION ID=""+methodId+"" MASTER=""+idcall);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,getMaxId,"        final int getMaxId()
        {
            return maxId;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,initValue,"        final void initValue(int id, String name, Object value, int attributes)
        {
            if (!(1 <= id && id <= maxId))
                throw new IllegalArgumentException();
            if (name == null)
                throw new IllegalArgumentException();
            if (value == NOT_FOUND)
                throw new IllegalArgumentException();
            ScriptableObject.checkValidAttributes(attributes);
            if (obj.findPrototypeId(name) != id)
                throw new IllegalArgumentException(name);

            if (id == constructorId) {
                if (!(value instanceof IdFunctionObject)) {
                    throw new IllegalArgumentException(""consructor should be initialized with IdFunctionObject"");
                }
                constructor = (IdFunctionObject)value;
                constructorAttrs = (short)attributes;
                return;
            }

            initSlot(id, name, value, attributes);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,initSlot,"        private void initSlot(int id, String name, Object value,
                              int attributes)
        {
            Object[] array = valueArray;
            if (array == null)
                throw new IllegalStateException();

            if (value == null) {
                value = UniqueTag.NULL_VALUE;
            }
            int index = (id - 1) * SLOT_SPAN;
            synchronized (this) {
                Object value2 = array[index + VALUE_SLOT];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,createPrecachedConstructor,"        final IdFunctionObject createPrecachedConstructor()
        {
            if (constructorId != 0) throw new IllegalStateException();
            constructorId = obj.findPrototypeId(""constructor"");
            if (constructorId == 0) {
                throw new IllegalStateException(
                    ""No id for constructor property"");
            }
            obj.initPrototypeId(constructorId);
            if (constructor == null) {
                throw new IllegalStateException(
                    obj.getClass().getName()+"".initPrototypeId() did not ""
                    +""initialize id=""+constructorId);
            }
            constructor.initFunction(obj.getClassName(),
                                     ScriptableObject.getTopLevelScope(obj));
            constructor.markAsConstructor(obj);
            return constructor;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,findId,"        final int findId(String name)
        {
            Object[] array = valueArray;
            if (array == null) {
                return obj.findPrototypeId(name);
            }
            int id = lastFoundId;
            if (name == array[(id - 1) * SLOT_SPAN + NAME_SLOT]) {
                return id;
            }
            id = obj.findPrototypeId(name);
            if (id != 0) {
                int nameSlot = (id - 1) * SLOT_SPAN + NAME_SLOT;
                // Make cache to work!
                array[nameSlot] = name;
                lastFoundId = id;
            }
            return id;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,has,"        final boolean has(int id)
        {
            Object[] array = valueArray;
            if (array == null) {
                // Not yet initialized, assume all exists
                return true;
            }
            int valueSlot = (id  - 1) * SLOT_SPAN + VALUE_SLOT;
            Object value = array[valueSlot];
            if (value == null) {
                // The particular entry has not been yet initialized
                return true;
            }
            return value != NOT_FOUND;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,get,"        final Object get(int id)
        {
            Object value = ensureId(id);
            if (value == UniqueTag.NULL_VALUE) {
                value = null;
            }
            return value;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,set,"        final void set(int id, Scriptable start, Object value)
        {
            if (value == NOT_FOUND) throw new IllegalArgumentException();
            ensureId(id);
            int attr = attributeArray[id - 1];
            if ((attr & READONLY) == 0) {
                if (start == obj) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,delete,"        final void delete(int id)
        {
            ensureId(id);
            int attr = attributeArray[id - 1];
            if ((attr & PERMANENT) == 0) {
                int valueSlot = (id  - 1) * SLOT_SPAN + VALUE_SLOT;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,getAttributes,"        final int getAttributes(int id)
        {
            ensureId(id);
            return attributeArray[id - 1];
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,setAttributes,"        final void setAttributes(int id, int attributes)
        {
            ScriptableObject.checkValidAttributes(attributes);
            ensureId(id);
            synchronized (this) {
                attributeArray[id - 1] = (short)attributes;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,getNames,"        final Object[] getNames(boolean getAll, Object[] extraEntries)
        {
            Object[] names = null;
            int count = 0;
            for (int id = 1; id <= maxId; ++id) {
                Object value = ensureId(id);
                if (getAll || (attributeArray[id - 1] & DONTENUM) == 0) {
                    if (value != NOT_FOUND) {
                        int nameSlot = (id  - 1) * SLOT_SPAN + NAME_SLOT;
                        String name = (String)valueArray[nameSlot];
                        if (names == null) {
                            names = new Object[maxId];
                        }
                        names[count++] = name;
                    }
                }
            }
            if (count == 0) {
                return extraEntries;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,ensureId,"        private Object ensureId(int id)
        {
            Object[] array = valueArray;
            if (array == null) {
                synchronized (this) {
                    array = valueArray;
                    if (array == null) {
                        array = new Object[maxId * SLOT_SPAN];
                        valueArray = array;
                        attributeArray = new short[maxId];
                    }
                }
            }
            int valueSlot = (id  - 1) * SLOT_SPAN + VALUE_SLOT;
            Object value = array[valueSlot];
            if (value == null) {
                if (id == constructorId) {
                    initSlot(constructorId, ""constructor"",
                             constructor, constructorAttrs);
                    constructor = null; // no need to refer it any longer
                } else {
                    obj.initPrototypeId(id);
                }
                value = array[valueSlot];
                if (value == null) {
                    throw new IllegalStateException(
                        obj.getClass().getName()+"".initPrototypeId(int id) ""
                        +""did not initialize id=""+id);
                }
            }
            return value;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,defaultGet,"    protected final Object defaultGet(String name)
    {
        return super.get(name, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,defaultPut,"    protected final void defaultPut(String name, Object value)
    {
        super.put(name, this, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,has,"    public boolean has(String name, Scriptable start)
    {
        int info = findInstanceIdInfo(name);
        if (info != 0) {
            int attr = (info >>> 16);
            if ((attr & PERMANENT) != 0) {
                return true;
            }
            int id = (info & 0xFFFF);
            return NOT_FOUND != getInstanceIdValue(id);
        }
        if (prototypeValues != null) {
            int id = prototypeValues.findId(name);
            if (id != 0) {
                return prototypeValues.has(id);
            }
        }
        return super.has(name, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,get,"    public Object get(String name, Scriptable start)
    {
        int info = findInstanceIdInfo(name);
        if (info != 0) {
            int id = (info & 0xFFFF);
            return getInstanceIdValue(id);
        }
        if (prototypeValues != null) {
            int id = prototypeValues.findId(name);
            if (id != 0) {
                return prototypeValues.get(id);
            }
        }
        return super.get(name, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,put,"    public void put(String name, Scriptable start, Object value)
    {
        int info = findInstanceIdInfo(name);
        if (info != 0) {
            if (start == this && isSealed()) {
                throw Context.reportRuntimeError1(""msg.modify.sealed"",
                                                  name);
            }
            int attr = (info >>> 16);
            if ((attr & READONLY) == 0) {
                if (start == this) {
                    int id = (info & 0xFFFF);
                    setInstanceIdValue(id, value);
                }
                else {
                    start.put(name, start, value);
                }
            }
            return;
        }
        if (prototypeValues != null) {
            int id = prototypeValues.findId(name);
            if (id != 0) {
                if (start == this && isSealed()) {
                    throw Context.reportRuntimeError1(""msg.modify.sealed"",
                                                      name);
                }
                prototypeValues.set(id, start, value);
                return;
            }
        }
        super.put(name, start, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,delete,"    public void delete(String name)
    {
        int info = findInstanceIdInfo(name);
        if (info != 0) {
            // Let the super class to throw exceptions for sealed objects
            if (!isSealed()) {
                int attr = (info >>> 16);
                if ((attr & PERMANENT) == 0) {
                    int id = (info & 0xFFFF);
                    setInstanceIdValue(id, NOT_FOUND);
                }
                return;
            }
        }
        if (prototypeValues != null) {
            int id = prototypeValues.findId(name);
            if (id != 0) {
                if (!isSealed()) {
                    prototypeValues.delete(id);
                }
                return;
            }
        }
        super.delete(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,getAttributes,"    public int getAttributes(String name)
    {
        int info = findInstanceIdInfo(name);
        if (info != 0) {
            int attr = (info >>> 16);
            return attr;
        }
        if (prototypeValues != null) {
            int id = prototypeValues.findId(name);
            if (id != 0) {
                return prototypeValues.getAttributes(id);
            }
        }
        return super.getAttributes(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,setAttributes,"    public void setAttributes(String name, int attributes)
    {
        ScriptableObject.checkValidAttributes(attributes);
        int info = findInstanceIdInfo(name);
        if (info != 0) {
            int currentAttributes = (info >>> 16);
            if (attributes != currentAttributes) {
                throw new RuntimeException(
                    ""Change of attributes for this id is not supported"");
            }
            return;
        }
        if (prototypeValues != null) {
            int id = prototypeValues.findId(name);
            if (id != 0) {
                prototypeValues.setAttributes(id, attributes);
                return;
            }
        }
        super.setAttributes(name, attributes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,getIds,"    Object[] getIds(boolean getAll)
    {
        Object[] result = super.getIds(getAll);

        if (prototypeValues != null) {
            result = prototypeValues.getNames(getAll, result);
        }

        int maxInstanceId = getMaxInstanceId();
        if (maxInstanceId != 0) {
            Object[] ids = null;
            int count = 0;

            for (int id = maxInstanceId; id != 0; --id) {
                String name = getInstanceIdName(id);
                int info = findInstanceIdInfo(name);
                if (info != 0) {
                    int attr = (info >>> 16);
                    if ((attr & PERMANENT) == 0) {
                        if (NOT_FOUND == getInstanceIdValue(id)) {
                            continue;
                        }
                    }
                    if (getAll || (attr & DONTENUM) == 0) {
                        if (count == 0) {
                            // Need extra room for no more then [1..id] names
                            ids = new Object[id];
                        }
                        ids[count++] = name;
                    }
                }
            }
            if (count != 0) {
                if (result.length == 0 && ids.length == count) {
                    result = ids;
                }
                else {
                    Object[] tmp = new Object[result.length + count];
                    System.arraycopy(result, 0, tmp, 0, result.length);
                    System.arraycopy(ids, 0, tmp, result.length, count);
                    result = tmp;
                }
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,instanceIdInfo,"    protected static int instanceIdInfo(int attributes, int id)
    {
        return (attributes << 16) | id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String name)
    {
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        throw new IllegalStateException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,setInstanceIdValue,"    protected void setInstanceIdValue(int id, Object value)
    {
        throw new IllegalStateException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        throw f.unknown();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,exportAsJSClass,"    public final IdFunctionObject exportAsJSClass(int maxPrototypeId,
                                                  Scriptable scope,
                                                  boolean sealed)
    {
        // Set scope and prototype unless this is top level scope itself
        if (scope != this && scope != null) {
            setParentScope(scope);
            setPrototype(getObjectPrototype(scope));
        }

        activatePrototypeMap(maxPrototypeId);
        IdFunctionObject ctor = prototypeValues.createPrecachedConstructor();
        if (sealed) {
            sealObject();
        }
        fillConstructorProperties(ctor);
        if (sealed) {
            ctor.sealObject();
        }
        ctor.exportAsScopeProperty();
        return ctor;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,hasPrototypeMap,"    public final boolean hasPrototypeMap()
    {
        return prototypeValues != null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,activatePrototypeMap,"    public final void activatePrototypeMap(int maxPrototypeId)
    {
        PrototypeValues values = new PrototypeValues(this, maxPrototypeId);
        synchronized (this) {
            if (prototypeValues != null)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,initPrototypeMethod,"    public final void initPrototypeMethod(Object tag, int id, String name,
                                          int arity)
    {
        Scriptable scope = ScriptableObject.getTopLevelScope(this);
        IdFunctionObject f = newIdFunction(tag, id, name, arity, scope);
        prototypeValues.initValue(id, name, f, DONTENUM);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,initPrototypeConstructor,"    public final void initPrototypeConstructor(IdFunctionObject f)
    {
        int id = prototypeValues.constructorId;
        if (id == 0)
            throw new IllegalStateException();
        if (f.methodId() != id)
            throw new IllegalArgumentException();
        if (isSealed()) { f.sealObject(); }
        prototypeValues.initValue(id, ""constructor"", f, DONTENUM);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,initPrototypeValue,"    public final void initPrototypeValue(int id, String name, Object value,
                                         int attributes)
    {
        prototypeValues.initValue(id, name, value, attributes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        throw new IllegalStateException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,findPrototypeId,"    protected int findPrototypeId(String name)
    {
        throw new IllegalStateException(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,addIdFunctionProperty,"    protected void addIdFunctionProperty(Scriptable obj, Object tag, int id,
                                         String name, int arity)
    {
        Scriptable scope = ScriptableObject.getTopLevelScope(obj);
        IdFunctionObject f = newIdFunction(tag, id, name, arity, scope);
        f.addAsProperty(obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,incompatibleCallError,"    protected static EcmaError incompatibleCallError(IdFunctionObject f)
    {
        throw ScriptRuntime.typeError1(""msg.incompat.call"",
                                       f.getFunctionName());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,newIdFunction,"    private IdFunctionObject newIdFunction(Object tag, int id, String name,
                                           int arity, Scriptable scope)
    {
        IdFunctionObject f = new IdFunctionObject(this, tag, id, name, arity,
                                                  scope);
        if (isSealed()) { f.sealObject(); }
        return f;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,readObject,"    private void readObject(ObjectInputStream stream)
        throws IOException, ClassNotFoundException
    {
        stream.defaultReadObject();
        int maxPrototypeId = stream.readInt();
        if (maxPrototypeId != 0) {
            activatePrototypeMap(maxPrototypeId);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdScriptableObject.java,writeObject,"    private void writeObject(ObjectOutputStream stream)
        throws IOException
    {
        stream.defaultWriteObject();
        int maxPrototypeId = 0;
        if (prototypeValues != null) {
            maxPrototypeId = prototypeValues.getMaxId();
        }
        stream.writeInt(maxPrototypeId);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,getClassName,"    public String getClassName()
    {
        return (topScopeFlag) ? ""global"" : ""JavaImporter"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,init,"    public static void init(Context cx, Scriptable scope, boolean sealed)
    {
        ImporterTopLevel obj = new ImporterTopLevel();
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,initStandardObjects,"    public void initStandardObjects(Context cx, boolean sealed)
    {
        // Assume that Context.initStandardObjects initialize JavaImporter
        // property lazily so the above init call is not yet called
        cx.initStandardObjects(this, sealed);
        topScopeFlag = true;
        // If seal is true then exportAsJSClass(cx, seal) would seal
        // this obj. Since this is scope as well, it would not allow
        // to add variables.
        IdFunctionObject ctor = exportAsJSClass(MAX_PROTOTYPE_ID, this, false);
        if (sealed) {
            ctor.sealObject();
        }
        // delete ""constructor"" defined by exportAsJSClass so ""constructor""
        // name would refer to Object.constructor
        // and not to JavaImporter.prototype.constructor.
        delete(""constructor"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,has,"    public boolean has(String name, Scriptable start) {
        return super.has(name, start)
               || getPackageProperty(name, start) != NOT_FOUND;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,get,"    public Object get(String name, Scriptable start) {
        Object result = super.get(name, start);
        if (result != NOT_FOUND)
            return result;
        result = getPackageProperty(name, start);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,getPackageProperty,"    private Object getPackageProperty(String name, Scriptable start) {
        Object result = NOT_FOUND;
        Object[] elements;
        synchronized (importedPackages) {
            elements = importedPackages.toArray();
        }
        for (int i=0; i < elements.length; i++) {
            NativeJavaPackage p = (NativeJavaPackage) elements[i];
            Object v = p.getPkgProperty(name, start, false);
            if (v != null && !(v instanceof NativeJavaPackage)) {
                if (result == NOT_FOUND) {
                    result = v;
                } else {
                    throw Context.reportRuntimeError2(
                        ""msg.ambig.import"", result.toString(), v.toString());
                }
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,importPackage,"    public void importPackage(Context cx, Scriptable thisObj, Object[] args,
                              Function funObj)
    {
        js_importPackage(args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,js_construct,"    private Object js_construct(Scriptable scope, Object[] args)
    {
        ImporterTopLevel result = new ImporterTopLevel();
        for (int i = 0; i != args.length; ++i) {
            Object arg = args[i];
            if (arg instanceof NativeJavaClass) {
                result.importClass((NativeJavaClass)arg);
            } else if (arg instanceof NativeJavaPackage) {
                result.importPackage((NativeJavaPackage)arg);
            } else {
                throw Context.reportRuntimeError1(
                    ""msg.not.class.not.pkg"", Context.toString(arg));
            }
        }
        // set explicitly prototype and scope
        // as otherwise in top scope mode BaseFunction.construct
        // would keep them set to null. It also allow to use
        // JavaImporter without new and still get properly
        // initialized object.
        result.setParentScope(scope);
        result.setPrototype(this);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,js_importClass,"    private Object js_importClass(Object[] args)
    {
        for (int i = 0; i != args.length; i++) {
            Object arg = args[i];
            if (!(arg instanceof NativeJavaClass)) {
                throw Context.reportRuntimeError1(
                    ""msg.not.class"", Context.toString(arg));
            }
            importClass((NativeJavaClass)arg);
        }
        return Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,js_importPackage,"    private Object js_importPackage(Object[] args)
    {
        for (int i = 0; i != args.length; i++) {
            Object arg = args[i];
            if (!(arg instanceof NativeJavaPackage)) {
                throw Context.reportRuntimeError1(
                    ""msg.not.pkg"", Context.toString(arg));
            }
            importPackage((NativeJavaPackage)arg);
        }
        return Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,importPackage,"    private void importPackage(NativeJavaPackage pkg)
    {
        if(pkg == null) {
            return;
        }
        synchronized (importedPackages) {
            for (int j = 0; j != importedPackages.size(); j++) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,importClass,"    private void importClass(NativeJavaClass cl)
    {
        String s = cl.getClassObject().getName();
        String n = s.substring(s.lastIndexOf('.')+1);
        Object val = get(n, this);
        if (val != NOT_FOUND && val != cl) {
            throw Context.reportRuntimeError1(""msg.prop.defined"", n);
        }
        //defineProperty(n, cl, DONTENUM);
        put(n, this, cl);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor:   arity=0; s=""constructor"";   break;
          case Id_importClass:   arity=1; s=""importClass"";   break;
          case Id_importPackage: arity=1; s=""importPackage""; break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(IMPORTER_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(IMPORTER_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor:
            return js_construct(scope, args);

          case Id_importClass:
            return realThis(thisObj, f).js_importClass(args);

          case Id_importPackage:
            return realThis(thisObj, f).js_importPackage(args);
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,realThis,"    private ImporterTopLevel realThis(Scriptable thisObj, IdFunctionObject f)
    {
        if (topScopeFlag) {
            // when used as top scope importPackage and importClass are global
            // function that ignore thisObj
            return this;
        }
        if (!(thisObj instanceof ImporterTopLevel))
            throw incompatibleCallError(f);
        return (ImporterTopLevel)thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ImporterTopLevel.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:15:24 EDT
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==11) {
                c=s.charAt(0);
                if (c=='c') { X=""constructor"";id=Id_constructor; }
                else if (c=='i') { X=""importClass"";id=Id_importClass; }
            }
            else if (s_length==13) { X=""importPackage"";id=Id_importPackage; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getParseErrorInfo,"	public ParseErrorInfo getParseErrorInfo() {
	    return pei;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,reportPeekToken,"	void reportPeekToken(int type, String str, double num, int lineno,
			     int lineOffset) {
	    if (! tokenPeeking) {
		peekSlot = nextBufPos;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,reportConsumeToken,"	void reportConsumeToken() {
	    tokenPeeking = false;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,backToken,"	private TokenInfo backToken(int n) {
	    // 0 is most recent token added to history
	    if (n >= historyLength) return null;
	    int i = (nextBufPos - 1 - n);
	    while (i < 0) i += tokenMaxHistory;
	    return new TokenInfo(tokenTypes[i], tokenStrings[i],
				 tokenNumbers[i], tokenLineNumbers[i],",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getMessageId,"	public String getMessageId() { return messageId; }
	public String getMessageArg() { return messageArg; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getMessageArg,"	public String getMessageArg() { return messageArg; }
	public TokenInfo getPeekToken() {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getPeekToken,"	public TokenInfo getPeekToken() {
	    if (tokenPeeking) return backToken(0);
	    return null;
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getPrevToken,"	public TokenInfo getPrevToken(int n) {
	    // 1 = last non-peek token seen, 2 = before that, etc.
	    if (! tokenPeeking) n--;
	    return backToken(n);
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getPrevToken,"	public TokenInfo getPrevToken() {
	    return getPrevToken(1);
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getType,"	public int getType() { return type; }
	public int getLineNumber() { return lineno; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getLineNumber,"	public int getLineNumber() { return lineno; }
	public int getLineOffset() { return lineOffset; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getLineOffset,"	public int getLineOffset() { return lineOffset; }
	public double getNumber() { return num; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getNumber,"	public double getNumber() { return num; }
	public String getString() { return str; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,getString,"	public String getString() { return str; }
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,doErrorReporterError,"    void doErrorReporterError(String message, String sourceURI, int line,
			      String lineText, int lineOffset) {
	
	throw new InformativeEvaluatorException(message, sourceURI, line,
						lineText, lineOffset, info);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,peekToken,"    @Override int peekToken() throws IOException {
	int tt = super.peekToken();
	info.reportPeekToken(tt, ts.getString(), ts.getNumber(),
			     ts.getLineno(), ts.getOffset());
	return tt;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,consumeToken,"    @Override void consumeToken() {
	super.consumeToken();
	info.reportConsumeToken();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,addWarning,"    @Override void addWarning(String messageId, String messageArg)
    {
	info.messageId = messageId;
	info.messageArg = messageArg;
	
        String message = ScriptRuntime.getMessage1(messageId, messageArg);
        if (compilerEnv.reportWarningAsError()) {
            ++syntaxErrorCount;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,addError,"    @Override void addError(String messageId)
    {
	info.messageId = messageId;
	
	++syntaxErrorCount;
        String message = ScriptRuntime.getMessage0(messageId);
        doErrorReporterError(message, sourceURI, ts.getLineno(),
			     ts.getLine(), ts.getOffset());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,addError,"    @Override void addError(String messageId, String messageArg)
    {
	info.messageId = messageId;
	info.messageArg = messageArg;
	
	++syntaxErrorCount;
        String message = ScriptRuntime.getMessage1(messageId, messageArg);
        doErrorReporterError(message, sourceURI, ts.getLineno(),
			     ts.getLine(), ts.getOffset());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,createDecompiler,"    @Override protected Decompiler createDecompiler(CompilerEnvirons env) {
	return new MyDecompiler();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,warning,"		public void warning(String message, String sourceURI, int line,
				    String lineText, int lineOffset) {
		    DefaultErrorReporter.instance.warning
			(message, sourceURI, line, lineText, lineOffset);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,error,"		public void error(String message, String sourceURI, int line,
				  String lineText, int lineOffset) {
		    DefaultErrorReporter.instance.error
			(message, sourceURI, line, lineText, lineOffset);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,runtimeError,"		public EvaluatorException runtimeError(String message,
						       String sourceURI,
						       int line, String lineText,
						       int lineOffset) {
		    return DefaultErrorReporter.instance.runtimeError
			(message, sourceURI, line, lineText, lineOffset);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,makeParser,"    public static Parser makeParser(CompilerEnvirons compilerEnv,
				    ErrorReporter errorReporter) {
	if (errorReporter == THROW_INFORMATIVE_ERRORS) {
	    return new InformativeParser(compilerEnv);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InformativeParser.java,addRegexp,"	@Override void addRegexp(String regexp, String flags) {
	    super.addRegexp(regexp, flags);
	    String str = '/'+regexp+'/'+flags;
	    info.reportPeekToken(Token.REGEXP, str, ts.getNumber(),
				 ts.getLineno(), ts.getOffset());
	    info.reportConsumeToken();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterfaceAdapter.java,create,"    static Object create(Context cx, Class cl, Callable function)
    {
        if (!cl.isInterface()) throw new IllegalArgumentException();

        Scriptable topScope = ScriptRuntime.getTopCallScope(cx);
        ClassCache cache = ClassCache.get(topScope);
        InterfaceAdapter adapter;
        adapter = (InterfaceAdapter)cache.getInterfaceAdapter(cl);
        ContextFactory cf = cx.getFactory();
        if (adapter == null) {
            Method[] methods = cl.getMethods();
            if (methods.length == 0) {
                throw Context.reportRuntimeError2(
                    ""msg.no.empty.interface.conversion"",
                    String.valueOf(function),
                    cl.getClass().getName());
            }
            boolean canCallFunction = false;
          canCallFunctionChecks: {
                Class[] argTypes = methods[0].getParameterTypes();
                // check that the rest of methods has the same signature
                for (int i = 1; i != methods.length; ++i) {
                    Class[] types2 = methods[i].getParameterTypes();
                    if (types2.length != argTypes.length) {
                        break canCallFunctionChecks;
                    }
                    for (int j = 0; j != argTypes.length; ++j) {
                        if (types2[j] != argTypes[j]) {
                            break canCallFunctionChecks;
                        }
                    }
                }
                canCallFunction= true;
            }
            if (!canCallFunction) {
                throw Context.reportRuntimeError2(
                    ""msg.no.function.interface.conversion"",
                    String.valueOf(function),
                    cl.getClass().getName());
            }
            adapter = new InterfaceAdapter(cf, cl);
            cache.cacheInterfaceAdapter(cl, adapter);
        }
        return VMBridge.instance.newInterfaceProxy(
            adapter.proxyHelper, cf, adapter, function, topScope);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterfaceAdapter.java,invoke,"    public Object invoke(ContextFactory cf,
                         final Object target,
                         final Scriptable topScope,
                         final Method method,
                         final Object[] args)
    {
        ContextAction action = new ContextAction() {
                public Object run(Context cx)
                {
                    return invokeImpl(cx, target, topScope, method, args);
                }
            };
        return cf.call(action);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterfaceAdapter.java,run,"                public Object run(Context cx)
                {
                    return invokeImpl(cx, target, topScope, method, args);
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterfaceAdapter.java,invokeImpl,"    Object invokeImpl(Context cx,
                      Object target,
                      Scriptable topScope,
                      Method method,
                      Object[] args)
    {
        int N = (args == null) ? 0 : args.length;

        Callable function = (Callable)target;
        Scriptable thisObj = topScope;
        Object[] jsargs = new Object[N + 1];
        jsargs[N] = method.getName();
        if (N != 0) {
            WrapFactory wf = cx.getWrapFactory();
            for (int i = 0; i != N; ++i) {
                jsargs[i] = wf.wrap(cx, topScope, args[i], null);
            }
        }

        Object result = function.call(cx, topScope, thisObj, jsargs);
        Class javaResultType = method.getReturnType();
        if (javaResultType == Void.TYPE) {
            result = null;
        } else {
            result = Context.jsToJava(result, javaResultType);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,createScript,"    static InterpretedFunction createScript(InterpreterData idata,
                                            Object staticSecurityDomain)
    {
        InterpretedFunction f;
        f = new InterpretedFunction(idata, staticSecurityDomain);
        return f;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,createFunction,"    static InterpretedFunction createFunction(Context cx,Scriptable scope,
                                              InterpreterData idata,
                                              Object staticSecurityDomain)
    {
        InterpretedFunction f;
        f = new InterpretedFunction(idata, staticSecurityDomain);
        f.initInterpretedFunction(cx, scope);
        return f;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,createFunction,"    static InterpretedFunction createFunction(Context cx, Scriptable scope,
                                              InterpretedFunction  parent,
                                              int index)
    {
        InterpretedFunction f = new InterpretedFunction(parent, index);
        f.initInterpretedFunction(cx, scope);
        return f;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,createRegExpWraps,"    Scriptable[] createRegExpWraps(Context cx, Scriptable scope)
    {
        if (idata.itsRegExpLiterals == null) Kit.codeBug();

        RegExpProxy rep = ScriptRuntime.checkRegExpProxy(cx);
        int N = idata.itsRegExpLiterals.length;
        Scriptable[] array = new Scriptable[N];
        for (int i = 0; i != N; ++i) {
            array[i] = rep.wrapRegExp(cx, scope, idata.itsRegExpLiterals[i]);
        }
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,initInterpretedFunction,"    private void initInterpretedFunction(Context cx, Scriptable scope)
    {
        initScriptFunction(cx, scope);
        if (idata.itsRegExpLiterals != null) {
            functionRegExps = createRegExpWraps(cx, scope);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,getFunctionName,"    public String getFunctionName()
    {
        return (idata.itsName == null) ? """" : idata.itsName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        if (!ScriptRuntime.hasTopCall(cx)) {
            return ScriptRuntime.doTopCall(this, cx, scope, thisObj, args);
        }
        return Interpreter.interpret(this, cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,exec,"    public Object exec(Context cx, Scriptable scope)
    {
        if (idata.itsFunctionType != 0) {
            // Can only be applied to scripts
            throw new IllegalStateException();
        }
        if (!ScriptRuntime.hasTopCall(cx)) {
            // It will go through ""call"" path. but they are equivalent
            return ScriptRuntime.doTopCall(
                this, cx, scope, scope, ScriptRuntime.emptyArgs);
        }
        return Interpreter.interpret(
            this, cx, scope, scope, ScriptRuntime.emptyArgs);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,getEncodedSource,"    public String getEncodedSource()
    {
        return Interpreter.getEncodedSource(idata);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,getDebuggableView,"    public DebuggableScript getDebuggableView()
    {
        return idata;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,resumeGenerator,"    public Object resumeGenerator(Context cx, Scriptable scope, int operation,
                                  Object state, Object value)
    {
        return Interpreter.resumeGenerator(cx, scope, operation, state, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,getLanguageVersion,"    protected int getLanguageVersion()
    {
        return idata.languageVersion;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,getParamCount,"    protected int getParamCount()
    {
        return idata.argCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,getParamAndVarCount,"    protected int getParamAndVarCount()
    {
        return idata.argNames.length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,getParamOrVarName,"    protected String getParamOrVarName(int index)
    {
        return idata.argNames[index];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpretedFunction.java,getParamOrVarConst,"    protected boolean getParamOrVarConst(int index)
    {
        return idata.argIsConst[index];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,cloneFrozen,"        CallFrame cloneFrozen()
        {
            if (!frozen) Kit.codeBug();

            CallFrame copy;
            try {
                copy = (CallFrame)clone();
            } catch (CloneNotSupportedException ex) {
                throw new IllegalStateException();
            }

            // clone stack but keep varSource to point to values
            // from this frame to share variables.

            copy.stack = stack.clone();
            copy.stackAttributes = stackAttributes.clone();
            copy.sDbl = sDbl.clone();

            copy.frozen = false;
            return copy;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,captureFrameForGenerator,"    private static CallFrame captureFrameForGenerator(CallFrame frame) {
      frame.frozen = true;
      CallFrame result = frame.cloneFrozen();
      frame.frozen = false;

      // now isolate this frame from its previous context
      result.parentFrame = null;
      result.frameIndex = 0;

      return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,bytecodeName,"    private static String bytecodeName(int bytecode)
    {
        if (!validBytecode(bytecode)) {
            throw new IllegalArgumentException(String.valueOf(bytecode));
        }

        if (!Token.printICode) {
            return String.valueOf(bytecode);
        }

        if (validTokenCode(bytecode)) {
            return Token.name(bytecode);
        }

        switch (bytecode) {
          case Icode_DUP:              return ""DUP"";
          case Icode_DUP2:             return ""DUP2"";
          case Icode_SWAP:             return ""SWAP"";
          case Icode_POP:              return ""POP"";
          case Icode_POP_RESULT:       return ""POP_RESULT"";
          case Icode_IFEQ_POP:         return ""IFEQ_POP"";
          case Icode_VAR_INC_DEC:      return ""VAR_INC_DEC"";
          case Icode_NAME_INC_DEC:     return ""NAME_INC_DEC"";
          case Icode_PROP_INC_DEC:     return ""PROP_INC_DEC"";
          case Icode_ELEM_INC_DEC:     return ""ELEM_INC_DEC"";
          case Icode_REF_INC_DEC:      return ""REF_INC_DEC"";
          case Icode_SCOPE_LOAD:       return ""SCOPE_LOAD"";
          case Icode_SCOPE_SAVE:       return ""SCOPE_SAVE"";
          case Icode_TYPEOFNAME:       return ""TYPEOFNAME"";
          case Icode_NAME_AND_THIS:    return ""NAME_AND_THIS"";
          case Icode_PROP_AND_THIS:    return ""PROP_AND_THIS"";
          case Icode_ELEM_AND_THIS:    return ""ELEM_AND_THIS"";
          case Icode_VALUE_AND_THIS:   return ""VALUE_AND_THIS"";
          case Icode_CLOSURE_EXPR:     return ""CLOSURE_EXPR"";
          case Icode_CLOSURE_STMT:     return ""CLOSURE_STMT"";
          case Icode_CALLSPECIAL:      return ""CALLSPECIAL"";
          case Icode_RETUNDEF:         return ""RETUNDEF"";
          case Icode_GOSUB:            return ""GOSUB"";
          case Icode_STARTSUB:         return ""STARTSUB"";
          case Icode_RETSUB:           return ""RETSUB"";
          case Icode_LINE:             return ""LINE"";
          case Icode_SHORTNUMBER:      return ""SHORTNUMBER"";
          case Icode_INTNUMBER:        return ""INTNUMBER"";
          case Icode_LITERAL_NEW:      return ""LITERAL_NEW"";
          case Icode_LITERAL_SET:      return ""LITERAL_SET"";
          case Icode_SPARE_ARRAYLIT:   return ""SPARE_ARRAYLIT"";
          case Icode_REG_IND_C0:       return ""REG_IND_C0"";
          case Icode_REG_IND_C1:       return ""REG_IND_C1"";
          case Icode_REG_IND_C2:       return ""REG_IND_C2"";
          case Icode_REG_IND_C3:       return ""REG_IND_C3"";
          case Icode_REG_IND_C4:       return ""REG_IND_C4"";
          case Icode_REG_IND_C5:       return ""REG_IND_C5"";
          case Icode_REG_IND1:         return ""LOAD_IND1"";
          case Icode_REG_IND2:         return ""LOAD_IND2"";
          case Icode_REG_IND4:         return ""LOAD_IND4"";
          case Icode_REG_STR_C0:       return ""REG_STR_C0"";
          case Icode_REG_STR_C1:       return ""REG_STR_C1"";
          case Icode_REG_STR_C2:       return ""REG_STR_C2"";
          case Icode_REG_STR_C3:       return ""REG_STR_C3"";
          case Icode_REG_STR1:         return ""LOAD_STR1"";
          case Icode_REG_STR2:         return ""LOAD_STR2"";
          case Icode_REG_STR4:         return ""LOAD_STR4"";
          case Icode_GETVAR1:          return ""GETVAR1"";
          case Icode_SETVAR1:          return ""SETVAR1"";
          case Icode_UNDEF:            return ""UNDEF"";
          case Icode_ZERO:             return ""ZERO"";
          case Icode_ONE:              return ""ONE"";
          case Icode_ENTERDQ:          return ""ENTERDQ"";
          case Icode_LEAVEDQ:          return ""LEAVEDQ"";
          case Icode_TAIL_CALL:        return ""TAIL_CALL"";
          case Icode_LOCAL_CLEAR:      return ""LOCAL_CLEAR"";
          case Icode_LITERAL_GETTER:   return ""LITERAL_GETTER"";
          case Icode_LITERAL_SETTER:   return ""LITERAL_SETTER"";
          case Icode_SETCONST:         return ""SETCONST"";
          case Icode_SETCONSTVAR:      return ""SETCONSTVAR"";
          case Icode_SETCONSTVAR1:     return ""SETCONSTVAR1"";
          case Icode_GENERATOR:        return ""GENERATOR"";
          case Icode_GENERATOR_END:    return ""GENERATOR_END"";
          case Icode_DEBUGGER:         return ""DEBUGGER"";
        }

        // icode without name
        throw new IllegalStateException(String.valueOf(bytecode));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,validIcode,"    private static boolean validIcode(int icode)
    {
        return MIN_ICODE <= icode && icode <= -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,validTokenCode,"    private static boolean validTokenCode(int token)
    {
        return Token.FIRST_BYTECODE_TOKEN <= token
               && token <= Token.LAST_BYTECODE_TOKEN;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,validBytecode,"    private static boolean validBytecode(int bytecode)
    {
        return validIcode(bytecode) || validTokenCode(bytecode);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,compile,"    public Object compile(CompilerEnvirons compilerEnv,
                          ScriptOrFnNode tree,
                          String encodedSource,
                          boolean returnFunction)
    {
        this.compilerEnv = compilerEnv;
        new NodeTransformer().transform(tree);

        if (Token.printTrees) {
            /*APPJET*///System.out.println(tree.toStringTree(tree));
        }

        if (returnFunction) {
            tree = tree.getFunctionNode(0);
        }

        scriptOrFn = tree;
        itsData = new InterpreterData(compilerEnv.getLanguageVersion(),
                                      scriptOrFn.getSourceName(),
                                      encodedSource);
        itsData.topLevel = true;

        if (returnFunction) {
            generateFunctionICode();
        } else {
            generateICodeFromTree(scriptOrFn);
        }

        return itsData;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,createScriptObject,"    public Script createScriptObject(Object bytecode, Object staticSecurityDomain)
    {
        if(bytecode != itsData)
        {
            Kit.codeBug();
        }
        return InterpretedFunction.createScript(itsData,
                                                staticSecurityDomain);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,setEvalScriptFlag,"    public void setEvalScriptFlag(Script script) {
        ((InterpretedFunction)script).idata.evalScriptFlag = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,createFunctionObject,"    public Function createFunctionObject(Context cx, Scriptable scope,
            Object bytecode, Object staticSecurityDomain)
    {
        if(bytecode != itsData)
        {
            Kit.codeBug();
        }
        return InterpretedFunction.createFunction(cx, scope, itsData,
                                                  staticSecurityDomain);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,generateFunctionICode,"    private void generateFunctionICode()
    {
        itsInFunctionFlag = true;

        FunctionNode theFunction = (FunctionNode)scriptOrFn;

        itsData.itsFunctionType = theFunction.getFunctionType();
        itsData.itsNeedsActivation = theFunction.requiresActivation();
        itsData.itsName = theFunction.getFunctionName();
        if (!theFunction.getIgnoreDynamicScope()) {
            if (compilerEnv.isUseDynamicScope()) {
                itsData.useDynamicScope = true;
            }
        }
        if (theFunction.isGenerator()) {
          addIcode(Icode_GENERATOR);
          addUint16(theFunction.getBaseLineno() & 0xFFFF);
        }

        generateICodeFromTree(theFunction.getLastChild());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,generateICodeFromTree,"    private void generateICodeFromTree(Node tree)
    {
        generateNestedFunctions();

        generateRegExpLiterals();

        visitStatement(tree, 0);
        fixLabelGotos();
        // add RETURN_RESULT only to scripts as function always ends with RETURN
        if (itsData.itsFunctionType == 0) {
            addToken(Token.RETURN_RESULT);
        }

        if (itsData.itsICode.length != itsICodeTop) {
            // Make itsData.itsICode length exactly itsICodeTop to save memory
            // and catch bugs with jumps beyond icode as early as possible
            byte[] tmp = new byte[itsICodeTop];
            System.arraycopy(itsData.itsICode, 0, tmp, 0, itsICodeTop);
            itsData.itsICode = tmp;
        }
        if (itsStrings.size() == 0) {
            itsData.itsStringTable = null;
        } else {
            itsData.itsStringTable = new String[itsStrings.size()];
            ObjToIntMap.Iterator iter = itsStrings.newIterator();
            for (iter.start(); !iter.done(); iter.next()) {
                String str = (String)iter.getKey();
                int index = iter.getValue();
                if (itsData.itsStringTable[index] != null) Kit.codeBug();
                itsData.itsStringTable[index] = str;
            }
        }
        if (itsDoubleTableTop == 0) {
            itsData.itsDoubleTable = null;
        } else if (itsData.itsDoubleTable.length != itsDoubleTableTop) {
            double[] tmp = new double[itsDoubleTableTop];
            System.arraycopy(itsData.itsDoubleTable, 0, tmp, 0,
                             itsDoubleTableTop);
            itsData.itsDoubleTable = tmp;
        }
        if (itsExceptionTableTop != 0
            && itsData.itsExceptionTable.length != itsExceptionTableTop)
        {
            int[] tmp = new int[itsExceptionTableTop];
            System.arraycopy(itsData.itsExceptionTable, 0, tmp, 0,
                             itsExceptionTableTop);
            itsData.itsExceptionTable = tmp;
        }

        itsData.itsMaxVars = scriptOrFn.getParamAndVarCount();
        // itsMaxFrameArray: interpret method needs this amount for its
        // stack and sDbl arrays
        itsData.itsMaxFrameArray = itsData.itsMaxVars
                                   + itsData.itsMaxLocals
                                   + itsData.itsMaxStack;

        itsData.argNames = scriptOrFn.getParamAndVarNames();
        itsData.argIsConst = scriptOrFn.getParamAndVarConst();
        itsData.argCount = scriptOrFn.getParamCount();

        itsData.encodedSourceStart = scriptOrFn.getEncodedSourceStart();
        itsData.encodedSourceEnd = scriptOrFn.getEncodedSourceEnd();

        if (itsLiteralIds.size() != 0) {
            itsData.literalIds = itsLiteralIds.toArray();
        }

        if (Token.printICode) dumpICode(itsData);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,generateNestedFunctions,"    private void generateNestedFunctions()
    {
        int functionCount = scriptOrFn.getFunctionCount();
        if (functionCount == 0) return;

        InterpreterData[] array = new InterpreterData[functionCount];
        for (int i = 0; i != functionCount; i++) {
            FunctionNode def = scriptOrFn.getFunctionNode(i);
            Interpreter jsi = new Interpreter();
            jsi.compilerEnv = compilerEnv;
            jsi.scriptOrFn = def;
            jsi.itsData = new InterpreterData(itsData);
            jsi.generateFunctionICode();
            array[i] = jsi.itsData;
        }
        itsData.itsNestedFunctions = array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,generateRegExpLiterals,"    private void generateRegExpLiterals()
    {
        int N = scriptOrFn.getRegexpCount();
        if (N == 0) return;

        Context cx = Context.getContext();
        RegExpProxy rep = ScriptRuntime.checkRegExpProxy(cx);
        Object[] array = new Object[N];
        for (int i = 0; i != N; i++) {
            String string = scriptOrFn.getRegexpString(i);
            String flags = scriptOrFn.getRegexpFlags(i);
            array[i] = rep.compileRegExp(cx, string, flags);
        }
        itsData.itsRegExpLiterals = array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,updateLineNumber,"    private void updateLineNumber(Node node)
    {
        int lineno = node.getLineno();
        if (lineno != itsLineNumber && lineno >= 0) {
            if (itsData.firstLinePC < 0) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,badTree,"    private RuntimeException badTree(Node node)
    {
        throw new RuntimeException(node.toString());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,visitStatement,"    private void visitStatement(Node node, int initialStackDepth)
    {
        int type = node.getType();
        Node child = node.getFirstChild();
        switch (type) {

          case Token.FUNCTION:
            {
                int fnIndex = node.getExistingIntProp(Node.FUNCTION_PROP);
                int fnType = scriptOrFn.getFunctionNode(fnIndex).
                                 getFunctionType();
                // Only function expressions or function expression
                // statements need closure code creating new function
                // object on stack as function statements are initialized
                // at script/function start.
                // In addition, function expressions can not be present here
                // at statement level, they must only be present as expressions.
                if (fnType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT) {
                    addIndexOp(Icode_CLOSURE_STMT, fnIndex);
                } else {
                    if (fnType != FunctionNode.FUNCTION_STATEMENT) {
                        throw Kit.codeBug();
                    }
                }
                // For function statements or function expression statements
                // in scripts, we need to ensure that the result of the script
                // is the function if it is the last statement in the script.
                // For example, eval(""function () {}"") should return a
                // function, not undefined.
                if (!itsInFunctionFlag) {
                    addIndexOp(Icode_CLOSURE_EXPR, fnIndex);
                    stackChange(1);
                    addIcode(Icode_POP_RESULT);
                    stackChange(-1);
                }
            }
            break;

          case Token.LABEL:
          case Token.LOOP:
          case Token.BLOCK:
          case Token.EMPTY:
          case Token.WITH:
            updateLineNumber(node);
          case Token.SCRIPT:
            // fall through
            while (child != null) {
                visitStatement(child, initialStackDepth);
                child = child.getNext();
            }
            break;

          case Token.ENTERWITH:
            visitExpression(child, 0);
            addToken(Token.ENTERWITH);
            stackChange(-1);
            break;

          case Token.LEAVEWITH:
            addToken(Token.LEAVEWITH);
            break;

          case Token.LOCAL_BLOCK:
            {
                int local = allocLocal();
                node.putIntProp(Node.LOCAL_PROP, local);
                updateLineNumber(node);
                while (child != null) {
                    visitStatement(child, initialStackDepth);
                    child = child.getNext();
                }
                addIndexOp(Icode_LOCAL_CLEAR, local);
                releaseLocal(local);
            }
            break;

          case Token.DEBUGGER:
            addIcode(Icode_DEBUGGER);
            break;

          case Token.SWITCH:
            updateLineNumber(node);
            // See comments in IRFactory.createSwitch() for description
            // of SWITCH node
            {
                visitExpression(child, 0);
                for (Node.Jump caseNode = (Node.Jump)child.getNext();
                     caseNode != null;
                     caseNode = (Node.Jump)caseNode.getNext())
                {
                    if (caseNode.getType() != Token.CASE)
                        throw badTree(caseNode);
                    Node test = caseNode.getFirstChild();
                    addIcode(Icode_DUP);
                    stackChange(1);
                    visitExpression(test, 0);
                    addToken(Token.SHEQ);
                    stackChange(-1);
                    // If true, Icode_IFEQ_POP will jump and remove case
                    // value from stack
                    addGoto(caseNode.target, Icode_IFEQ_POP);
                    stackChange(-1);
                }
                addIcode(Icode_POP);
                stackChange(-1);
            }
            break;

          case Token.TARGET:
            markTargetLabel(node);
            break;

          case Token.IFEQ :
          case Token.IFNE :
            {
                Node target = ((Node.Jump)node).target;
                visitExpression(child, 0);
                addGoto(target, type);
                stackChange(-1);
            }
            break;

          case Token.GOTO:
            {
                Node target = ((Node.Jump)node).target;
                addGoto(target, type);
            }
            break;

          case Token.JSR:
            {
                Node target = ((Node.Jump)node).target;
                addGoto(target, Icode_GOSUB);
            }
            break;

          case Token.FINALLY:
            {
                // Account for incomming GOTOSUB address
                stackChange(1);
                int finallyRegister = getLocalBlockRef(node);
                addIndexOp(Icode_STARTSUB, finallyRegister);
                stackChange(-1);
                while (child != null) {
                    visitStatement(child, initialStackDepth);
                    child = child.getNext();
                }
                addIndexOp(Icode_RETSUB, finallyRegister);
            }
            break;

          case Token.EXPR_VOID:
          case Token.EXPR_RESULT:
            updateLineNumber(node);
            visitExpression(child, 0);
            addIcode((type == Token.EXPR_VOID) ? Icode_POP : Icode_POP_RESULT);
            stackChange(-1);
            break;

          case Token.TRY:
            {
                Node.Jump tryNode = (Node.Jump)node;
                int exceptionObjectLocal = getLocalBlockRef(tryNode);
                int scopeLocal = allocLocal();

                addIndexOp(Icode_SCOPE_SAVE, scopeLocal);

                int tryStart = itsICodeTop;
                boolean savedFlag = itsInTryFlag;
                itsInTryFlag = true;
                while (child != null) {
                    visitStatement(child, initialStackDepth);
                    child = child.getNext();
                }
                itsInTryFlag = savedFlag;

                Node catchTarget = tryNode.target;
                if (catchTarget != null) {
                    int catchStartPC
                        = itsLabelTable[getTargetLabel(catchTarget)];
                    addExceptionHandler(
                        tryStart, catchStartPC, catchStartPC,
                        false, exceptionObjectLocal, scopeLocal);
                }
                Node finallyTarget = tryNode.getFinally();
                if (finallyTarget != null) {
                    int finallyStartPC
                        = itsLabelTable[getTargetLabel(finallyTarget)];
                    addExceptionHandler(
                        tryStart, finallyStartPC, finallyStartPC,
                        true, exceptionObjectLocal, scopeLocal);
                }

                addIndexOp(Icode_LOCAL_CLEAR, scopeLocal);
                releaseLocal(scopeLocal);
            }
            break;

          case Token.CATCH_SCOPE:
            {
                int localIndex = getLocalBlockRef(node);
                int scopeIndex = node.getExistingIntProp(Node.CATCH_SCOPE_PROP);
                String name = child.getString();
                child = child.getNext();
                visitExpression(child, 0); // load expression object
                addStringPrefix(name);
                addIndexPrefix(localIndex);
                addToken(Token.CATCH_SCOPE);
                addUint8(scopeIndex != 0 ? 1 : 0);
                stackChange(-1);
            }
            break;

          case Token.THROW:
            updateLineNumber(node);
            visitExpression(child, 0);
            addToken(Token.THROW);
            addUint16(itsLineNumber & 0xFFFF);
            stackChange(-1);
            break;

          case Token.RETHROW:
            updateLineNumber(node);
            addIndexOp(Token.RETHROW, getLocalBlockRef(node));
            break;

          case Token.RETURN:
            updateLineNumber(node);
            if (node.getIntProp(Node.GENERATOR_END_PROP, 0) != 0) {
                // We're in a generator, so change RETURN to GENERATOR_END
                addIcode(Icode_GENERATOR_END);
                addUint16(itsLineNumber & 0xFFFF);
            } else if (child != null) {
                visitExpression(child, ECF_TAIL);
                addToken(Token.RETURN);
                stackChange(-1);
            } else {
                addIcode(Icode_RETUNDEF);
            }
            break;

          case Token.RETURN_RESULT:
            updateLineNumber(node);
            addToken(Token.RETURN_RESULT);
            break;

          case Token.ENUM_INIT_KEYS:
          case Token.ENUM_INIT_VALUES:
          case Token.ENUM_INIT_ARRAY:
            visitExpression(child, 0);
            addIndexOp(type, getLocalBlockRef(node));
            stackChange(-1);
            break;

          case Icode_GENERATOR:
            break;

          default:
            throw badTree(node);
        }

        if (itsStackDepth != initialStackDepth) {
            throw Kit.codeBug();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,visitExpression,"    private void visitExpression(Node node, int contextFlags)
    {
        int type = node.getType();
        Node child = node.getFirstChild();
        int savedStackDepth = itsStackDepth;
        switch (type) {

          case Token.FUNCTION:
            {
                int fnIndex = node.getExistingIntProp(Node.FUNCTION_PROP);
                FunctionNode fn = scriptOrFn.getFunctionNode(fnIndex);
                // See comments in visitStatement for Token.FUNCTION case
                if (fn.getFunctionType() != FunctionNode.FUNCTION_EXPRESSION) {
                    throw Kit.codeBug();
                }
                addIndexOp(Icode_CLOSURE_EXPR, fnIndex);
                stackChange(1);
            }
            break;

          case Token.LOCAL_LOAD:
            {
                int localIndex = getLocalBlockRef(node);
                addIndexOp(Token.LOCAL_LOAD, localIndex);
                stackChange(1);
            }
            break;

          case Token.COMMA:
            {
                Node lastChild = node.getLastChild();
                while (child != lastChild) {
                    visitExpression(child, 0);
                    addIcode(Icode_POP);
                    stackChange(-1);
                    child = child.getNext();
                }
                // Preserve tail context flag if any
                visitExpression(child, contextFlags & ECF_TAIL);
            }
            break;

          case Token.USE_STACK:
            // Indicates that stack was modified externally,
            // like placed catch object
            stackChange(1);
            break;

          case Token.REF_CALL:
          case Token.CALL:
          case Token.NEW:
            {
                if (type == Token.NEW) {
                    visitExpression(child, 0);
                } else {
                    generateCallFunAndThis(child);
                }
                int argCount = 0;
                while ((child = child.getNext()) != null) {
                    visitExpression(child, 0);
                    ++argCount;
                }
                int callType = node.getIntProp(Node.SPECIALCALL_PROP,
                                               Node.NON_SPECIALCALL);
                if (callType != Node.NON_SPECIALCALL) {
                    // embed line number and source filename
                    addIndexOp(Icode_CALLSPECIAL, argCount);
                    addUint8(callType);
                    addUint8(type == Token.NEW ? 1 : 0);
                    addUint16(itsLineNumber & 0xFFFF);
                } else {
                    // Only use the tail call optimization if we're not in a try
                    // or we're not generating debug info (since the
                    // optimization will confuse the debugger)
                    if (type == Token.CALL && (contextFlags & ECF_TAIL) != 0 &&
                        !compilerEnv.isGenerateDebugInfo() && !itsInTryFlag)
                    {
                        type = Icode_TAIL_CALL;
                    }
                    addIndexOp(type, argCount);
                }
                // adjust stack
                if (type == Token.NEW) {
                    // new: f, args -> result
                    stackChange(-argCount);
                } else {
                    // call: f, thisObj, args -> result
                    // ref_call: f, thisObj, args -> ref
                    stackChange(-1 - argCount);
                }
                if (argCount > itsData.itsMaxCalleeArgs) {
                    itsData.itsMaxCalleeArgs = argCount;
                }
            }
            break;

          case Token.AND:
          case Token.OR:
            {
                visitExpression(child, 0);
                addIcode(Icode_DUP);
                stackChange(1);
                int afterSecondJumpStart = itsICodeTop;
                int jump = (type == Token.AND) ? Token.IFNE : Token.IFEQ;
                addGotoOp(jump);
                stackChange(-1);
                addIcode(Icode_POP);
                stackChange(-1);
                child = child.getNext();
                // Preserve tail context flag if any
                visitExpression(child, contextFlags & ECF_TAIL);
                resolveForwardGoto(afterSecondJumpStart);
            }
            break;

          case Token.HOOK:
            {
                Node ifThen = child.getNext();
                Node ifElse = ifThen.getNext();
                visitExpression(child, 0);
                int elseJumpStart = itsICodeTop;
                addGotoOp(Token.IFNE);
                stackChange(-1);
                // Preserve tail context flag if any
                visitExpression(ifThen, contextFlags & ECF_TAIL);
                int afterElseJumpStart = itsICodeTop;
                addGotoOp(Token.GOTO);
                resolveForwardGoto(elseJumpStart);
                itsStackDepth = savedStackDepth;
                // Preserve tail context flag if any
                visitExpression(ifElse, contextFlags & ECF_TAIL);
                resolveForwardGoto(afterElseJumpStart);
            }
            break;

          case Token.GETPROP:
          case Token.GETPROPNOWARN:
            visitExpression(child, 0);
            child = child.getNext();
            addStringOp(type, child.getString());
            break;

          case Token.GETELEM:
          case Token.DELPROP:
          case Token.BITAND:
          case Token.BITOR:
          case Token.BITXOR:
          case Token.LSH:
          case Token.RSH:
          case Token.URSH:
          case Token.ADD:
          case Token.SUB:
          case Token.MOD:
          case Token.DIV:
          case Token.MUL:
          case Token.EQ:
          case Token.NE:
          case Token.SHEQ:
          case Token.SHNE:
          case Token.IN:
          case Token.INSTANCEOF:
          case Token.LE:
          case Token.LT:
          case Token.GE:
          case Token.GT:
            visitExpression(child, 0);
            child = child.getNext();
            visitExpression(child, 0);
            addToken(type);
            stackChange(-1);
            break;

          case Token.POS:
          case Token.NEG:
          case Token.NOT:
          case Token.BITNOT:
          case Token.TYPEOF:
          case Token.VOID:
            visitExpression(child, 0);
            if (type == Token.VOID) {
                addIcode(Icode_POP);
                addIcode(Icode_UNDEF);
            } else {
                addToken(type);
            }
            break;

          case Token.GET_REF:
          case Token.DEL_REF:
            visitExpression(child, 0);
            addToken(type);
            break;

          case Token.SETPROP:
          case Token.SETPROP_OP:
            {
                visitExpression(child, 0);
                child = child.getNext();
                String property = child.getString();
                child = child.getNext();
                if (type == Token.SETPROP_OP) {
                    addIcode(Icode_DUP);
                    stackChange(1);
                    addStringOp(Token.GETPROP, property);
                    // Compensate for the following USE_STACK
                    stackChange(-1);
                }
                visitExpression(child, 0);
                addStringOp(Token.SETPROP, property);
                stackChange(-1);
            }
            break;

          case Token.SETELEM:
          case Token.SETELEM_OP:
            visitExpression(child, 0);
            child = child.getNext();
            visitExpression(child, 0);
            child = child.getNext();
            if (type == Token.SETELEM_OP) {
                addIcode(Icode_DUP2);
                stackChange(2);
                addToken(Token.GETELEM);
                stackChange(-1);
                // Compensate for the following USE_STACK
                stackChange(-1);
            }
            visitExpression(child, 0);
            addToken(Token.SETELEM);
            stackChange(-2);
            break;

          case Token.SET_REF:
          case Token.SET_REF_OP:
            visitExpression(child, 0);
            child = child.getNext();
            if (type == Token.SET_REF_OP) {
                addIcode(Icode_DUP);
                stackChange(1);
                addToken(Token.GET_REF);
                // Compensate for the following USE_STACK
                stackChange(-1);
            }
            visitExpression(child, 0);
            addToken(Token.SET_REF);
            stackChange(-1);
            break;

          case Token.SETNAME:
            {
                String name = child.getString();
                visitExpression(child, 0);
                child = child.getNext();
                visitExpression(child, 0);
                addStringOp(Token.SETNAME, name);
                stackChange(-1);
            }
            break;

          case Token.SETCONST:
            {
                String name = child.getString();
                visitExpression(child, 0);
                child = child.getNext();
                visitExpression(child, 0);
                addStringOp(Icode_SETCONST, name);
                stackChange(-1);
            }
            break;

          case Token.TYPEOFNAME:
            {
                int index = -1;
                // use typeofname if an activation frame exists
                // since the vars all exist there instead of in jregs
                if (itsInFunctionFlag && !itsData.itsNeedsActivation)
                    index = scriptOrFn.getIndexForNameNode(node);
                if (index == -1) {
                    addStringOp(Icode_TYPEOFNAME, node.getString());
                    stackChange(1);
                } else {
                    addVarOp(Token.GETVAR, index);
                    stackChange(1);
                    addToken(Token.TYPEOF);
                }
            }
            break;

          case Token.BINDNAME:
          case Token.NAME:
          case Token.STRING:
            addStringOp(type, node.getString());
            stackChange(1);
            break;

          case Token.INC:
          case Token.DEC:
            visitIncDec(node, child);
            break;

          case Token.NUMBER:
            {
                double num = node.getDouble();
                int inum = (int)num;
                if (inum == num) {
                    if (inum == 0) {
                        addIcode(Icode_ZERO);
                        // Check for negative zero
                        if (1.0 / num < 0.0) {
                            addToken(Token.NEG);
                        }
                    } else if (inum == 1) {
                        addIcode(Icode_ONE);
                    } else if ((short)inum == inum) {
                        addIcode(Icode_SHORTNUMBER);
                        // write short as uin16 bit pattern
                        addUint16(inum & 0xFFFF);
                    } else {
                        addIcode(Icode_INTNUMBER);
                        addInt(inum);
                    }
                } else {
                    int index = getDoubleIndex(num);
                    addIndexOp(Token.NUMBER, index);
                }
                stackChange(1);
            }
            break;

          case Token.GETVAR:
            {
                if (itsData.itsNeedsActivation) Kit.codeBug();
                int index = scriptOrFn.getIndexForNameNode(node);
                addVarOp(Token.GETVAR, index);
                stackChange(1);
            }
            break;

          case Token.SETVAR:
            {
                if (itsData.itsNeedsActivation) Kit.codeBug();
                int index = scriptOrFn.getIndexForNameNode(child);
                child = child.getNext();
                visitExpression(child, 0);
                addVarOp(Token.SETVAR, index);
            }
            break;

          case Token.SETCONSTVAR:
            {
                if (itsData.itsNeedsActivation) Kit.codeBug();
                int index = scriptOrFn.getIndexForNameNode(child);
                child = child.getNext();
                visitExpression(child, 0);
                addVarOp(Token.SETCONSTVAR, index);
            }
            break;

          case Token.NULL:
          case Token.THIS:
          case Token.THISFN:
          case Token.FALSE:
          case Token.TRUE:
            addToken(type);
            stackChange(1);
            break;

          case Token.ENUM_NEXT:
          case Token.ENUM_ID:
            addIndexOp(type, getLocalBlockRef(node));
            stackChange(1);
            break;

          case Token.REGEXP:
            {
                int index = node.getExistingIntProp(Node.REGEXP_PROP);
                addIndexOp(Token.REGEXP, index);
                stackChange(1);
            }
            break;

          case Token.ARRAYLIT:
          case Token.OBJECTLIT:
            visitLiteral(node, child);
            break;

          case Token.ARRAYCOMP:
            visitArrayComprehension(node, child, child.getNext());
            break;

          case Token.REF_SPECIAL:
            visitExpression(child, 0);
            addStringOp(type, (String)node.getProp(Node.NAME_PROP));
            break;

          case Token.REF_MEMBER:
          case Token.REF_NS_MEMBER:
          case Token.REF_NAME:
          case Token.REF_NS_NAME:
            {
                int memberTypeFlags = node.getIntProp(Node.MEMBER_TYPE_PROP, 0);
                // generate possible target, possible namespace and member
                int childCount = 0;
                do {
                    visitExpression(child, 0);
                    ++childCount;
                    child = child.getNext();
                } while (child != null);
                addIndexOp(type, memberTypeFlags);
                stackChange(1 - childCount);
            }
            break;

          case Token.DOTQUERY:
            {
                int queryPC;
                updateLineNumber(node);
                visitExpression(child, 0);
                addIcode(Icode_ENTERDQ);
                stackChange(-1);
                queryPC = itsICodeTop;
                visitExpression(child.getNext(), 0);
                addBackwardGoto(Icode_LEAVEDQ, queryPC);
            }
            break;

          case Token.DEFAULTNAMESPACE :
          case Token.ESCXMLATTR :
          case Token.ESCXMLTEXT :
            visitExpression(child, 0);
            addToken(type);
            break;

          case Token.YIELD:
            if (child != null) {
                visitExpression(child, 0);
            } else {
                addIcode(Icode_UNDEF);
                stackChange(1);
            }
            addToken(Token.YIELD);
            addUint16(node.getLineno() & 0xFFFF);
            break;

          case Token.WITHEXPR: {
            Node enterWith = node.getFirstChild();
            Node with = enterWith.getNext();
            visitExpression(enterWith.getFirstChild(), 0);
            addToken(Token.ENTERWITH);
            stackChange(-1);
            visitExpression(with.getFirstChild(), 0);
            addToken(Token.LEAVEWITH);
            break;
          }

          default:
            throw badTree(node);
        }
        if (savedStackDepth + 1 != itsStackDepth) {
            Kit.codeBug();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,generateCallFunAndThis,"    private void generateCallFunAndThis(Node left)
    {
        // Generate code to place on stack function and thisObj
        int type = left.getType();
        switch (type) {
          case Token.NAME: {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,visitIncDec,"    private void visitIncDec(Node node, Node child)
    {
        int incrDecrMask = node.getExistingIntProp(Node.INCRDECR_PROP);
        int childType = child.getType();
        switch (childType) {
          case Token.GETVAR : {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,visitLiteral,"    private void visitLiteral(Node node, Node child)
    {
        int type = node.getType();
        int count;
        Object[] propertyIds = null;
        if (type == Token.ARRAYLIT) {
            count = 0;
            for (Node n = child; n != null; n = n.getNext()) {
                ++count;
            }
        } else if (type == Token.OBJECTLIT) {
            propertyIds = (Object[])node.getProp(Node.OBJECT_IDS_PROP);
            count = propertyIds.length;
        } else {
            throw badTree(node);
        }
        addIndexOp(Icode_LITERAL_NEW, count);
        stackChange(2);
        while (child != null) {
            int childType = child.getType();
            if (childType == Token.GET) {
                visitExpression(child.getFirstChild(), 0);
                addIcode(Icode_LITERAL_GETTER);
            } else if (childType == Token.SET) {
                visitExpression(child.getFirstChild(), 0);
                addIcode(Icode_LITERAL_SETTER);
            } else {
                visitExpression(child, 0);
                addIcode(Icode_LITERAL_SET);
            }
            stackChange(-1);
            child = child.getNext();
        }
        if (type == Token.ARRAYLIT) {
            int[] skipIndexes = (int[])node.getProp(Node.SKIP_INDEXES_PROP);
            if (skipIndexes == null) {
                addToken(Token.ARRAYLIT);
            } else {
                int index = itsLiteralIds.size();
                itsLiteralIds.add(skipIndexes);
                addIndexOp(Icode_SPARE_ARRAYLIT, index);
            }
        } else {
            int index = itsLiteralIds.size();
            itsLiteralIds.add(propertyIds);
            addIndexOp(Token.OBJECTLIT, index);
        }
        stackChange(-1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,visitArrayComprehension,"    private void visitArrayComprehension(Node node, Node initStmt, Node expr)
    {
        // A bit of a hack: array comprehensions are implemented using
        // statement nodes for the iteration, yet they appear in an
        // expression context. So we pass the current stack depth to
        // visitStatement so it can check that the depth is not altered
        // by statements.
        visitStatement(initStmt, itsStackDepth);
        visitExpression(expr, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getLocalBlockRef,"    private int getLocalBlockRef(Node node)
    {
        Node localBlock = (Node)node.getProp(Node.LOCAL_BLOCK_PROP);
        return localBlock.getExistingIntProp(Node.LOCAL_PROP);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getTargetLabel,"    private int getTargetLabel(Node target)
    {
        int label = target.labelId();
        if (label != -1) {
            return label;
        }
        label = itsLabelTableTop;
        if (itsLabelTable == null || label == itsLabelTable.length) {
            if (itsLabelTable == null) {
                itsLabelTable = new int[MIN_LABEL_TABLE_SIZE];
            }else {
                int[] tmp = new int[itsLabelTable.length * 2];
                System.arraycopy(itsLabelTable, 0, tmp, 0, label);
                itsLabelTable = tmp;
            }
        }
        itsLabelTableTop = label + 1;
        itsLabelTable[label] = -1;

        target.labelId(label);
        return label;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,markTargetLabel,"    private void markTargetLabel(Node target)
    {
        int label = getTargetLabel(target);
        if (itsLabelTable[label] != -1) {
            // Can mark label only once
            Kit.codeBug();
        }
        itsLabelTable[label] = itsICodeTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addGoto,"    private void addGoto(Node target, int gotoOp)
    {
        int label = getTargetLabel(target);
        if (!(label < itsLabelTableTop)) Kit.codeBug();
        int targetPC = itsLabelTable[label];

        if (targetPC != -1) {
            addBackwardGoto(gotoOp, targetPC);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,fixLabelGotos,"    private void fixLabelGotos()
    {
        for (int i = 0; i < itsFixupTableTop; i++) {
            long fixup = itsFixupTable[i];
            int label = (int)(fixup >> 32);
            int jumpSource = (int)fixup;
            int pc = itsLabelTable[label];
            if (pc == -1) {
                // Unlocated label
                throw Kit.codeBug();
            }
            resolveGoto(jumpSource, pc);
        }
        itsFixupTableTop = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addBackwardGoto,"    private void addBackwardGoto(int gotoOp, int jumpPC)
    {
        int fromPC = itsICodeTop;
        // Ensure that this is a jump backward
        if (fromPC <= jumpPC) throw Kit.codeBug();
        addGotoOp(gotoOp);
        resolveGoto(fromPC, jumpPC);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,resolveForwardGoto,"    private void resolveForwardGoto(int fromPC)
    {
        // Ensure that forward jump skips at least self bytecode
        if (itsICodeTop < fromPC + 3) throw Kit.codeBug();
        resolveGoto(fromPC, itsICodeTop);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,resolveGoto,"    private void resolveGoto(int fromPC, int jumpPC)
    {
        int offset = jumpPC - fromPC;
        // Ensure that jumps do not overlap
        if (0 <= offset && offset <= 2) throw Kit.codeBug();
        int offsetSite = fromPC + 1;
        if (offset != (short)offset) {
            if (itsData.longJumps == null) {
                itsData.longJumps = new UintMap();
            }
            itsData.longJumps.put(offsetSite, jumpPC);
            offset = 0;
        }
        byte[] array = itsData.itsICode;
        array[offsetSite] = (byte)(offset >> 8);
        array[offsetSite + 1] = (byte)offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addToken,"    private void addToken(int token)
    {
        if (!validTokenCode(token)) throw Kit.codeBug();
        addUint8(token);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addIcode,"    private void addIcode(int icode)
    {
        if (!validIcode(icode)) throw Kit.codeBug();
        // Write negative icode as uint8 bits
        addUint8(icode & 0xFF);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addUint8,"    private void addUint8(int value)
    {
        if ((value & ~0xFF) != 0) throw Kit.codeBug();
        byte[] array = itsData.itsICode;
        int top = itsICodeTop;
        if (top == array.length) {
            array = increaseICodeCapacity(1);
        }
        array[top] = (byte)value;
        itsICodeTop = top + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addUint16,"    private void addUint16(int value)
    {
        if ((value & ~0xFFFF) != 0) throw Kit.codeBug();
        byte[] array = itsData.itsICode;
        int top = itsICodeTop;
        if (top + 2 > array.length) {
            array = increaseICodeCapacity(2);
        }
        array[top] = (byte)(value >>> 8);
        array[top + 1] = (byte)value;
        itsICodeTop = top + 2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addInt,"    private void addInt(int i)
    {
        byte[] array = itsData.itsICode;
        int top = itsICodeTop;
        if (top + 4 > array.length) {
            array = increaseICodeCapacity(4);
        }
        array[top] = (byte)(i >>> 24);
        array[top + 1] = (byte)(i >>> 16);
        array[top + 2] = (byte)(i >>> 8);
        array[top + 3] = (byte)i;
        itsICodeTop = top + 4;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getDoubleIndex,"    private int getDoubleIndex(double num)
    {
        int index = itsDoubleTableTop;
        if (index == 0) {
            itsData.itsDoubleTable = new double[64];
        } else if (itsData.itsDoubleTable.length == index) {
            double[] na = new double[index * 2];
            System.arraycopy(itsData.itsDoubleTable, 0, na, 0, index);
            itsData.itsDoubleTable = na;
        }
        itsData.itsDoubleTable[index] = num;
        itsDoubleTableTop = index + 1;
        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addGotoOp,"    private void addGotoOp(int gotoOp)
    {
        byte[] array = itsData.itsICode;
        int top = itsICodeTop;
        if (top + 3 > array.length) {
            array = increaseICodeCapacity(3);
        }
        array[top] = (byte)gotoOp;
        // Offset would written later
        itsICodeTop = top + 1 + 2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addVarOp,"    private void addVarOp(int op, int varIndex)
    {
        switch (op) {
          case Token.SETCONSTVAR:
            if (varIndex < 128) {
                addIcode(Icode_SETCONSTVAR1);
                addUint8(varIndex);
                return;
            }
            addIndexOp(Icode_SETCONSTVAR, varIndex);
            return;
          case Token.GETVAR:
          case Token.SETVAR:
            if (varIndex < 128) {
                addIcode(op == Token.GETVAR ? Icode_GETVAR1 : Icode_SETVAR1);
                addUint8(varIndex);
                return;
            }
            // fallthrough
          case Icode_VAR_INC_DEC:
            addIndexOp(op, varIndex);
            return;
        }
        throw Kit.codeBug();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addStringOp,"    private void addStringOp(int op, String str)
    {
        addStringPrefix(str);
        if (validIcode(op)) {
            addIcode(op);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addIndexOp,"    private void addIndexOp(int op, int index)
    {
        addIndexPrefix(index);
        if (validIcode(op)) {
            addIcode(op);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addStringPrefix,"    private void addStringPrefix(String str)
    {
        int index = itsStrings.get(str, -1);
        if (index == -1) {
            index = itsStrings.size();
            itsStrings.put(str, index);
        }
        if (index < 4) {
            addIcode(Icode_REG_STR_C0 - index);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addIndexPrefix,"    private void addIndexPrefix(int index)
    {
        if (index < 0) Kit.codeBug();
        if (index < 6) {
            addIcode(Icode_REG_IND_C0 - index);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addExceptionHandler,"    private void addExceptionHandler(int icodeStart, int icodeEnd,
                                     int handlerStart, boolean isFinally,
                                     int exceptionObjectLocal, int scopeLocal)
    {
        int top = itsExceptionTableTop;
        int[] table = itsData.itsExceptionTable;
        if (table == null) {
            if (top != 0) Kit.codeBug();
            table = new int[EXCEPTION_SLOT_SIZE * 2];
            itsData.itsExceptionTable = table;
        } else if (table.length == top) {
            table = new int[table.length * 2];
            System.arraycopy(itsData.itsExceptionTable, 0, table, 0, top);
            itsData.itsExceptionTable = table;
        }
        table[top + EXCEPTION_TRY_START_SLOT]  = icodeStart;
        table[top + EXCEPTION_TRY_END_SLOT]    = icodeEnd;
        table[top + EXCEPTION_HANDLER_SLOT]    = handlerStart;
        table[top + EXCEPTION_TYPE_SLOT]       = isFinally ? 1 : 0;
        table[top + EXCEPTION_LOCAL_SLOT]      = exceptionObjectLocal;
        table[top + EXCEPTION_SCOPE_SLOT]      = scopeLocal;

        itsExceptionTableTop = top + EXCEPTION_SLOT_SIZE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,increaseICodeCapacity,"    private byte[] increaseICodeCapacity(int extraSize)
    {
        int capacity = itsData.itsICode.length;
        int top = itsICodeTop;
        if (top + extraSize <= capacity) throw Kit.codeBug();
        capacity *= 2;
        if (top + extraSize > capacity) {
            capacity = top + extraSize;
        }
        byte[] array = new byte[capacity];
        System.arraycopy(itsData.itsICode, 0, array, 0, top);
        itsData.itsICode = array;
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,stackChange,"    private void stackChange(int change)
    {
        if (change <= 0) {
            itsStackDepth += change;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,allocLocal,"    private int allocLocal()
    {
        int localSlot = itsLocalTop;
        ++itsLocalTop;
        if (itsLocalTop > itsData.itsMaxLocals) {
            itsData.itsMaxLocals = itsLocalTop;
        }
        return localSlot;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,releaseLocal,"    private void releaseLocal(int localSlot)
    {
        --itsLocalTop;
        if (localSlot != itsLocalTop) Kit.codeBug();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getShort,"    private static int getShort(byte[] iCode, int pc) {
        return (iCode[pc] << 8) | (iCode[pc + 1] & 0xFF);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getIndex,"    private static int getIndex(byte[] iCode, int pc) {
        return ((iCode[pc] & 0xFF) << 8) | (iCode[pc + 1] & 0xFF);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getInt,"    private static int getInt(byte[] iCode, int pc) {
        return (iCode[pc] << 24) | ((iCode[pc + 1] & 0xFF) << 16)
               | ((iCode[pc + 2] & 0xFF) << 8) | (iCode[pc + 3] & 0xFF);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getExceptionHandler,"    private static int getExceptionHandler(CallFrame frame,
                                           boolean onlyFinally)
    {
        int[] exceptionTable = frame.idata.itsExceptionTable;
        if (exceptionTable == null) {
            // No exception handlers
            return -1;
        }

        // Icode switch in the interpreter increments PC immediately
        // and it is necessary to subtract 1 from the saved PC
        // to point it before the start of the next instruction.
        int pc = frame.pc - 1;

        // OPT: use binary search
        int best = -1, bestStart = 0, bestEnd = 0;
        for (int i = 0; i != exceptionTable.length; i += EXCEPTION_SLOT_SIZE) {
            int start = exceptionTable[i + EXCEPTION_TRY_START_SLOT];
            int end = exceptionTable[i + EXCEPTION_TRY_END_SLOT];
            if (!(start <= pc && pc < end)) {
                continue;
            }
            if (onlyFinally && exceptionTable[i + EXCEPTION_TYPE_SLOT] != 1) {
                continue;
            }
            if (best >= 0) {
                // Since handlers always nest and they never have shared end
                // although they can share start  it is sufficient to compare
                // handlers ends
                if (bestEnd < end) {
                    continue;
                }
                // Check the above assumption
                if (bestStart > start) Kit.codeBug(); // should be nested
                if (bestEnd == end) Kit.codeBug();  // no ens sharing
            }
            best = i;
            bestStart = start;
            bestEnd = end;
        }
        return best;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,dumpICode,"    private static void dumpICode(InterpreterData idata)
    {
        if (!Token.printICode) {
            return;
        }

        byte iCode[] = idata.itsICode;
        int iCodeLength = iCode.length;
        String[] strings = idata.itsStringTable;
        PrintStream out = System.out;
        out.println(""ICode dump, for "" + idata.itsName
                    + "", length = "" + iCodeLength);
        out.println(""MaxStack = "" + idata.itsMaxStack);

        int indexReg = 0;
        for (int pc = 0; pc < iCodeLength; ) {
            out.flush();
            out.print("" ["" + pc + ""] "");
            int token = iCode[pc];
            int icodeLength = bytecodeSpan(token);
            String tname = bytecodeName(token);
            int old_pc = pc;
            ++pc;
            switch (token) {
              default:
                if (icodeLength != 1) Kit.codeBug();
                out.println(tname);
                break;

              case Icode_GOSUB :
              case Token.GOTO :
              case Token.IFEQ :
              case Token.IFNE :
              case Icode_IFEQ_POP :
              case Icode_LEAVEDQ : {
                int newPC = pc + getShort(iCode, pc) - 1;
                out.println(tname + "" "" + newPC);
                pc += 2;
                break;
              }
              case Icode_VAR_INC_DEC :
              case Icode_NAME_INC_DEC :
              case Icode_PROP_INC_DEC :
              case Icode_ELEM_INC_DEC :
              case Icode_REF_INC_DEC: {
                int incrDecrType = iCode[pc];
                out.println(tname + "" "" + incrDecrType);
                ++pc;
                break;
              }

              case Icode_CALLSPECIAL : {
                int callType = iCode[pc] & 0xFF;
                boolean isNew =  (iCode[pc + 1] != 0);
                int line = getIndex(iCode, pc+2);
                out.println(tname+"" ""+callType+"" ""+isNew+"" ""+indexReg+"" ""+line);
                pc += 4;
                break;
              }

              case Token.CATCH_SCOPE:
                {
                    boolean afterFisrtFlag =  (iCode[pc] != 0);
                    out.println(tname+"" ""+afterFisrtFlag);
                    ++pc;
                }
                break;
              case Token.REGEXP :
                out.println(tname+"" ""+idata.itsRegExpLiterals[indexReg]);
                break;
              case Token.OBJECTLIT :
              case Icode_SPARE_ARRAYLIT :
                out.println(tname+"" ""+idata.literalIds[indexReg]);
                break;
              case Icode_CLOSURE_EXPR :
              case Icode_CLOSURE_STMT :
                out.println(tname+"" ""+idata.itsNestedFunctions[indexReg]);
                break;
              case Token.CALL :
              case Icode_TAIL_CALL :
              case Token.REF_CALL :
              case Token.NEW :
                out.println(tname+' '+indexReg);
                break;
              case Token.THROW :
              case Token.YIELD :
              case Icode_GENERATOR :
              case Icode_GENERATOR_END :
              {
                int line = getIndex(iCode, pc);
                out.println(tname + "" : "" + line);
                pc += 2;
                break;
              }
              case Icode_SHORTNUMBER : {
                int value = getShort(iCode, pc);
                out.println(tname + "" "" + value);
                pc += 2;
                break;
              }
              case Icode_INTNUMBER : {
                int value = getInt(iCode, pc);
                out.println(tname + "" "" + value);
                pc += 4;
                break;
              }
              case Token.NUMBER : {
                double value = idata.itsDoubleTable[indexReg];
                out.println(tname + "" "" + value);
                break;
              }
              case Icode_LINE : {
                int line = getIndex(iCode, pc);
                out.println(tname + "" : "" + line);
                pc += 2;
                break;
              }
              case Icode_REG_STR1: {
                String str = strings[0xFF & iCode[pc]];
                out.println(tname + "" \"""" + str + '""');
                ++pc;
                break;
              }
              case Icode_REG_STR2: {
                String str = strings[getIndex(iCode, pc)];
                out.println(tname + "" \"""" + str + '""');
                pc += 2;
                break;
              }
              case Icode_REG_STR4: {
                String str = strings[getInt(iCode, pc)];
                out.println(tname + "" \"""" + str + '""');
                pc += 4;
                break;
              }
              case Icode_REG_IND_C0:
                  indexReg = 0;
                  out.println(tname);
                  break;
              case Icode_REG_IND_C1:
                  indexReg = 1;
                  out.println(tname);
                  break;
              case Icode_REG_IND_C2:
                  indexReg = 2;
                  out.println(tname);
                  break;
              case Icode_REG_IND_C3:
                  indexReg = 3;
                  out.println(tname);
                  break;
              case Icode_REG_IND_C4:
                  indexReg = 4;
                  out.println(tname);
                  break;
              case Icode_REG_IND_C5:
                  indexReg = 5;
                  out.println(tname);
                  break;
              case Icode_REG_IND1: {
                indexReg = 0xFF & iCode[pc];
                out.println(tname+"" ""+indexReg);
                ++pc;
                break;
              }
              case Icode_REG_IND2: {
                indexReg = getIndex(iCode, pc);
                out.println(tname+"" ""+indexReg);
                pc += 2;
                break;
              }
              case Icode_REG_IND4: {
                indexReg = getInt(iCode, pc);
                out.println(tname+"" ""+indexReg);
                pc += 4;
                break;
              }
              case Icode_GETVAR1:
              case Icode_SETVAR1:
              case Icode_SETCONSTVAR1:
                indexReg = iCode[pc];
                out.println(tname+"" ""+indexReg);
                ++pc;
                break;
            }
            if (old_pc + icodeLength != pc) Kit.codeBug();
        }

        int[] table = idata.itsExceptionTable;
        if (table != null) {
            out.println(""Exception handlers: ""
                         +table.length / EXCEPTION_SLOT_SIZE);
            for (int i = 0; i != table.length;
                 i += EXCEPTION_SLOT_SIZE)
            {
                int tryStart       = table[i + EXCEPTION_TRY_START_SLOT];
                int tryEnd         = table[i + EXCEPTION_TRY_END_SLOT];
                int handlerStart   = table[i + EXCEPTION_HANDLER_SLOT];
                int type           = table[i + EXCEPTION_TYPE_SLOT];
                int exceptionLocal = table[i + EXCEPTION_LOCAL_SLOT];
                int scopeLocal     = table[i + EXCEPTION_SCOPE_SLOT];

                out.println("" tryStart=""+tryStart+"" tryEnd=""+tryEnd
                            +"" handlerStart=""+handlerStart
                            +"" type=""+(type == 0 ? ""catch"" : ""finally"")
                            +"" exceptionLocal=""+exceptionLocal);
            }
        }
        out.flush();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,bytecodeSpan,"    private static int bytecodeSpan(int bytecode)
    {
        switch (bytecode) {
            case Token.THROW :
            case Token.YIELD:
            case Icode_GENERATOR:
            case Icode_GENERATOR_END:
                // source line
                return 1 + 2;

            case Icode_GOSUB :
            case Token.GOTO :
            case Token.IFEQ :
            case Token.IFNE :
            case Icode_IFEQ_POP :
            case Icode_LEAVEDQ :
                // target pc offset
                return 1 + 2;

            case Icode_CALLSPECIAL :
                // call type
                // is new
                // line number
                return 1 + 1 + 1 + 2;

            case Token.CATCH_SCOPE:
                // scope flag
                return 1 + 1;

            case Icode_VAR_INC_DEC:
            case Icode_NAME_INC_DEC:
            case Icode_PROP_INC_DEC:
            case Icode_ELEM_INC_DEC:
            case Icode_REF_INC_DEC:
                // type of ++/--
                return 1 + 1;

            case Icode_SHORTNUMBER :
                // short number
                return 1 + 2;

            case Icode_INTNUMBER :
                // int number
                return 1 + 4;

            case Icode_REG_IND1:
                // ubyte index
                return 1 + 1;

            case Icode_REG_IND2:
                // ushort index
                return 1 + 2;

            case Icode_REG_IND4:
                // int index
                return 1 + 4;

            case Icode_REG_STR1:
                // ubyte string index
                return 1 + 1;

            case Icode_REG_STR2:
                // ushort string index
                return 1 + 2;

            case Icode_REG_STR4:
                // int string index
                return 1 + 4;

            case Icode_GETVAR1:
            case Icode_SETVAR1:
            case Icode_SETCONSTVAR1:
                // byte var index
                return 1 + 1;

            case Icode_LINE :
                // line number
                return 1 + 2;
        }
        if (!validBytecode(bytecode)) throw Kit.codeBug();
        return 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getLineNumbers,"    static int[] getLineNumbers(InterpreterData data)
    {
        UintMap presentLines = new UintMap();

        byte[] iCode = data.itsICode;
        int iCodeLength = iCode.length;
        for (int pc = 0; pc != iCodeLength;) {
            int bytecode = iCode[pc];
            int span = bytecodeSpan(bytecode);
            if (bytecode == Icode_LINE) {
                if (span != 3) Kit.codeBug();
                int line = getIndex(iCode, pc + 1);
                presentLines.put(line, 0);
            }
            pc += span;
        }

        return presentLines.getKeys();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,captureStackInfo,"    public void captureStackInfo(RhinoException ex)
    {
        Context cx = Context.getCurrentContext();
        if (cx == null || cx.lastInterpreterFrame == null) {
            // No interpreter invocations
            ex.interpreterStackInfo = null;
            ex.interpreterLineData = null;
            return;
        }
        // has interpreter frame on the stack
        CallFrame[] array;
        if (cx.previousInterpreterInvocations == null
            || cx.previousInterpreterInvocations.size() == 0)
        {
            array = new CallFrame[1];
        } else {
            int previousCount = cx.previousInterpreterInvocations.size();
            if (cx.previousInterpreterInvocations.peek()
                == cx.lastInterpreterFrame)
            {
                // It can happen if exception was generated after
                // frame was pushed to cx.previousInterpreterInvocations
                // but before assignment to cx.lastInterpreterFrame.
                // In this case frames has to be ignored.
                --previousCount;
            }
            array = new CallFrame[previousCount + 1];
            cx.previousInterpreterInvocations.toArray(array);
        }
        array[array.length - 1]  = (CallFrame)cx.lastInterpreterFrame;

        int interpreterFrameCount = 0;
        for (int i = 0; i != array.length; ++i) {
            interpreterFrameCount += 1 + array[i].frameIndex;
        }

        int[] linePC = new int[interpreterFrameCount];
        // Fill linePC with pc positions from all interpreter frames.
        // Start from the most nested frame
        int linePCIndex = interpreterFrameCount;
        for (int i = array.length; i != 0;) {
            --i;
            CallFrame frame = array[i];
            while (frame != null) {
                --linePCIndex;
                linePC[linePCIndex] = frame.pcSourceLineStart;
                frame = frame.parentFrame;
            }
        }
        if (linePCIndex != 0) Kit.codeBug();

        ex.interpreterStackInfo = array;
        ex.interpreterLineData = linePC;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getSourcePositionFromStack,"    public String getSourcePositionFromStack(Context cx, int[] linep)
    {
        CallFrame frame = (CallFrame)cx.lastInterpreterFrame;
        InterpreterData idata = frame.idata;
        if (frame.pcSourceLineStart >= 0) {
            linep[0] = getIndex(idata.itsICode, frame.pcSourceLineStart);
        } else {
            linep[0] = 0;
        }
        return idata.itsSourceFile;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getPatchedStack,"    public String getPatchedStack(RhinoException ex,
                                  String nativeStackTrace)
    {
        String tag = ""org.mozilla.javascript.Interpreter.interpretLoop"";
        StringBuffer sb = new StringBuffer(nativeStackTrace.length() + 1000);
        String lineSeparator = SecurityUtilities.getSystemProperty(""line.separator"");

        CallFrame[] array = (CallFrame[])ex.interpreterStackInfo;
        int[] linePC = ex.interpreterLineData;
        int arrayIndex = array.length;
        int linePCIndex = linePC.length;
        int offset = 0;
        while (arrayIndex != 0) {
            --arrayIndex;
            int pos = nativeStackTrace.indexOf(tag, offset);
            if (pos < 0) {
                break;
            }

            // Skip tag length
            pos += tag.length();
            // Skip until the end of line
            for (; pos != nativeStackTrace.length(); ++pos) {
                char c = nativeStackTrace.charAt(pos);
                if (c == '\n' || c == '\r') {
                    break;
                }
            }
            sb.append(nativeStackTrace.substring(offset, pos));
            offset = pos;

            CallFrame frame = array[arrayIndex];
            while (frame != null) {
                if (linePCIndex == 0) Kit.codeBug();
                --linePCIndex;
                InterpreterData idata = frame.idata;
                sb.append(lineSeparator);
                sb.append(""\tat script"");
                if (idata.itsName != null && idata.itsName.length() != 0) {
                    sb.append('.');
                    sb.append(idata.itsName);
                }
                sb.append('(');
                sb.append(idata.itsSourceFile);
                int pc = linePC[linePCIndex];
                if (pc >= 0) {
                    // Include line info only if available
                    sb.append(':');
                    sb.append(getIndex(idata.itsICode, pc));
                }
                sb.append(')');
                frame = frame.parentFrame;
            }
        }
        sb.append(nativeStackTrace.substring(offset));

        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getScriptStack,"    public List getScriptStack(RhinoException ex)
    {
        if (ex.interpreterStackInfo == null) {
            return null;
        }
        
        List list = new ArrayList();
        String lineSeparator =
                SecurityUtilities.getSystemProperty(""line.separator"");

        CallFrame[] array = (CallFrame[])ex.interpreterStackInfo;
        int[] linePC = ex.interpreterLineData;
        int arrayIndex = array.length;
        int linePCIndex = linePC.length;
        while (arrayIndex != 0) {
            --arrayIndex;
            StringBuffer sb = new StringBuffer();
            CallFrame frame = array[arrayIndex];
            while (frame != null) {
                if (linePCIndex == 0) Kit.codeBug();
                --linePCIndex;
                InterpreterData idata = frame.idata;
                sb.append(""\tat "");
                sb.append(idata.itsSourceFile);
                int pc = linePC[linePCIndex];
                if (pc >= 0) {
                    // Include line info only if available
                    sb.append(':');
                    sb.append(getIndex(idata.itsICode, pc));
                }
                if (idata.itsName != null && idata.itsName.length() != 0) {
                    sb.append("" ("");
                    sb.append(idata.itsName);
                    sb.append(')');
                }
                sb.append(lineSeparator);
                frame = frame.parentFrame;
            }
            list.add(sb.toString());
        }
        return list;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getEncodedSource,"    static String getEncodedSource(InterpreterData idata)
    {
        if (idata.encodedSource == null) {
            return null;
        }
        return idata.encodedSource.substring(idata.encodedSourceStart,
                                             idata.encodedSourceEnd);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,initFunction,"    private static void initFunction(Context cx, Scriptable scope,
                                     InterpretedFunction parent, int index)
    {
        InterpretedFunction fn;
        fn = InterpretedFunction.createFunction(cx, scope, parent, index);
        ScriptRuntime.initFunction(cx, scope, fn, fn.idata.itsFunctionType,
                                   parent.idata.evalScriptFlag);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,interpret,"    static Object interpret(InterpretedFunction ifun,
                            Context cx, Scriptable scope,
                            Scriptable thisObj, Object[] args)
    {
        if (!ScriptRuntime.hasTopCall(cx)) Kit.codeBug();

        if (cx.interpreterSecurityDomain != ifun.securityDomain) {
            Object savedDomain = cx.interpreterSecurityDomain;
            cx.interpreterSecurityDomain = ifun.securityDomain;
            try {
                return ifun.securityController.callWithDomain(
                    ifun.securityDomain, cx, ifun, scope, thisObj, args);
            } finally {
                cx.interpreterSecurityDomain = savedDomain;
            }
        }

        CallFrame frame = new CallFrame();
        initFrame(cx, scope, thisObj, args, null, 0, args.length,
                  ifun, null, frame);

        return interpretLoop(cx, frame, null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,resumeGenerator,"    public static Object resumeGenerator(Context cx,
                                         Scriptable scope,
                                         int operation,
                                         Object savedState,
                                         Object value)
    {
      CallFrame frame = (CallFrame) savedState;
      GeneratorState generatorState = new GeneratorState(operation, value);
      if (operation == NativeGenerator.GENERATOR_CLOSE) {
          try {
              return interpretLoop(cx, frame, generatorState);
          } catch (RuntimeException e) {
              // Only propagate exceptions other than closingException
              if (e != value)
                  throw e;
          }
          return Undefined.instance;
      }
      Object result = interpretLoop(cx, frame, generatorState);
      if (generatorState.returnedException != null)
          throw generatorState.returnedException;
      return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,restartContinuation,"    public static Object restartContinuation(Continuation c, Context cx,
                                             Scriptable scope, Object[] args)
    {
        if (!ScriptRuntime.hasTopCall(cx)) {
            return ScriptRuntime.doTopCall(c, cx, scope, null, args);
        }

        Object arg;
        if (args.length == 0) {
            arg = Undefined.instance;
        } else {
            arg = args[0];
        }

        CallFrame capturedFrame = (CallFrame)c.getImplementation();
        if (capturedFrame == null) {
            // No frames to restart
            return arg;
        }

        ContinuationJump cjump = new ContinuationJump(c, null);

        cjump.result = arg;
        return interpretLoop(cx, null, cjump);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,interpretLoop,"    private static Object interpretLoop(Context cx, CallFrame frame,
                                        Object throwable)
    {
        // throwable holds exception object to rethrow or catch
        // It is also used for continuation restart in which case
        // it holds ContinuationJump

        final Object DBL_MRK = UniqueTag.DOUBLE_MARK;
        final Object undefined = Undefined.instance;

        final boolean instructionCounting = (cx.instructionThreshold != 0);
        // arbitrary number to add to instructionCount when calling
        // other functions
        final int INVOCATION_COST = 100;
        // arbitrary exception cost for instruction counting
        final int EXCEPTION_COST = 100;

        String stringReg = null;
        int indexReg = -1;

        if (cx.lastInterpreterFrame != null) {
            // save the top frame from the previous interpretLoop
            // invocation on the stack
            if (cx.previousInterpreterInvocations == null) {
                cx.previousInterpreterInvocations = new ObjArray();
            }
            cx.previousInterpreterInvocations.push(cx.lastInterpreterFrame);
        }

        // When restarting continuation throwable is not null and to jump
        // to the code that rewind continuation state indexReg should be set
        // to -1.
        // With the normal call throable == null and indexReg == -1 allows to
        // catch bugs with using indeReg to access array eleemnts before
        // initializing indexReg.

        GeneratorState generatorState = null;
        if (throwable != null) {
            if (throwable instanceof GeneratorState) {
              generatorState = (GeneratorState) throwable;

              // reestablish this call frame
              enterFrame(cx, frame, ScriptRuntime.emptyArgs, true);
              throwable = null;
            } else if (!(throwable instanceof ContinuationJump)) {
                // It should be continuation
                Kit.codeBug();
            }
        }

        Object interpreterResult = null;
        double interpreterResultDbl = 0.0;

        StateLoop: for (;;) {
            withoutExceptions: try {

                if (throwable != null) {
                    // Need to return both 'frame' and 'throwable' from
                    // 'processThrowable', so just added a 'throwable'
                    // member in 'frame'.
                    frame = processThrowable(cx, throwable, frame, indexReg,
                                             instructionCounting);
                    throwable = frame.throwable;
                    frame.throwable = null;
                } else {
                    if (generatorState == null && frame.frozen) Kit.codeBug();
                }

                // Use local variables for constant values in frame
                // for faster access
                Object[] stack = frame.stack;
                double[] sDbl = frame.sDbl;
                Object[] vars = frame.varSource.stack;
                double[] varDbls = frame.varSource.sDbl;
                int[] varAttributes = frame.varSource.stackAttributes;
                byte[] iCode = frame.idata.itsICode;
                String[] strings = frame.idata.itsStringTable;

                // Use local for stackTop as well. Since execption handlers
                // can only exist at statement level where stack is empty,
                // it is necessary to save/restore stackTop only across
                // function calls and normal returns.
                int stackTop = frame.savedStackTop;

                // Store new frame in cx which is used for error reporting etc.
                cx.lastInterpreterFrame = frame;

                Loop: for (;;) {

                    // Exception handler assumes that PC is already incremented
                    // pass the instruction start when it searches the
                    // exception handler
                    int op = iCode[frame.pc++];
                    jumplessRun: {

    // Back indent to ease implementation reading
switch (op) {
    case Icode_GENERATOR: {
        if (!frame.frozen) {
          // First time encountering this opcode: create new generator
          // object and return
          frame.pc--; // we want to come back here when we resume
          CallFrame generatorFrame = captureFrameForGenerator(frame);
          generatorFrame.frozen = true;
          NativeGenerator generator = new NativeGenerator(frame.scope, 
              generatorFrame.fnOrScript, generatorFrame);
          frame.result = generator;
          break Loop;
        } else {
          // We are now resuming execution. Fall through to YIELD case.
        }
    }
    // fall through...
    case Token.YIELD: {
        if (!frame.frozen) {
            return freezeGenerator(cx, frame, stackTop, generatorState);
        } else {
            Object obj = thawGenerator(frame, stackTop, generatorState, op);
            if (obj != Scriptable.NOT_FOUND) {
                throwable = obj;
                break withoutExceptions;
            }
            continue Loop;
        }
    }
    case Icode_GENERATOR_END: {
      // throw StopIteration
      frame.frozen = true;
      int sourceLine = getIndex(iCode, frame.pc);
      generatorState.returnedException = new JavaScriptException(
          NativeIterator.getStopIterationObject(frame.scope),
          frame.idata.itsSourceFile, sourceLine);
      break Loop;
    }
    case Token.THROW: {
        Object value = stack[stackTop];
        if (value == DBL_MRK) value = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;

        int sourceLine = getIndex(iCode, frame.pc);
        throwable = new JavaScriptException(value,
                                            frame.idata.itsSourceFile,
                                            sourceLine);
        break withoutExceptions;
    }
    case Token.RETHROW: {
        indexReg += frame.localShift;
        throwable = stack[indexReg];
        break withoutExceptions;
    }
    case Token.GE :
    case Token.LE :
    case Token.GT :
    case Token.LT : {
        --stackTop;
        Object rhs = stack[stackTop + 1];
        Object lhs = stack[stackTop];
        boolean valBln;
      object_compare:
        {
          number_compare:
            {
                double rDbl, lDbl;
                if (rhs == DBL_MRK) {
                    rDbl = sDbl[stackTop + 1];
                    lDbl = stack_double(frame, stackTop);
                } else if (lhs == DBL_MRK) {
                    rDbl = ScriptRuntime.toNumber(rhs);
                    lDbl = sDbl[stackTop];
                } else {
                    break number_compare;
                }
                switch (op) {
                  case Token.GE:
                    valBln = (lDbl >= rDbl);
                    break object_compare;
                  case Token.LE:
                    valBln = (lDbl <= rDbl);
                    break object_compare;
                  case Token.GT:
                    valBln = (lDbl > rDbl);
                    break object_compare;
                  case Token.LT:
                    valBln = (lDbl < rDbl);
                    break object_compare;
                  default:
                    throw Kit.codeBug();
                }
            }
            switch (op) {
              case Token.GE:
                valBln = ScriptRuntime.cmp_LE(rhs, lhs);
                break;
              case Token.LE:
                valBln = ScriptRuntime.cmp_LE(lhs, rhs);
                break;
              case Token.GT:
                valBln = ScriptRuntime.cmp_LT(rhs, lhs);
                break;
              case Token.LT:
                valBln = ScriptRuntime.cmp_LT(lhs, rhs);
                break;
              default:
                throw Kit.codeBug();
            }
        }
        stack[stackTop] = ScriptRuntime.wrapBoolean(valBln);
        continue Loop;
    }
    case Token.IN :
    case Token.INSTANCEOF : {
        Object rhs = stack[stackTop];
        if (rhs == DBL_MRK) rhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        boolean valBln;
        if (op == Token.IN) {
            valBln = ScriptRuntime.in(lhs, rhs, cx);
        } else {
            valBln = ScriptRuntime.instanceOf(lhs, rhs, cx);
        }
        stack[stackTop] = ScriptRuntime.wrapBoolean(valBln);
        continue Loop;
    }
    case Token.EQ :
    case Token.NE : {
        --stackTop;
        boolean valBln;
        Object rhs = stack[stackTop + 1];
        Object lhs = stack[stackTop];
        if (rhs == DBL_MRK) {
            if (lhs == DBL_MRK) {
                valBln = (sDbl[stackTop] == sDbl[stackTop + 1]);
            } else {
                valBln = ScriptRuntime.eqNumber(sDbl[stackTop + 1], lhs);
            }
        } else {
            if (lhs == DBL_MRK) {
                valBln = ScriptRuntime.eqNumber(sDbl[stackTop], rhs);
            } else {
                valBln = ScriptRuntime.eq(lhs, rhs);
            }
        }
        valBln ^= (op == Token.NE);
        stack[stackTop] = ScriptRuntime.wrapBoolean(valBln);
        continue Loop;
    }
    case Token.SHEQ :
    case Token.SHNE : {
        --stackTop;
        Object rhs = stack[stackTop + 1];
        Object lhs = stack[stackTop];
        boolean valBln;
      shallow_compare: {
            double rdbl, ldbl;
            if (rhs == DBL_MRK) {
                rdbl = sDbl[stackTop + 1];
                if (lhs == DBL_MRK) {
                    ldbl = sDbl[stackTop];
                } else if (lhs instanceof Number) {
                    ldbl = ((Number)lhs).doubleValue();
                } else {
                    valBln = false;
                    break shallow_compare;
                }
            } else if (lhs == DBL_MRK) {
                ldbl = sDbl[stackTop];
                if (rhs == DBL_MRK) {
                    rdbl = sDbl[stackTop + 1];
                } else if (rhs instanceof Number) {
                    rdbl = ((Number)rhs).doubleValue();
                } else {
                    valBln = false;
                    break shallow_compare;
                }
            } else {
                valBln = ScriptRuntime.shallowEq(lhs, rhs);
                break shallow_compare;
            }
            valBln = (ldbl == rdbl);
        }
        valBln ^= (op == Token.SHNE);
        stack[stackTop] = ScriptRuntime.wrapBoolean(valBln);
        continue Loop;
    }
    case Token.IFNE :
        if (stack_boolean(frame, stackTop--)) {
            frame.pc += 2;
            continue Loop;
        }
        break jumplessRun;
    case Token.IFEQ :
        if (!stack_boolean(frame, stackTop--)) {
            frame.pc += 2;
            continue Loop;
        }
        break jumplessRun;
    case Icode_IFEQ_POP :
        if (!stack_boolean(frame, stackTop--)) {
            frame.pc += 2;
            continue Loop;
        }
        stack[stackTop--] = null;
        break jumplessRun;
    case Token.GOTO :
        break jumplessRun;
    case Icode_GOSUB :
        ++stackTop;
        stack[stackTop] = DBL_MRK;
        sDbl[stackTop] = frame.pc + 2;
        break jumplessRun;
    case Icode_STARTSUB :
        if (stackTop == frame.emptyStackTop + 1) {
            // Call from Icode_GOSUB: store return PC address in the local
            indexReg += frame.localShift;
            stack[indexReg] = stack[stackTop];
            sDbl[indexReg] = sDbl[stackTop];
            --stackTop;
        } else {
            // Call from exception handler: exception object is already stored
            // in the local
            if (stackTop != frame.emptyStackTop) Kit.codeBug();
        }
        continue Loop;
    case Icode_RETSUB : {
        // indexReg: local to store return address
        if (instructionCounting) {
            addInstructionCount(cx, frame, 0);
        }
        indexReg += frame.localShift;
        Object value = stack[indexReg];
        if (value != DBL_MRK) {
            // Invocation from exception handler, restore object to rethrow
            throwable = value;
            break withoutExceptions;
        }
        // Normal return from GOSUB
        frame.pc = (int)sDbl[indexReg];
        if (instructionCounting) {
            frame.pcPrevBranch = frame.pc;
        }
        continue Loop;
    }
    case Icode_POP :
        stack[stackTop] = null;
        stackTop--;
        continue Loop;
    case Icode_POP_RESULT :
        frame.result = stack[stackTop];
        frame.resultDbl = sDbl[stackTop];
        stack[stackTop] = null;
        --stackTop;
        continue Loop;
    case Icode_DUP :
        stack[stackTop + 1] = stack[stackTop];
        sDbl[stackTop + 1] = sDbl[stackTop];
        stackTop++;
        continue Loop;
    case Icode_DUP2 :
        stack[stackTop + 1] = stack[stackTop - 1];
        sDbl[stackTop + 1] = sDbl[stackTop - 1];
        stack[stackTop + 2] = stack[stackTop];
        sDbl[stackTop + 2] = sDbl[stackTop];
        stackTop += 2;
        continue Loop;
    case Icode_SWAP : {
        Object o = stack[stackTop];
        stack[stackTop] = stack[stackTop - 1];
        stack[stackTop - 1] = o;
        double d = sDbl[stackTop];
        sDbl[stackTop] = sDbl[stackTop - 1];
        sDbl[stackTop - 1] = d;
        continue Loop;
    }
    case Token.RETURN :
        frame.result = stack[stackTop];
        frame.resultDbl = sDbl[stackTop];
        --stackTop;
        break Loop;
    case Token.RETURN_RESULT :
        break Loop;
    case Icode_RETUNDEF :
        frame.result = undefined;
        break Loop;
    case Token.BITNOT : {
        int rIntValue = stack_int32(frame, stackTop);
        stack[stackTop] = DBL_MRK;
        sDbl[stackTop] = ~rIntValue;
        continue Loop;
    }
    case Token.BITAND :
    case Token.BITOR :
    case Token.BITXOR :
    case Token.LSH :
    case Token.RSH : {
        int lIntValue = stack_int32(frame, stackTop-1);
        int rIntValue = stack_int32(frame, stackTop);
        stack[--stackTop] = DBL_MRK;
        switch (op) {
          case Token.BITAND:
            lIntValue &= rIntValue;
            break;
          case Token.BITOR:
            lIntValue |= rIntValue;
            break;
          case Token.BITXOR:
            lIntValue ^= rIntValue;
            break;
          case Token.LSH:
            lIntValue <<= rIntValue;
            break;
          case Token.RSH:
            lIntValue >>= rIntValue;
            break;
        }
        sDbl[stackTop] = lIntValue;
        continue Loop;
    }
    case Token.URSH : {
        double lDbl = stack_double(frame, stackTop-1);
        int rIntValue = stack_int32(frame, stackTop) & 0x1F;
        stack[--stackTop] = DBL_MRK;
        sDbl[stackTop] = ScriptRuntime.toUint32(lDbl) >>> rIntValue;
        continue Loop;
    }
    case Token.NEG :
    case Token.POS : {
        double rDbl = stack_double(frame, stackTop);
        stack[stackTop] = DBL_MRK;
        if (op == Token.NEG) {
            rDbl = -rDbl;
        }
        sDbl[stackTop] = rDbl;
        continue Loop;
    }
    case Token.ADD :
        --stackTop;
        do_add(stack, sDbl, stackTop, cx);
        continue Loop;
    case Token.SUB :
    case Token.MUL :
    case Token.DIV :
    case Token.MOD : {
        double rDbl = stack_double(frame, stackTop);
        --stackTop;
        double lDbl = stack_double(frame, stackTop);
        stack[stackTop] = DBL_MRK;
        switch (op) {
          case Token.SUB:
            lDbl -= rDbl;
            break;
          case Token.MUL:
            lDbl *= rDbl;
            break;
          case Token.DIV:
            lDbl /= rDbl;
            break;
          case Token.MOD:
            lDbl %= rDbl;
            break;
        }
        sDbl[stackTop] = lDbl;
        continue Loop;
    }
    case Token.NOT :
        stack[stackTop] = ScriptRuntime.wrapBoolean(
                              !stack_boolean(frame, stackTop));
        continue Loop;
    case Token.BINDNAME :
        stack[++stackTop] = ScriptRuntime.bind(cx, frame.scope, stringReg);
        continue Loop;
    case Token.SETNAME : {
        Object rhs = stack[stackTop];
        if (rhs == DBL_MRK) rhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Scriptable lhs = (Scriptable)stack[stackTop];
        stack[stackTop] = ScriptRuntime.setName(lhs, rhs, cx,
                                                frame.scope, stringReg);
        continue Loop;
    }
    case Icode_SETCONST: {
        Object rhs = stack[stackTop];
        if (rhs == DBL_MRK) rhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Scriptable lhs = (Scriptable)stack[stackTop];
        stack[stackTop] = ScriptRuntime.setConst(lhs, rhs, cx, stringReg);
        continue Loop;
    }
    case Token.DELPROP : {
        Object rhs = stack[stackTop];
        if (rhs == DBL_MRK) rhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.delete(lhs, rhs, cx);
        continue Loop;
    }
    case Token.GETPROPNOWARN : {
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.getObjectPropNoWarn(lhs, stringReg, cx);
        continue Loop;
    }
    case Token.GETPROP : {
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.getObjectProp(lhs, stringReg, cx);
        continue Loop;
    }
    case Token.SETPROP : {
        Object rhs = stack[stackTop];
        if (rhs == DBL_MRK) rhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.setObjectProp(lhs, stringReg, rhs,
                                                      cx);
        continue Loop;
    }
    case Icode_PROP_INC_DEC : {
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.propIncrDecr(lhs, stringReg,
                                                     cx, iCode[frame.pc]);
        ++frame.pc;
        continue Loop;
    }
    case Token.GETELEM : {
        --stackTop;
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) {
            lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        }
        Object value;
        Object id = stack[stackTop + 1];
        if (id != DBL_MRK) {
            value = ScriptRuntime.getObjectElem(lhs, id, cx);
        } else {
            double d = sDbl[stackTop + 1];
            value = ScriptRuntime.getObjectIndex(lhs, d, cx);
        }
        stack[stackTop] = value;
        continue Loop;
    }
    case Token.SETELEM : {
        stackTop -= 2;
        Object rhs = stack[stackTop + 2];
        if (rhs == DBL_MRK) {
            rhs = ScriptRuntime.wrapNumber(sDbl[stackTop + 2]);
        }
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) {
            lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        }
        Object value;
        Object id = stack[stackTop + 1];
        if (id != DBL_MRK) {
            value = ScriptRuntime.setObjectElem(lhs, id, rhs, cx);
        } else {
            double d = sDbl[stackTop + 1];
            value = ScriptRuntime.setObjectIndex(lhs, d, rhs, cx);
        }
        stack[stackTop] = value;
        continue Loop;
    }
    case Icode_ELEM_INC_DEC: {
        Object rhs = stack[stackTop];
        if (rhs == DBL_MRK) rhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.elemIncrDecr(lhs, rhs, cx,
                                                     iCode[frame.pc]);
        ++frame.pc;
        continue Loop;
    }
    case Token.GET_REF : {
        Ref ref = (Ref)stack[stackTop];
        stack[stackTop] = ScriptRuntime.refGet(ref, cx);
        continue Loop;
    }
    case Token.SET_REF : {
        Object value = stack[stackTop];
        if (value == DBL_MRK) value = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Ref ref = (Ref)stack[stackTop];
        stack[stackTop] = ScriptRuntime.refSet(ref, value, cx);
        continue Loop;
    }
    case Token.DEL_REF : {
        Ref ref = (Ref)stack[stackTop];
        stack[stackTop] = ScriptRuntime.refDel(ref, cx);
        continue Loop;
    }
    case Icode_REF_INC_DEC : {
        Ref ref = (Ref)stack[stackTop];
        stack[stackTop] = ScriptRuntime.refIncrDecr(ref, cx, iCode[frame.pc]);
        ++frame.pc;
        continue Loop;
    }
    case Token.LOCAL_LOAD :
        ++stackTop;
        indexReg += frame.localShift;
        stack[stackTop] = stack[indexReg];
        sDbl[stackTop] = sDbl[indexReg];
        continue Loop;
    case Icode_LOCAL_CLEAR :
        indexReg += frame.localShift;
        stack[indexReg] = null;
        continue Loop;
    case Icode_NAME_AND_THIS :
        // stringReg: name
        ++stackTop;
        stack[stackTop] = ScriptRuntime.getNameFunctionAndThis(stringReg,
                                                               cx, frame.scope);
        ++stackTop;
        stack[stackTop] = ScriptRuntime.lastStoredScriptable(cx);
        continue Loop;
    case Icode_PROP_AND_THIS: {
        Object obj = stack[stackTop];
        if (obj == DBL_MRK) obj = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        // stringReg: property
        stack[stackTop] = ScriptRuntime.getPropFunctionAndThis(obj, stringReg,
                                                               cx);
        ++stackTop;
        stack[stackTop] = ScriptRuntime.lastStoredScriptable(cx);
        continue Loop;
    }
    case Icode_ELEM_AND_THIS: {
        Object obj = stack[stackTop - 1];
        if (obj == DBL_MRK) obj = ScriptRuntime.wrapNumber(sDbl[stackTop - 1]);
        Object id = stack[stackTop];
        if (id == DBL_MRK) id = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop - 1] = ScriptRuntime.getElemFunctionAndThis(obj, id, cx);
        stack[stackTop] = ScriptRuntime.lastStoredScriptable(cx);
        continue Loop;
    }
    case Icode_VALUE_AND_THIS : {
        Object value = stack[stackTop];
        if (value == DBL_MRK) value = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.getValueFunctionAndThis(value, cx);
        ++stackTop;
        stack[stackTop] = ScriptRuntime.lastStoredScriptable(cx);
        continue Loop;
    }
    case Icode_CALLSPECIAL : {
        if (instructionCounting) {
            cx.instructionCount += INVOCATION_COST;
        }
        int callType = iCode[frame.pc] & 0xFF;
        boolean isNew =  (iCode[frame.pc + 1] != 0);
        int sourceLine = getIndex(iCode, frame.pc + 2);

        // indexReg: number of arguments
        if (isNew) {
            // stack change: function arg0 .. argN -> newResult
            stackTop -= indexReg;

            Object function = stack[stackTop];
            if (function == DBL_MRK)
                function = ScriptRuntime.wrapNumber(sDbl[stackTop]);
            Object[] outArgs = getArgsArray(
                                   stack, sDbl, stackTop + 1, indexReg);
            stack[stackTop] = ScriptRuntime.newSpecial(
                                  cx, function, outArgs, frame.scope, callType);
        } else {
            // stack change: function thisObj arg0 .. argN -> result
            stackTop -= 1 + indexReg;

            // Call code generation ensure that stack here
            // is ... Callable Scriptable
            Scriptable functionThis = (Scriptable)stack[stackTop + 1];
            Callable function = (Callable)stack[stackTop];
            Object[] outArgs = getArgsArray(
                                   stack, sDbl, stackTop + 2, indexReg);
            stack[stackTop] = ScriptRuntime.callSpecial(
                                  cx, function, functionThis, outArgs,
                                  frame.scope, frame.thisObj, callType,
                                  frame.idata.itsSourceFile, sourceLine);
        }
        frame.pc += 4;
        continue Loop;
    }
    case Token.CALL :
    case Icode_TAIL_CALL :
    case Token.REF_CALL : {
        if (instructionCounting) {
            cx.instructionCount += INVOCATION_COST;
        }
        // stack change: function thisObj arg0 .. argN -> result
        // indexReg: number of arguments
        stackTop -= 1 + indexReg;

        // CALL generation ensures that fun and funThisObj
        // are already Scriptable and Callable objects respectively
        Callable fun = (Callable)stack[stackTop];
        Scriptable funThisObj = (Scriptable)stack[stackTop + 1];
        if (op == Token.REF_CALL) {
            Object[] outArgs = getArgsArray(stack, sDbl, stackTop + 2,
                                            indexReg);
            stack[stackTop] = ScriptRuntime.callRef(fun, funThisObj,
                                                    outArgs, cx);
            continue Loop;
        }
        Scriptable calleeScope = frame.scope;
        if (frame.useActivation) {
            calleeScope = ScriptableObject.getTopLevelScope(frame.scope);
        }
        if (fun instanceof InterpretedFunction) {
            InterpretedFunction ifun = (InterpretedFunction)fun;
            if (frame.fnOrScript.securityDomain == ifun.securityDomain) {
                CallFrame callParentFrame = frame;
                CallFrame calleeFrame = new CallFrame();
                if (op == Icode_TAIL_CALL) {
                    // In principle tail call can re-use the current
                    // frame and its stack arrays but it is hard to
                    // do properly. Any exceptions that can legally
                    // happen during frame re-initialization including
                    // StackOverflowException during innocent looking
                    // System.arraycopy may leave the current frame
                    // data corrupted leading to undefined behaviour
                    // in the catch code bellow that unwinds JS stack
                    // on exceptions. Then there is issue about frame release
                    // end exceptions there.
                    // To avoid frame allocation a released frame
                    // can be cached for re-use which would also benefit
                    // non-tail calls but it is not clear that this caching
                    // would gain in performance due to potentially
                    // bad interaction with GC.
                    callParentFrame = frame.parentFrame;
                    // Release the current frame. See Bug #344501 to see why
                    // it is being done here.
                    exitFrame(cx, frame, null);
                }
                initFrame(cx, calleeScope, funThisObj, stack, sDbl,
                          stackTop + 2, indexReg, ifun, callParentFrame,
                          calleeFrame);
                if (op != Icode_TAIL_CALL) {
                    frame.savedStackTop = stackTop;
                    frame.savedCallOp = op;
                }
                frame = calleeFrame;
                continue StateLoop;
            }
        }

        if (fun instanceof Continuation) {
            // Jump to the captured continuation
            ContinuationJump cjump;
            cjump = new ContinuationJump((Continuation)fun, frame);

            // continuation result is the first argument if any
            // of contination call
            if (indexReg == 0) {
                cjump.result = undefined;
            } else {
                cjump.result = stack[stackTop + 2];
                cjump.resultDbl = sDbl[stackTop + 2];
            }

            // Start the real unwind job
            throwable = cjump;
            break withoutExceptions;
        }

        if (fun instanceof IdFunctionObject) {
            IdFunctionObject ifun = (IdFunctionObject)fun;
            if (Continuation.isContinuationConstructor(ifun)) {
                captureContinuation(cx, frame, stackTop);
                continue Loop;
            }
            // Bug 405654 -- make best effort to keep Function.apply and 
            // Function.call within this interpreter loop invocation
            if(BaseFunction.isApplyOrCall(ifun)) {
                Callable applyCallable = ScriptRuntime.getCallable(funThisObj);
                if(applyCallable instanceof InterpretedFunction) {
                    InterpretedFunction iApplyCallable = (InterpretedFunction)applyCallable;
                    if(frame.fnOrScript.securityDomain == iApplyCallable.securityDomain) {
                        frame = initFrameForApplyOrCall(cx, frame, indexReg,
                                stack, sDbl, stackTop, op, calleeScope, ifun,
                                iApplyCallable);
                        continue StateLoop;
                    }
                }
            }
        }

        stack[stackTop] = fun.call(cx, calleeScope, funThisObj, 
                getArgsArray(stack, sDbl, stackTop + 2, indexReg));

        continue Loop;
    }
    case Token.NEW : {
        if (instructionCounting) {
            cx.instructionCount += INVOCATION_COST;
        }
        // stack change: function arg0 .. argN -> newResult
        // indexReg: number of arguments
        stackTop -= indexReg;

        Object lhs = stack[stackTop];
        if (lhs instanceof InterpretedFunction) {
            InterpretedFunction f = (InterpretedFunction)lhs;
            if (frame.fnOrScript.securityDomain == f.securityDomain) {
                Scriptable newInstance = f.createObject(cx, frame.scope);
                CallFrame calleeFrame = new CallFrame();
                initFrame(cx, frame.scope, newInstance, stack, sDbl,
                          stackTop + 1, indexReg, f, frame,
                          calleeFrame);

                stack[stackTop] = newInstance;
                frame.savedStackTop = stackTop;
                frame.savedCallOp = op;
                frame = calleeFrame;
                continue StateLoop;
            }
        }
        if (!(lhs instanceof Function)) {
            if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
            throw ScriptRuntime.notFunctionError(lhs);
        }
        Function fun = (Function)lhs;

        if (fun instanceof IdFunctionObject) {
            IdFunctionObject ifun = (IdFunctionObject)fun;
            if (Continuation.isContinuationConstructor(ifun)) {
                captureContinuation(cx, frame, stackTop);
                continue Loop;
            }
        }

        Object[] outArgs = getArgsArray(stack, sDbl, stackTop + 1, indexReg);
        stack[stackTop] = fun.construct(cx, frame.scope, outArgs);
        continue Loop;
    }
    case Token.TYPEOF : {
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.typeof(lhs);
        continue Loop;
    }
    case Icode_TYPEOFNAME :
        stack[++stackTop] = ScriptRuntime.typeofName(frame.scope, stringReg);
        continue Loop;
    case Token.STRING :
        stack[++stackTop] = stringReg;
        continue Loop;
    case Icode_SHORTNUMBER :
        ++stackTop;
        stack[stackTop] = DBL_MRK;
        sDbl[stackTop] = getShort(iCode, frame.pc);
        frame.pc += 2;
        continue Loop;
    case Icode_INTNUMBER :
        ++stackTop;
        stack[stackTop] = DBL_MRK;
        sDbl[stackTop] = getInt(iCode, frame.pc);
        frame.pc += 4;
        continue Loop;
    case Token.NUMBER :
        ++stackTop;
        stack[stackTop] = DBL_MRK;
        sDbl[stackTop] = frame.idata.itsDoubleTable[indexReg];
        continue Loop;
    case Token.NAME :
        stack[++stackTop] = ScriptRuntime.name(cx, frame.scope, stringReg);
        continue Loop;
    case Icode_NAME_INC_DEC :
        stack[++stackTop] = ScriptRuntime.nameIncrDecr(frame.scope, stringReg,
                                                       cx, iCode[frame.pc]);
        ++frame.pc;
        continue Loop;
    case Icode_SETCONSTVAR1:
        indexReg = iCode[frame.pc++];
        // fallthrough
    case Token.SETCONSTVAR :
        if (!frame.useActivation) {
            if ((varAttributes[indexReg] & ScriptableObject.READONLY) == 0) {
                throw Context.reportRuntimeError1(""msg.var.redecl"",
                                                  frame.idata.argNames[indexReg]);
            }
            if ((varAttributes[indexReg] & ScriptableObject.UNINITIALIZED_CONST)
                != 0)
            {
                vars[indexReg] = stack[stackTop];
                varAttributes[indexReg] &= ~ScriptableObject.UNINITIALIZED_CONST;
                varDbls[indexReg] = sDbl[stackTop];
            }
        } else {
            Object val = stack[stackTop];
            if (val == DBL_MRK) val = ScriptRuntime.wrapNumber(sDbl[stackTop]);
            stringReg = frame.idata.argNames[indexReg];
            if (frame.scope instanceof ConstProperties) {
                ConstProperties cp = (ConstProperties)frame.scope;
                cp.putConst(stringReg, frame.scope, val);
            } else
                throw Kit.codeBug();
        }
        continue Loop;
    case Icode_SETVAR1:
        indexReg = iCode[frame.pc++];
        // fallthrough
    case Token.SETVAR :
        if (!frame.useActivation) {
            if ((varAttributes[indexReg] & ScriptableObject.READONLY) == 0) {
                vars[indexReg] = stack[stackTop];
                varDbls[indexReg] = sDbl[stackTop];
            }
        } else {
            Object val = stack[stackTop];
            if (val == DBL_MRK) val = ScriptRuntime.wrapNumber(sDbl[stackTop]);
            stringReg = frame.idata.argNames[indexReg];
            frame.scope.put(stringReg, frame.scope, val);
        }
        continue Loop;
    case Icode_GETVAR1:
        indexReg = iCode[frame.pc++];
        // fallthrough
    case Token.GETVAR :
        ++stackTop;
        if (!frame.useActivation) {
            stack[stackTop] = vars[indexReg];
            sDbl[stackTop] = varDbls[indexReg];
        } else {
            stringReg = frame.idata.argNames[indexReg];
            stack[stackTop] = frame.scope.get(stringReg, frame.scope);
        }
        continue Loop;
    case Icode_VAR_INC_DEC : {
        // indexReg : varindex
        ++stackTop;
        int incrDecrMask = iCode[frame.pc];
        if (!frame.useActivation) {
            stack[stackTop] = DBL_MRK;
            Object varValue = vars[indexReg];
            double d;
            if (varValue == DBL_MRK) {
                d = varDbls[indexReg];
            } else {
                d = ScriptRuntime.toNumber(varValue);
                vars[indexReg] = DBL_MRK;
            }
            double d2 = ((incrDecrMask & Node.DECR_FLAG) == 0)
                        ? d + 1.0 : d - 1.0;
            varDbls[indexReg] = d2;
            sDbl[stackTop] = ((incrDecrMask & Node.POST_FLAG) == 0) ? d2 : d;
        } else {
            String varName = frame.idata.argNames[indexReg];
            stack[stackTop] = ScriptRuntime.nameIncrDecr(frame.scope, varName,
                                                         cx, incrDecrMask);
        }
        ++frame.pc;
        continue Loop;
    }
    case Icode_ZERO :
        ++stackTop;
        stack[stackTop] = DBL_MRK;
        sDbl[stackTop] = 0;
        continue Loop;
    case Icode_ONE :
        ++stackTop;
        stack[stackTop] = DBL_MRK;
        sDbl[stackTop] = 1;
        continue Loop;
    case Token.NULL :
        stack[++stackTop] = null;
        continue Loop;
    case Token.THIS :
        stack[++stackTop] = frame.thisObj;
        continue Loop;
    case Token.THISFN :
        stack[++stackTop] = frame.fnOrScript;
        continue Loop;
    case Token.FALSE :
        stack[++stackTop] = Boolean.FALSE;
        continue Loop;
    case Token.TRUE :
        stack[++stackTop] = Boolean.TRUE;
        continue Loop;
    case Icode_UNDEF :
        stack[++stackTop] = undefined;
        continue Loop;
    case Token.ENTERWITH : {
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        frame.scope = ScriptRuntime.enterWith(lhs, cx, frame.scope);
        continue Loop;
    }
    case Token.LEAVEWITH :
        frame.scope = ScriptRuntime.leaveWith(frame.scope);
        continue Loop;
    case Token.CATCH_SCOPE : {
        // stack top: exception object
        // stringReg: name of exception variable
        // indexReg: local for exception scope
        --stackTop;
        indexReg += frame.localShift;

        boolean afterFirstScope =  (frame.idata.itsICode[frame.pc] != 0);
        Throwable caughtException = (Throwable)stack[stackTop + 1];
        Scriptable lastCatchScope;
        if (!afterFirstScope) {
            lastCatchScope = null;
        } else {
            lastCatchScope = (Scriptable)stack[indexReg];
        }
        stack[indexReg] = ScriptRuntime.newCatchScope(caughtException,
                                                      lastCatchScope, stringReg,
                                                      cx, frame.scope);
        ++frame.pc;
        continue Loop;
    }
    case Token.ENUM_INIT_KEYS :
    case Token.ENUM_INIT_VALUES :
    case Token.ENUM_INIT_ARRAY : {
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        indexReg += frame.localShift;
        int enumType = op == Token.ENUM_INIT_KEYS 
                         ? ScriptRuntime.ENUMERATE_KEYS :
                       op == Token.ENUM_INIT_VALUES 
                         ? ScriptRuntime.ENUMERATE_VALUES :
                       ScriptRuntime.ENUMERATE_ARRAY;
        stack[indexReg] = ScriptRuntime.enumInit(lhs, cx, enumType);
        continue Loop;
    }
    case Token.ENUM_NEXT :
    case Token.ENUM_ID : {
        indexReg += frame.localShift;
        Object val = stack[indexReg];
        ++stackTop;
        stack[stackTop] = (op == Token.ENUM_NEXT)
                          ? (Object)ScriptRuntime.enumNext(val)
                          : (Object)ScriptRuntime.enumId(val, cx);
        continue Loop;
    }
    case Token.REF_SPECIAL : {
        //stringReg: name of special property
        Object obj = stack[stackTop];
        if (obj == DBL_MRK) obj = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.specialRef(obj, stringReg, cx);
        continue Loop;
    }
    case Token.REF_MEMBER: {
        //indexReg: flags
        Object elem = stack[stackTop];
        if (elem == DBL_MRK) elem = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Object obj = stack[stackTop];
        if (obj == DBL_MRK) obj = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.memberRef(obj, elem, cx, indexReg);
        continue Loop;
    }
    case Token.REF_NS_MEMBER: {
        //indexReg: flags
        Object elem = stack[stackTop];
        if (elem == DBL_MRK) elem = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Object ns = stack[stackTop];
        if (ns == DBL_MRK) ns = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Object obj = stack[stackTop];
        if (obj == DBL_MRK) obj = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.memberRef(obj, ns, elem, cx, indexReg);
        continue Loop;
    }
    case Token.REF_NAME: {
        //indexReg: flags
        Object name = stack[stackTop];
        if (name == DBL_MRK) name = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.nameRef(name, cx, frame.scope,
                                                indexReg);
        continue Loop;
    }
    case Token.REF_NS_NAME: {
        //indexReg: flags
        Object name = stack[stackTop];
        if (name == DBL_MRK) name = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        Object ns = stack[stackTop];
        if (ns == DBL_MRK) ns = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.nameRef(ns, name, cx, frame.scope,
                                                indexReg);
        continue Loop;
    }
    case Icode_SCOPE_LOAD :
        indexReg += frame.localShift;
        frame.scope = (Scriptable)stack[indexReg];
        continue Loop;
    case Icode_SCOPE_SAVE :
        indexReg += frame.localShift;
        stack[indexReg] = frame.scope;
        continue Loop;
    case Icode_CLOSURE_EXPR :
        stack[++stackTop] = InterpretedFunction.createFunction(cx, frame.scope,
                                                               frame.fnOrScript,
                                                               indexReg);
        continue Loop;
    case Icode_CLOSURE_STMT :
        initFunction(cx, frame.scope, frame.fnOrScript, indexReg);
        continue Loop;
    case Token.REGEXP :
        stack[++stackTop] = frame.scriptRegExps[indexReg];
        continue Loop;
    case Icode_LITERAL_NEW :
        // indexReg: number of values in the literal
        ++stackTop;
        stack[stackTop] = new int[indexReg];
        ++stackTop;
        stack[stackTop] = new Object[indexReg];
        sDbl[stackTop] = 0;
        continue Loop;
    case Icode_LITERAL_SET : {
        Object value = stack[stackTop];
        if (value == DBL_MRK) value = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        int i = (int)sDbl[stackTop];
        ((Object[])stack[stackTop])[i] = value;
        sDbl[stackTop] = i + 1;
        continue Loop;
    }
    case Icode_LITERAL_GETTER : {
        Object value = stack[stackTop];
        --stackTop;
        int i = (int)sDbl[stackTop];
        ((Object[])stack[stackTop])[i] = value;
        ((int[])stack[stackTop - 1])[i] = -1;
        sDbl[stackTop] = i + 1;
        continue Loop;
    }
    case Icode_LITERAL_SETTER : {
        Object value = stack[stackTop];
        --stackTop;
        int i = (int)sDbl[stackTop];
        ((Object[])stack[stackTop])[i] = value;
        ((int[])stack[stackTop - 1])[i] = +1;
        sDbl[stackTop] = i + 1;
        continue Loop;
    }
    case Token.ARRAYLIT :
    case Icode_SPARE_ARRAYLIT :
    case Token.OBJECTLIT : {
        Object[] data = (Object[])stack[stackTop];
        --stackTop;
        int[] getterSetters = (int[])stack[stackTop];
        Object val;
        if (op == Token.OBJECTLIT) {
            Object[] ids = (Object[])frame.idata.literalIds[indexReg];
            val = ScriptRuntime.newObjectLiteral(ids, data, getterSetters, cx,
                    frame.scope);
        } else {
            int[] skipIndexces = null;
            if (op == Icode_SPARE_ARRAYLIT) {
                skipIndexces = (int[])frame.idata.literalIds[indexReg];
            }
            val = ScriptRuntime.newArrayLiteral(data, skipIndexces, cx,
                                                frame.scope);
        }
        stack[stackTop] = val;
        continue Loop;
    }
    case Icode_ENTERDQ : {
        Object lhs = stack[stackTop];
        if (lhs == DBL_MRK) lhs = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        frame.scope = ScriptRuntime.enterDotQuery(lhs, frame.scope);
        continue Loop;
    }
    case Icode_LEAVEDQ : {
        boolean valBln = stack_boolean(frame, stackTop);
        Object x = ScriptRuntime.updateDotQuery(valBln, frame.scope);
        if (x != null) {
            stack[stackTop] = x;
            frame.scope = ScriptRuntime.leaveDotQuery(frame.scope);
            frame.pc += 2;
            continue Loop;
        }
        // reset stack and PC to code after ENTERDQ
        --stackTop;
        break jumplessRun;
    }
    case Token.DEFAULTNAMESPACE : {
        Object value = stack[stackTop];
        if (value == DBL_MRK) value = ScriptRuntime.wrapNumber(sDbl[stackTop]);
        stack[stackTop] = ScriptRuntime.setDefaultNamespace(value, cx);
        continue Loop;
    }
    case Token.ESCXMLATTR : {
        Object value = stack[stackTop];
        if (value != DBL_MRK) {
            stack[stackTop] = ScriptRuntime.escapeAttributeValue(value, cx);
        }
        continue Loop;
    }
    case Token.ESCXMLTEXT : {
        Object value = stack[stackTop];
        if (value != DBL_MRK) {
            stack[stackTop] = ScriptRuntime.escapeTextValue(value, cx);
        }
        continue Loop;
    }
    case Icode_DEBUGGER:
        if (frame.debuggerFrame != null) {
            frame.debuggerFrame.onDebuggerStatement(cx);
        }
        break Loop;
    case Icode_LINE :
        frame.pcSourceLineStart = frame.pc;
        if (frame.debuggerFrame != null) {
            int line = getIndex(iCode, frame.pc);
            frame.debuggerFrame.onLineChange(cx, line);
        }
        frame.pc += 2;
        continue Loop;
    case Icode_REG_IND_C0:
        indexReg = 0;
        continue Loop;
    case Icode_REG_IND_C1:
        indexReg = 1;
        continue Loop;
    case Icode_REG_IND_C2:
        indexReg = 2;
        continue Loop;
    case Icode_REG_IND_C3:
        indexReg = 3;
        continue Loop;
    case Icode_REG_IND_C4:
        indexReg = 4;
        continue Loop;
    case Icode_REG_IND_C5:
        indexReg = 5;
        continue Loop;
    case Icode_REG_IND1:
        indexReg = 0xFF & iCode[frame.pc];
        ++frame.pc;
        continue Loop;
    case Icode_REG_IND2:
        indexReg = getIndex(iCode, frame.pc);
        frame.pc += 2;
        continue Loop;
    case Icode_REG_IND4:
        indexReg = getInt(iCode, frame.pc);
        frame.pc += 4;
        continue Loop;
    case Icode_REG_STR_C0:
        stringReg = strings[0];
        continue Loop;
    case Icode_REG_STR_C1:
        stringReg = strings[1];
        continue Loop;
    case Icode_REG_STR_C2:
        stringReg = strings[2];
        continue Loop;
    case Icode_REG_STR_C3:
        stringReg = strings[3];
        continue Loop;
    case Icode_REG_STR1:
        stringReg = strings[0xFF & iCode[frame.pc]];
        ++frame.pc;
        continue Loop;
    case Icode_REG_STR2:
        stringReg = strings[getIndex(iCode, frame.pc)];
        frame.pc += 2;
        continue Loop;
    case Icode_REG_STR4:
        stringReg = strings[getInt(iCode, frame.pc)];
        frame.pc += 4;
        continue Loop;
    default :
        dumpICode(frame.idata);
        throw new RuntimeException(
            ""Unknown icode : ""+op+"" @ pc : ""+(frame.pc-1));
}  // end of interpreter switch

                    } // end of jumplessRun label block

                    // This should be reachable only for jump implementation
                    // when pc points to encoded target offset
                    if (instructionCounting) {
                        addInstructionCount(cx, frame, 2);
                    }
                    int offset = getShort(iCode, frame.pc);
                    if (offset != 0) {
                        // -1 accounts for pc pointing to jump opcode + 1
                        frame.pc += offset - 1;
                    } else {
                        frame.pc = frame.idata.longJumps.
                                       getExistingInt(frame.pc);
                    }
                    if (instructionCounting) {
                        frame.pcPrevBranch = frame.pc;
                    }
                    continue Loop;

                } // end of Loop: for

                exitFrame(cx, frame, null);
                interpreterResult = frame.result;
                interpreterResultDbl = frame.resultDbl;
                if (frame.parentFrame != null) {
                    frame = frame.parentFrame;
                    if (frame.frozen) {
                        frame = frame.cloneFrozen();
                    }
                    setCallResult(
                        frame, interpreterResult, interpreterResultDbl);
                    interpreterResult = null; // Help GC
                    continue StateLoop;
                }
                break StateLoop;

            }  // end of interpreter withoutExceptions: try
            catch (Throwable ex) {
                if (throwable != null) {
                    // This is serious bug and it is better to track it ASAP
                    ex.printStackTrace(System.err);
                    throw new IllegalStateException();
                }
                throwable = ex;
            }

            // This should be reachable only after above catch or from
            // finally when it needs to propagate exception or from
            // explicit throw
            if (throwable == null) Kit.codeBug();

            // Exception type
            final int EX_CATCH_STATE = 2; // Can execute JS catch
            final int EX_FINALLY_STATE = 1; // Can execute JS finally
            final int EX_NO_JS_STATE = 0; // Terminate JS execution

            int exState;
            ContinuationJump cjump = null;

            if (generatorState != null &&
                generatorState.operation == NativeGenerator.GENERATOR_CLOSE &&
                throwable == generatorState.value)
            {
                exState = EX_FINALLY_STATE;            	
            } else if (throwable instanceof JavaScriptException) {
                exState = EX_CATCH_STATE;
            } else if (throwable instanceof EcmaError) {
                // an offical ECMA error object,
                exState = EX_CATCH_STATE;
            } else if (throwable instanceof EvaluatorException) {
                exState = EX_CATCH_STATE;
            } else if (throwable instanceof RuntimeException) {
                exState = cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS)
                          ? EX_CATCH_STATE
                          : EX_FINALLY_STATE;
            } else if (throwable instanceof Error) {
                exState = cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS)
                          ? EX_CATCH_STATE
                          : EX_NO_JS_STATE;
            } else if (throwable instanceof ContinuationJump) {
                // It must be ContinuationJump
                exState = EX_FINALLY_STATE;
                cjump = (ContinuationJump)throwable;
            } else {
                exState = cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS)
                          ? EX_CATCH_STATE
                          : EX_FINALLY_STATE;
            }

            if (instructionCounting) {
                try {
                    addInstructionCount(cx, frame, EXCEPTION_COST);
                } catch (RuntimeException ex) {
                    throwable = ex;
                    exState = EX_FINALLY_STATE;
                } catch (Error ex) {
                    // Error from instruction counting
                    //     => unconditionally terminate JS
                    throwable = ex;
                    cjump = null;
                    exState = EX_NO_JS_STATE;
                }
            }
            if (frame.debuggerFrame != null
                && throwable instanceof RuntimeException)
            {
                // Call debugger only for RuntimeException
                RuntimeException rex = (RuntimeException)throwable;
                try {
                    frame.debuggerFrame.onExceptionThrown(cx, rex);
                } catch (Throwable ex) {
                    // Any exception from debugger
                    //     => unconditionally terminate JS
                    throwable = ex;
                    cjump = null;
                    exState = EX_NO_JS_STATE;
                }
            }

            for (;;) {
                if (exState != EX_NO_JS_STATE) {
                    boolean onlyFinally = (exState != EX_CATCH_STATE);
                    indexReg = getExceptionHandler(frame, onlyFinally);
                    if (indexReg >= 0) {
                        // We caught an exception, restart the loop
                        // with exception pending the processing at the loop
                        // start
                        continue StateLoop;
                    }
                }
                // No allowed exception handlers in this frame, unwind
                // to parent and try to look there

                exitFrame(cx, frame, throwable);

                frame = frame.parentFrame;
                if (frame == null) { break; }
                if (cjump != null && cjump.branchFrame == frame) {
                    // Continuation branch point was hit,
                    // restart the state loop to reenter continuation
                    indexReg = -1;
                    continue StateLoop;
                }
            }

            // No more frames, rethrow the exception or deal with continuation
            if (cjump != null) {
                if (cjump.branchFrame != null) {
                    // The above loop should locate the top frame
                    Kit.codeBug();
                }
                if (cjump.capturedFrame != null) {
                    // Restarting detached continuation
                    indexReg = -1;
                    continue StateLoop;
                }
                // Return continuation result to the caller
                interpreterResult = cjump.result;
                interpreterResultDbl = cjump.resultDbl;
                throwable = null;
            }
            break StateLoop;

        } // end of StateLoop: for(;;)

        // Do cleanups/restorations before the final return or throw

        if (cx.previousInterpreterInvocations != null
            && cx.previousInterpreterInvocations.size() != 0)
        {
            cx.lastInterpreterFrame
                = cx.previousInterpreterInvocations.pop();
        } else {
            // It was the last interpreter frame on the stack
            cx.lastInterpreterFrame = null;
            // Force GC of the value cx.previousInterpreterInvocations
            cx.previousInterpreterInvocations = null;
        }

        if (throwable != null) {
            if (throwable instanceof RuntimeException) {
                throw (RuntimeException)throwable;
            } else {
                // Must be instance of Error or code bug
                throw (Error)throwable;
            }
        }

        return (interpreterResult != DBL_MRK)
               ? interpreterResult",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,processThrowable,"    private static CallFrame processThrowable(Context cx, Object throwable,
                                              CallFrame frame, int indexReg,
                                              boolean instructionCounting)
    {
        // Recovering from exception, indexReg contains
        // the index of handler

        if (indexReg >= 0) {
            // Normal exception handler, transfer
            // control appropriately

            if (frame.frozen) {
                // XXX Deal with exceptios!!!
                frame = frame.cloneFrozen();
            }
            
            int[] table = frame.idata.itsExceptionTable;

            frame.pc = table[indexReg + EXCEPTION_HANDLER_SLOT];
            if (instructionCounting) {
                frame.pcPrevBranch = frame.pc;
            }

            frame.savedStackTop = frame.emptyStackTop;
            int scopeLocal = frame.localShift
                             + table[indexReg
                                     + EXCEPTION_SCOPE_SLOT];
            int exLocal = frame.localShift
                             + table[indexReg
                                     + EXCEPTION_LOCAL_SLOT];
            frame.scope = (Scriptable)frame.stack[scopeLocal];
            frame.stack[exLocal] = throwable;

            throwable = null;
        } else {
            // Continuation restoration
            ContinuationJump cjump = (ContinuationJump)throwable;

            // Clear throwable to indicate that exceptions are OK
            throwable = null;

            if (cjump.branchFrame != frame) Kit.codeBug();

            // Check that we have at least one frozen frame
            // in the case of detached continuation restoration:
            // unwind code ensure that
            if (cjump.capturedFrame == null) Kit.codeBug();

            // Need to rewind branchFrame, capturedFrame
            // and all frames in between
            int rewindCount = cjump.capturedFrame.frameIndex + 1;
            if (cjump.branchFrame != null) {
                rewindCount -= cjump.branchFrame.frameIndex;
            }

            int enterCount = 0;
            CallFrame[] enterFrames = null;

            CallFrame x = cjump.capturedFrame;
            for (int i = 0; i != rewindCount; ++i) {
                if (!x.frozen) Kit.codeBug();
                if (isFrameEnterExitRequired(x)) {
                    if (enterFrames == null) {
                        // Allocate enough space to store the rest
                        // of rewind frames in case all of them
                        // would require to enter
                        enterFrames = new CallFrame[rewindCount
                                                    - i];
                    }
                    enterFrames[enterCount] = x;
                    ++enterCount;
                }
                x = x.parentFrame;
            }

            while (enterCount != 0) {
                // execute enter: walk enterFrames in the reverse
                // order since they were stored starting from
                // the capturedFrame, not branchFrame
                --enterCount;
                x = enterFrames[enterCount];
                enterFrame(cx, x, ScriptRuntime.emptyArgs, true);
            }

            // Continuation jump is almost done: capturedFrame
            // points to the call to the function that captured
            // continuation, so clone capturedFrame and
            // emulate return that function with the suplied result
            frame = cjump.capturedFrame.cloneFrozen();
            setCallResult(frame, cjump.result, cjump.resultDbl);
            // restart the execution
        }
        frame.throwable = throwable;
        return frame;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,freezeGenerator,"    private static Object freezeGenerator(Context cx, CallFrame frame,
                                          int stackTop,
                                          GeneratorState generatorState)
    {
          if (generatorState.operation == NativeGenerator.GENERATOR_CLOSE) {
              // Error: no yields when generator is closing
              throw ScriptRuntime.typeError0(""msg.yield.closing"");
          }
          // return to our caller (which should be a method of NativeGenerator)
          frame.frozen = true;
          frame.result = frame.stack[stackTop];
          frame.resultDbl = frame.sDbl[stackTop];
          frame.savedStackTop = stackTop;
          frame.pc--; // we want to come back here when we resume
          ScriptRuntime.exitActivationFunction(cx);
          return (frame.result != UniqueTag.DOUBLE_MARK)
              ? frame.result",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,thawGenerator,"    private static Object thawGenerator(CallFrame frame, int stackTop,
                                        GeneratorState generatorState, int op)
    {
          // we are resuming execution
          frame.frozen = false;
          int sourceLine = getIndex(frame.idata.itsICode, frame.pc);
          frame.pc += 2; // skip line number data
          if (generatorState.operation == NativeGenerator.GENERATOR_THROW) {
              // processing a call to <generator>.throw(exception): must
              // act as if exception was thrown from resumption point
              return new JavaScriptException(generatorState.value,
                                                  frame.idata.itsSourceFile,
                                                  sourceLine);
          }
          if (generatorState.operation == NativeGenerator.GENERATOR_CLOSE) {
              return generatorState.value;
          }
          if (generatorState.operation != NativeGenerator.GENERATOR_SEND)
              throw Kit.codeBug();
          if (op == Token.YIELD)
              frame.stack[stackTop] = generatorState.value;
          return Scriptable.NOT_FOUND;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,initFrameForApplyOrCall,"    private static CallFrame initFrameForApplyOrCall(Context cx, CallFrame frame,
            int indexReg, Object[] stack, double[] sDbl, int stackTop, int op,
            Scriptable calleeScope, IdFunctionObject ifun,
            InterpretedFunction iApplyCallable)
    {
        Scriptable applyThis;
        if (indexReg != 0) {
            applyThis = ScriptRuntime.toObjectOrNull(cx, stack[stackTop + 2]);
        }
        else {
            applyThis = null;
        }
        if (applyThis == null) {
            // This covers the case of args[0] == (null|undefined) as well.
            applyThis = ScriptRuntime.getTopCallScope(cx);
        }
        if(op == Icode_TAIL_CALL) {
            exitFrame(cx, frame, null);
            frame = frame.parentFrame;
        }
        else {
            frame.savedStackTop = stackTop;
            frame.savedCallOp = op;
        }
        CallFrame calleeFrame = new CallFrame();
        if(BaseFunction.isApply(ifun)) {
            Object[] callArgs = indexReg < 2 ? ScriptRuntime.emptyArgs : 
                ScriptRuntime.getApplyArguments(cx, stack[stackTop + 3]);
            initFrame(cx, calleeScope, applyThis, callArgs, null, 0, 
                    callArgs.length, iApplyCallable, frame, calleeFrame);
        }
        else {
            // Shift args left
            for(int i = 1; i < indexReg; ++i) {
                stack[stackTop + 1 + i] = stack[stackTop + 2 + i];
                sDbl[stackTop + 1 + i] = sDbl[stackTop + 2 + i];
            }
            int argCount = indexReg < 2 ? 0 : indexReg - 1;
            initFrame(cx, calleeScope, applyThis, stack, sDbl, stackTop + 2, 
                    argCount, iApplyCallable, frame, calleeFrame);
        }
        
        frame = calleeFrame;
        return frame;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,initFrame,"    private static void initFrame(Context cx, Scriptable callerScope,
                                  Scriptable thisObj,
                                  Object[] args, double[] argsDbl,
                                  int argShift, int argCount,
                                  InterpretedFunction fnOrScript,
                                  CallFrame parentFrame, CallFrame frame)
    {
        InterpreterData idata = fnOrScript.idata;

        boolean useActivation = idata.itsNeedsActivation;
        DebugFrame debuggerFrame = null;
        if (cx.debugger != null) {
            debuggerFrame = cx.debugger.getFrame(cx, idata);
            if (debuggerFrame != null) {
                useActivation = true;
            }
        }

        if (useActivation) {
            // Copy args to new array to pass to enterActivationFunction
            // or debuggerFrame.onEnter
            if (argsDbl != null) {
                args = getArgsArray(args, argsDbl, argShift, argCount);
            }
            argShift = 0;
            argsDbl = null;
        }

        Scriptable scope;
        if (idata.itsFunctionType != 0) {
            if (!idata.useDynamicScope) {
                scope = fnOrScript.getParentScope();
            } else {
                scope = callerScope;
            }

            if (useActivation) {
                scope = ScriptRuntime.createFunctionActivation(
                            fnOrScript, scope, args);
            }
        } else {
            scope = callerScope;
            ScriptRuntime.initScript(fnOrScript, thisObj, cx, scope,
                                     fnOrScript.idata.evalScriptFlag);
        }

        if (idata.itsNestedFunctions != null) {
            if (idata.itsFunctionType != 0 && !idata.itsNeedsActivation)
                Kit.codeBug();
            for (int i = 0; i < idata.itsNestedFunctions.length; i++) {
                InterpreterData fdata = idata.itsNestedFunctions[i];
                if (fdata.itsFunctionType == FunctionNode.FUNCTION_STATEMENT) {
                    initFunction(cx, scope, fnOrScript, i);
                }
            }
        }

        Scriptable[] scriptRegExps = null;
        if (idata.itsRegExpLiterals != null) {
            // Wrapped regexps for functions are stored in
            // InterpretedFunction
            // but for script which should not contain references to scope
            // the regexps re-wrapped during each script execution
            if (idata.itsFunctionType != 0) {
                scriptRegExps = fnOrScript.functionRegExps;
            } else {
                scriptRegExps = fnOrScript.createRegExpWraps(cx, scope);
            }
        }

        // Initialize args, vars, locals and stack

        int emptyStackTop = idata.itsMaxVars + idata.itsMaxLocals - 1;
        int maxFrameArray = idata.itsMaxFrameArray;
        if (maxFrameArray != emptyStackTop + idata.itsMaxStack + 1)
            Kit.codeBug();

        Object[] stack;
        int[] stackAttributes;
        double[] sDbl;
        boolean stackReuse;
        if (frame.stack != null && maxFrameArray <= frame.stack.length) {
            // Reuse stacks from old frame
            stackReuse = true;
            stack = frame.stack;
            stackAttributes = frame.stackAttributes;
            sDbl = frame.sDbl;
        } else {
            stackReuse = false;
            stack = new Object[maxFrameArray];
            stackAttributes = new int[maxFrameArray];
            sDbl = new double[maxFrameArray];
        }

        int varCount = idata.getParamAndVarCount();
        for (int i = 0; i < varCount; i++) {
            if (idata.getParamOrVarConst(i))
                stackAttributes[i] = ScriptableObject.CONST;
        }
        int definedArgs = idata.argCount;
        if (definedArgs > argCount) { definedArgs = argCount; }

        // Fill the frame structure

        frame.parentFrame = parentFrame;
        frame.frameIndex = (parentFrame == null)
                           ? 0 : parentFrame.frameIndex + 1;
        if(frame.frameIndex > cx.getMaximumInterpreterStackDepth())
        {
            throw Context.reportRuntimeError(""Exceeded maximum stack depth"");
        }
        frame.frozen = false;

        frame.fnOrScript = fnOrScript;
        frame.idata = idata;

        frame.stack = stack;
        frame.stackAttributes = stackAttributes;
        frame.sDbl = sDbl;
        frame.varSource = frame;
        frame.localShift = idata.itsMaxVars;
        frame.emptyStackTop = emptyStackTop;

        frame.debuggerFrame = debuggerFrame;
        frame.useActivation = useActivation;

        frame.thisObj = thisObj;
        frame.scriptRegExps = scriptRegExps;

        // Initialize initial values of variables that change during
        // interpretation.
        frame.result = Undefined.instance;
        frame.pc = 0;
        frame.pcPrevBranch = 0;
        frame.pcSourceLineStart = idata.firstLinePC;
        frame.scope = scope;

        frame.savedStackTop = emptyStackTop;
        frame.savedCallOp = 0;

        System.arraycopy(args, argShift, stack, 0, definedArgs);
        if (argsDbl != null) {
            System.arraycopy(argsDbl, argShift, sDbl, 0, definedArgs);
        }
        for (int i = definedArgs; i != idata.itsMaxVars; ++i) {
            stack[i] = Undefined.instance;
        }
        if (stackReuse) {
            // Clean the stack part and space beyond stack if any
            // of the old array to allow to GC objects there
            for (int i = emptyStackTop + 1; i != stack.length; ++i) {
                stack[i] = null;
            }
        }

        enterFrame(cx, frame, args, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,isFrameEnterExitRequired,"    private static boolean isFrameEnterExitRequired(CallFrame frame)
    {
        return frame.debuggerFrame != null || frame.idata.itsNeedsActivation;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,enterFrame,"    private static void enterFrame(Context cx, CallFrame frame, Object[] args, 
                                   boolean continuationRestart)
    {
        boolean usesActivation = frame.idata.itsNeedsActivation; 
        boolean isDebugged = frame.debuggerFrame != null;
        if(usesActivation || isDebugged) {
            Scriptable scope = frame.scope;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,exitFrame,"    private static void exitFrame(Context cx, CallFrame frame,
                                  Object throwable)
    {
        if (frame.idata.itsNeedsActivation) {
            ScriptRuntime.exitActivationFunction(cx);
        }

        if (frame.debuggerFrame != null) {
            try {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,setCallResult,"    private static void setCallResult(CallFrame frame,
                                      Object callResult,
                                      double callResultDbl)
    {
        if (frame.savedCallOp == Token.CALL) {
            frame.stack[frame.savedStackTop] = callResult;
            frame.sDbl[frame.savedStackTop] = callResultDbl;
        } else if (frame.savedCallOp == Token.NEW) {
            // If construct returns scriptable,
            // then it replaces on stack top saved original instance
            // of the object.
            if (callResult instanceof Scriptable) {
                frame.stack[frame.savedStackTop] = callResult;
            }
        } else {
            Kit.codeBug();
        }
        frame.savedCallOp = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,captureContinuation,"    private static void captureContinuation(Context cx, CallFrame frame,
                                            int stackTop)
    {
        Continuation c = new Continuation();
        ScriptRuntime.setObjectProtoAndParent(
            c, ScriptRuntime.getTopCallScope(cx));

        // Make sure that all frames upstack frames are frozen
        CallFrame x = frame.parentFrame;
        while (x != null && !x.frozen) {
            x.frozen = true;
            // Allow to GC unused stack space
            for (int i = x.savedStackTop + 1; i != x.stack.length; ++i) {
                // Allow to GC unused stack space
                x.stack[i] = null;
                x.stackAttributes[i] = ScriptableObject.EMPTY;
            }
            if (x.savedCallOp == Token.CALL) {
                // the call will always overwrite the stack top with the result
                x.stack[x.savedStackTop] = null;
            } else {
                if (x.savedCallOp != Token.NEW) Kit.codeBug();
                // the new operator uses stack top to store the constructed
                // object so it shall not be cleared: see comments in
                // setCallResult
            }
            x = x.parentFrame;
        }

        c.initImplementation(frame.parentFrame);
        frame.stack[stackTop] = c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,stack_int32,"    private static int stack_int32(CallFrame frame, int i)
    {
        Object x = frame.stack[i];
        double value;
        if (x == UniqueTag.DOUBLE_MARK) {
            value = frame.sDbl[i];
        } else {
            value = ScriptRuntime.toNumber(x);
        }
        return ScriptRuntime.toInt32(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,stack_double,"    private static double stack_double(CallFrame frame, int i)
    {
        Object x = frame.stack[i];
        if (x != UniqueTag.DOUBLE_MARK) {
            return ScriptRuntime.toNumber(x);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,stack_boolean,"    private static boolean stack_boolean(CallFrame frame, int i)
    {
        Object x = frame.stack[i];
        if (x == Boolean.TRUE) {
            return true;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,do_add,"    private static void do_add(Object[] stack, double[] sDbl, int stackTop,
                              Context cx)
    {
        Object rhs = stack[stackTop + 1];
        Object lhs = stack[stackTop];
        double d;
        boolean leftRightOrder;
        if (rhs == UniqueTag.DOUBLE_MARK) {
            d = sDbl[stackTop + 1];
            if (lhs == UniqueTag.DOUBLE_MARK) {
                sDbl[stackTop] += d;
                return;
            }
            leftRightOrder = true;
            // fallthrough to object + number code
        } else if (lhs == UniqueTag.DOUBLE_MARK) {
            d = sDbl[stackTop];
            lhs = rhs;
            leftRightOrder = false;
            // fallthrough to object + number code
        } else {
            if (lhs instanceof Scriptable || rhs instanceof Scriptable) {
                stack[stackTop] = ScriptRuntime.add(lhs, rhs, cx);
            } else if (lhs instanceof String) {
                String lstr = (String)lhs;
                String rstr = ScriptRuntime.toString(rhs);
                stack[stackTop] = lstr.concat(rstr);
            } else if (rhs instanceof String) {
                String lstr = ScriptRuntime.toString(lhs);
                String rstr = (String)rhs;
                stack[stackTop] = lstr.concat(rstr);
            } else {
                double lDbl = (lhs instanceof Number)
                    ? ((Number)lhs).doubleValue() : ScriptRuntime.toNumber(lhs);
                double rDbl = (rhs instanceof Number)
                    ? ((Number)rhs).doubleValue() : ScriptRuntime.toNumber(rhs);
                stack[stackTop] = UniqueTag.DOUBLE_MARK;
                sDbl[stackTop] = lDbl + rDbl;
            }
            return;
        }

        // handle object(lhs) + number(d) code
        if (lhs instanceof Scriptable) {
            rhs = ScriptRuntime.wrapNumber(d);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,getArgsArray,"    private static Object[] getArgsArray(Object[] stack, double[] sDbl,
                                         int shift, int count)
    {
        if (count == 0) {
            return ScriptRuntime.emptyArgs;
        }
        Object[] args = new Object[count];
        for (int i = 0; i != count; ++i, ++shift) {
            Object val = stack[shift];
            if (val == UniqueTag.DOUBLE_MARK) {
                val = ScriptRuntime.wrapNumber(sDbl[shift]);
            }
            args[i] = val;
        }
        return args;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Interpreter.java,addInstructionCount,"    private static void addInstructionCount(Context cx, CallFrame frame,
                                            int extra)
    {
        cx.instructionCount += frame.pc - frame.pcPrevBranch + extra;
        if (cx.instructionCount > cx.instructionThreshold) {
            cx.observeInstructionCount(cx.instructionCount);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,init,"    private void init()
    {
        itsICode = new byte[INITIAL_MAX_ICODE_LENGTH];
        itsStringTable = new String[INITIAL_STRINGTABLE_SIZE];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,isTopLevel,"    public boolean isTopLevel()
    {
        return topLevel;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,isFunction,"    public boolean isFunction()
    {
        return itsFunctionType != 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getFunctionName,"    public String getFunctionName()
    {
        return itsName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getParamCount,"    public int getParamCount()
    {
        return argCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getParamAndVarCount,"    public int getParamAndVarCount()
    {
        return argNames.length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getParamOrVarName,"    public String getParamOrVarName(int index)
    {
        return argNames[index];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getParamOrVarConst,"    public boolean getParamOrVarConst(int index)
    {
        return argIsConst[index];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getSourceName,"    public String getSourceName()
    {
        return itsSourceFile;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,isGeneratedScript,"    public boolean isGeneratedScript()
    {
        return ScriptRuntime.isGeneratedScript(itsSourceFile);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getLineNumbers,"    public int[] getLineNumbers()
    {
        return Interpreter.getLineNumbers(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getFunctionCount,"    public int getFunctionCount()
    {
        return (itsNestedFunctions == null) ? 0 : itsNestedFunctions.length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getFunction,"    public DebuggableScript getFunction(int index)
    {
        return itsNestedFunctions[index];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,InterpreterData.java,getParent,"    public DebuggableScript getParent()
    {
         return parentData;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,equals,"        public boolean equals(Object obj)
        {
            if (!(obj instanceof JavaAdapterSignature))
                return false;
            JavaAdapterSignature sig = (JavaAdapterSignature) obj;
            if (superClass != sig.superClass)
                return false;
            if (interfaces != sig.interfaces) {
                if (interfaces.length != sig.interfaces.length)
                    return false;
                for (int i=0; i < interfaces.length; i++)
                    if (interfaces[i] != sig.interfaces[i])
                        return false;
            }
            if (names.size() != sig.names.size())
                return false;
            ObjToIntMap.Iterator iter = new ObjToIntMap.Iterator(names);
            for (iter.start(); !iter.done(); iter.next()) {
                String name = (String)iter.getKey();
                int arity = iter.getValue();
                if (arity != names.get(name, arity + 1))
                    return false;
            }
            return true;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,hashCode,"        public int hashCode()
        {
            return superClass.hashCode()
                | (0x9e3779b9 * (names.size() | (interfaces.length << 16)));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,init,"    public static void init(Context cx, Scriptable scope, boolean sealed)
    {
        JavaAdapter obj = new JavaAdapter();
        IdFunctionObject ctor = new IdFunctionObject(obj, FTAG, Id_JavaAdapter,
                                                     ""JavaAdapter"", 1, scope);
        ctor.markAsConstructor(null);
        if (sealed) {
            ctor.sealObject();
        }
        ctor.exportAsScopeProperty();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (f.hasTag(FTAG)) {
            if (f.methodId() == Id_JavaAdapter) {
                return js_createAdapter(cx, scope, args);
            }
        }
        throw f.unknown();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,convertResult,"    public static Object convertResult(Object result, Class c)
    {
        if (result == Undefined.instance &&
            (c != ScriptRuntime.ObjectClass &&
             c != ScriptRuntime.StringClass))
        {
            // Avoid an error for an undefined value; return null instead.
            return null;
        }
        return Context.jsToJava(result, c);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,createAdapterWrapper,"    public static Scriptable createAdapterWrapper(Scriptable obj,
                                                  Object adapter)
    {
        Scriptable scope = ScriptableObject.getTopLevelScope(obj);
        NativeJavaObject res = new NativeJavaObject(scope, adapter, null, true);
        res.setPrototype(obj);
        return res;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,getAdapterSelf,"    public static Object getAdapterSelf(Class adapterClass, Object adapter)
        throws NoSuchFieldException, IllegalAccessException
    {
        Field self = adapterClass.getDeclaredField(""self"");
        return self.get(adapter);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,js_createAdapter,"    static Object js_createAdapter(Context cx, Scriptable scope, Object[] args)
    {
        int N = args.length;
        if (N == 0) {
            throw ScriptRuntime.typeError0(""msg.adapter.zero.args"");
        }

        Class superClass = null;
        Class[] intfs = new Class[N - 1];
        int interfaceCount = 0;
        for (int i = 0; i != N - 1; ++i) {
            Object arg = args[i];
            if (!(arg instanceof NativeJavaClass)) {
                throw ScriptRuntime.typeError2(""msg.not.java.class.arg"",
                                               String.valueOf(i),
                                               ScriptRuntime.toString(arg));
            }
            Class c = ((NativeJavaClass) arg).getClassObject();
            if (!c.isInterface()) {
                if (superClass != null) {
                    throw ScriptRuntime.typeError2(""msg.only.one.super"",
                              superClass.getName(), c.getName());
                }
                superClass = c;
            } else {
                intfs[interfaceCount++] = c;
            }
        }

        if (superClass == null)
            superClass = ScriptRuntime.ObjectClass;

        Class[] interfaces = new Class[interfaceCount];
        System.arraycopy(intfs, 0, interfaces, 0, interfaceCount);
        Scriptable obj = ScriptRuntime.toObject(cx, scope, args[N - 1]);

        Class adapterClass = getAdapterClass(scope, superClass, interfaces,
                                             obj);

        Class[] ctorParms = {
            ScriptRuntime.ContextFactoryClass,
            ScriptRuntime.ScriptableClass
        };
        Object[] ctorArgs = { cx.getFactory(), obj };
        try {
            Object adapter = adapterClass.getConstructor(ctorParms).",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,writeAdapterObject,"    public static void writeAdapterObject(Object javaObject,
                                          ObjectOutputStream out)
        throws IOException
    {
        Class cl = javaObject.getClass();
        out.writeObject(cl.getSuperclass().getName());

        Class[] interfaces = cl.getInterfaces();
        String[] interfaceNames = new String[interfaces.length];

        for (int i=0; i < interfaces.length; i++)
            interfaceNames[i] = interfaces[i].getName();

        out.writeObject(interfaceNames);

        try {
            Object delegee = cl.getField(""delegee"").get(javaObject);
            out.writeObject(delegee);
            return;
        } catch (IllegalAccessException e) {
        } catch (NoSuchFieldException e) {
        }
        throw new IOException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,readAdapterObject,"    public static Object readAdapterObject(Scriptable self,
                                           ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        ContextFactory factory;
        Context cx = Context.getCurrentContext();
        if (cx != null) {
            factory = cx.getFactory();
        } else {
            factory = null;
        }

        Class superClass = Class.forName((String)in.readObject());

        String[] interfaceNames = (String[])in.readObject();
        Class[] interfaces = new Class[interfaceNames.length];

        for (int i=0; i < interfaceNames.length; i++)
            interfaces[i] = Class.forName(interfaceNames[i]);

        Scriptable delegee = (Scriptable)in.readObject();

        Class adapterClass = getAdapterClass(self, superClass, interfaces,
                                             delegee);

        Class[] ctorParms = {
            ScriptRuntime.ContextFactoryClass,
            ScriptRuntime.ScriptableClass,
            ScriptRuntime.ScriptableClass
        };
        Object[] ctorArgs = { factory, delegee, self };
        try {
            return adapterClass.getConstructor(ctorParms).newInstance(ctorArgs);
        } catch(InstantiationException e) {
        } catch(IllegalAccessException e) {
        } catch(InvocationTargetException e) {
        } catch(NoSuchMethodException e) {
        }

        throw new ClassNotFoundException(""adapter"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,getObjectFunctionNames,"    private static ObjToIntMap getObjectFunctionNames(Scriptable obj)
    {
        Object[] ids = ScriptableObject.getPropertyIds(obj);
        ObjToIntMap map = new ObjToIntMap(ids.length);
        for (int i = 0; i != ids.length; ++i) {
            if (!(ids[i] instanceof String))
                continue;
            String id = (String) ids[i];
            Object value = ScriptableObject.getProperty(obj, id);
            if (value instanceof Function) {
                Function f = (Function)value;
                int length = ScriptRuntime.toInt32(
                                 ScriptableObject.getProperty(f, ""length""));
                if (length < 0) {
                    length = 0;
                }
                map.put(id, length);
            }
        }
        return map;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,getAdapterClass,"    private static Class getAdapterClass(Scriptable scope, Class superClass,
                                         Class[] interfaces, Scriptable obj)
    {
        ClassCache cache = ClassCache.get(scope);
        Map<JavaAdapterSignature,Class<?>> generated
            = cache.getInterfaceAdapterCacheMap();

        ObjToIntMap names = getObjectFunctionNames(obj);
        JavaAdapterSignature sig;
        sig = new JavaAdapterSignature(superClass, interfaces, names);
        Class<?> adapterClass = generated.get(sig);
        if (adapterClass == null) {
            String adapterName = ""adapter""
                                 + cache.newClassSerialNumber();
            byte[] code = createAdapterCode(names, adapterName,
                                            superClass, interfaces, null);

            adapterClass = loadAdapterClass(adapterName, code);
            if (cache.isCachingEnabled()) {
                generated.put(sig, adapterClass);
            }
        }
        return adapterClass;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,createAdapterCode,"    public static byte[] createAdapterCode(ObjToIntMap functionNames,
                                           String adapterName,
                                           Class superClass,
                                           Class[] interfaces,
                                           String scriptClassName)
    {
        ClassFileWriter cfw = new ClassFileWriter(adapterName,
                                                  superClass.getName(),
                                                  ""<adapter>"");
        cfw.addField(""factory"", ""Lorg/mozilla/javascript/ContextFactory;"",
                     (short) (ClassFileWriter.ACC_PUBLIC |
                              ClassFileWriter.ACC_FINAL));
        cfw.addField(""delegee"", ""Lorg/mozilla/javascript/Scriptable;"",
                     (short) (ClassFileWriter.ACC_PUBLIC |
                              ClassFileWriter.ACC_FINAL));
        cfw.addField(""self"", ""Lorg/mozilla/javascript/Scriptable;"",
                     (short) (ClassFileWriter.ACC_PUBLIC |
                              ClassFileWriter.ACC_FINAL));
        int interfacesCount = interfaces == null ? 0 : interfaces.length;
        for (int i=0; i < interfacesCount; i++) {
            if (interfaces[i] != null)
                cfw.addInterface(interfaces[i].getName());
        }

        String superName = superClass.getName().replace('.', '/');
        generateCtor(cfw, adapterName, superName);
        generateSerialCtor(cfw, adapterName, superName);
        if (scriptClassName != null)
            generateEmptyCtor(cfw, adapterName, superName, scriptClassName);

        ObjToIntMap generatedOverrides = new ObjToIntMap();
        ObjToIntMap generatedMethods = new ObjToIntMap();

        // generate methods to satisfy all specified interfaces.
        for (int i = 0; i < interfacesCount; i++) {
            Method[] methods = interfaces[i].getMethods();
            for (int j = 0; j < methods.length; j++) {
                Method method = methods[j];
                int mods = method.getModifiers();
                if (Modifier.isStatic(mods) || Modifier.isFinal(mods)) {
                    continue;
                }
                String methodName = method.getName();
                Class[] argTypes = method.getParameterTypes();
                if (!functionNames.has(methodName)) {
                    try {
                        superClass.getMethod(methodName, argTypes);
                        // The class we're extending implements this method and
                        // the JavaScript object doesn't have an override. See
                        // bug 61226.
                        continue;
                    } catch (NoSuchMethodException e) {
                        // Not implemented by superclass; fall through
                    }
                }
                // make sure to generate only one instance of a particular
                // method/signature.
                String methodSignature = getMethodSignature(method, argTypes);
                String methodKey = methodName + methodSignature;
                if (! generatedOverrides.has(methodKey)) {
                    generateMethod(cfw, adapterName, methodName,
                                   argTypes, method.getReturnType());
                    generatedOverrides.put(methodKey, 0);
                    generatedMethods.put(methodName, 0);
                }
            }
        }

        // Now, go through the superclass's methods, checking for abstract
        // methods or additional methods to override.

        // generate any additional overrides that the object might contain.
        Method[] methods = getOverridableMethods(superClass);
        for (int j = 0; j < methods.length; j++) {
            Method method = methods[j];
            int mods = method.getModifiers();
            // if a method is marked abstract, must implement it or the
            // resulting class won't be instantiable. otherwise, if the object
            // has a property of the same name, then an override is intended.
            boolean isAbstractMethod = Modifier.isAbstract(mods);
            String methodName = method.getName();
            if (isAbstractMethod || functionNames.has(methodName)) {
                // make sure to generate only one instance of a particular
                // method/signature.
                Class[] argTypes = method.getParameterTypes();
                String methodSignature = getMethodSignature(method, argTypes);
                String methodKey = methodName + methodSignature;
                if (! generatedOverrides.has(methodKey)) {
                    generateMethod(cfw, adapterName, methodName,
                                   argTypes, method.getReturnType());
                    generatedOverrides.put(methodKey, 0);
                    generatedMethods.put(methodName, 0);
                    
                    // if a method was overridden, generate a ""super$method""
                    // which lets the delegate call the superclass' version.
                    if (!isAbstractMethod) {
                        generateSuper(cfw, adapterName, superName,
                                      methodName, methodSignature,
                                      argTypes, method.getReturnType());
                    }
                }
            }
        }

        // Generate Java methods for remaining properties that are not
        // overrides.
        ObjToIntMap.Iterator iter = new ObjToIntMap.Iterator(functionNames);
        for (iter.start(); !iter.done(); iter.next()) {
            String functionName = (String)iter.getKey();
            if (generatedMethods.has(functionName))
                continue;
            int length = iter.getValue();
            Class[] parms = new Class[length];
            for (int k=0; k < length; k++)
                parms[k] = ScriptRuntime.ObjectClass;
            generateMethod(cfw, adapterName, functionName, parms,
                           ScriptRuntime.ObjectClass);
        }
        return cfw.toByteArray();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,getOverridableMethods,"    static Method[] getOverridableMethods(Class c)
    {
        ArrayList<Method> list = new ArrayList<Method>();
        HashSet<String> skip = new HashSet<String>();
        while (c != null) {
            Method[] methods = c.getDeclaredMethods();
            for (int i = 0; i < methods.length; i++) {
                String methodKey = methods[i].getName() + 
                    getMethodSignature(methods[i],
                            methods[i].getParameterTypes());
                if (skip.contains(methodKey))
                    continue; // skip this method
                int mods = methods[i].getModifiers();
                if (Modifier.isStatic(mods))
                    continue;
                if (Modifier.isFinal(mods)) {
                    // Make sure we don't add a final method to the list
                    // of overridable methods.
                    skip.add(methodKey);
                    continue;
                }
                if (Modifier.isPublic(mods) || Modifier.isProtected(mods)) {
                    list.add(methods[i]);
                    skip.add(methodKey);
                }
            }
            c = c.getSuperclass();
        }
        return list.toArray(new Method[list.size()]);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,loadAdapterClass,"    static Class loadAdapterClass(String className, byte[] classBytes)
    {
        Object staticDomain;
        Class domainClass = SecurityController.getStaticSecurityDomainClass();
        if(domainClass == CodeSource.class || domainClass == ProtectionDomain.class) {
            ProtectionDomain protectionDomain = JavaAdapter.class.getProtectionDomain();
            if(domainClass == CodeSource.class) {
                staticDomain = protectionDomain == null ? null : protectionDomain.getCodeSource();
            }
            else {
                staticDomain = protectionDomain;
            }
        }
        else {
            staticDomain = null;
        }
        GeneratedClassLoader loader = SecurityController.createLoader(null, 
                staticDomain);
        Class result = loader.defineClass(className, classBytes);
        loader.linkClass(result);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,getFunction,"    public static Function getFunction(Scriptable obj, String functionName)
    {
        Object x = ScriptableObject.getProperty(obj, functionName);
        if (x == Scriptable.NOT_FOUND) {
            // This method used to swallow the exception from calling
            // an undefined method. People have come to depend on this
            // somewhat dubious behavior. It allows people to avoid
            // implementing listener methods that they don't care about,
            // for instance.
            return null;
        }
        if (!(x instanceof Function))
            throw ScriptRuntime.notFunctionError(x, functionName);

        return (Function)x;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,callMethod,"    public static Object callMethod(ContextFactory factory,
                                    final Scriptable thisObj,
                                    final Function f, final Object[] args,
                                    final long argsToWrap)
    {
        if (f == null) {
            // See comments in getFunction
            return Undefined.instance;
        }
        if (factory == null) {
            factory = ContextFactory.getGlobal();
        }

        final Scriptable scope = f.getParentScope();
        if (argsToWrap == 0) {
            return Context.call(factory, f, scope, thisObj, args);
        }

        Context cx = Context.getCurrentContext();
        if (cx != null) {
            return doCall(cx, scope, thisObj, f, args, argsToWrap);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,run,"                public Object run(Context cx)
                {
                    return doCall(cx, scope, thisObj, f, args, argsToWrap);
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,doCall,"    private static Object doCall(Context cx, Scriptable scope,
                                 Scriptable thisObj, Function f,
                                 Object[] args, long argsToWrap)
    {
        // Wrap the rest of objects
        for (int i = 0; i != args.length; ++i) {
            if (0 != (argsToWrap & (1 << i))) {
                Object arg = args[i];
                if (!(arg instanceof Scriptable)) {
                    args[i] = cx.getWrapFactory().wrap(cx, scope, arg,
                                                       null);
                }
            }
        }
        return f.call(cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,runScript,"    public static Scriptable runScript(final Script script)
    {
        return (Scriptable)Context.call(new ContextAction() {
            public Object run(Context cx)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,run,"            public Object run(Context cx)
            {
                ScriptableObject global = ScriptRuntime.getGlobal(cx);
                script.exec(cx, global);
                return global;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generateCtor,"    private static void generateCtor(ClassFileWriter cfw, String adapterName,
                                     String superName)
    {
        cfw.startMethod(""<init>"",
                        ""(Lorg/mozilla/javascript/ContextFactory;""
                        +""Lorg/mozilla/javascript/Scriptable;)V"",
                        ClassFileWriter.ACC_PUBLIC);

        // Invoke base class constructor
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.addInvoke(ByteCode.INVOKESPECIAL, superName, ""<init>"", ""()V"");

        // Save parameter in instance variable ""factory""
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.add(ByteCode.ALOAD_1);  // first arg: ContextFactory instance
        cfw.add(ByteCode.PUTFIELD, adapterName, ""factory"",
                ""Lorg/mozilla/javascript/ContextFactory;"");

        // Save parameter in instance variable ""delegee""
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.add(ByteCode.ALOAD_2);  // second arg: Scriptable delegee
        cfw.add(ByteCode.PUTFIELD, adapterName, ""delegee"",
                ""Lorg/mozilla/javascript/Scriptable;"");

        cfw.add(ByteCode.ALOAD_0);  // this for the following PUTFIELD for self
        // create a wrapper object to be used as ""this"" in method calls
        cfw.add(ByteCode.ALOAD_2);  // the Scriptable delegee
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/JavaAdapter"",
                      ""createAdapterWrapper"",
                      ""(Lorg/mozilla/javascript/Scriptable;""
                      +""Ljava/lang/Object;""
                      +"")Lorg/mozilla/javascript/Scriptable;"");
        cfw.add(ByteCode.PUTFIELD, adapterName, ""self"",
                ""Lorg/mozilla/javascript/Scriptable;"");

        cfw.add(ByteCode.RETURN);
        cfw.stopMethod((short)3); // 3: this + factory + delegee
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generateSerialCtor,"    private static void generateSerialCtor(ClassFileWriter cfw,
                                           String adapterName,
                                           String superName)
    {
        cfw.startMethod(""<init>"",
                        ""(Lorg/mozilla/javascript/ContextFactory;""
                        +""Lorg/mozilla/javascript/Scriptable;""
                        +""Lorg/mozilla/javascript/Scriptable;""
                        +"")V"",
                        ClassFileWriter.ACC_PUBLIC);

        // Invoke base class constructor
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.addInvoke(ByteCode.INVOKESPECIAL, superName, ""<init>"", ""()V"");

        // Save parameter in instance variable ""factory""
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.add(ByteCode.ALOAD_1);  // first arg: ContextFactory instance
        cfw.add(ByteCode.PUTFIELD, adapterName, ""factory"",
                ""Lorg/mozilla/javascript/ContextFactory;"");

        // Save parameter in instance variable ""delegee""
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.add(ByteCode.ALOAD_2);  // second arg: Scriptable delegee
        cfw.add(ByteCode.PUTFIELD, adapterName, ""delegee"",
                ""Lorg/mozilla/javascript/Scriptable;"");
        // save self
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.add(ByteCode.ALOAD_3);  // second arg: Scriptable self
        cfw.add(ByteCode.PUTFIELD, adapterName, ""self"",
                ""Lorg/mozilla/javascript/Scriptable;"");

        cfw.add(ByteCode.RETURN);
        cfw.stopMethod((short)4); // 4: this + factory + delegee + self
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generateEmptyCtor,"    private static void generateEmptyCtor(ClassFileWriter cfw,
                                          String adapterName,
                                          String superName,
                                          String scriptClassName)
    {
        cfw.startMethod(""<init>"", ""()V"", ClassFileWriter.ACC_PUBLIC);

        // Invoke base class constructor
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.addInvoke(ByteCode.INVOKESPECIAL, superName, ""<init>"", ""()V"");

        // Set factory to null to use current global when necessary
        cfw.add(ByteCode.ALOAD_0);
        cfw.add(ByteCode.ACONST_NULL);
        cfw.add(ByteCode.PUTFIELD, adapterName, ""factory"",
                ""Lorg/mozilla/javascript/ContextFactory;"");

        // Load script class
        cfw.add(ByteCode.NEW, scriptClassName);
        cfw.add(ByteCode.DUP);
        cfw.addInvoke(ByteCode.INVOKESPECIAL, scriptClassName, ""<init>"", ""()V"");

        // Run script and save resulting scope
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/JavaAdapter"",
                      ""runScript"",
                      ""(Lorg/mozilla/javascript/Script;""
                      +"")Lorg/mozilla/javascript/Scriptable;"");
        cfw.add(ByteCode.ASTORE_1);

        // Save the Scriptable in instance variable ""delegee""
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.add(ByteCode.ALOAD_1);  // the Scriptable
        cfw.add(ByteCode.PUTFIELD, adapterName, ""delegee"",
                ""Lorg/mozilla/javascript/Scriptable;"");

        cfw.add(ByteCode.ALOAD_0);  // this for the following PUTFIELD for self
        // create a wrapper object to be used as ""this"" in method calls
        cfw.add(ByteCode.ALOAD_1);  // the Scriptable
        cfw.add(ByteCode.ALOAD_0);  // this
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/JavaAdapter"",
                      ""createAdapterWrapper"",
                      ""(Lorg/mozilla/javascript/Scriptable;""
                      +""Ljava/lang/Object;""
                      +"")Lorg/mozilla/javascript/Scriptable;"");
        cfw.add(ByteCode.PUTFIELD, adapterName, ""self"",
                ""Lorg/mozilla/javascript/Scriptable;"");

        cfw.add(ByteCode.RETURN);
        cfw.stopMethod((short)2); // this + delegee
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generatePushWrappedArgs,"    static void generatePushWrappedArgs(ClassFileWriter cfw,
                                        Class[] argTypes,
                                        int arrayLength)
    {
        // push arguments
        cfw.addPush(arrayLength);
        cfw.add(ByteCode.ANEWARRAY, ""java/lang/Object"");
        int paramOffset = 1;
        for (int i = 0; i != argTypes.length; ++i) {
            cfw.add(ByteCode.DUP); // duplicate array reference",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generateWrapArg,"    private static int generateWrapArg(ClassFileWriter cfw, int paramOffset,
                                       Class argType)
    {
        int size = 1;
        if (!argType.isPrimitive()) {
            cfw.add(ByteCode.ALOAD, paramOffset);

        } else if (argType == Boolean.TYPE) {
            // wrap boolean values with java.lang.Boolean.
            cfw.add(ByteCode.NEW, ""java/lang/Boolean"");
            cfw.add(ByteCode.DUP);
            cfw.add(ByteCode.ILOAD, paramOffset);
            cfw.addInvoke(ByteCode.INVOKESPECIAL, ""java/lang/Boolean"",
                          ""<init>"", ""(Z)V"");

        } else if (argType == Character.TYPE) {
            // Create a string of length 1 using the character parameter.
            cfw.add(ByteCode.ILOAD, paramOffset);
            cfw.addInvoke(ByteCode.INVOKESTATIC, ""java/lang/String"",
                          ""valueOf"", ""(C)Ljava/lang/String;"");

        } else {
            // convert all numeric values to java.lang.Double.
            cfw.add(ByteCode.NEW, ""java/lang/Double"");
            cfw.add(ByteCode.DUP);
            String typeName = argType.getName();
            switch (typeName.charAt(0)) {
            case 'b':
            case 's':
            case 'i':
                // load an int value, convert to double.
                cfw.add(ByteCode.ILOAD, paramOffset);
                cfw.add(ByteCode.I2D);
                break;
            case 'l':
                // load a long, convert to double.
                cfw.add(ByteCode.LLOAD, paramOffset);
                cfw.add(ByteCode.L2D);
                size = 2;
                break;
            case 'f':
                // load a float, convert to double.
                cfw.add(ByteCode.FLOAD, paramOffset);
                cfw.add(ByteCode.F2D);
                break;
            case 'd':
                cfw.add(ByteCode.DLOAD, paramOffset);
                size = 2;
                break;
            }
            cfw.addInvoke(ByteCode.INVOKESPECIAL, ""java/lang/Double"",
                          ""<init>"", ""(D)V"");
        }
        return size;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generateReturnResult,"    static void generateReturnResult(ClassFileWriter cfw, Class retType,
                                     boolean callConvertResult)
    {
        // wrap boolean values with java.lang.Boolean, convert all other
        // primitive values to java.lang.Double.
        if (retType == Void.TYPE) {
            cfw.add(ByteCode.POP);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generateMethod,"    private static void generateMethod(ClassFileWriter cfw, String genName,
                                       String methodName, Class[] parms,
                                       Class returnType)
    {
        StringBuffer sb = new StringBuffer();
        int paramsEnd = appendMethodSignature(parms, returnType, sb);
        String methodSignature = sb.toString();
        cfw.startMethod(methodName, methodSignature,
                        ClassFileWriter.ACC_PUBLIC);

        // Prepare stack to call method

        // push factory
        cfw.add(ByteCode.ALOAD_0);
        cfw.add(ByteCode.GETFIELD, genName, ""factory"",
                ""Lorg/mozilla/javascript/ContextFactory;"");

        // push self
        cfw.add(ByteCode.ALOAD_0);
        cfw.add(ByteCode.GETFIELD, genName, ""self"",
                ""Lorg/mozilla/javascript/Scriptable;"");

        // push function
        cfw.add(ByteCode.ALOAD_0);
        cfw.add(ByteCode.GETFIELD, genName, ""delegee"",
                ""Lorg/mozilla/javascript/Scriptable;"");
        cfw.addPush(methodName);
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/JavaAdapter"",
                      ""getFunction"",
                      ""(Lorg/mozilla/javascript/Scriptable;""
                      +""Ljava/lang/String;""
                      +"")Lorg/mozilla/javascript/Function;"");

        // push arguments
        generatePushWrappedArgs(cfw, parms, parms.length);

        // push bits to indicate which parameters should be wrapped
        if (parms.length > 64) {
            // If it will be an issue, then passing a static boolean array
            // can be an option, but for now using simple bitmask
            throw Context.reportRuntimeError0(
                ""JavaAdapter can not subclass methods with more then""
                +"" 64 arguments."");
        }
        long convertionMask = 0;
        for (int i = 0; i != parms.length; ++i) {
            if (!parms[i].isPrimitive()) {
                convertionMask |= (1 << i);
            }
        }
        cfw.addPush(convertionMask);

        // go through utility method, which creates a Context to run the
        // method in.
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/JavaAdapter"",
                      ""callMethod"",
                      ""(Lorg/mozilla/javascript/ContextFactory;""
                      +""Lorg/mozilla/javascript/Scriptable;""
                      +""Lorg/mozilla/javascript/Function;""
                      +""[Ljava/lang/Object;""
                      +""J""
                      +"")Ljava/lang/Object;"");

        generateReturnResult(cfw, returnType, true);

        cfw.stopMethod((short)paramsEnd);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generatePushParam,"    private static int generatePushParam(ClassFileWriter cfw, int paramOffset,
                                         Class paramType)
    {
        if (!paramType.isPrimitive()) {
            cfw.addALoad(paramOffset);
            return 1;
        }
        String typeName = paramType.getName();
        switch (typeName.charAt(0)) {
        case 'z':
        case 'b':
        case 'c':
        case 's':
        case 'i':
            // load an int value, convert to double.
            cfw.addILoad(paramOffset);
            return 1;
        case 'l':
            // load a long, convert to double.
            cfw.addLLoad(paramOffset);
            return 2;
        case 'f':
            // load a float, convert to double.
            cfw.addFLoad(paramOffset);
            return 1;
        case 'd':
            cfw.addDLoad(paramOffset);
            return 2;
        }
        throw Kit.codeBug();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generatePopResult,"    private static void generatePopResult(ClassFileWriter cfw,
                                          Class retType)
    {
        if (retType.isPrimitive()) {
            String typeName = retType.getName();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,generateSuper,"    private static void generateSuper(ClassFileWriter cfw,
                                      String genName, String superName,
                                      String methodName, String methodSignature,
                                      Class[] parms, Class returnType)
    {
        cfw.startMethod(""super$"" + methodName, methodSignature,
                        ClassFileWriter.ACC_PUBLIC);

        // push ""this""
        cfw.add(ByteCode.ALOAD, 0);

        // push the rest of the parameters.
        int paramOffset = 1;
        for (int i = 0; i < parms.length; i++) {
            paramOffset += generatePushParam(cfw, paramOffset, parms[i]);
        }

        // call the superclass implementation of the method.
        cfw.addInvoke(ByteCode.INVOKESPECIAL,
                      superName,
                      methodName,
                      methodSignature);

        // now, handle the return type appropriately.
        Class retType = returnType;
        if (!retType.equals(Void.TYPE)) {
            generatePopResult(cfw, retType);
        } else {
            cfw.add(ByteCode.RETURN);
        }
        cfw.stopMethod((short)(paramOffset + 1));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,getMethodSignature,"    private static String getMethodSignature(Method method, Class[] argTypes)
    {
        StringBuffer sb = new StringBuffer();
        appendMethodSignature(argTypes, method.getReturnType(), sb);
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,appendMethodSignature,"    static int appendMethodSignature(Class[] argTypes,
                                     Class returnType,
                                     StringBuffer sb)
    {
        sb.append('(');
        int firstLocal = 1 + argTypes.length; // includes this.
        for (int i = 0; i < argTypes.length; i++) {
            Class type = argTypes[i];
            appendTypeString(sb, type);
            if (type == Long.TYPE || type == Double.TYPE) {
                // adjust for duble slot
                ++firstLocal;
            }
        }
        sb.append(')');
        appendTypeString(sb, returnType);
        return firstLocal;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,appendTypeString,"    private static StringBuffer appendTypeString(StringBuffer sb, Class type)
    {
        while (type.isArray()) {
            sb.append('[');
            type = type.getComponentType();
        }
        if (type.isPrimitive()) {
            char typeLetter;
            if (type == Boolean.TYPE) {
                typeLetter = 'Z';
            } else if (type == Long.TYPE) {
                typeLetter = 'J';
            } else {
                String typeName = type.getName();
                typeLetter = Character.toUpperCase(typeName.charAt(0));
            }
            sb.append(typeLetter);
        } else {
            sb.append('L');
            sb.append(type.getName().replace('.', '/'));
            sb.append(';');
        }
        return sb;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAdapter.java,getArgsToConvert,"    static int[] getArgsToConvert(Class[] argTypes)
    {
        int count = 0;
        for (int i = 0; i != argTypes.length; ++i) {
            if (!argTypes[i].isPrimitive())
                ++count;
        }
        if (count == 0)
            return null;
        int[] array = new int[count];
        count = 0;
        for (int i = 0; i != argTypes.length; ++i) {
            if (!argTypes[i].isPrimitive())
                array[count++] = i;
        }
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,has,"    boolean has(String name, boolean isStatic)
    {
        Hashtable ht = isStatic ? staticMembers : members;
        Object obj = ht.get(name);
        if (obj != null) {
            return true;
        }
        return findExplicitFunction(name, isStatic) != null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,get,"    Object get(Scriptable scope, String name, Object javaObject,
               boolean isStatic)
    {
        Hashtable ht = isStatic ? staticMembers : members;
        Object member = ht.get(name);
        if (!isStatic && member == null) {
            // Try to get static member from instance (LC3)
            member = staticMembers.get(name);
        }
        if (member == null) {
            member = this.getExplicitFunction(scope, name,
                                              javaObject, isStatic);
            if (member == null)
                return Scriptable.NOT_FOUND;
        }
        if (member instanceof Scriptable) {
            return member;
        }
        Context cx = Context.getContext();
        Object rval;
        Class type;
        try {
            if (member instanceof BeanProperty) {
                BeanProperty bp = (BeanProperty) member;
                if (bp.getter == null)
                    return Scriptable.NOT_FOUND;
                rval = bp.getter.invoke(javaObject, Context.emptyArgs);
                type = bp.getter.method().getReturnType();
            } else {
                Field field = (Field) member;
                rval = field.get(isStatic ? null : javaObject);
                type = field.getType();
            }
        } catch (Exception ex) {
            throw Context.throwAsScriptRuntimeEx(ex);
        }
        // Need to wrap the object before we return it.
        scope = ScriptableObject.getTopLevelScope(scope);
        return cx.getWrapFactory().wrap(cx, scope, rval, type);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,put,"    void put(Scriptable scope, String name, Object javaObject,
             Object value, boolean isStatic)
    {
        Hashtable ht = isStatic ? staticMembers : members;
        Object member = ht.get(name);
        if (!isStatic && member == null) {
            // Try to get static member from instance (LC3)
            member = staticMembers.get(name);
        }
        if (member == null)
            throw reportMemberNotFound(name);
        if (member instanceof FieldAndMethods) {
            FieldAndMethods fam = (FieldAndMethods) ht.get(name);
            member = fam.field;
        }

        // Is this a bean property ""set""?
        if (member instanceof BeanProperty) {
            BeanProperty bp = (BeanProperty)member;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,getIds,"    Object[] getIds(boolean isStatic)
    {
        Hashtable ht = isStatic ? staticMembers : members;
        int len = ht.size();
        Object[] result = new Object[len];
        Enumeration keys = ht.keys();
        for (int i=0; i < len; i++)
            result[i] = keys.nextElement();
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,javaSignature,"    static String javaSignature(Class type)
    {
        if (!type.isArray()) {
            return type.getName();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,liveConnectSignature,"    static String liveConnectSignature(Class[] argTypes)
    {
        int N = argTypes.length;
        if (N == 0) { return ""()""; }
        StringBuffer sb = new StringBuffer();
        sb.append('(');
        for (int i = 0; i != N; ++i) {
            if (i != 0) {
                sb.append(',');
            }
            sb.append(javaSignature(argTypes[i]));
        }
        sb.append(')');
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,findExplicitFunction,"    private MemberBox findExplicitFunction(String name, boolean isStatic)
    {
        int sigStart = name.indexOf('(');
        if (sigStart < 0) { return null; }

        Hashtable ht = isStatic ? staticMembers : members;
        MemberBox[] methodsOrCtors = null;
        boolean isCtor = (isStatic && sigStart == 0);

        if (isCtor) {
            // Explicit request for an overloaded constructor
            methodsOrCtors = ctors;
        } else {
            // Explicit request for an overloaded method
            String trueName = name.substring(0,sigStart);
            Object obj = ht.get(trueName);
            if (!isStatic && obj == null) {
                // Try to get static member from instance (LC3)
                obj = staticMembers.get(trueName);
            }
            if (obj instanceof NativeJavaMethod) {
                NativeJavaMethod njm = (NativeJavaMethod)obj;
                methodsOrCtors = njm.methods;
            }
        }

        if (methodsOrCtors != null) {
            for (int i = 0; i < methodsOrCtors.length; i++) {
                Class[] type = methodsOrCtors[i].argTypes;
                String sig = liveConnectSignature(type);
                if (sigStart + sig.length() == name.length()
                    && name.regionMatches(sigStart, sig, 0, sig.length()))
                {
                    return methodsOrCtors[i];
                }
            }
        }

        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,getExplicitFunction,"    private Object getExplicitFunction(Scriptable scope, String name,
                                       Object javaObject, boolean isStatic)
    {
        Hashtable ht = isStatic ? staticMembers : members;
        Object member = null;
        MemberBox methodOrCtor = findExplicitFunction(name, isStatic);

        if (methodOrCtor != null) {
            Scriptable prototype =
                ScriptableObject.getFunctionPrototype(scope);

            if (methodOrCtor.isCtor()) {
                NativeJavaConstructor fun =
                    new NativeJavaConstructor(methodOrCtor);
                fun.setPrototype(prototype);
                member = fun;
                ht.put(name, fun);
            } else {
                String trueName = methodOrCtor.getName();
                member = ht.get(trueName);

                if (member instanceof NativeJavaMethod &&
                    ((NativeJavaMethod)member).methods.length > 1 ) {
                    NativeJavaMethod fun =
                        new NativeJavaMethod(methodOrCtor, name);
                    fun.setPrototype(prototype);
                    ht.put(name, fun);
                    member = fun;
                }
            }
        }

        return member;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,discoverAccessibleMethods,"    private static Method[] discoverAccessibleMethods(Class clazz, 
                                                      boolean includeProtected,
                                                      boolean includePrivate)
    {
        Map map = new HashMap();
        discoverAccessibleMethods(clazz, map, includeProtected, includePrivate);
        return (Method[])map.values().toArray(new Method[map.size()]);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,discoverAccessibleMethods,"    private static void discoverAccessibleMethods(Class clazz, Map map,
                                                  boolean includeProtected,
                                                  boolean includePrivate)
    {
        if (Modifier.isPublic(clazz.getModifiers()) || includePrivate) {
            try {
                if (includeProtected || includePrivate) {
                    while (clazz != null) {
                        try {
                            Method[] methods = clazz.getDeclaredMethods();
                            for (int i = 0; i < methods.length; i++) {
                                Method method = methods[i];
                                int mods = method.getModifiers();
    
                                if (Modifier.isPublic(mods) ||
                                    Modifier.isProtected(mods) ||
                                    includePrivate)
                                {
                                    if (includePrivate)
                                        method.setAccessible(true);
                                    map.put(new MethodSignature(method), method);
                                }
                            }
                            clazz = clazz.getSuperclass();
                        } catch (SecurityException e) {
                            // Some security settings (i.e., applets) disallow
                            // access to Class.getDeclaredMethods. Fall back to
                            // Class.getMethods.
                            Method[] methods = clazz.getMethods();
                            for (int i = 0; i < methods.length; i++) {
                                Method method = methods[i];
                                MethodSignature sig 
                                    = new MethodSignature(method);
                                if (map.get(sig) == null)
                                    map.put(sig, method);
                            }
                            break; // getMethods gets superclass methods, no
                                   // need to loop any more
                        }
                    }
                } else {
                    Method[] methods = clazz.getMethods();
                    for (int i = 0; i < methods.length; i++) {
                        Method method = methods[i];
                        MethodSignature sig = new MethodSignature(method);
                        map.put(sig, method);
                    }
                }
                return;
            } catch (SecurityException e) {
                Context.reportWarning(
                        ""Could not discover accessible methods of class "" +
                            clazz.getName() + "" due to lack of privileges, "" +
                            ""attemping superclasses/interfaces."");
                // Fall through and attempt to discover superclass/interface
                // methods
            }
        }

        Class[] interfaces = clazz.getInterfaces();
        for (int i = 0; i < interfaces.length; i++) {
            discoverAccessibleMethods(interfaces[i], map, includeProtected,
                    includePrivate);
        }
        Class superclass = clazz.getSuperclass();
        if (superclass != null) {
            discoverAccessibleMethods(superclass, map, includeProtected,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,equals,"        public boolean equals(Object o)
        {
            if(o instanceof MethodSignature)
            {
                MethodSignature ms = (MethodSignature)o;
                return ms.name.equals(name) && Arrays.equals(args, ms.args);
            }
            return false;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,hashCode,"        public int hashCode()
        {
            return name.hashCode() ^ args.length;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,reflect,"    private void reflect(Scriptable scope, boolean includeProtected)
    {
        // We reflect methods first, because we want overloaded field/method
        // names to be allocated to the NativeJavaMethod before the field
        // gets in the way.

        Method[] methods = discoverAccessibleMethods(cl, includeProtected,
                                                     includePrivate);
        for (int i = 0; i < methods.length; i++) {
            Method method = methods[i];
            int mods = method.getModifiers();
            boolean isStatic = Modifier.isStatic(mods);
            Hashtable ht = isStatic ? staticMembers : members;
            String name = method.getName();
            Object value = ht.get(name);
            if (value == null) {
                ht.put(name, method);
            } else {
                ObjArray overloadedMethods;
                if (value instanceof ObjArray) {
                    overloadedMethods = (ObjArray)value;
                } else {
                    if (!(value instanceof Method)) Kit.codeBug();
                    // value should be instance of Method as at this stage
                    // staticMembers and members can only contain methods
                    overloadedMethods = new ObjArray();
                    overloadedMethods.add(value);
                    ht.put(name, overloadedMethods);
                }
                overloadedMethods.add(method);
            }
        }

        // replace Method instances by wrapped NativeJavaMethod objects
        // first in staticMembers and then in members
        for (int tableCursor = 0; tableCursor != 2; ++tableCursor) {
            boolean isStatic = (tableCursor == 0);
            Hashtable ht = (isStatic) ? staticMembers : members;
            Enumeration e = ht.keys();
            while (e.hasMoreElements()) {
                String name = (String)e.nextElement();
                MemberBox[] methodBoxes;
                Object value = ht.get(name);
                if (value instanceof Method) {
                    methodBoxes = new MemberBox[1];
                    methodBoxes[0] = new MemberBox((Method)value);
                } else {
                    ObjArray overloadedMethods = (ObjArray)value;
                    int N = overloadedMethods.size();
                    if (N < 2) Kit.codeBug();
                    methodBoxes = new MemberBox[N];
                    for (int i = 0; i != N; ++i) {
                        Method method = (Method)overloadedMethods.get(i);
                        methodBoxes[i] = new MemberBox(method);
                    }
                }
                NativeJavaMethod fun = new NativeJavaMethod(methodBoxes);
                if (scope != null) {
                    ScriptRuntime.setFunctionProtoAndParent(fun, scope);
                }
                ht.put(name, fun);
            }
        }

        // Reflect fields.
        Field[] fields = getAccessibleFields();
        for (int i = 0; i < fields.length; i++) {
            Field field = fields[i];
            String name = field.getName();
            int mods = field.getModifiers();
            if (!includePrivate && !Modifier.isPublic(mods)) {
                continue;
            }
            try {
                boolean isStatic = Modifier.isStatic(mods);
                Hashtable ht = isStatic ? staticMembers : members;
                Object member = ht.get(name);
                if (member == null) {
                    ht.put(name, field);
                } else if (member instanceof NativeJavaMethod) {
                    NativeJavaMethod method = (NativeJavaMethod) member;
                    FieldAndMethods fam
                        = new FieldAndMethods(scope, method.methods, field);
                    Hashtable fmht = isStatic ? staticFieldAndMethods
                                              : fieldAndMethods;
                    if (fmht == null) {
                        fmht = new Hashtable(4);
                        if (isStatic) {
                            staticFieldAndMethods = fmht;
                        } else {
                            fieldAndMethods = fmht;
                        }
                    }
                    fmht.put(name, fam);
                    ht.put(name, fam);
                } else if (member instanceof Field) {
                    Field oldField = (Field) member;
                    // If this newly reflected field shadows an inherited field,
                    // then replace it. Otherwise, since access to the field
                    // would be ambiguous from Java, no field should be
                    // reflected.
                    // For now, the first field found wins, unless another field
                    // explicitly shadows it.
                    if (oldField.getDeclaringClass().
                            isAssignableFrom(field.getDeclaringClass()))
                    {
                        ht.put(name, field);
                    }
                } else {
                    // ""unknown member type""
                    Kit.codeBug();
                }
            } catch (SecurityException e) {
                // skip this field
                Context.reportWarning(""Could not access field ""
                        + name + "" of class "" + cl.getName() +
                        "" due to lack of privileges."");
            }
        }

        // Create bean propeties from corresponding get/set methods first for
        // static members and then for instance members
        for (int tableCursor = 0; tableCursor != 2; ++tableCursor) {
            boolean isStatic = (tableCursor == 0);
            Hashtable ht = (isStatic) ? staticMembers : members;

            Hashtable toAdd = new Hashtable();

            // Now, For each member, make ""bean"" properties.
            for (Enumeration e = ht.keys(); e.hasMoreElements(); ) {

                // Is this a getter?
                String name = (String) e.nextElement();
                boolean memberIsGetMethod = name.startsWith(""get"");
                boolean memberIsSetMethod = name.startsWith(""set"");
                boolean memberIsIsMethod = name.startsWith(""is"");
                if (memberIsGetMethod || memberIsIsMethod 
                        || memberIsSetMethod) {
                    // Double check name component.
                    String nameComponent
                        = name.substring(memberIsIsMethod ? 2 : 3);
                    if (nameComponent.length() == 0)
                        continue;

                    // Make the bean property name.
                    String beanPropertyName = nameComponent;
                    char ch0 = nameComponent.charAt(0);
                    if (Character.isUpperCase(ch0)) {
                        if (nameComponent.length() == 1) {
                            beanPropertyName = nameComponent.toLowerCase();
                        } else {
                            char ch1 = nameComponent.charAt(1);
                            if (!Character.isUpperCase(ch1)) {
                                beanPropertyName = Character.toLowerCase(ch0)
                                                   +nameComponent.substring(1);
                            }
                        }
                    }

                    // If we already have a member by this name, don't do this
                    // property.
                    if (ht.containsKey(beanPropertyName)
                            || toAdd.containsKey(beanPropertyName)) {
                        continue;
                    }

                    // Find the getter method, or if there is none, the is-
                    // method.
                    MemberBox getter = null;
                    getter = findGetter(isStatic, ht, ""get"", nameComponent);
                    // If there was no valid getter, check for an is- method.
                    if (getter == null) {
                        getter = findGetter(isStatic, ht, ""is"", nameComponent);
                    }

                    // setter
                    MemberBox setter = null;
                    NativeJavaMethod setters = null;
                    String setterName = ""set"".concat(nameComponent);

                    if (ht.containsKey(setterName)) {
                        // Is this value a method?
                        Object member = ht.get(setterName);
                        if (member instanceof NativeJavaMethod) {
                            NativeJavaMethod njmSet = (NativeJavaMethod)member;
                            if (getter != null) {
                                // We have a getter. Now, do we have a matching 
                                // setter?
                                Class type = getter.method().getReturnType();
                                setter = extractSetMethod(type, njmSet.methods,
                                                            isStatic);
                            } else {
                                // No getter, find any set method
                                setter = extractSetMethod(njmSet.methods, 
                                                            isStatic);
                            }
                            if (njmSet.methods.length > 1) {
                                setters = njmSet;
                            }
                        }
                    }
                    // Make the property.
                    BeanProperty bp = new BeanProperty(getter, setter,
                                                       setters);
                    toAdd.put(beanPropertyName, bp);
                }
            }

            // Add the new bean properties.
            for (Enumeration e = toAdd.keys(); e.hasMoreElements();) {
                Object key = e.nextElement();
                Object value = toAdd.get(key);
                ht.put(key, value);
            }
        }

        // Reflect constructors
        Constructor[] constructors = getAccessibleConstructors();
        ctors = new MemberBox[constructors.length];
        for (int i = 0; i != constructors.length; ++i) {
            ctors[i] = new MemberBox(constructors[i]);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,getAccessibleConstructors,"    private Constructor[] getAccessibleConstructors()
    {
      // The JVM currently doesn't allow changing access on java.lang.Class
      // constructors, so don't try
      if (includePrivate && cl != ScriptRuntime.ClassClass) {
          try {
              Constructor[] cons = cl.getDeclaredConstructors();
              Constructor.setAccessible(cons, true);

              return cons;
          } catch (SecurityException e) {
              // Fall through to !includePrivate case
              Context.reportWarning(""Could not access constructor "" +
                    "" of class "" + cl.getName() +
                    "" due to lack of privileges."");
          }
      }
      return cl.getConstructors();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,getAccessibleFields,"    private Field[] getAccessibleFields() {
        if (includePrivate) {
            try {
                ArrayList fieldsList = new ArrayList();
                Class currentClass = cl;

                while (currentClass != null) {
                    // get all declared fields in this class, make them
                    // accessible, and save
                    Field[] declared = currentClass.getDeclaredFields();
                    for (int i = 0; i < declared.length; i++) {
                        declared[i].setAccessible(true);
                        fieldsList.add(declared[i]);
                    }
                    // walk up superclass chain.  no need to deal specially with
                    // interfaces, since they can't have fields
                    currentClass = currentClass.getSuperclass();
                }

                return (Field[]) fieldsList.toArray(
                        new Field[fieldsList.size()]);
            } catch (SecurityException e) {
                // fall through to !includePrivate case
            }
        }
        return cl.getFields();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,findGetter,"    private MemberBox findGetter(boolean isStatic, Hashtable ht, String prefix,
                                 String propertyName)
    {
        String getterName = prefix.concat(propertyName);
        if (ht.containsKey(getterName)) {
            // Check that the getter is a method.
            Object member = ht.get(getterName);
            if (member instanceof NativeJavaMethod) {
                NativeJavaMethod njmGet = (NativeJavaMethod) member;
                return extractGetMethod(njmGet.methods, isStatic);
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,extractGetMethod,"    private static MemberBox extractGetMethod(MemberBox[] methods,
                                              boolean isStatic)
    {
        // Inspect the list of all MemberBox for the only one having no
        // parameters
        for (int methodIdx = 0; methodIdx < methods.length; methodIdx++) {
            MemberBox method = methods[methodIdx];
            // Does getter method have an empty parameter list with a return
            // value (eg. a getSomething() or isSomething())?
            if (method.argTypes.length == 0
                && (!isStatic || method.isStatic()))
            {
                Class type = method.method().getReturnType();
                if (type != Void.TYPE) {
                    return method;
                }
                break;
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,extractSetMethod,"    private static MemberBox extractSetMethod(Class type, MemberBox[] methods,
                                              boolean isStatic)
    {
        //
        // Note: it may be preferable to allow NativeJavaMethod.findFunction()
        //       to find the appropriate setter; unfortunately, it requires an
        //       instance of the target arg to determine that.
        //

        // Make two passes: one to find a method with direct type assignment,
        // and one to find a widening conversion.
        for (int pass = 1; pass <= 2; ++pass) {
            for (int i = 0; i < methods.length; ++i) {
                MemberBox method = methods[i];
                if (!isStatic || method.isStatic()) {
                    Class[] params = method.argTypes;
                    if (params.length == 1) {
                        if (pass == 1) {
                            if (params[0] == type) {
                                return method;
                            }
                        } else {
                            if (pass != 2) Kit.codeBug();
                            if (params[0].isAssignableFrom(type)) {
                                return method;
                            }
                        }
                    }
                }
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,extractSetMethod,"    private static MemberBox extractSetMethod(MemberBox[] methods,
                                              boolean isStatic)
    {

        for (int i = 0; i < methods.length; ++i) {
            MemberBox method = methods[i];
            if (!isStatic || method.isStatic()) {
                if (method.method().getReturnType() == Void.TYPE) {
                    if (method.argTypes.length == 1) {
                        return method;
                    }
                }
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,getFieldAndMethodsObjects,"    Hashtable getFieldAndMethodsObjects(Scriptable scope, Object javaObject,
                                        boolean isStatic)
    {
        Hashtable ht = isStatic ? staticFieldAndMethods : fieldAndMethods;
        if (ht == null)
            return null;
        int len = ht.size();
        Hashtable result = new Hashtable(len);
        Enumeration e = ht.elements();
        while (len-- > 0) {
            FieldAndMethods fam = (FieldAndMethods) e.nextElement();
            FieldAndMethods famNew = new FieldAndMethods(scope, fam.methods,
                                                         fam.field);
            famNew.javaObject = javaObject;
            result.put(fam.field.getName(), famNew);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,lookupClass,"    static JavaMembers lookupClass(Scriptable scope, Class dynamicType,
                                   Class staticType, boolean includeProtected)
    {
        JavaMembers members;
        scope = ScriptableObject.getTopLevelScope(scope);
        ClassCache cache = ClassCache.get(scope);
        Map<Class<?>,JavaMembers> ct = cache.getClassCacheMap();

        Class cl = dynamicType;
        for (;;) {
            members = ct.get(cl);
            if (members != null) {
                return members;
            }
            try {
                members = new JavaMembers(scope, cl, includeProtected);
                break;
            } catch (SecurityException e) {
                // Reflection may fail for objects that are in a restricted
                // access package (e.g. sun.*).  If we get a security
                // exception, try again with the static type if it is interface.
                // Otherwise, try superclass
                if (staticType != null && staticType.isInterface()) {
                    cl = staticType;
                    staticType = null; // try staticType only once
                } else {
                    Class parent = cl.getSuperclass();
                    if (parent == null) {
                        if (cl.isInterface()) {
                            // last resort after failed staticType interface
                            parent = ScriptRuntime.ObjectClass;
                        } else {
                            throw e;
                        }
                    }
                    cl = parent;
                }
            }
        }

        if (cache.isCachingEnabled())
            ct.put(cl, members);
        return members;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,reportMemberNotFound,"    RuntimeException reportMemberNotFound(String memberName)
    {
        return Context.reportRuntimeError2(
            ""msg.java.member.not.found"", cl.getName(), memberName);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaMembers.java,getDefaultValue,"    public Object getDefaultValue(Class hint)
    {
        if (hint == ScriptRuntime.FunctionClass)
            return this;
        Object rval;
        Class type;
        try {
            rval = field.get(javaObject);
            type = field.getType();
        } catch (IllegalAccessException accEx) {
            throw Context.reportRuntimeError1(
                ""msg.java.internal.private"", field.getName());
        }
        Context cx  = Context.getContext();
        rval = cx.getWrapFactory().wrap(cx, this, rval, type);
        if (rval instanceof Scriptable) {
            rval = ((Scriptable) rval).getDefaultValue(hint);
        }
        return rval;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptException.java,details,"    public String details()
    {
       try {
           return ScriptRuntime.toString(value);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptException.java,getValue,"    public Object getValue()
    {
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptException.java,getSourceName,"    public String getSourceName()
    {
        return sourceName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptException.java,getLineNumber,"    public int getLineNumber()
    {
        return lineNumber();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,classOrNull,"    public static Class classOrNull(String className)
    {
        try {
            return Class.forName(className);
        } catch  (ClassNotFoundException ex) {
        } catch  (SecurityException ex) {
        } catch  (LinkageError ex) {
        } catch (IllegalArgumentException e) {
            // Can be thrown if name has characters that a class name
            // can not contain
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,classOrNull,"    public static Class classOrNull(ClassLoader loader, String className)
    {
        try {
            return loader.loadClass(className);
        } catch (ClassNotFoundException ex) {
        } catch (SecurityException ex) {
        } catch  (LinkageError ex) {
        } catch (IllegalArgumentException e) {
            // Can be thrown if name has characters that a class name
            // can not contain
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,newInstanceOrNull,"    static Object newInstanceOrNull(Class cl)
    {
        try {
            return cl.newInstance();
        } catch (SecurityException x) {
        } catch  (LinkageError ex) {
        } catch (InstantiationException x) {
        } catch (IllegalAccessException x) {
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,testIfCanLoadRhinoClasses,"    static boolean testIfCanLoadRhinoClasses(ClassLoader loader)
    {
        Class testClass = ScriptRuntime.ContextFactoryClass;
        Class x = Kit.classOrNull(loader, testClass.getName());
        if (x != testClass) {
            // The check covers the case when x == null =>
            // loader does not know about testClass or the case
            // when x != null && x != testClass =>
            // loader loads a class unrelated to testClass
            return false;
        }
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,initCause,"    public static RuntimeException initCause(RuntimeException ex,
                                             Throwable cause)
    {
        if (Throwable_initCause != null) {
            Object[] args = { cause };
            try {
                Throwable_initCause.invoke(ex, args);
            } catch (Exception e) {
                // Ignore any exceptions
            }
        }
        return ex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,semicolonSplit,"    public static String[] semicolonSplit(String s)
    {
        String[] array = null;
        for (;;) {
            // loop 2 times: first to count semicolons and then to fill array
            int count = 0;
            int cursor = 0;
            for (;;) {
                int next = s.indexOf(';', cursor);
                if (next < 0) {
                    break;
                }
                if (array != null) {
                    array[count] = s.substring(cursor, next);
                }
                ++count;
                cursor = next + 1;
            }
            // after the last semicolon
            if (array == null) {
                // array size counting state:
                // check for required terminating ';'
                if (cursor != s.length())
                    throw new IllegalArgumentException();
                array = new String[count];
            } else {
                // array filling state: stop the loop
                break;
            }
        }
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,xDigitToInt,"    public static int xDigitToInt(int c, int accumulator)
    {
        check: {
            // Use 0..9 < A..Z < a..z
            if (c <= '9') {
                c -= '0';
                if (0 <= c) { break check; }
            } else if (c <= 'F') {
                if ('A' <= c) {
                    c -= ('A' - 10);
                    break check;
                }
            } else if (c <= 'f') {
                if ('a' <= c) {
                    c -= ('a' - 10);
                    break check;
                }
            }
            return -1;
        }
        return (accumulator << 4) | c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,addListener,"    public static Object addListener(Object bag, Object listener)
    {
        if (listener == null) throw new IllegalArgumentException();
        if (listener instanceof Object[]) throw new IllegalArgumentException();

        if (bag == null) {
            bag = listener;
        } else if (!(bag instanceof Object[])) {
            bag = new Object[] { bag, listener };
        } else {
            Object[] array = (Object[])bag;
            int L = array.length;
            // bag has at least 2 elements if it is array
            if (L < 2) throw new IllegalArgumentException();
            Object[] tmp = new Object[L + 1];
            System.arraycopy(array, 0, tmp, 0, L);
            tmp[L] = listener;
            bag = tmp;
        }

        return bag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,removeListener,"    public static Object removeListener(Object bag, Object listener)
    {
        if (listener == null) throw new IllegalArgumentException();
        if (listener instanceof Object[]) throw new IllegalArgumentException();

        if (bag == listener) {
            bag = null;
        } else if (bag instanceof Object[]) {
            Object[] array = (Object[])bag;
            int L = array.length;
            // bag has at least 2 elements if it is array
            if (L < 2) throw new IllegalArgumentException();
            if (L == 2) {
                if (array[1] == listener) {
                    bag = array[0];
                } else if (array[0] == listener) {
                    bag = array[1];
                }
            } else {
                int i = L;
                do {
                    --i;
                    if (array[i] == listener) {
                        Object[] tmp = new Object[L - 1];
                        System.arraycopy(array, 0, tmp, 0, i);
                        System.arraycopy(array, i + 1, tmp, i, L - (i + 1));
                        bag = tmp;
                        break;
                    }
                } while (i != 0);
            }
        }

        return bag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,getListener,"    public static Object getListener(Object bag, int index)
    {
        if (index == 0) {
            if (bag == null)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,initHash,"    static Object initHash(Hashtable h, Object key, Object initialValue)
    {
        synchronized (h) {
            Object current = h.get(key);
            if (current == null) {
                h.put(key, initialValue);
            } else {
                initialValue = current;
            }
        }
        return initialValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,equals,"        public boolean equals(Object anotherObj)
        {
            if (!(anotherObj instanceof ComplexKey))
                return false;
            ComplexKey another = (ComplexKey)anotherObj;
            return key1.equals(another.key1) && key2.equals(another.key2);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,hashCode,"        public int hashCode()
        {
            if (hash == 0) {
                hash = key1.hashCode() ^ key2.hashCode();
            }
            return hash;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,makeHashKeyFromPair,"    public static Object makeHashKeyFromPair(Object key1, Object key2)
    {
        if (key1 == null) throw new IllegalArgumentException();
        if (key2 == null) throw new IllegalArgumentException();
        return new ComplexKey(key1, key2);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,readReader,"    public static String readReader(Reader r)
        throws IOException
    {
        char[] buffer = new char[512];
        int cursor = 0;
        for (;;) {
            int n = r.read(buffer, cursor, buffer.length - cursor);
            if (n < 0) { break; }
            cursor += n;
            if (cursor == buffer.length) {
                char[] tmp = new char[buffer.length * 2];
                System.arraycopy(buffer, 0, tmp, 0, cursor);
                buffer = tmp;
            }
        }
        return new String(buffer, 0, cursor);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,readStream,"    public static byte[] readStream(InputStream is, int initialBufferCapacity)
        throws IOException
    {
        if (initialBufferCapacity <= 0) {
            throw new IllegalArgumentException(
                ""Bad initialBufferCapacity: ""+initialBufferCapacity);
        }
        byte[] buffer = new byte[initialBufferCapacity];
        int cursor = 0;
        for (;;) {
            int n = is.read(buffer, cursor, buffer.length - cursor);
            if (n < 0) { break; }
            cursor += n;
            if (cursor == buffer.length) {
                byte[] tmp = new byte[buffer.length * 2];
                System.arraycopy(buffer, 0, tmp, 0, cursor);
                buffer = tmp;
            }
        }
        if (cursor != buffer.length) {
            byte[] tmp = new byte[cursor];
            System.arraycopy(buffer, 0, tmp, 0, cursor);
            buffer = tmp;
        }
        return buffer;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Kit.java,codeBug,"    public static RuntimeException codeBug()
        throws RuntimeException
    {
        RuntimeException ex = new IllegalStateException(""FAILED ASSERTION"");
        // Print stack trace ASAP
        ex.printStackTrace(System.err);
        throw ex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LazilyLoadedCtor.java,init,"    void init()
    {
        synchronized (this) {
            if (state == STATE_INITIALIZING)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LazilyLoadedCtor.java,getValue,"    Object getValue()
    {
        if (state != STATE_WITH_VALUE)
            throw new IllegalStateException(propertyName);
        return initializedValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,LazilyLoadedCtor.java,buildValue,"    private Object buildValue()
    {
        Class cl = Kit.classOrNull(className);
        if (cl != null) {
            try {
                Object value = ScriptableObject.buildClassCtor(scope, cl,
                                                               sealed, false);
                if (value != null) {
                    return value;
                }
                else {
                    // cl has own static initializer which is expected
                    // to set the property on its own.
                    value = scope.get(propertyName, scope);
                    if (value != Scriptable.NOT_FOUND)
                        return value;
                }
            } catch (InvocationTargetException ex) {
                Throwable target = ex.getTargetException();
                if (target instanceof RuntimeException) {
                    throw (RuntimeException)target;
                }
            } catch (RhinoException ex) {
            } catch (InstantiationException ex) {
            } catch (IllegalAccessException ex) {
            } catch (SecurityException ex) {
            }
        }
        return Scriptable.NOT_FOUND;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,init,"    private void init(Method method)
    {
        this.memberObject = method;
        this.argTypes = method.getParameterTypes();
        this.vararg = VMBridge.instance.isVarArgs(method);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,init,"    private void init(Constructor constructor)
    {
        this.memberObject = constructor;
        this.argTypes = constructor.getParameterTypes();
        this.vararg = VMBridge.instance.isVarArgs(constructor);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,method,"    Method method()
    {
        return (Method)memberObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,ctor,"    Constructor ctor()
    {
        return (Constructor)memberObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,member,"    Member member()
    {
        return memberObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,isMethod,"    boolean isMethod()
    {
        return memberObject instanceof Method;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,isCtor,"    boolean isCtor()
    {
        return memberObject instanceof Constructor;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,isStatic,"    boolean isStatic()
    {
        return Modifier.isStatic(memberObject.getModifiers());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,getName,"    String getName()
    {
        return memberObject.getName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,getDeclaringClass,"    Class getDeclaringClass()
    {
        return memberObject.getDeclaringClass();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,toJavaDeclaration,"    String toJavaDeclaration()
    {
        StringBuffer sb = new StringBuffer();
        if (isMethod()) {
            Method method = method();
            sb.append(method.getReturnType());
            sb.append(' ');
            sb.append(method.getName());
        } else {
            Constructor ctor = ctor();
            String name = ctor.getDeclaringClass().getName();
            int lastDot = name.lastIndexOf('.');
            if (lastDot >= 0) {
                name = name.substring(lastDot + 1);
            }
            sb.append(name);
        }
        sb.append(JavaMembers.liveConnectSignature(argTypes));
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,toString,"    public String toString()
    {
        return memberObject.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,invoke,"    Object invoke(Object target, Object[] args)
    {
        Method method = method();
        try {
            try {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,newInstance,"    Object newInstance(Object[] args)
    {
        Constructor ctor = ctor();
        try {
            try {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,searchAccessibleMethod,"    private static Method searchAccessibleMethod(Method method, Class[] params)
    {
        int modifiers = method.getModifiers();
        if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {
            Class c = method.getDeclaringClass();
            if (!Modifier.isPublic(c.getModifiers())) {
                String name = method.getName();
                Class[] intfs = c.getInterfaces();
                for (int i = 0, N = intfs.length; i != N; ++i) {
                    Class intf = intfs[i];
                    if (Modifier.isPublic(intf.getModifiers())) {
                        try {
                            return intf.getMethod(name, params);
                        } catch (NoSuchMethodException ex) {
                        } catch (SecurityException ex) {  }
                    }
                }
                for (;;) {
                    c = c.getSuperclass();
                    if (c == null) { break; }
                    if (Modifier.isPublic(c.getModifiers())) {
                        try {
                            Method m = c.getMethod(name, params);
                            int mModifiers = m.getModifiers();
                            if (Modifier.isPublic(mModifiers)
                                && !Modifier.isStatic(mModifiers))
                            {
                                return m;
                            }
                        } catch (NoSuchMethodException ex) {
                        } catch (SecurityException ex) {  }
                    }
                }
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,readObject,"    private void readObject(ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        in.defaultReadObject();
        Member member = readMember(in);
        if (member instanceof Method) {
            init((Method)member);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,writeObject,"    private void writeObject(ObjectOutputStream out)
        throws IOException
    {
        out.defaultWriteObject();
        writeMember(out, memberObject);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,writeMember,"    private static void writeMember(ObjectOutputStream out, Member member)
        throws IOException
    {
        if (member == null) {
            out.writeBoolean(false);
            return;
        }
        out.writeBoolean(true);
        if (!(member instanceof Method || member instanceof Constructor))
            throw new IllegalArgumentException(""not Method or Constructor"");
        out.writeBoolean(member instanceof Method);
        out.writeObject(member.getName());
        out.writeObject(member.getDeclaringClass());
        if (member instanceof Method) {
            writeParameters(out, ((Method) member).getParameterTypes());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,readMember,"    private static Member readMember(ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        if (!in.readBoolean())
            return null;
        boolean isMethod = in.readBoolean();
        String name = (String) in.readObject();
        Class declaring = (Class) in.readObject();
        Class[] parms = readParameters(in);
        try {
            if (isMethod) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,writeParameters,"    private static void writeParameters(ObjectOutputStream out, Class[] parms)
        throws IOException
    {
        out.writeShort(parms.length);
    outer:
        for (int i=0; i < parms.length; i++) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,MemberBox.java,readParameters,"    private static Class[] readParameters(ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        Class[] result = new Class[in.readShort()];
        for (int i=0; i < result.length; i++) {
            if (!in.readBoolean()) {
                result[i] = (Class) in.readObject();
                continue;
            }
            result[i] = primitives[in.readByte()];
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeArray obj = new NativeArray(0);
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getMaximumInitialCapacity,"    static int getMaximumInitialCapacity() {
        return maximumInitialCapacity;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,setMaximumInitialCapacity,"    static void setMaximumInitialCapacity(int maximumInitialCapacity) {
        NativeArray.maximumInitialCapacity = maximumInitialCapacity;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getClassName,"    public String getClassName()
    {
        return ""Array"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        if (s.equals(""length"")) {
            return instanceIdInfo(DONTENUM | PERMANENT, Id_length);
        }
        return super.findInstanceIdInfo(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        if (id == Id_length) { return ""length""; }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        if (id == Id_length) {
            return ScriptRuntime.wrapNumber(length);
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,setInstanceIdValue,"    protected void setInstanceIdValue(int id, Object value)
    {
        if (id == Id_length) {
            setLength(value); return;
        }
        super.setInstanceIdValue(id, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,fillConstructorProperties,"    protected void fillConstructorProperties(IdFunctionObject ctor)
    {
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_join,
                ""join"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_reverse,
                ""reverse"", 1);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_sort,
                ""sort"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_push,
                ""push"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_pop,
                ""pop"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_shift,
                ""shift"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_unshift,
                ""unshift"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_splice,
                ""splice"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_concat,
                ""concat"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_slice,
                ""slice"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_indexOf,
                ""indexOf"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_lastIndexOf,
                ""lastIndexOf"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_every,
                ""every"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_filter,
                ""filter"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_forEach,
                ""forEach"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_map,
                ""map"", 2);
        addIdFunctionProperty(ctor, ARRAY_TAG, ConstructorId_some,
                ""some"", 2);
        super.fillConstructorProperties(ctor);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor:    arity=1; s=""constructor"";    break;
          case Id_toString:       arity=0; s=""toString"";       break;
          case Id_toLocaleString: arity=1; s=""toLocaleString""; break;
          case Id_toSource:       arity=0; s=""toSource"";       break;
          case Id_join:           arity=1; s=""join"";           break;
          case Id_reverse:        arity=0; s=""reverse"";        break;
          case Id_sort:           arity=1; s=""sort"";           break;
          case Id_push:           arity=1; s=""push"";           break;
          case Id_pop:            arity=1; s=""pop"";            break;
          case Id_shift:          arity=1; s=""shift"";          break;
          case Id_unshift:        arity=1; s=""unshift"";        break;
          case Id_splice:         arity=1; s=""splice"";         break;
          case Id_concat:         arity=1; s=""concat"";         break;
          case Id_slice:          arity=1; s=""slice"";          break;
          case Id_indexOf:        arity=1; s=""indexOf"";        break;
          case Id_lastIndexOf:    arity=1; s=""lastIndexOf"";    break;
          case Id_every:          arity=1; s=""every"";          break;
          case Id_filter:         arity=1; s=""filter"";         break;
          case Id_forEach:        arity=1; s=""forEach"";        break;
          case Id_map:            arity=1; s=""map"";            break;
          case Id_some:           arity=1; s=""some"";           break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(ARRAY_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(ARRAY_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
      again:
        for (;;) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,get,"    public Object get(int index, Scriptable start)
    {
        if (!denseOnly && isGetterOrSetter(null, index, false))
            return super.get(index, start);
        if (dense != null && 0 <= index && index < dense.length)
            return dense[index];
        return super.get(index, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,has,"    public boolean has(int index, Scriptable start)
    {
        if (!denseOnly && isGetterOrSetter(null, index, false))
            return super.has(index, start);
        if (dense != null && 0 <= index && index < dense.length)
            return dense[index] != NOT_FOUND;
        return super.has(index, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,toArrayIndex,"    private static long toArrayIndex(String id)
    {
        double d = ScriptRuntime.toNumber(id);
        if (d == d) {
            long index = ScriptRuntime.toUint32(d);
            if (index == d && index != 4294967295L) {
                // Assume that ScriptRuntime.toString(index) is the same
                // as java.lang.Long.toString(index) for long
                if (Long.toString(index).equals(id)) {
                    return index;
                }
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,put,"    public void put(String id, Scriptable start, Object value)
    {
        super.put(id, start, value);
        if (start == this) {
            // If the object is sealed, super will throw exception",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,ensureCapacity,"    private boolean ensureCapacity(int capacity)
    {
        if (capacity > dense.length) {
            if (capacity > MAX_PRE_GROW_SIZE) {
                denseOnly = false;
                return false;
            }
            capacity = Math.max(capacity, (int)(dense.length * GROW_FACTOR));
            Object[] newDense = new Object[capacity];
            System.arraycopy(dense, 0, newDense, 0, dense.length);
            Arrays.fill(newDense, dense.length, newDense.length,
                        Scriptable.NOT_FOUND);
            dense = newDense;
        }
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,put,"    public void put(int index, Scriptable start, Object value)
    {
        if (start == this && !isSealed() && dense != null && 0 <= index &&
            (denseOnly || !isGetterOrSetter(null, index, true)))
        {
            if (index < dense.length) {
                dense[index] = value;
                if (this.length <= index)
                    this.length = (long)index + 1;
                return;
            } else if (denseOnly && index < dense.length * GROW_FACTOR &&
                       ensureCapacity(index+1))
            {
                dense[index] = value;
                this.length = (long)index + 1;
                return;
            } else {
                denseOnly = false;
            }
        }
        super.put(index, start, value);
        if (start == this) {
            // only set the array length if given an array index (ECMA 15.4.0)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,delete,"    public void delete(int index)
    {
        if (dense != null && 0 <= index && index < dense.length &&
            !isSealed() && (denseOnly || !isGetterOrSetter(null, index, true)))",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getIds,"    public Object[] getIds()
    {
        Object[] superIds = super.getIds();
        if (dense == null) { return superIds; }
        int N = dense.length;
        long currentLength = length;
        if (N > currentLength) {
            N = (int)currentLength;
        }
        if (N == 0) { return superIds; }
        int superLength = superIds.length;
        Object[] ids = new Object[N + superLength];

        int presentCount = 0;
        for (int i = 0; i != N; ++i) {
            // Replace existing elements by their indexes
            if (dense[i] != NOT_FOUND) {
                ids[presentCount] = new Integer(i);
                ++presentCount;
            }
        }
        if (presentCount != N) {
            // dense contains deleted elems, need to shrink the result
            Object[] tmp = new Object[presentCount + superLength];
            System.arraycopy(ids, 0, tmp, 0, presentCount);
            ids = tmp;
        }
        System.arraycopy(superIds, 0, ids, presentCount, superLength);
        return ids;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getDefaultValue,"    public Object getDefaultValue(Class hint)
    {
        if (hint == ScriptRuntime.NumberClass) {
            Context cx = Context.getContext();
            if (cx.getLanguageVersion() == Context.VERSION_1_2)
                return new Long(length);
        }
        return super.getDefaultValue(hint);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,jsConstructor,"    private static Object jsConstructor(Context cx, Scriptable scope,
                                        Object[] args)
    {
        if (args.length == 0)
            return new NativeArray(0);

        // Only use 1 arg as first element for version 1.2; for
        // any other version (including 1.3) follow ECMA and use it as
        // a length.
        if (cx.getLanguageVersion() == Context.VERSION_1_2) {
            return new NativeArray(args);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getLength,"    public long getLength() {
        return length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,jsGet_length,"    public long jsGet_length() {
        return getLength();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,setDenseOnly,"    void setDenseOnly(boolean denseOnly) {
        if (denseOnly && !this.denseOnly)
            throw new IllegalArgumentException();
        this.denseOnly = denseOnly;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,setLength,"    private void setLength(Object val) {
        /* XXX do we satisfy this?
         * 15.4.5.1 [[Put]](P, V):
         * 1. Call the [[CanPut]] method of A with name P.
         * 2. If Result(1) is false, return.
         * ?
         */

        double d = ScriptRuntime.toNumber(val);
        long longVal = ScriptRuntime.toUint32(d);
        if (longVal != d)
            throw Context.reportRuntimeError0(""msg.arraylength.bad"");

        if (denseOnly) {
            if (longVal < length) {
                // downcast okay because denseOnly
                Arrays.fill(dense, (int) longVal, dense.length, NOT_FOUND);
                length = longVal;
                return;
            } else if (longVal < MAX_PRE_GROW_SIZE &&
                       longVal < (length * GROW_FACTOR) &&
                       ensureCapacity((int)longVal))
            {
                length = longVal;
                return;
            } else {
                denseOnly = false;
            }
        }
        if (longVal < length) {
            // remove all properties between longVal and length
            if (length - longVal > 0x1000) {
                // assume that the representation is sparse
                Object[] e = getIds(); // will only find in object itself
                for (int i=0; i < e.length; i++) {
                    Object id = e[i];
                    if (id instanceof String) {
                        // > MAXINT will appear as string
                        String strId = (String)id;
                        long index = toArrayIndex(strId);
                        if (index >= longVal)
                            delete(strId);
                    } else {
                        int index = ((Integer)id).intValue();
                        if (index >= longVal)
                            delete(index);
                    }
                }
            } else {
                // assume a dense representation
                for (long i = longVal; i < length; i++) {
                    deleteElem(this, i);
                }
            }
        }
        length = longVal;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getLengthProperty,"    static long getLengthProperty(Context cx, Scriptable obj) {
        // These will both give numeric lengths within Uint32 range.
        if (obj instanceof NativeString) {
            return ((NativeString)obj).getLength();
        } else if (obj instanceof NativeArray) {
            return ((NativeArray)obj).getLength();
        }
        return ScriptRuntime.toUint32(
            ScriptRuntime.getObjectProp(obj, ""length"", cx));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,setLengthProperty,"    private static Object setLengthProperty(Context cx, Scriptable target,
                                            long length)
    {
        return ScriptRuntime.setObjectProp(
                   target, ""length"", ScriptRuntime.wrapNumber(length), cx);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,deleteElem,"    private static void deleteElem(Scriptable target, long index) {
        int i = (int)index;
        if (i == index) { target.delete(i); }
        else { target.delete(Long.toString(index)); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,getElem,"    private static Object getElem(Context cx, Scriptable target, long index)
    {
        if (index > Integer.MAX_VALUE) {
            String id = Long.toString(index);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,setElem,"    private static void setElem(Context cx, Scriptable target, long index,
                                Object value)
    {
        if (index > Integer.MAX_VALUE) {
            String id = Long.toString(index);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,toStringHelper,"    private static String toStringHelper(Context cx, Scriptable scope,
                                         Scriptable thisObj,
                                         boolean toSource, boolean toLocale)
    {
        /* It's probably redundant to handle long lengths in this
         * function; StringBuffers are limited to 2^31 in java.
         */

        long length = getLengthProperty(cx, thisObj);

        StringBuffer result = new StringBuffer(256);

        // whether to return '4,unquoted,5' or '[4, ""quoted"", 5]'
        String separator;

        if (toSource) {
            result.append('[');
            separator = "", "";
        } else {
            separator = "","";
        }

        boolean haslast = false;
        long i = 0;

        boolean toplevel, iterating;
        if (cx.iterating == null) {
            toplevel = true;
            iterating = false;
            cx.iterating = new ObjToIntMap(31);
        } else {
            toplevel = false;
            iterating = cx.iterating.has(thisObj);
        }

        // Make sure cx.iterating is set to null when done
        // so we don't leak memory
        try {
            if (!iterating) {
                cx.iterating.put(thisObj, 0); // stop recursion.
                for (i = 0; i < length; i++) {
                    if (i > 0) result.append(separator);
                    Object elem = getElem(cx, thisObj, i);
                    if (elem == null || elem == Undefined.instance) {
                        haslast = false;
                        continue;
                    }
                    haslast = true;

                    if (toSource) {
                        result.append(ScriptRuntime.uneval(cx, scope, elem));

                    } else if (elem instanceof String) {
                        String s = (String)elem;
                        if (toSource) {
                            result.append('\""');
                            result.append(ScriptRuntime.escapeString(s));
                            result.append('\""');
                        } else {
                            result.append(s);
                        }

                    } else {
                        if (toLocale)
                        {
                            Callable fun;
                            Scriptable funThis;
                            fun = ScriptRuntime.getPropFunctionAndThis(
                                      elem, ""toLocaleString"", cx);
                            funThis = ScriptRuntime.lastStoredScriptable(cx);
                            elem = fun.call(cx, scope, funThis,
                                            ScriptRuntime.emptyArgs);
                        }
                        result.append(ScriptRuntime.toString(elem));
                    }
                }
            }
        } finally {
            if (toplevel) {
                cx.iterating = null;
            }
        }

        if (toSource) {
            //for [,,].length behavior; we want toString to be symmetric.
            if (!haslast && i > 0)
                result.append("", ]"");
            else
                result.append(']');
        }
        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_join,"    private static String js_join(Context cx, Scriptable thisObj,
                                  Object[] args)
    {
        long llength = getLengthProperty(cx, thisObj);
        int length = (int)llength;
        if (llength != length) {
            throw Context.reportRuntimeError1(
                ""msg.arraylength.too.big"", String.valueOf(llength));
        }
        // if no args, use "","" as separator
        String separator = (args.length < 1 || args[0] == Undefined.instance)
                           ? "",""
                           : ScriptRuntime.toString(args[0]);
        if (thisObj instanceof NativeArray) {
            NativeArray na = (NativeArray) thisObj;
            if (na.denseOnly) {
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < length; i++) {
                    if (i != 0) {
                        sb.append(separator);
                    }
                    if (i < na.dense.length) {
                        Object temp = na.dense[i];
                        if (temp != null && temp != Undefined.instance &&
                            temp != Scriptable.NOT_FOUND)
                        {
                            sb.append(ScriptRuntime.toString(temp));
                        }
                    }
                }
                return sb.toString();
            }
        }
        if (length == 0) {
            return """";
        }
        String[] buf = new String[length];
        int total_size = 0;
        for (int i = 0; i != length; i++) {
            Object temp = getElem(cx, thisObj, i);
            if (temp != null && temp != Undefined.instance) {
                String str = ScriptRuntime.toString(temp);
                total_size += str.length();
                buf[i] = str;
            }
        }
        total_size += (length - 1) * separator.length();
        StringBuffer sb = new StringBuffer(total_size);
        for (int i = 0; i != length; i++) {
            if (i != 0) {
                sb.append(separator);
            }
            String str = buf[i];
            if (str != null) {
                // str == null for undefined or null
                sb.append(str);
            }
        }
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_reverse,"    private static Scriptable js_reverse(Context cx, Scriptable thisObj,
                                         Object[] args)
    {
        if (thisObj instanceof NativeArray) {
            NativeArray na = (NativeArray) thisObj;
            if (na.denseOnly) {
                for (int i=0, j=((int)na.length)-1; i < j; i++,j--) {
                    Object temp = na.dense[i];
                    na.dense[i] = na.dense[j];
                    na.dense[j] = temp;
                }
                return thisObj;
            }
        }
        long len = getLengthProperty(cx, thisObj);

        long half = len / 2;
        for(long i=0; i < half; i++) {
            long j = len - i - 1;
            Object temp1 = getElem(cx, thisObj, i);
            Object temp2 = getElem(cx, thisObj, j);
            setElem(cx, thisObj, i, temp2);
            setElem(cx, thisObj, j, temp1);
        }
        return thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_sort,"    private static Scriptable js_sort(Context cx, Scriptable scope,
                                      Scriptable thisObj, Object[] args)
    {
        long length = getLengthProperty(cx, thisObj);

        if (length <= 1) { return thisObj; }

        Object compare;
        Object[] cmpBuf;

        if (args.length > 0 && Undefined.instance != args[0]) {
            // sort with given compare function
            compare = args[0];
            cmpBuf = new Object[2]; // Buffer for cmp arguments
        } else {
            // sort with default compare
            compare = null;
            cmpBuf = null;
        }
        if (thisObj instanceof NativeArray) {
            NativeArray na = (NativeArray) thisObj;
            if (na.denseOnly) {
                int ilength = (int) length;
                heapsort(cx, scope, na.dense, ilength, compare, cmpBuf);
                return thisObj;
            }
        }

        // Should we use the extended sort function, or the faster one?
        if (length >= Integer.MAX_VALUE) {
            heapsort_extended(cx, scope, thisObj, length, compare, cmpBuf);
        } else {
            int ilength = (int)length;
            // copy the JS array into a working array, so it can be
            // sorted cheaply.
            Object[] working = new Object[ilength];
            for (int i = 0; i != ilength; ++i) {
                working[i] = getElem(cx, thisObj, i);
            }

            heapsort(cx, scope, working, ilength, compare, cmpBuf);

            // copy the working array back into thisObj
            for (int i = 0; i != ilength; ++i) {
                setElem(cx, thisObj, i, working[i]);
            }
        }
        return thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,isBigger,"    private static boolean isBigger(Context cx, Scriptable scope,
                                    Object x, Object y,
                                    Object cmp, Object[] cmpBuf)
    {
        if (cmp == null) {
            if (cmpBuf != null) Kit.codeBug();
        } else {
            if (cmpBuf == null || cmpBuf.length != 2) Kit.codeBug();
        }

        Object undef = Undefined.instance;
        Object notfound = Scriptable.NOT_FOUND;

        // sort undefined to end
        if (y == undef || y == notfound) {
            return false; // x can not be bigger then undef
        } else if (x == undef || x == notfound) {
            return true; // y != undef here, so x > y
        }

        if (cmp == null) {
            // if no cmp function supplied, sort lexicographically",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,heapsort,"    private static void heapsort(Context cx, Scriptable scope,
                                 Object[] array, int length,
                                 Object cmp, Object[] cmpBuf)
    {
        if (length <= 1) Kit.codeBug();

        // Build heap
        for (int i = length / 2; i != 0;) {
            --i;
            Object pivot = array[i];
            heapify(cx, scope, pivot, array, i, length, cmp, cmpBuf);
        }

        // Sort heap
        for (int i = length; i != 1;) {
            --i;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,heapify,"    private static void heapify(Context cx, Scriptable scope,
                                Object pivot, Object[] array, int i, int end,
                                Object cmp, Object[] cmpBuf)
    {
        for (;;) {
            int child = i * 2 + 1;
            if (child >= end) {
                break;
            }
            Object childVal = array[child];
            if (child + 1 < end) {
                Object nextVal = array[child + 1];
                if (isBigger(cx, scope, nextVal, childVal, cmp, cmpBuf)) {
                    ++child; childVal = nextVal;
                }
            }
            if (!isBigger(cx, scope, childVal, pivot, cmp, cmpBuf)) {
                break;
            }
            array[i] = childVal;
            i = child;
        }
        array[i] = pivot;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,heapsort_extended,"    private static void heapsort_extended(Context cx, Scriptable scope,
                                          Scriptable target, long length,
                                          Object cmp, Object[] cmpBuf)
    {
        if (length <= 1) Kit.codeBug();

        // Build heap
        for (long i = length / 2; i != 0;) {
            --i;
            Object pivot = getElem(cx, target, i);
            heapify_extended(cx, scope, pivot, target, i, length, cmp, cmpBuf);
        }

        // Sort heap
        for (long i = length; i != 1;) {
            --i;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,heapify_extended,"    private static void heapify_extended(Context cx, Scriptable scope,
                                         Object pivot, Scriptable target,
                                         long i, long end,
                                         Object cmp, Object[] cmpBuf)
    {
        for (;;) {
            long child = i * 2 + 1;
            if (child >= end) {
                break;
            }
            Object childVal = getElem(cx, target, child);
            if (child + 1 < end) {
                Object nextVal = getElem(cx, target, child + 1);
                if (isBigger(cx, scope, nextVal, childVal, cmp, cmpBuf)) {
                    ++child; childVal = nextVal;
                }
            }
            if (!isBigger(cx, scope, childVal, pivot, cmp, cmpBuf)) {
                break;
            }
            setElem(cx, target, i, childVal);
            i = child;
        }
        setElem(cx, target, i, pivot);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_push,"    private static Object js_push(Context cx, Scriptable thisObj,
                                  Object[] args)
    {
        if (thisObj instanceof NativeArray) {
            NativeArray na = (NativeArray) thisObj;
            if (na.denseOnly &&
                na.ensureCapacity((int) na.length + args.length))
            {
                for (int i = 0; i < args.length; i++) {
                    na.dense[(int)na.length++] = args[i];
                }
                return ScriptRuntime.wrapNumber(na.length);
            }
        }
        long length = getLengthProperty(cx, thisObj);
        for (int i = 0; i < args.length; i++) {
            setElem(cx, thisObj, length + i, args[i]);
        }

        length += args.length;
        Object lengthObj = setLengthProperty(cx, thisObj, length);

        /*
         * If JS1.2, follow Perl4 by returning the last thing pushed.
         * Otherwise, return the new array length.
         */
        if (cx.getLanguageVersion() == Context.VERSION_1_2)
            // if JS1.2 && no arguments, return undefined.",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_pop,"    private static Object js_pop(Context cx, Scriptable thisObj,
                                 Object[] args)
    {
        Object result;
        if (thisObj instanceof NativeArray) {
            NativeArray na = (NativeArray) thisObj;
            if (na.denseOnly && na.length > 0) {
                na.length--;
                result = na.dense[(int)na.length];
                na.dense[(int)na.length] = NOT_FOUND;
                return result;
            }
        }
        long length = getLengthProperty(cx, thisObj);
        if (length > 0) {
            length--;

            // Get the to-be-deleted property's value.
            result = getElem(cx, thisObj, length);

            // We don't need to delete the last property, because
            // setLength does that for us.
        } else {
            result = Undefined.instance;
        }
        // necessary to match js even when length < 0; js pop will give a
        // length property to any target it is called on.
        setLengthProperty(cx, thisObj, length);

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_shift,"    private static Object js_shift(Context cx, Scriptable thisObj,
                                   Object[] args)
    {
        if (thisObj instanceof NativeArray) {
            NativeArray na = (NativeArray) thisObj;
            if (na.denseOnly && na.length > 0) {
                na.length--;
                Object result = na.dense[0];
                System.arraycopy(na.dense, 1, na.dense, 0, (int)na.length);
                na.dense[(int)na.length] = NOT_FOUND;
                return result;
            }
        }
        Object result;
        long length = getLengthProperty(cx, thisObj);
        if (length > 0) {
            long i = 0;
            length--;

            // Get the to-be-deleted property's value.
            result = getElem(cx, thisObj, i);

            /*
             * Slide down the array above the first element.  Leave i
             * set to point to the last element.
             */
            if (length > 0) {
                for (i = 1; i <= length; i++) {
                    Object temp = getElem(cx, thisObj, i);
                    setElem(cx, thisObj, i - 1, temp);
                }
            }
            // We don't need to delete the last property, because
            // setLength does that for us.
        } else {
            result = Undefined.instance;
        }
        setLengthProperty(cx, thisObj, length);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_unshift,"    private static Object js_unshift(Context cx, Scriptable thisObj,
                                     Object[] args)
    {
        if (thisObj instanceof NativeArray) {
            NativeArray na = (NativeArray) thisObj;
            if (na.denseOnly &&
                na.ensureCapacity((int)na.length + args.length))
            {
                System.arraycopy(na.dense, 0, na.dense, args.length,
                                 (int) na.length);
                for (int i = 0; i < args.length; i++) {
                    na.dense[i] = args[i];
                }
                na.length += args.length;
                return ScriptRuntime.wrapNumber(na.length);
            }
        }
        long length = getLengthProperty(cx, thisObj);
        int argc = args.length;

        if (args.length > 0) {
            /*  Slide up the array to make room for args at the bottom */
            if (length > 0) {
                for (long last = length - 1; last >= 0; last--) {
                    Object temp = getElem(cx, thisObj, last);
                    setElem(cx, thisObj, last + argc, temp);
                }
            }

            /* Copy from argv to the bottom of the array. */
            for (int i = 0; i < args.length; i++) {
                setElem(cx, thisObj, i, args[i]);
            }

            /* Follow Perl by returning the new array length. */
            length += args.length;
            return setLengthProperty(cx, thisObj, length);
        }
        return ScriptRuntime.wrapNumber(length);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_splice,"    private static Object js_splice(Context cx, Scriptable scope,
                                    Scriptable thisObj, Object[] args)
    {
    	NativeArray na = null;
    	boolean denseMode = false;
        if (thisObj instanceof NativeArray) {
            na = (NativeArray) thisObj;
            denseMode = na.denseOnly;
        }

        /* create an empty Array to return. */
        scope = getTopLevelScope(scope);
        int argc = args.length;
        if (argc == 0)
            return ScriptRuntime.newObject(cx, scope, ""Array"", null);
        long length = getLengthProperty(cx, thisObj);

        /* Convert the first argument into a starting index. */
        long begin = toSliceIndex(ScriptRuntime.toInteger(args[0]), length);
        argc--;

        /* Convert the second argument into count */
        long count;
        if (args.length == 1) {
            count = length - begin;
        } else {
            double dcount = ScriptRuntime.toInteger(args[1]);
            if (dcount < 0) {
                count = 0;
            } else if (dcount > (length - begin)) {
                count = length - begin;
            } else {
                count = (long)dcount;
            }
            argc--;
        }

        long end = begin + count;

        /* If there are elements to remove, put them into the return value. */
        Object result;
        if (count != 0) {
            if (count == 1
                && (cx.getLanguageVersion() == Context.VERSION_1_2))
            {
                /*
                 * JS lacks ""list context"", whereby in Perl one turns the
                 * single scalar that's spliced out into an array just by
                 * assigning it to @single instead of $single, or by using it
                 * as Perl push's first argument, for instance.
                 *
                 * JS1.2 emulated Perl too closely and returned a non-Array for
                 * the single-splice-out case, requiring callers to test and
                 * wrap in [] if necessary.  So JS1.3, default, and other
                 * versions all return an array of length 1 for uniformity.
                 */
                result = getElem(cx, thisObj, begin);
            } else {
            	if (denseMode) {
                    int intLen = (int) (end - begin);
                    Object[] copy = new Object[intLen];
                    System.arraycopy(na.dense, (int) begin, copy, 0, intLen);
                    result = cx.newArray(scope, copy);
            	} else {
            		Scriptable resultArray = ScriptRuntime.newObject(cx, scope,
                        ""Array"", null);
                    for (long last = begin; last != end; last++) {
                        Object temp = getElem(cx, thisObj, last);
                        setElem(cx, resultArray, last - begin, temp);
                    }
                    result = resultArray;
            	}
            }
        } else { // (count == 0)
        	if (cx.getLanguageVersion() == Context.VERSION_1_2) {
                /* Emulate C JS1.2; if no elements are removed, return undefined. */
                result = Undefined.instance;
            } else {
            	result = ScriptRuntime.newObject(cx, scope, ""Array"", null);
        	}
        }

        /* Find the direction (up or down) to copy and make way for argv. */
        long delta = argc - count;
        if (denseMode && length + delta < Integer.MAX_VALUE &&
            na.ensureCapacity((int) (length + delta)))
        {
            System.arraycopy(na.dense, (int) end, na.dense,
                             (int) (begin + argc), (int) (length - end));
            if (argc > 0) {
                System.arraycopy(args, 2, na.dense, (int) begin, argc);
            }
            if (delta < 0) {
                Arrays.fill(na.dense, (int) (length + delta), (int) length,
                            NOT_FOUND);
            }
            na.length = length + delta;
            return result;
        }

        if (delta > 0) {
            for (long last = length - 1; last >= end; last--) {
                Object temp = getElem(cx, thisObj, last);
                setElem(cx, thisObj, last + delta, temp);
            }
        } else if (delta < 0) {
            for (long last = end; last < length; last++) {
                Object temp = getElem(cx, thisObj, last);
                setElem(cx, thisObj, last + delta, temp);
            }
        }

        /* Copy from argv into the hole to complete the splice. */
        int argoffset = args.length - argc;
        for (int i = 0; i < argc; i++) {
            setElem(cx, thisObj, begin + i, args[i + argoffset]);
        }

        /* Update length in case we deleted elements from the end. */
        setLengthProperty(cx, thisObj, length + delta);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_concat,"    private static Scriptable js_concat(Context cx, Scriptable scope,
                                        Scriptable thisObj, Object[] args)
    {
        // create an empty Array to return.
        scope = getTopLevelScope(scope);
        Function ctor = ScriptRuntime.getExistingCtor(cx, scope, ""Array"");
        Scriptable result = ctor.construct(cx, scope, ScriptRuntime.emptyArgs);
        if (thisObj instanceof NativeArray && result instanceof NativeArray) {
            NativeArray denseThis = (NativeArray) thisObj;
            NativeArray denseResult = (NativeArray) result;
            if (denseThis.denseOnly && denseResult.denseOnly) {
                // First calculate length of resulting array
                boolean canUseDense = true;
                int length = (int) denseThis.length;
                for (int i = 0; i < args.length && canUseDense; i++) {
                    if (ScriptRuntime.instanceOf(args[i], ctor, cx)) {
                        // only try to use dense approach for Array-like
                        // objects that are actually NativeArrays
                        canUseDense = args[i] instanceof NativeArray;
                        length += ((NativeArray) args[i]).length;
                    } else {
                        length++;
                    }
                }
                if (canUseDense && denseResult.ensureCapacity(length)) {
                    System.arraycopy(denseThis.dense, 0, denseResult.dense,
                                     0, (int) denseThis.length);
                    int cursor = (int) denseThis.length;
                    for (int i = 0; i < args.length && canUseDense; i++) {
                        if (args[i] instanceof NativeArray) {
                            NativeArray arg = (NativeArray) args[i];
                            System.arraycopy(arg.dense, 0,
                                    denseResult.dense, cursor,
                                    (int)arg.length);
                            cursor += (int)arg.length;
                        } else {
                            denseResult.dense[cursor++] = args[i];
                        }
                    }
                    denseResult.length = length;
                    return result;
                }
            }
        }

        long length;
        long slot = 0;

        /* Put the target in the result array; only add it as an array
         * if it looks like one.
         */
        if (ScriptRuntime.instanceOf(thisObj, ctor, cx)) {
            length = getLengthProperty(cx, thisObj);

            // Copy from the target object into the result
            for (slot = 0; slot < length; slot++) {
                Object temp = getElem(cx, thisObj, slot);
                setElem(cx, result, slot, temp);
            }
        } else {
            setElem(cx, result, slot++, thisObj);
        }

        /* Copy from the arguments into the result.  If any argument
         * has a numeric length property, treat it as an array and add
         * elements separately; otherwise, just copy the argument.
         */
        for (int i = 0; i < args.length; i++) {
            if (ScriptRuntime.instanceOf(args[i], ctor, cx)) {
                // ScriptRuntime.instanceOf => instanceof Scriptable
                Scriptable arg = (Scriptable)args[i];
                length = getLengthProperty(cx, arg);
                for (long j = 0; j < length; j++, slot++) {
                    Object temp = getElem(cx, arg, j);
                    setElem(cx, result, slot, temp);
                }
            } else {
                setElem(cx, result, slot++, args[i]);
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,js_slice,"    private Scriptable js_slice(Context cx, Scriptable thisObj,
                                Object[] args)
    {
        Scriptable scope = getTopLevelScope(this);
        Scriptable result = ScriptRuntime.newObject(cx, scope, ""Array"", null);
        long length = getLengthProperty(cx, thisObj);

        long begin, end;
        if (args.length == 0) {
            begin = 0;
            end = length;
        } else {
            begin = toSliceIndex(ScriptRuntime.toInteger(args[0]), length);
            if (args.length == 1) {
                end = length;
            } else {
                end = toSliceIndex(ScriptRuntime.toInteger(args[1]), length);
            }
        }

        for (long slot = begin; slot < end; slot++) {
            Object temp = getElem(cx, thisObj, slot);
            setElem(cx, result, slot - begin, temp);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,toSliceIndex,"    private static long toSliceIndex(double value, long length) {
        long result;
        if (value < 0.0) {
            if (value + length < 0.0) {
                result = 0;
            } else {
                result = (long)(value + length);
            }
        } else if (value > length) {
            result = length;
        } else {
            result = (long)value;
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,indexOfHelper,"    private Object indexOfHelper(Context cx, Scriptable thisObj,
                                 Object[] args, boolean isLast)
    {
        Object compareTo = args.length > 0 ? args[0] : Undefined.instance;
        long length = getLengthProperty(cx, thisObj);
        long start;
        if (isLast) {
            // lastIndexOf
            /*
             * From http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:lastIndexOf
             * The index at which to start searching backwards. Defaults to the
             * array's length, i.e. the whole array will be searched. If the
             * index is greater than or equal to the length of the array, the
             * whole array will be searched. If negative, it is taken as the
             * offset from the end of the array. Note that even when the index
             * is negative, the array is still searched from back to front. If
             * the calculated index is less than 0, -1 is returned, i.e. the
             * array will not be searched.
             */
            if (args.length < 2) {
                // default
                start = length-1;
            } else {
                start = ScriptRuntime.toInt32(ScriptRuntime.toNumber(args[1]));
                if (start >= length)
                    start = length-1;
                else if (start < 0)
                    start += length;
                // Note that start may be negative, but that's okay
                // as the result of -1 will fall out from the code below
            }
        } else {
            // indexOf
            /*
             * From http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:indexOf
             * The index at which to begin the search. Defaults to 0, i.e. the
             * whole array will be searched. If the index is greater than or
             * equal to the length of the array, -1 is returned, i.e. the array
             * will not be searched. If negative, it is taken as the offset from
             * the end of the array. Note that even when the index is negative,
             * the array is still searched from front to back. If the calculated
             * index is less than 0, the whole array will be searched.
             */
            if (args.length < 2) {
                // default
                start = 0;
            } else {
                start = ScriptRuntime.toInt32(ScriptRuntime.toNumber(args[1]));
                if (start < 0) {
                    start += length;
                    if (start < 0)
                        start = 0;
                }
                // Note that start may be > length-1, but that's okay
                // as the result of -1 will fall out from the code below
            }
        }
        if (thisObj instanceof NativeArray) {
            NativeArray na = (NativeArray) thisObj;
            if (na.denseOnly) {
                if (isLast) {
                  for (int i=(int)start; i >= 0; i--) {
                      if (na.dense[i] != Scriptable.NOT_FOUND &&
                          ScriptRuntime.shallowEq(na.dense[i], compareTo))
                      {
                          return new Long(i);
                      }
                  }
                } else {
                  for (int i=(int)start; i < length; i++) {
                      if (na.dense[i] != Scriptable.NOT_FOUND &&
                          ScriptRuntime.shallowEq(na.dense[i], compareTo))
                      {
                          return new Long(i);
                      }
                  }
                }
                return NEGATIVE_ONE;
            }
        }
        if (isLast) {
          for (long i=start; i >= 0; i--) {
              if (ScriptRuntime.shallowEq(getElem(cx, thisObj, i), compareTo)) {
                  return new Long(i);
              }
          }
        } else {
          for (long i=start; i < length; i++) {
              if (ScriptRuntime.shallowEq(getElem(cx, thisObj, i), compareTo)) {
                  return new Long(i);
              }
          }
        }
        return NEGATIVE_ONE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,iterativeMethod,"    private Object iterativeMethod(Context cx, int id, Scriptable scope, 
                                   Scriptable thisObj, Object[] args)
    {
        Object callbackArg = args.length > 0 ? args[0] : Undefined.instance;
        if (callbackArg == null || !(callbackArg instanceof Function)) {
            throw ScriptRuntime.notFunctionError(
                     ScriptRuntime.toString(callbackArg));
        }
        Function f = (Function) callbackArg;
        Scriptable parent = ScriptableObject.getTopLevelScope(f);
        Scriptable thisArg;
        if (args.length < 2 || args[1] == null || args[1] == Undefined.instance)
        {
            thisArg = parent;
        } else {
            thisArg = ScriptRuntime.toObject(cx, scope, args[1]);
        }
        long length = getLengthProperty(cx, thisObj);
        Scriptable array = ScriptRuntime.newObject(cx, scope, ""Array"", null);
        long j=0;
        for (long i=0; i < length; i++) {
            Object[] innerArgs = new Object[3];
            Object elem = (i > Integer.MAX_VALUE)
                ? ScriptableObject.getProperty(thisObj, Long.toString(i))
                : ScriptableObject.getProperty(thisObj, (int)i);
            if (elem == Scriptable.NOT_FOUND) {
                continue;
            }
            innerArgs[0] = elem;
            innerArgs[1] = new Long(i);
            innerArgs[2] = thisObj;
            Object result = f.call(cx, parent, thisArg, innerArgs);
            switch (id) {
              case Id_every:
                if (!ScriptRuntime.toBoolean(result))
                    return Boolean.FALSE;
                break;
              case Id_filter:
                if (ScriptRuntime.toBoolean(result))
                  setElem(cx, array, j++, innerArgs[0]);
                break;
              case Id_forEach:
                break;
              case Id_map:
                setElem(cx, array, i, result);
                break;
              case Id_some:
                if (ScriptRuntime.toBoolean(result))
                    return Boolean.TRUE;
                break;
            }
        }
        switch (id) {
          case Id_every:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeArray.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2005-09-26 15:47:42 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 3: c=s.charAt(0);
                if (c=='m') { if (s.charAt(2)=='p' && s.charAt(1)=='a') {id=Id_map; break L0;} }
                else if (c=='p') { if (s.charAt(2)=='p' && s.charAt(1)=='o') {id=Id_pop; break L0;} }
                break L;
            case 4: switch (s.charAt(2)) {
                case 'i': X=""join"";id=Id_join; break L;
                case 'm': X=""some"";id=Id_some; break L;
                case 'r': X=""sort"";id=Id_sort; break L;
                case 's': X=""push"";id=Id_push; break L;
                } break L;
            case 5: c=s.charAt(1);
                if (c=='h') { X=""shift"";id=Id_shift; }
                else if (c=='l') { X=""slice"";id=Id_slice; }
                else if (c=='v') { X=""every"";id=Id_every; }
                break L;
            case 6: c=s.charAt(0);
                if (c=='c') { X=""concat"";id=Id_concat; }
                else if (c=='f') { X=""filter"";id=Id_filter; }
                else if (c=='s') { X=""splice"";id=Id_splice; }
                break L;
            case 7: switch (s.charAt(0)) {
                case 'f': X=""forEach"";id=Id_forEach; break L;
                case 'i': X=""indexOf"";id=Id_indexOf; break L;
                case 'r': X=""reverse"";id=Id_reverse; break L;
                case 'u': X=""unshift"";id=Id_unshift; break L;
                } break L;
            case 8: c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
                break L;
            case 11: c=s.charAt(0);
                if (c=='c') { X=""constructor"";id=Id_constructor; }
                else if (c=='l') { X=""lastIndexOf"";id=Id_lastIndexOf; }
                break L;
            case 14: X=""toLocaleString"";id=Id_toLocaleString; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeBoolean.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeBoolean obj = new NativeBoolean(false);
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeBoolean.java,getClassName,"    public String getClassName()
    {
        return ""Boolean"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeBoolean.java,getDefaultValue,"    public Object getDefaultValue(Class typeHint) {
        // This is actually non-ECMA, but will be proposed
        // as a change in round 2.
        if (typeHint == ScriptRuntime.BooleanClass)
            return ScriptRuntime.wrapBoolean(booleanValue);
        return super.getDefaultValue(typeHint);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeBoolean.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=1; s=""constructor""; break;
          case Id_toString:    arity=0; s=""toString"";    break;
          case Id_toSource:    arity=0; s=""toSource"";    break;
          case Id_valueOf:     arity=0; s=""valueOf"";     break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(BOOLEAN_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeBoolean.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(BOOLEAN_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();

        if (id == Id_constructor) {
            boolean b;
            if (args.length == 0) {
                b = false;
            } else {
                b = args[0] instanceof ScriptableObject &&
                        ((ScriptableObject) args[0]).avoidObjectDetection()
                    ? true
                    : ScriptRuntime.toBoolean(args[0]);
            }
            if (thisObj == null) {
                // new Boolean(val) creates a new boolean object.
                return new NativeBoolean(b);
            }
            // Boolean(val) converts val to a boolean.
            return ScriptRuntime.wrapBoolean(b);
        }

        // The rest of Boolean.prototype methods require thisObj to be Boolean

        if (!(thisObj instanceof NativeBoolean))
            throw incompatibleCallError(f);
        boolean value = ((NativeBoolean)thisObj).booleanValue;

        switch (id) {

          case Id_toString:
            return value ? ""true"" : ""false"";

          case Id_toSource:
            return value ? ""(new Boolean(true))"" : ""(new Boolean(false))"";

          case Id_valueOf:
            return ScriptRuntime.wrapBoolean(value);
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeBoolean.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:15:31 EDT
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==7) { X=""valueOf"";id=Id_valueOf; }
            else if (s_length==8) {
                c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
            }
            else if (s_length==11) { X=""constructor"";id=Id_constructor; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeCall.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeCall obj = new NativeCall();
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeCall.java,getClassName,"    public String getClassName()
    {
        return ""Call"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeCall.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        return s.equals(""constructor"") ? Id_constructor : 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeCall.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        if (id == Id_constructor) {
            arity=1; s=""constructor"";
        } else {
            throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(CALL_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeCall.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(CALL_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        if (id == Id_constructor) {
            if (thisObj != null) {
                throw Context.reportRuntimeError1(""msg.only.from.new"", ""Call"");
            }
            ScriptRuntime.checkDeprecated(cx, ""Call"");
            NativeCall result = new NativeCall();
            result.setPrototype(getObjectPrototype(scope));
            return result;
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeDate obj = new NativeDate();
        // Set the value of the prototype Date to NaN ('invalid date');
        obj.date = ScriptRuntime.NaN;
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,getClassName,"    public String getClassName()
    {
        return ""Date"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,getDefaultValue,"    public Object getDefaultValue(Class typeHint)
    {
        if (typeHint == null)
            typeHint = ScriptRuntime.StringClass;
        return super.getDefaultValue(typeHint);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,getJSTimeValue,"    double getJSTimeValue()
    {
        return date;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,fillConstructorProperties,"    protected void fillConstructorProperties(IdFunctionObject ctor)
    {
        addIdFunctionProperty(ctor, DATE_TAG, ConstructorId_now,
                              ""now"", 0);
        addIdFunctionProperty(ctor, DATE_TAG, ConstructorId_parse,
                              ""parse"", 1);
        addIdFunctionProperty(ctor, DATE_TAG, ConstructorId_UTC,
                              ""UTC"", 1);
        super.fillConstructorProperties(ctor);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor:        arity=1; s=""constructor"";        break;
          case Id_toString:           arity=0; s=""toString"";           break;
          case Id_toTimeString:       arity=0; s=""toTimeString"";       break;
          case Id_toDateString:       arity=0; s=""toDateString"";       break;
          case Id_toLocaleString:     arity=0; s=""toLocaleString"";     break;
          case Id_toLocaleTimeString: arity=0; s=""toLocaleTimeString""; break;
          case Id_toLocaleDateString: arity=0; s=""toLocaleDateString""; break;
          case Id_toUTCString:        arity=0; s=""toUTCString"";        break;
          case Id_toSource:           arity=0; s=""toSource"";           break;
          case Id_valueOf:            arity=0; s=""valueOf"";            break;
          case Id_getTime:            arity=0; s=""getTime"";            break;
          case Id_getYear:            arity=0; s=""getYear"";            break;
          case Id_getFullYear:        arity=0; s=""getFullYear"";        break;
          case Id_getUTCFullYear:     arity=0; s=""getUTCFullYear"";     break;
          case Id_getMonth:           arity=0; s=""getMonth"";           break;
          case Id_getUTCMonth:        arity=0; s=""getUTCMonth"";        break;
          case Id_getDate:            arity=0; s=""getDate"";            break;
          case Id_getUTCDate:         arity=0; s=""getUTCDate"";         break;
          case Id_getDay:             arity=0; s=""getDay"";             break;
          case Id_getUTCDay:          arity=0; s=""getUTCDay"";          break;
          case Id_getHours:           arity=0; s=""getHours"";           break;
          case Id_getUTCHours:        arity=0; s=""getUTCHours"";        break;
          case Id_getMinutes:         arity=0; s=""getMinutes"";         break;
          case Id_getUTCMinutes:      arity=0; s=""getUTCMinutes"";      break;
          case Id_getSeconds:         arity=0; s=""getSeconds"";         break;
          case Id_getUTCSeconds:      arity=0; s=""getUTCSeconds"";      break;
          case Id_getMilliseconds:    arity=0; s=""getMilliseconds"";    break;
          case Id_getUTCMilliseconds: arity=0; s=""getUTCMilliseconds""; break;
          case Id_getTimezoneOffset:  arity=0; s=""getTimezoneOffset"";  break;
          case Id_setTime:            arity=1; s=""setTime"";            break;
          case Id_setMilliseconds:    arity=1; s=""setMilliseconds"";    break;
          case Id_setUTCMilliseconds: arity=1; s=""setUTCMilliseconds""; break;
          case Id_setSeconds:         arity=2; s=""setSeconds"";         break;
          case Id_setUTCSeconds:      arity=2; s=""setUTCSeconds"";      break;
          case Id_setMinutes:         arity=3; s=""setMinutes"";         break;
          case Id_setUTCMinutes:      arity=3; s=""setUTCMinutes"";      break;
          case Id_setHours:           arity=4; s=""setHours"";           break;
          case Id_setUTCHours:        arity=4; s=""setUTCHours"";        break;
          case Id_setDate:            arity=1; s=""setDate"";            break;
          case Id_setUTCDate:         arity=1; s=""setUTCDate"";         break;
          case Id_setMonth:           arity=2; s=""setMonth"";           break;
          case Id_setUTCMonth:        arity=2; s=""setUTCMonth"";        break;
          case Id_setFullYear:        arity=3; s=""setFullYear"";        break;
          case Id_setUTCFullYear:     arity=3; s=""setUTCFullYear"";     break;
          case Id_setYear:            arity=1; s=""setYear"";            break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(DATE_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(DATE_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case ConstructorId_now:
            return ScriptRuntime.wrapNumber(now());

          case ConstructorId_parse:
            {
                String dataStr = ScriptRuntime.toString(args, 0);
                return ScriptRuntime.wrapNumber(date_parseString(dataStr));
            }

          case ConstructorId_UTC:
            return ScriptRuntime.wrapNumber(jsStaticFunction_UTC(args));

          case Id_constructor:
            {
                // if called as a function, just return a string
                // representing the current time.
                if (thisObj != null)
                    return date_format(now(), Id_toString);
                return jsConstructor(args);
            }
        }

        // The rest of Date.prototype methods require thisObj to be Date

        if (!(thisObj instanceof NativeDate))
            throw incompatibleCallError(f);
        NativeDate realThis = (NativeDate)thisObj;
        double t = realThis.date;

        switch (id) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,Day,"    private static double Day(double t)
    {
        return Math.floor(t / msPerDay);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,TimeWithinDay,"    private static double TimeWithinDay(double t)
    {
        double result;
        result = t % msPerDay;
        if (result < 0)
            result += msPerDay;
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,IsLeapYear,"    private static boolean IsLeapYear(int year)
    {
        return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,DayFromYear,"    private static double DayFromYear(double y)
    {
        return ((365 * ((y)-1970) + Math.floor(((y)-1969)/4.0)
                 - Math.floor(((y)-1901)/100.0) + Math.floor(((y)-1601)/400.0)));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,TimeFromYear,"    private static double TimeFromYear(double y)
    {
        return DayFromYear(y) * msPerDay;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,YearFromTime,"    private static int YearFromTime(double t)
    {
        int lo = (int) Math.floor((t / msPerDay) / 366) + 1970;
        int hi = (int) Math.floor((t / msPerDay) / 365) + 1970;
        int mid;

        /* above doesn't work for negative dates... */
        if (hi < lo) {
            int temp = lo;
            lo = hi;
            hi = temp;
        }

        /* Use a simple binary search algorithm to find the right
           year.  This seems like brute force... but the computation
           of hi and lo years above lands within one year of the
           correct answer for years within a thousand years of
           1970; the loop below only requires six iterations
           for year 270000. */
        while (hi > lo) {
            mid = (hi + lo) / 2;
            if (TimeFromYear(mid) > t) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
                if (TimeFromYear(lo) > t) {
                    return mid;
                }
            }
        }
        return lo;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,DayFromMonth,"    private static double DayFromMonth(int m, int year)
    {
        int day = m * 30;

        if (m >= 7) { day += m / 2 - 1; }
        else if (m >= 2) { day += (m - 1) / 2 - 1; }
        else { day += m; }

        if (m >= 2 && IsLeapYear(year)) { ++day; }

        return day;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,MonthFromTime,"    private static int MonthFromTime(double t)
    {
        int year = YearFromTime(t);
        int d = (int)(Day(t) - DayFromYear(year));

        d -= 31 + 28;
        if (d < 0) {
            return (d < -28) ? 0 : 1;
        }

        if (IsLeapYear(year)) {
            if (d == 0)
                return 1; // 29 February
            --d;
        }

        // d: date count from 1 March
        int estimate = d / 30; // approx number of month since March
        int mstart;
        switch (estimate) {
            case 0: return 2;
            case 1: mstart = 31; break;
            case 2: mstart = 31+30; break;
            case 3: mstart = 31+30+31; break;
            case 4: mstart = 31+30+31+30; break;
            case 5: mstart = 31+30+31+30+31; break;
            case 6: mstart = 31+30+31+30+31+31; break;
            case 7: mstart = 31+30+31+30+31+31+30; break;
            case 8: mstart = 31+30+31+30+31+31+30+31; break;
            case 9: mstart = 31+30+31+30+31+31+30+31+30; break;
            case 10: return 11; //Late december
            default: throw Kit.codeBug();
        }
        // if d < mstart then real month since March == estimate - 1
        return (d >= mstart) ? estimate + 2 : estimate + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,DateFromTime,"    private static int DateFromTime(double t)
    {
        int year = YearFromTime(t);
        int d = (int)(Day(t) - DayFromYear(year));

        d -= 31 + 28;
        if (d < 0) {
            return (d < -28) ? d + 31 + 28 + 1 : d + 28 + 1;
        }

        if (IsLeapYear(year)) {
            if (d == 0)
                return 29; // 29 February
            --d;
        }

        // d: date count from 1 March
        int mdays, mstart;
        switch (d / 30) { // approx number of month since March
            case 0: return d + 1;
            case 1: mdays = 31; mstart = 31; break;
            case 2: mdays = 30; mstart = 31+30; break;
            case 3: mdays = 31; mstart = 31+30+31; break;
            case 4: mdays = 30; mstart = 31+30+31+30; break;
            case 5: mdays = 31; mstart = 31+30+31+30+31; break;
            case 6: mdays = 31; mstart = 31+30+31+30+31+31; break;
            case 7: mdays = 30; mstart = 31+30+31+30+31+31+30; break;
            case 8: mdays = 31; mstart = 31+30+31+30+31+31+30+31; break;
            case 9: mdays = 30; mstart = 31+30+31+30+31+31+30+31+30; break;
            case 10:
                return d - (31+30+31+30+31+31+30+31+30) + 1; //Late december
            default: throw Kit.codeBug();
        }
        d -= mstart;
        if (d < 0) {
            // wrong estimate: sfhift to previous month
            d += mdays;
        }
        return d + 1;
     }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,WeekDay,"    private static int WeekDay(double t)
    {
        double result;
        result = Day(t) + 4;
        result = result % 7;
        if (result < 0)
            result += 7;
        return (int) result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,now,"    private static double now()
    {
        return System.currentTimeMillis();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,DaylightSavingTA,"    private static double DaylightSavingTA(double t)
    {
        // Another workaround!  The JRE doesn't seem to know about DST
        // before year 1 AD, so we map to equivalent dates for the
        // purposes of finding dst.  To be safe, we do this for years
        // outside 1970-2038.
        if (t < 0.0 || t > 2145916800000.0) {
            int year = EquivalentYear(YearFromTime(t));
            double day = MakeDay(year, MonthFromTime(t), DateFromTime(t));
            t = MakeDate(day, TimeWithinDay(t));
        }
        if (!TZO_WORKAROUND) {
            Date date = new Date((long) t);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,EquivalentYear,"    private static int EquivalentYear(int year)
    {
        int day = (int) DayFromYear(year) + 4;
        day = day % 7;
        if (day < 0)
            day += 7;
        // Years and leap years on which Jan 1 is a Sunday, Monday, etc.
        if (IsLeapYear(year)) {
            switch (day) {
                case 0: return 1984;
                case 1: return 1996;
                case 2: return 1980;
                case 3: return 1992;
                case 4: return 1976;
                case 5: return 1988;
                case 6: return 1972;
            }
        } else {
            switch (day) {
                case 0: return 1978;
                case 1: return 1973;
                case 2: return 1974;
                case 3: return 1975;
                case 4: return 1981;
                case 5: return 1971;
                case 6: return 1977;
            }
        }
        // Unreachable
        throw Kit.codeBug();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,LocalTime,"    private static double LocalTime(double t)
    {
        return t + LocalTZA + DaylightSavingTA(t);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,internalUTC,"    private static double internalUTC(double t)
    {
        return t - LocalTZA - DaylightSavingTA(t - LocalTZA);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,HourFromTime,"    private static int HourFromTime(double t)
    {
        double result;
        result = Math.floor(t / msPerHour) % HoursPerDay;
        if (result < 0)
            result += HoursPerDay;
        return (int) result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,MinFromTime,"    private static int MinFromTime(double t)
    {
        double result;
        result = Math.floor(t / msPerMinute) % MinutesPerHour;
        if (result < 0)
            result += MinutesPerHour;
        return (int) result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,SecFromTime,"    private static int SecFromTime(double t)
    {
        double result;
        result = Math.floor(t / msPerSecond) % SecondsPerMinute;
        if (result < 0)
            result += SecondsPerMinute;
        return (int) result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,msFromTime,"    private static int msFromTime(double t)
    {
        double result;
        result =  t % msPerSecond;
        if (result < 0)
            result += msPerSecond;
        return (int) result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,MakeTime,"    private static double MakeTime(double hour, double min,
                                   double sec, double ms)
    {
        return ((hour * MinutesPerHour + min) * SecondsPerMinute + sec)
            * msPerSecond + ms;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,MakeDay,"    private static double MakeDay(double year, double month, double date)
    {
        year += Math.floor(month / 12);

        month = month % 12;
        if (month < 0)
            month += 12;

        double yearday = Math.floor(TimeFromYear(year) / msPerDay);
        double monthday = DayFromMonth((int)month, (int)year);

        return yearday + monthday + date - 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,MakeDate,"    private static double MakeDate(double day, double time)
    {
        return day * msPerDay + time;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,TimeClip,"    private static double TimeClip(double d)
    {
        if (d != d ||
            d == Double.POSITIVE_INFINITY ||
            d == Double.NEGATIVE_INFINITY ||
            Math.abs(d) > HalfTimeDomain)
        {
            return ScriptRuntime.NaN;
        }
        if (d > 0.0)
            return Math.floor(d + 0.);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,date_msecFromDate,"    private static double date_msecFromDate(double year, double mon,
                                            double mday, double hour,
                                            double min, double sec,
                                            double msec)
    {
        double day;
        double time;
        double result;

        day = MakeDay(year, mon, mday);
        time = MakeTime(hour, min, sec, msec);
        result = MakeDate(day, time);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,date_msecFromArgs,"    private static double date_msecFromArgs(Object[] args)
    {
        double array[] = new double[MAXARGS];
        int loop;
        double d;

        for (loop = 0; loop < MAXARGS; loop++) {
            if (loop < args.length) {
                d = ScriptRuntime.toNumber(args[loop]);
                if (d != d || Double.isInfinite(d)) {
                    return ScriptRuntime.NaN;
                }
                array[loop] = ScriptRuntime.toInteger(args[loop]);
            } else {
                if (loop == 2) {
                    array[loop] = 1; /* Default the date argument to 1. */
                } else {
                    array[loop] = 0;
                }
            }
        }

        /* adjust 2-digit years into the 20th century */
        if (array[0] >= 0 && array[0] <= 99)
            array[0] += 1900;

        return date_msecFromDate(array[0], array[1], array[2],
                                 array[3], array[4], array[5], array[6]);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,jsStaticFunction_UTC,"    private static double jsStaticFunction_UTC(Object[] args)
    {
        return TimeClip(date_msecFromArgs(args));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,date_parseString,"    private static double date_parseString(String s)
    {
        int year = -1;
        int mon = -1;
        int mday = -1;
        int hour = -1;
        int min = -1;
        int sec = -1;
        char c = 0;
        char si = 0;
        int i = 0;
        int n = -1;
        double tzoffset = -1;
        char prevc = 0;
        int limit = 0;
        boolean seenplusminus = false;

        limit = s.length();
        while (i < limit) {
            c = s.charAt(i);
            i++;
            if (c <= ' ' || c == ',' || c == '-') {
                if (i < limit) {
                    si = s.charAt(i);
                    if (c == '-' && '0' <= si && si <= '9') {
                        prevc = c;
                    }
                }
                continue;
            }
            if (c == '(') { /* comments) */
                int depth = 1;
                while (i < limit) {
                    c = s.charAt(i);
                    i++;
                    if (c == '(')
                        depth++;
                    else if (c == ')')
                        if (--depth <= 0)
                            break;
                }
                continue;
            }
            if ('0' <= c && c <= '9') {
                n = c - '0';
                while (i < limit && '0' <= (c = s.charAt(i)) && c <= '9') {
                    n = n * 10 + c - '0';
                    i++;
                }

                /* allow TZA before the year, so
                 * 'Wed Nov 05 21:49:11 GMT-0800 1997'
                 * works */

                /* uses of seenplusminus allow : in TZA, so Java
                 * no-timezone style of GMT+4:30 works
                 */
                if ((prevc == '+' || prevc == '-')/*  && year>=0 */) {
                    /* make ':' case below change tzoffset */
                    seenplusminus = true;

                    /* offset */
                    if (n < 24)
                        n = n * 60; /* EG. ""GMT-3"" */
                    else
                        n = n % 100 + n / 100 * 60; /* eg ""GMT-0430"" */
                    if (prevc == '+')       /* plus means east of GMT */
                        n = -n;
                    if (tzoffset != 0 && tzoffset != -1)
                        return ScriptRuntime.NaN;
                    tzoffset = n;
                } else if (n >= 70  ||
                           (prevc == '/' && mon >= 0 && mday >= 0
                            && year < 0))
                {
                    if (year >= 0)
                        return ScriptRuntime.NaN;
                    else if (c <= ' ' || c == ',' || c == '/' || i >= limit)
                        year = n < 100 ? n + 1900 : n;
                    else
                        return ScriptRuntime.NaN;
                } else if (c == ':') {
                    if (hour < 0)
                        hour = /*byte*/ n;
                    else if (min < 0)
                        min = /*byte*/ n;
                    else
                        return ScriptRuntime.NaN;
                } else if (c == '/') {
                    if (mon < 0)
                        mon = /*byte*/ n-1;
                    else if (mday < 0)
                        mday = /*byte*/ n;
                    else
                        return ScriptRuntime.NaN;
                } else if (i < limit && c != ',' && c > ' ' && c != '-') {
                    return ScriptRuntime.NaN;
                } else if (seenplusminus && n < 60) {  /* handle GMT-3:30 */
                    if (tzoffset < 0)
                        tzoffset -= n;
                    else
                        tzoffset += n;
                } else if (hour >= 0 && min < 0) {
                    min = /*byte*/ n;
                } else if (min >= 0 && sec < 0) {
                    sec = /*byte*/ n;
                } else if (mday < 0) {
                    mday = /*byte*/ n;
                } else {
                    return ScriptRuntime.NaN;
                }
                prevc = 0;
            } else if (c == '/' || c == ':' || c == '+' || c == '-') {
                prevc = c;
            } else {
                int st = i - 1;
                while (i < limit) {
                    c = s.charAt(i);
                    if (!(('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z')))
                        break;
                    i++;
                }
                int letterCount = i - st;
                if (letterCount < 2)
                    return ScriptRuntime.NaN;
               /*
                * Use ported code from jsdate.c rather than the locale-specific
                * date-parsing code from Java, to keep js and rhino consistent.
                * Is this the right strategy?
                */
                String wtb = ""am;pm;""
                            +""monday;tuesday;wednesday;thursday;friday;""
                            +""saturday;sunday;""
                            +""january;february;march;april;may;june;""
                            +""july;august;september;october;november;december;""
                            +""gmt;ut;utc;est;edt;cst;cdt;mst;mdt;pst;pdt;"";
                int index = 0;
                for (int wtbOffset = 0; ;) {
                    int wtbNext = wtb.indexOf(';', wtbOffset);
                    if (wtbNext < 0)
                        return ScriptRuntime.NaN;
                    if (wtb.regionMatches(true, wtbOffset, s, st, letterCount))
                        break;
                    wtbOffset = wtbNext + 1;
                    ++index;
                }
                if (index < 2) {
                    /*
                     * AM/PM. Count 12:30 AM as 00:30, 12:30 PM as
                     * 12:30, instead of blindly adding 12 if PM.
                     */
                    if (hour > 12 || hour < 0) {
                        return ScriptRuntime.NaN;
                    } else if (index == 0) {
                        // AM
                        if (hour == 12)
                            hour = 0;
                    } else {
                        // PM
                        if (hour != 12)
                            hour += 12;
                    }
                } else if ((index -= 2) < 7) {
                    // ignore week days
                } else if ((index -= 7) < 12) {
                    // month
                    if (mon < 0) {
                        mon = index;
                    } else {
                        return ScriptRuntime.NaN;
                    }
                } else {
                    index -= 12;
                    // timezones
                    switch (index) {
                      case 0 /* gmt */: tzoffset = 0; break;
                      case 1 /* ut */:  tzoffset = 0; break;
                      case 2 /* utc */: tzoffset = 0; break;
                      case 3 /* est */: tzoffset = 5 * 60; break;
                      case 4 /* edt */: tzoffset = 4 * 60; break;
                      case 5 /* cst */: tzoffset = 6 * 60; break;
                      case 6 /* cdt */: tzoffset = 5 * 60; break;
                      case 7 /* mst */: tzoffset = 7 * 60; break;
                      case 8 /* mdt */: tzoffset = 6 * 60; break;
                      case 9 /* pst */: tzoffset = 8 * 60; break;
                      case 10 /* pdt */:tzoffset = 7 * 60; break;
                      default: Kit.codeBug();
                    }
                }
            }
        }
        if (year < 0 || mon < 0 || mday < 0)
            return ScriptRuntime.NaN;
        if (sec < 0)
            sec = 0;
        if (min < 0)
            min = 0;
        if (hour < 0)
            hour = 0;

        double msec = date_msecFromDate(year, mon, mday, hour, min, sec, 0);
        if (tzoffset == -1) { /* no time zone specified, have to use local */
            return internalUTC(msec);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,date_format,"    private static String date_format(double t, int methodId)
    {
        StringBuffer result = new StringBuffer(60);
        double local = LocalTime(t);

        /* Tue Oct 31 09:41:40 GMT-0800 (PST) 2000 */
        /* Tue Oct 31 2000 */
        /* 09:41:40 GMT-0800 (PST) */

        if (methodId != Id_toTimeString) {
            appendWeekDayName(result, WeekDay(local));
            result.append(' ');
            appendMonthName(result, MonthFromTime(local));
            result.append(' ');
            append0PaddedUint(result, DateFromTime(local), 2);
            result.append(' ');
            int year = YearFromTime(local);
            if (year < 0) {
                result.append('-');
                year = -year;
            }
            append0PaddedUint(result, year, 4);
            if (methodId != Id_toDateString)
                result.append(' ');
        }

        if (methodId != Id_toDateString) {
            append0PaddedUint(result, HourFromTime(local), 2);
            result.append(':');
            append0PaddedUint(result, MinFromTime(local), 2);
            result.append(':');
            append0PaddedUint(result, SecFromTime(local), 2);

            // offset from GMT in minutes.  The offset includes daylight
            // savings, if it applies.
            int minutes = (int) Math.floor((LocalTZA + DaylightSavingTA(t))
                                           / msPerMinute);
            // map 510 minutes to 0830 hours
            int offset = (minutes / 60) * 100 + minutes % 60;
            if (offset > 0) {
                result.append("" GMT+"");
            } else {
                result.append("" GMT-"");
                offset = -offset;
            }
            append0PaddedUint(result, offset, 4);

            if (timeZoneFormatter == null)
                timeZoneFormatter = new java.text.SimpleDateFormat(""zzz"");

            // Find an equivalent year before getting the timezone
            // comment.  See DaylightSavingTA.
            if (t < 0.0 || t > 2145916800000.0) {
                int equiv = EquivalentYear(YearFromTime(local));
                double day = MakeDay(equiv, MonthFromTime(t), DateFromTime(t));
                t = MakeDate(day, TimeWithinDay(t));
             }
            result.append("" ("");
            java.util.Date date = new Date((long) t);
            synchronized (timeZoneFormatter) {
                result.append(timeZoneFormatter.format(date));
            }
            result.append(')');
        }
        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,jsConstructor,"    private static Object jsConstructor(Object[] args)
    {
        NativeDate obj = new NativeDate();

        // if called as a constructor with no args,
        // return a new Date with the current time.
        if (args.length == 0) {
            obj.date = now();
            return obj;
        }

        // if called with just one arg -
        if (args.length == 1) {
            Object arg0 = args[0];
            if (arg0 instanceof Scriptable)
                arg0 = ((Scriptable) arg0).getDefaultValue(null);
            double date;
            if (arg0 instanceof String) {
                // it's a string; parse it.
                date = date_parseString((String)arg0);
            } else {
                // if it's not a string, use it as a millisecond date
                date = ScriptRuntime.toNumber(arg0);
            }
            obj.date = TimeClip(date);
            return obj;
        }

        double time = date_msecFromArgs(args);

        if (!Double.isNaN(time) && !Double.isInfinite(time))
            time = TimeClip(internalUTC(time));

        obj.date = time;

        return obj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,toLocale_helper,"    private static String toLocale_helper(double t, int methodId)
    {
        java.text.DateFormat formatter;
        switch (methodId) {
          case Id_toLocaleString:
            if (localeDateTimeFormatter == null) {
                localeDateTimeFormatter
                    = DateFormat.getDateTimeInstance(DateFormat.LONG,
                                                     DateFormat.LONG);
            }
            formatter = localeDateTimeFormatter;
            break;
          case Id_toLocaleTimeString:
            if (localeTimeFormatter == null) {
                localeTimeFormatter
                    = DateFormat.getTimeInstance(DateFormat.LONG);
            }
            formatter = localeTimeFormatter;
            break;
          case Id_toLocaleDateString:
            if (localeDateFormatter == null) {
                localeDateFormatter
                    = DateFormat.getDateInstance(DateFormat.LONG);
            }
            formatter = localeDateFormatter;
            break;
          default: formatter = null; // unreachable
        }

        synchronized (formatter) {
            return formatter.format(new Date((long) t));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,js_toUTCString,"    private static String js_toUTCString(double date)
    {
        StringBuffer result = new StringBuffer(60);

        appendWeekDayName(result, WeekDay(date));
        result.append("", "");
        append0PaddedUint(result, DateFromTime(date), 2);
        result.append(' ');
        appendMonthName(result, MonthFromTime(date));
        result.append(' ');
        int year = YearFromTime(date);
        if (year < 0) {
            result.append('-'); year = -year;
        }
        append0PaddedUint(result, year, 4);
        result.append(' ');
        append0PaddedUint(result, HourFromTime(date), 2);
        result.append(':');
        append0PaddedUint(result, MinFromTime(date), 2);
        result.append(':');
        append0PaddedUint(result, SecFromTime(date), 2);
        result.append("" GMT"");
        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,append0PaddedUint,"    private static void append0PaddedUint(StringBuffer sb, int i, int minWidth)
    {
        if (i < 0) Kit.codeBug();
        int scale = 1;
        --minWidth;
        if (i >= 10) {
            if (i < 1000 * 1000 * 1000) {
                for (;;) {
                    int newScale = scale * 10;
                    if (i < newScale) { break; }
                    --minWidth;
                    scale = newScale;
                }
            } else {
                // Separated case not to check against 10 * 10^9 overflow
                minWidth -= 9;
                scale = 1000 * 1000 * 1000;
            }
        }
        while (minWidth > 0) {
            sb.append('0');
            --minWidth;
        }
        while (scale != 1) {
            sb.append((char)('0' + (i / scale)));
            i %= scale;
            scale /= 10;
        }
        sb.append((char)('0' + i));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,appendMonthName,"    private static void appendMonthName(StringBuffer sb, int index)
    {
        // Take advantage of the fact that all month abbreviations
        // have the same length to minimize amount of strings runtime has
        // to keep in memory
        String months = ""Jan""+""Feb""+""Mar""+""Apr""+""May""+""Jun""
                       +""Jul""+""Aug""+""Sep""+""Oct""+""Nov""+""Dec"";
        index *= 3;
        for (int i = 0; i != 3; ++i) {
            sb.append(months.charAt(index + i));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,appendWeekDayName,"    private static void appendWeekDayName(StringBuffer sb, int index)
    {
        String days = ""Sun""+""Mon""+""Tue""+""Wed""+""Thu""+""Fri""+""Sat"";
        index *= 3;
        for (int i = 0; i != 3; ++i) {
            sb.append(days.charAt(index + i));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,makeTime,"    private static double makeTime(double date, Object[] args, int methodId)
    {
        int maxargs;
        boolean local = true;
        switch (methodId) {
          case Id_setUTCMilliseconds:
              local = false;
            // fallthrough
          case Id_setMilliseconds:
            maxargs = 1;
            break;

          case Id_setUTCSeconds:
              local = false;
            // fallthrough
          case Id_setSeconds:
            maxargs = 2;
            break;

          case Id_setUTCMinutes:
              local = false;
            // fallthrough
          case Id_setMinutes:
            maxargs = 3;
            break;

          case Id_setUTCHours:
              local = false;
            // fallthrough
          case Id_setHours:
            maxargs = 4;
            break;

          default:
              Kit.codeBug();
            maxargs = 0;
        }

        int i;
        double conv[] = new double[4];
        double hour, min, sec, msec;
        double lorutime; /* Local or UTC version of date */

        double time;
        double result;

        /* just return NaN if the date is already NaN */
        if (date != date)
            return date;

        /* Satisfy the ECMA rule that if a function is called with
         * fewer arguments than the specified formal arguments, the
         * remaining arguments are set to undefined.  Seems like all
         * the Date.setWhatever functions in ECMA are only varargs
         * beyond the first argument; this should be set to undefined
         * if it's not given.  This means that ""d = new Date();
         * d.setMilliseconds()"" returns NaN.  Blech.
         */
        if (args.length == 0)
            args = ScriptRuntime.padArguments(args, 1);

        for (i = 0; i < args.length && i < maxargs; i++) {
            conv[i] = ScriptRuntime.toNumber(args[i]);

            // limit checks that happen in MakeTime in ECMA.
            if (conv[i] != conv[i] || Double.isInfinite(conv[i])) {
                return ScriptRuntime.NaN;
            }
            conv[i] = ScriptRuntime.toInteger(conv[i]);
        }

        if (local)
            lorutime = LocalTime(date);
        else
            lorutime = date;

        i = 0;
        int stop = args.length;

        if (maxargs >= 4 && i < stop)
            hour = conv[i++];
        else
            hour = HourFromTime(lorutime);

        if (maxargs >= 3 && i < stop)
            min = conv[i++];
        else
            min = MinFromTime(lorutime);

        if (maxargs >= 2 && i < stop)
            sec = conv[i++];
        else
            sec = SecFromTime(lorutime);

        if (maxargs >= 1 && i < stop)
            msec = conv[i++];
        else
            msec = msFromTime(lorutime);

        time = MakeTime(hour, min, sec, msec);
        result = MakeDate(Day(lorutime), time);

        if (local)
            result = internalUTC(result);
        date = TimeClip(result);

        return date;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,makeDate,"    private static double makeDate(double date, Object[] args, int methodId)
    {
        int maxargs;
        boolean local = true;
        switch (methodId) {
          case Id_setUTCDate:
              local = false;
            // fallthrough
          case Id_setDate:
              maxargs = 1;
            break;

          case Id_setUTCMonth:
              local = false;
            // fallthrough
          case Id_setMonth:
              maxargs = 2;
            break;

          case Id_setUTCFullYear:
              local = false;
            // fallthrough
          case Id_setFullYear:
              maxargs = 3;
            break;

          default:
              Kit.codeBug();
            maxargs = 0;
        }

        int i;
        double conv[] = new double[3];
        double year, month, day;
        double lorutime; /* local or UTC version of date */
        double result;

        /* See arg padding comment in makeTime.*/
        if (args.length == 0)
            args = ScriptRuntime.padArguments(args, 1);

        for (i = 0; i < args.length && i < maxargs; i++) {
            conv[i] = ScriptRuntime.toNumber(args[i]);

            // limit checks that happen in MakeDate in ECMA.
            if (conv[i] != conv[i] || Double.isInfinite(conv[i])) {
                return ScriptRuntime.NaN;
            }
            conv[i] = ScriptRuntime.toInteger(conv[i]);
        }

        /* return NaN if date is NaN and we're not setting the year,
         * If we are, use 0 as the time. */
        if (date != date) {
            if (args.length < 3) {
                return ScriptRuntime.NaN;
            } else {
                lorutime = 0;
            }
        } else {
            if (local)
                lorutime = LocalTime(date);
            else
                lorutime = date;
        }

        i = 0;
        int stop = args.length;

        if (maxargs >= 3 && i < stop)
            year = conv[i++];
        else
            year = YearFromTime(lorutime);

        if (maxargs >= 2 && i < stop)
            month = conv[i++];
        else
            month = MonthFromTime(lorutime);

        if (maxargs >= 1 && i < stop)
            day = conv[i++];
        else
            day = DateFromTime(lorutime);

        day = MakeDay(year, month, day); /* day within year */
        result = MakeDate(day, TimeWithinDay(lorutime));

        if (local)
            result = internalUTC(result);

        date = TimeClip(result);

        return date;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeDate.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:15:38 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 6: X=""getDay"";id=Id_getDay; break L;
            case 7: switch (s.charAt(3)) {
                case 'D': c=s.charAt(0);
                    if (c=='g') { X=""getDate"";id=Id_getDate; }
                    else if (c=='s') { X=""setDate"";id=Id_setDate; }
                    break L;
                case 'T': c=s.charAt(0);
                    if (c=='g') { X=""getTime"";id=Id_getTime; }
                    else if (c=='s') { X=""setTime"";id=Id_setTime; }
                    break L;
                case 'Y': c=s.charAt(0);
                    if (c=='g') { X=""getYear"";id=Id_getYear; }
                    else if (c=='s') { X=""setYear"";id=Id_setYear; }
                    break L;
                case 'u': X=""valueOf"";id=Id_valueOf; break L;
                } break L;
            case 8: switch (s.charAt(3)) {
                case 'H': c=s.charAt(0);
                    if (c=='g') { X=""getHours"";id=Id_getHours; }
                    else if (c=='s') { X=""setHours"";id=Id_setHours; }
                    break L;
                case 'M': c=s.charAt(0);
                    if (c=='g') { X=""getMonth"";id=Id_getMonth; }
                    else if (c=='s') { X=""setMonth"";id=Id_setMonth; }
                    break L;
                case 'o': X=""toSource"";id=Id_toSource; break L;
                case 't': X=""toString"";id=Id_toString; break L;
                } break L;
            case 9: X=""getUTCDay"";id=Id_getUTCDay; break L;
            case 10: c=s.charAt(3);
                if (c=='M') {
                    c=s.charAt(0);
                    if (c=='g') { X=""getMinutes"";id=Id_getMinutes; }
                    else if (c=='s') { X=""setMinutes"";id=Id_setMinutes; }
                }
                else if (c=='S') {
                    c=s.charAt(0);
                    if (c=='g') { X=""getSeconds"";id=Id_getSeconds; }
                    else if (c=='s') { X=""setSeconds"";id=Id_setSeconds; }
                }
                else if (c=='U') {
                    c=s.charAt(0);
                    if (c=='g') { X=""getUTCDate"";id=Id_getUTCDate; }
                    else if (c=='s') { X=""setUTCDate"";id=Id_setUTCDate; }
                }
                break L;
            case 11: switch (s.charAt(3)) {
                case 'F': c=s.charAt(0);
                    if (c=='g') { X=""getFullYear"";id=Id_getFullYear; }
                    else if (c=='s') { X=""setFullYear"";id=Id_setFullYear; }
                    break L;
                case 'M': X=""toGMTString"";id=Id_toGMTString; break L;
                case 'T': X=""toUTCString"";id=Id_toUTCString; break L;
                case 'U': c=s.charAt(0);
                    if (c=='g') {
                        c=s.charAt(9);
                        if (c=='r') { X=""getUTCHours"";id=Id_getUTCHours; }
                        else if (c=='t') { X=""getUTCMonth"";id=Id_getUTCMonth; }
                    }
                    else if (c=='s') {
                        c=s.charAt(9);
                        if (c=='r') { X=""setUTCHours"";id=Id_setUTCHours; }
                        else if (c=='t') { X=""setUTCMonth"";id=Id_setUTCMonth; }
                    }
                    break L;
                case 's': X=""constructor"";id=Id_constructor; break L;
                } break L;
            case 12: c=s.charAt(2);
                if (c=='D') { X=""toDateString"";id=Id_toDateString; }
                else if (c=='T') { X=""toTimeString"";id=Id_toTimeString; }
                break L;
            case 13: c=s.charAt(0);
                if (c=='g') {
                    c=s.charAt(6);
                    if (c=='M') { X=""getUTCMinutes"";id=Id_getUTCMinutes; }
                    else if (c=='S') { X=""getUTCSeconds"";id=Id_getUTCSeconds; }
                }
                else if (c=='s') {
                    c=s.charAt(6);
                    if (c=='M') { X=""setUTCMinutes"";id=Id_setUTCMinutes; }
                    else if (c=='S') { X=""setUTCSeconds"";id=Id_setUTCSeconds; }
                }
                break L;
            case 14: c=s.charAt(0);
                if (c=='g') { X=""getUTCFullYear"";id=Id_getUTCFullYear; }
                else if (c=='s') { X=""setUTCFullYear"";id=Id_setUTCFullYear; }
                else if (c=='t') { X=""toLocaleString"";id=Id_toLocaleString; }
                break L;
            case 15: c=s.charAt(0);
                if (c=='g') { X=""getMilliseconds"";id=Id_getMilliseconds; }
                else if (c=='s') { X=""setMilliseconds"";id=Id_setMilliseconds; }
                break L;
            case 17: X=""getTimezoneOffset"";id=Id_getTimezoneOffset; break L;
            case 18: c=s.charAt(0);
                if (c=='g') { X=""getUTCMilliseconds"";id=Id_getUTCMilliseconds; }
                else if (c=='s') { X=""setUTCMilliseconds"";id=Id_setUTCMilliseconds; }
                else if (c=='t') {
                    c=s.charAt(8);
                    if (c=='D') { X=""toLocaleDateString"";id=Id_toLocaleDateString; }
                    else if (c=='T') { X=""toLocaleTimeString"";id=Id_toLocaleTimeString; }
                }
                break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeError obj = new NativeError();
        ScriptableObject.putProperty(obj, ""name"", ""Error"");
        ScriptableObject.putProperty(obj, ""message"", """");
        ScriptableObject.putProperty(obj, ""fileName"", """");
        ScriptableObject.putProperty(obj, ""lineNumber"", new Integer(0));
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,make,"    static NativeError make(Context cx, Scriptable scope,
                            IdFunctionObject ctorObj, Object[] args)
    {
        Scriptable proto = (Scriptable)(ctorObj.get(""prototype"", ctorObj));

        NativeError obj = new NativeError();
        obj.setPrototype(proto);
        obj.setParentScope(scope);

        int arglen = args.length;
        if (arglen >= 1) {
            ScriptableObject.putProperty(obj, ""message"",
                    ScriptRuntime.toString(args[0]));
            if (arglen >= 2) {
                ScriptableObject.putProperty(obj, ""fileName"", args[1]);
                if (arglen >= 3) {
                    int line = ScriptRuntime.toInt32(args[2]);
                    ScriptableObject.putProperty(obj, ""lineNumber"",
                            new Integer(line));
                }
            }
        }
        if(arglen < 3 && cx.hasFeature(Context.FEATURE_LOCATION_INFORMATION_IN_ERROR)) {
            // Fill in fileName and lineNumber automatically when not specified
            // explicitly, see Bugzilla issue #342807
            int[] linep = new int[1];
            String fileName = Context.getSourcePositionFromStack(linep);
            ScriptableObject.putProperty(obj, ""lineNumber"", 
                    new Integer(linep[0]));
            if(arglen < 2) {
                ScriptableObject.putProperty(obj, ""fileName"", fileName);
            }
        }
        return obj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,getClassName,"    public String getClassName()
    {
        return ""Error"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,toString,"    public String toString()
    {
        return js_toString(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=1; s=""constructor""; break;
          case Id_toString:    arity=0; s=""toString"";    break;
          case Id_toSource:    arity=0; s=""toSource"";    break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(ERROR_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(ERROR_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor:
            return make(cx, scope, f, args);

          case Id_toString:
            return js_toString(thisObj);

          case Id_toSource:
            return js_toSource(cx, scope, thisObj);
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,js_toString,"    private static String js_toString(Scriptable thisObj)
    {
        return getString(thisObj, ""name"")+"": ""+getString(thisObj, ""message"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,js_toSource,"    private static String js_toSource(Context cx, Scriptable scope,
                                      Scriptable thisObj)
    {
        // Emulation of SpiderMonkey behavior
        Object name = ScriptableObject.getProperty(thisObj, ""name"");
        Object message = ScriptableObject.getProperty(thisObj, ""message"");
        Object fileName = ScriptableObject.getProperty(thisObj, ""fileName"");
        Object lineNumber = ScriptableObject.getProperty(thisObj, ""lineNumber"");

        StringBuffer sb = new StringBuffer();
        sb.append(""(new "");
        if (name == NOT_FOUND) {
            name = Undefined.instance;
        }
        sb.append(ScriptRuntime.toString(name));
        sb.append(""("");
        if (message != NOT_FOUND
            || fileName != NOT_FOUND
            || lineNumber != NOT_FOUND)
        {
            if (message == NOT_FOUND) {
                message = """";
            }
            sb.append(ScriptRuntime.uneval(cx, scope, message));
            if (fileName != NOT_FOUND || lineNumber != NOT_FOUND) {
                sb.append("", "");
                if (fileName == NOT_FOUND) {
                    fileName = """";
                }
                sb.append(ScriptRuntime.uneval(cx, scope, fileName));
                if (lineNumber != NOT_FOUND) {
                    int line = ScriptRuntime.toInt32(lineNumber);
                    if (line != 0) {
                        sb.append("", "");
                        sb.append(ScriptRuntime.toString(line));
                    }
                }
            }
        }
        sb.append(""))"");
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,getString,"    private static String getString(Scriptable obj, String id)
    {
        Object value = ScriptableObject.getProperty(obj, id);
        if (value == NOT_FOUND) return """";
        return ScriptRuntime.toString(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeError.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #string_id_map#
// #generated# Last update: 2007-05-09 08:15:45 EDT
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==8) {
                c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
            }
            else if (s_length==11) { X=""constructor"";id=Id_constructor; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,initScriptFunction,"    public final void initScriptFunction(Context cx, Scriptable scope)
    {
        ScriptRuntime.setFunctionProtoAndParent(this, scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,decompile,"    final String decompile(int indent, int flags)
    {
        String encodedSource = getEncodedSource();
        if (encodedSource == null) {
            return super.decompile(indent, flags);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,getLength,"    public int getLength()
    {
        int paramCount = getParamCount();
        if (getLanguageVersion() != Context.VERSION_1_2) {
            return paramCount;
        }
        Context cx = Context.getContext();
        NativeCall activation = ScriptRuntime.findFunctionActivation(cx, this);
        if (activation == null) {
            return paramCount;
        }
        return activation.originalArgs.length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,getArity,"    public int getArity()
    {
        return getParamCount();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,jsGet_name,"    public String jsGet_name()
    {
        return getFunctionName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,getEncodedSource,"    public String getEncodedSource()
    {
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,getDebuggableView,"    public DebuggableScript getDebuggableView()
    {
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,resumeGenerator,"    public Object resumeGenerator(Context cx, Scriptable scope,
                                  int operation, Object state, Object value)
    {
        throw new EvaluatorException(""resumeGenerator() not implemented"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeFunction.java,getParamOrVarConst,"    protected boolean getParamOrVarConst(int index)
    {
        // By default return false to preserve compatibility with existing 
        // classes subclassing this class, which are mostly generated by jsc 
        // from earlier Rhino versions. See Bugzilla #396117.
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,init,"    static NativeGenerator init(ScriptableObject scope, boolean sealed) {
        // Generator
        // Can't use ""NativeGenerator().exportAsJSClass"" since we don't want
        // to define ""Generator"" as a constructor in the top-level scope.

        NativeGenerator prototype = new NativeGenerator();
        if (scope != null) {
            prototype.setParentScope(scope);
            prototype.setPrototype(getObjectPrototype(scope));
        }
        prototype.activatePrototypeMap(MAX_PROTOTYPE_ID);
        if (sealed) {
            prototype.sealObject();
        }

        // Need to access Generator prototype when constructing
        // Generator instances, but don't have a generator constructor
        // to use to find the prototype. Use the ""associateValue""
        // approach instead.
        if (scope != null) {
            scope.associateValue(GENERATOR_TAG, prototype);
        }

        return prototype;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,getClassName,"    public String getClassName() {
        return ""Generator"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,finalize,"    public void finalize() throws Throwable {
        if (savedState != null) {
            // This is a little tricky since we are most likely running in",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,run,"        public Object run(Context cx) {
            Scriptable scope = ScriptableObject.getTopLevelScope(generator);
            Callable closeGenerator = new Callable() {
                public Object call(Context cx, Scriptable scope,
                                   Scriptable thisObj, Object[] args) {
                     return ((NativeGenerator)thisObj).resume(cx, scope,
                             GENERATOR_CLOSE, new GeneratorClosedException());
                }
            };
            return ScriptRuntime.doTopCall(closeGenerator, cx, scope,
                                           generator, null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,call,"                public Object call(Context cx, Scriptable scope,
                                   Scriptable thisObj, Object[] args) {
                     return ((NativeGenerator)thisObj).resume(cx, scope,
                             GENERATOR_CLOSE, new GeneratorClosedException());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,initPrototypeId,"    protected void initPrototypeId(int id) {
        String s;
        int arity;
        switch (id) {
          case Id_close:          arity=1; s=""close"";          break;
          case Id_next:           arity=1; s=""next"";           break;
          case Id_send:           arity=0; s=""send"";           break;
          case Id_throw:          arity=0; s=""throw"";          break;
          case Id___iterator__:   arity=1; s=""__iterator__"";   break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(GENERATOR_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(GENERATOR_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();

        if (!(thisObj instanceof NativeGenerator))
            throw incompatibleCallError(f);

        NativeGenerator generator = (NativeGenerator) thisObj;

        switch (id) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,resume,"    private Object resume(Context cx, Scriptable scope, int operation,
                          Object value)
    {
        if (savedState == null) {
            if (operation == GENERATOR_CLOSE)
                return Undefined.instance;
            Object thrown;
            if (operation == GENERATOR_THROW) {
                thrown = value;
            } else {
                thrown = NativeIterator.getStopIterationObject(scope);
            }
            throw new JavaScriptException(thrown, lineSource, lineNumber);
        }
        try {
            synchronized (this) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGenerator.java,findPrototypeId,"    protected int findPrototypeId(String s) {
        int id;
// #generated# Last update: 2007-06-14 13:13:03 EDT
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==4) {
                c=s.charAt(0);
                if (c=='n') { X=""next"";id=Id_next; }
                else if (c=='s') { X=""send"";id=Id_send; }
            }
            else if (s_length==5) {
                c=s.charAt(0);
                if (c=='c') { X=""close"";id=Id_close; }
                else if (c=='t') { X=""throw"";id=Id_throw; }
            }
            else if (s_length==12) { X=""__iterator__"";id=Id___iterator__; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,init,"    public static void init(Context cx, Scriptable scope, boolean sealed) {
        NativeGlobal obj = new NativeGlobal();

        for (int id = 1; id <= LAST_SCOPE_FUNCTION_ID; ++id) {
            String name;
            int arity = 1;
            switch (id) {
              case Id_decodeURI:
                name = ""decodeURI"";
                break;
              case Id_decodeURIComponent:
                name = ""decodeURIComponent"";
                break;
              case Id_encodeURI:
                name = ""encodeURI"";
                break;
              case Id_encodeURIComponent:
                name = ""encodeURIComponent"";
                break;
              case Id_escape:
                name = ""escape"";
                break;
              case Id_eval:
                name = ""eval"";
                break;
              case Id_isFinite:
                name = ""isFinite"";
                break;
              case Id_isNaN:
                name = ""isNaN"";
                break;
              case Id_isXMLName:
                name = ""isXMLName"";
                break;
              case Id_parseFloat:
                name = ""parseFloat"";
                break;
              case Id_parseInt:
                name = ""parseInt"";
                arity = 2;
                break;
              case Id_unescape:
                name = ""unescape"";
                break;
              case Id_uneval:
                name = ""uneval"";
                break;
              default:
                  throw Kit.codeBug();
            }
            IdFunctionObject f = new IdFunctionObject(obj, FTAG, id, name,
                                                      arity, scope);
            if (sealed) {
                f.sealObject();
            }
            f.exportAsScopeProperty();
        }

        ScriptableObject.defineProperty(
            scope, ""NaN"", ScriptRuntime.NaNobj,
            ScriptableObject.DONTENUM);
        ScriptableObject.defineProperty(
            scope, ""Infinity"",
            ScriptRuntime.wrapNumber(Double.POSITIVE_INFINITY),
            ScriptableObject.DONTENUM);
        ScriptableObject.defineProperty(
            scope, ""undefined"", Undefined.instance,
            ScriptableObject.DONTENUM);

        String[] errorMethods = Kit.semicolonSplit(""""
                                    +""ConversionError;""
                                    +""EvalError;""
                                    +""RangeError;""
                                    +""ReferenceError;""
                                    +""SyntaxError;""
                                    +""TypeError;""
                                    +""URIError;""
                                    +""InternalError;""
                                    +""JavaException;""
                                    );

        /*
            Each error constructor gets its own Error object as a prototype,
            with the 'name' property set to the name of the error.
        */
        for (int i = 0; i < errorMethods.length; i++) {
            String name = errorMethods[i];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (f.hasTag(FTAG)) {
            int methodId = f.methodId();
            switch (methodId) {
                case Id_decodeURI:
                case Id_decodeURIComponent: {
                    String str = ScriptRuntime.toString(args, 0);
                    return decode(str, methodId == Id_decodeURI);
                }

                case Id_encodeURI:
                case Id_encodeURIComponent: {
                    String str = ScriptRuntime.toString(args, 0);
                    return encode(str, methodId == Id_encodeURI);
                }

                case Id_escape:
                    return js_escape(args);

                case Id_eval:
                    return js_eval(cx, scope, args);

                case Id_isFinite: {
                    boolean result;
                    if (args.length < 1) {
                        result = false;
                    } else {
                        double d = ScriptRuntime.toNumber(args[0]);
                        result = (d == d
                                  && d != Double.POSITIVE_INFINITY
                                  && d != Double.NEGATIVE_INFINITY);
                    }
                    return ScriptRuntime.wrapBoolean(result);
                }

                case Id_isNaN: {
                    // The global method isNaN, as per ECMA-262 15.1.2.6.
                    boolean result;
                    if (args.length < 1) {
                        result = true;
                    } else {
                        double d = ScriptRuntime.toNumber(args[0]);
                        result = (d != d);
                    }
                    return ScriptRuntime.wrapBoolean(result);
                }

                case Id_isXMLName: {
                    Object name = (args.length == 0)
                                  ? Undefined.instance : args[0];
                    XMLLib xmlLib = XMLLib.extractFromScope(scope);
                    return ScriptRuntime.wrapBoolean(
                        xmlLib.isXMLName(cx, name));
                }

                case Id_parseFloat:
                    return js_parseFloat(args);

                case Id_parseInt:
                    return js_parseInt(args);

                case Id_unescape:
                    return js_unescape(args);

                case Id_uneval: {
                    Object value = (args.length != 0)
                                   ? args[0] : Undefined.instance;
                    return ScriptRuntime.uneval(cx, scope, value);
                }

                case Id_new_CommonError:
                    // The implementation of all the ECMA error constructors
                    // (SyntaxError, TypeError, etc.)
                    return NativeError.make(cx, scope, f, args);
            }
        }
        throw f.unknown();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,js_parseInt,"    private Object js_parseInt(Object[] args) {
        String s = ScriptRuntime.toString(args, 0);
        int radix = ScriptRuntime.toInt32(args, 1);

        int len = s.length();
        if (len == 0)
            return ScriptRuntime.NaNobj;

        boolean negative = false;
        int start = 0;
        char c;
        do {
            c = s.charAt(start);
            if (!Character.isWhitespace(c))
                break;
            start++;
        } while (start < len);

        if (c == '+' || (negative = (c == '-')))
            start++;

        final int NO_RADIX = -1;
        if (radix == 0) {
            radix = NO_RADIX;
        } else if (radix < 2 || radix > 36) {
            return ScriptRuntime.NaNobj;
        } else if (radix == 16 && len - start > 1 && s.charAt(start) == '0') {
            c = s.charAt(start+1);
            if (c == 'x' || c == 'X')
                start += 2;
        }

        if (radix == NO_RADIX) {
            radix = 10;
            if (len - start > 1 && s.charAt(start) == '0') {
                c = s.charAt(start+1);
                if (c == 'x' || c == 'X') {
                    radix = 16;
                    start += 2;
                } else if ('0' <= c && c <= '9') {
                    radix = 8;
                    start++;
                }
            }
        }

        double d = ScriptRuntime.stringToNumber(s, start, radix);
        return ScriptRuntime.wrapNumber(negative ? -d : d);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,js_parseFloat,"    private Object js_parseFloat(Object[] args)
    {
        if (args.length < 1)
            return ScriptRuntime.NaNobj;

        String s = ScriptRuntime.toString(args[0]);
        int len = s.length();
        int start = 0;
        // Scan forward to skip whitespace
        char c;
        for (;;) {
            if (start == len) {
                return ScriptRuntime.NaNobj;
            }
            c = s.charAt(start);
            if (!TokenStream.isJSSpace(c)) {
                break;
            }
            ++start;
        }

        int i = start;
        if (c == '+' || c == '-') {
            ++i;
            if (i == len) {
                return ScriptRuntime.NaNobj;
            }
            c = s.charAt(i);
        }

        if (c == 'I') {
            // check for ""Infinity""
            if (i+8 <= len && s.regionMatches(i, ""Infinity"", 0, 8)) {
                double d;
                if (s.charAt(start) == '-') {
                    d = Double.NEGATIVE_INFINITY;
                } else {
                    d = Double.POSITIVE_INFINITY;
                }
                return ScriptRuntime.wrapNumber(d);
            }
            return ScriptRuntime.NaNobj;
        }

        // Find the end of the legal bit
        int decimal = -1;
        int exponent = -1;
        for (; i < len; i++) {
            switch (s.charAt(i)) {
              case '.':
                if (decimal != -1) // Only allow a single decimal point.
                    break;
                decimal = i;
                continue;

              case 'e':
              case 'E':
                if (exponent != -1)
                    break;
                exponent = i;
                continue;

              case '+':
              case '-':
                 // Only allow '+' or '-' after 'e' or 'E'
                if (exponent != i-1)
                    break;
                continue;

              case '0': case '1': case '2': case '3': case '4':
              case '5': case '6': case '7': case '8': case '9':
                continue;

              default:
                break;
            }
            break;
        }
        s = s.substring(start, i);
        try {
            return Double.valueOf(s);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,js_escape,"    private Object js_escape(Object[] args) {
        final int
            URL_XALPHAS = 1,
            URL_XPALPHAS = 2,
            URL_PATH = 4;

        String s = ScriptRuntime.toString(args, 0);

        int mask = URL_XALPHAS | URL_XPALPHAS | URL_PATH;
        if (args.length > 1) { // the 'mask' argument.  Non-ECMA.
            double d = ScriptRuntime.toNumber(args[1]);
            if (d != d || ((mask = (int) d) != d) ||
                0 != (mask & ~(URL_XALPHAS | URL_XPALPHAS | URL_PATH)))
            {
                throw Context.reportRuntimeError0(""msg.bad.esc.mask"");
            }
        }

        StringBuffer sb = null;
        for (int k = 0, L = s.length(); k != L; ++k) {
            int c = s.charAt(k);
            if (mask != 0
                && ((c >= '0' && c <= '9')
                    || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')
                    || c == '@' || c == '*' || c == '_' || c == '-' || c == '.'
                    || (0 != (mask & URL_PATH) && (c == '/' || c == '+'))))
            {
                if (sb != null) {
                    sb.append((char)c);
                }
            } else {
                if (sb == null) {
                    sb = new StringBuffer(L + 3);
                    sb.append(s);
                    sb.setLength(k);
                }

                int hexSize;
                if (c < 256) {
                    if (c == ' ' && mask == URL_XPALPHAS) {
                        sb.append('+');
                        continue;
                    }
                    sb.append('%');
                    hexSize = 2;
                } else {
                    sb.append('%');
                    sb.append('u');
                    hexSize = 4;
                }

                // append hexadecimal form of c left-padded with 0
                for (int shift = (hexSize - 1) * 4; shift >= 0; shift -= 4) {
                    int digit = 0xf & (c >> shift);
                    int hc = (digit < 10) ? '0' + digit : 'A' - 10 + digit;
                    sb.append((char)hc);
                }
            }
        }

        return (sb == null) ? s : sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,js_unescape,"    private Object js_unescape(Object[] args)
    {
        String s = ScriptRuntime.toString(args, 0);
        int firstEscapePos = s.indexOf('%');
        if (firstEscapePos >= 0) {
            int L = s.length();
            char[] buf = s.toCharArray();
            int destination = firstEscapePos;
            for (int k = firstEscapePos; k != L;) {
                char c = buf[k];
                ++k;
                if (c == '%' && k != L) {
                    int end, start;
                    if (buf[k] == 'u') {
                        start = k + 1;
                        end = k + 5;
                    } else {
                        start = k;
                        end = k + 2;
                    }
                    if (end <= L) {
                        int x = 0;
                        for (int i = start; i != end; ++i) {
                            x = Kit.xDigitToInt(buf[i], x);
                        }
                        if (x >= 0) {
                            c = (char)x;
                            k = end;
                        }
                    }
                }
                buf[destination] = c;
                ++destination;
            }
            s = new String(buf, 0, destination);
        }
        return s;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,js_eval,"    private Object js_eval(Context cx, Scriptable scope, Object[] args)
    {
        String m = ScriptRuntime.getMessage1(""msg.cant.call.indirect"", ""eval"");
        throw NativeGlobal.constructError(cx, ""EvalError"", m, scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,isEvalFunction,"    static boolean isEvalFunction(Object functionObj)
    {
        if (functionObj instanceof IdFunctionObject) {
            IdFunctionObject function = (IdFunctionObject)functionObj;
            if (function.hasTag(FTAG) && function.methodId() == Id_eval) {
                return true;
            }
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,constructError,"    public static EcmaError constructError(Context cx,
                                           String error,
                                           String message,
                                           Scriptable scope)
    {
        return ScriptRuntime.constructError(error, message);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,constructError,"    public static EcmaError constructError(Context cx,
                                           String error,
                                           String message,
                                           Scriptable scope,
                                           String sourceName,
                                           int lineNumber,
                                           int columnNumber,
                                           String lineSource)
    {
        return ScriptRuntime.constructError(error, message,
                                            sourceName, lineNumber,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,encode,"    private static String encode(String str, boolean fullUri) {
        byte[] utf8buf = null;
        StringBuffer sb = null;

        for (int k = 0, length = str.length(); k != length; ++k) {
            char C = str.charAt(k);
            if (encodeUnescaped(C, fullUri)) {
                if (sb != null) {
                    sb.append(C);
                }
            } else {
                if (sb == null) {
                    sb = new StringBuffer(length + 3);
                    sb.append(str);
                    sb.setLength(k);
                    utf8buf = new byte[6];
                }
                if (0xDC00 <= C && C <= 0xDFFF) {
                    throw Context.reportRuntimeError0(""msg.bad.uri"");
                }
                int V;
                if (C < 0xD800 || 0xDBFF < C) {
                    V = C;
                } else {
                    k++;
                    if (k == length) {
                        throw Context.reportRuntimeError0(""msg.bad.uri"");
                    }
                    char C2 = str.charAt(k);
                    if (!(0xDC00 <= C2 && C2 <= 0xDFFF)) {
                        throw Context.reportRuntimeError0(""msg.bad.uri"");
                    }
                    V = ((C - 0xD800) << 10) + (C2 - 0xDC00) + 0x10000;
                }
                int L = oneUcs4ToUtf8Char(utf8buf, V);
                for (int j = 0; j < L; j++) {
                    int d = 0xff & utf8buf[j];
                    sb.append('%');
                    sb.append(toHexChar(d >>> 4));
                    sb.append(toHexChar(d & 0xf));
                }
            }
        }
        return (sb == null) ? str : sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,toHexChar,"    private static char toHexChar(int i) {
        if (i >> 4 != 0) Kit.codeBug();
        return (char)((i < 10) ? i + '0' : i - 10 + 'a');
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,unHex,"    private static int unHex(char c) {
        if ('A' <= c && c <= 'F') {
            return c - 'A' + 10;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,unHex,"    private static int unHex(char c1, char c2) {
        int i1 = unHex(c1);
        int i2 = unHex(c2);
        if (i1 >= 0 && i2 >= 0) {
            return (i1 << 4) | i2;
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,decode,"    private static String decode(String str, boolean fullUri) {
        char[] buf = null;
        int bufTop = 0;

        for (int k = 0, length = str.length(); k != length;) {
            char C = str.charAt(k);
            if (C != '%') {
                if (buf != null) {
                    buf[bufTop++] = C;
                }
                ++k;
            } else {
                if (buf == null) {
                    // decode always compress so result can not be bigger then
                    // str.length()
                    buf = new char[length];
                    str.getChars(0, k, buf, 0);
                    bufTop = k;
                }
                int start = k;
                if (k + 3 > length)
                    throw Context.reportRuntimeError0(""msg.bad.uri"");
                int B = unHex(str.charAt(k + 1), str.charAt(k + 2));
                if (B < 0) throw Context.reportRuntimeError0(""msg.bad.uri"");
                k += 3;
                if ((B & 0x80) == 0) {
                    C = (char)B;
                } else {
                    // Decode UTF-8 sequence into ucs4Char and encode it into
                    // UTF-16
                    int utf8Tail, ucs4Char, minUcs4Char;
                    if ((B & 0xC0) == 0x80) {
                        // First  UTF-8 should be ouside 0x80..0xBF
                        throw Context.reportRuntimeError0(""msg.bad.uri"");
                    } else if ((B & 0x20) == 0) {
                        utf8Tail = 1; ucs4Char = B & 0x1F;
                        minUcs4Char = 0x80;
                    } else if ((B & 0x10) == 0) {
                        utf8Tail = 2; ucs4Char = B & 0x0F;
                        minUcs4Char = 0x800;
                    } else if ((B & 0x08) == 0) {
                        utf8Tail = 3; ucs4Char = B & 0x07;
                        minUcs4Char = 0x10000;
                    } else if ((B & 0x04) == 0) {
                        utf8Tail = 4; ucs4Char = B & 0x03;
                        minUcs4Char = 0x200000;
                    } else if ((B & 0x02) == 0) {
                        utf8Tail = 5; ucs4Char = B & 0x01;
                        minUcs4Char = 0x4000000;
                    } else {
                        // First UTF-8 can not be 0xFF or 0xFE
                        throw Context.reportRuntimeError0(""msg.bad.uri"");
                    }
                    if (k + 3 * utf8Tail > length)
                        throw Context.reportRuntimeError0(""msg.bad.uri"");
                    for (int j = 0; j != utf8Tail; j++) {
                        if (str.charAt(k) != '%')
                            throw Context.reportRuntimeError0(""msg.bad.uri"");
                        B = unHex(str.charAt(k + 1), str.charAt(k + 2));
                        if (B < 0 || (B & 0xC0) != 0x80)
                            throw Context.reportRuntimeError0(""msg.bad.uri"");
                        ucs4Char = (ucs4Char << 6) | (B & 0x3F);
                        k += 3;
                    }
                    // Check for overlongs and other should-not-present codes
                    if (ucs4Char < minUcs4Char
                        || ucs4Char == 0xFFFE || ucs4Char == 0xFFFF)
                    {
                        ucs4Char = 0xFFFD;
                    }
                    if (ucs4Char >= 0x10000) {
                        ucs4Char -= 0x10000;
                        if (ucs4Char > 0xFFFFF)
                            throw Context.reportRuntimeError0(""msg.bad.uri"");
                        char H = (char)((ucs4Char >>> 10) + 0xD800);
                        C = (char)((ucs4Char & 0x3FF) + 0xDC00);
                        buf[bufTop++] = H;
                    } else {
                        C = (char)ucs4Char;
                    }
                }
                if (fullUri && URI_DECODE_RESERVED.indexOf(C) >= 0) {
                    for (int x = start; x != k; x++) {
                        buf[bufTop++] = str.charAt(x);
                    }
                } else {
                    buf[bufTop++] = C;
                }
            }
        }
        return (buf == null) ? str : new String(buf, 0, bufTop);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,encodeUnescaped,"    private static boolean encodeUnescaped(char c, boolean fullUri) {
        if (('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z')
            || ('0' <= c && c <= '9'))
        {
            return true;
        }
        if (""-_.!~*'()"".indexOf(c) >= 0)
            return true;
        if (fullUri) {
            return URI_DECODE_RESERVED.indexOf(c) >= 0;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeGlobal.java,oneUcs4ToUtf8Char,"    private static int oneUcs4ToUtf8Char(byte[] utf8Buffer, int ucs4Char) {
        int utf8Length = 1;

        //JS_ASSERT(ucs4Char <= 0x7FFFFFFF);
        if ((ucs4Char & ~0x7F) == 0)
            utf8Buffer[0] = (byte)ucs4Char;
        else {
            int i;
            int a = ucs4Char >>> 11;
            utf8Length = 2;
            while (a != 0) {
                a >>>= 5;
                utf8Length++;
            }
            i = utf8Length;
            while (--i > 0) {
                utf8Buffer[i] = (byte)((ucs4Char & 0x3F) | 0x80);
                ucs4Char >>>= 6;
            }
            utf8Buffer[0] = (byte)(0x100 - (1 << (8-utf8Length)) + ucs4Char);
        }
        return utf8Length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,init,"    static void init(ScriptableObject scope, boolean sealed) {
        // Iterator
        NativeIterator iterator = new NativeIterator();
        iterator.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);

        // Generator
        NativeGenerator.init(scope, sealed);

        // StopIteration
        NativeObject obj = new StopIteration();
        obj.setPrototype(getObjectPrototype(scope));
        obj.setParentScope(scope);
        if (sealed) { obj.sealObject(); }
        ScriptableObject.defineProperty(scope, STOP_ITERATION, obj,
                                        ScriptableObject.DONTENUM);
        // Use ""associateValue"" so that generators can continue to
        // throw StopIteration even if the property of the global
        // scope is replaced or deleted.
        scope.associateValue(ITERATOR_TAG, obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,getStopIterationObject,"    public static Object getStopIterationObject(Scriptable scope) {
        Scriptable top = ScriptableObject.getTopLevelScope(scope);
        return ScriptableObject.getTopScopeValue(top, ITERATOR_TAG);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,getClassName,"        public String getClassName() {
            return STOP_ITERATION;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,hasInstance,"        public boolean hasInstance(Scriptable instance) {
            return instance instanceof StopIteration;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,getClassName,"    public String getClassName() {
        return ""Iterator"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,initPrototypeId,"    protected void initPrototypeId(int id) {
        String s;
        int arity;
        switch (id) {
          case Id_constructor:    arity=2; s=""constructor"";          break;
          case Id_next:           arity=0; s=""next"";                 break;
          case Id___iterator__:   arity=1; s=ITERATOR_PROPERTY_NAME; break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(ITERATOR_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(ITERATOR_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        
        if (id == Id_constructor) {
            return jsConstructor(cx, scope, thisObj, args);
        }

        if (!(thisObj instanceof NativeIterator))
            throw incompatibleCallError(f);
        
        NativeIterator iterator = (NativeIterator) thisObj;
        
        switch (id) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,jsConstructor,"    private static Object jsConstructor(Context cx, Scriptable scope, 
                                        Scriptable thisObj, Object[] args)
    {
        if (args.length == 0 || args[0] == null || 
            args[0] == Undefined.instance)
        {
            throw ScriptRuntime.typeError1(""msg.no.properties"", 
                                           ScriptRuntime.toString(args[0]));
        }
        Scriptable obj = ScriptRuntime.toObject(scope, args[0]);
        boolean keyOnly = args.length > 1 && ScriptRuntime.toBoolean(args[1]);
        if (thisObj != null) {
            // Called as a function. Convert to iterator if possible.
          
            // For objects that implement java.lang.Iterable or
            // java.util.Iterator, have JavaScript Iterator call the underlying
            // iteration methods
            Iterator iterator = 
                VMBridge.instance.getJavaIterator(cx, scope, obj);
            if (iterator != null) {
                scope = ScriptableObject.getTopLevelScope(scope);
                return cx.getWrapFactory().wrap(cx, scope,
                        new WrappedJavaIterator(iterator, scope),
                        WrappedJavaIterator.class);
            }
            
            // Otherwise, just call the runtime routine
            Scriptable jsIterator = ScriptRuntime.toIterator(cx, scope, obj, 
                                                             keyOnly);
            if (jsIterator != null) {
                return jsIterator;
            }
        }
        
        // Otherwise, just set up to iterate over the properties of the object.
        // Do not call __iterator__ method.
        Object objectIterator = ScriptRuntime.enumInit(obj, cx,
            keyOnly ? ScriptRuntime.ENUMERATE_KEYS_NO_ITERATOR
                    : ScriptRuntime.ENUMERATE_ARRAY_NO_ITERATOR);
        ScriptRuntime.setEnumNumbers(objectIterator, true);
        NativeIterator result = new NativeIterator(objectIterator);
        result.setPrototype(NativeIterator.getClassPrototype(scope, 
                                result.getClassName()));
        result.setParentScope(scope);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,next,"    private Object next(Context cx, Scriptable scope) {
        Boolean b = ScriptRuntime.enumNext(this.objectIterator);
        if (!b.booleanValue()) {
            // Out of values. Throw StopIteration.
            throw new JavaScriptException(
                NativeIterator.getStopIterationObject(scope), null, 0);
        }
        return ScriptRuntime.enumId(this.objectIterator, cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,next,"        public Object next() {
            if (!iterator.hasNext()) {
                // Out of values. Throw StopIteration.
                throw new JavaScriptException(
                    NativeIterator.getStopIterationObject(scope), null, 0);
            }
            return iterator.next();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,__iterator__,"        public Object __iterator__(boolean b) {
            return this;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeIterator.java,findPrototypeId,"    protected int findPrototypeId(String s) {
        int id;
// #generated# Last update: 2007-06-11 09:43:19 EDT
        L0: { id = 0; String X = null;
            int s_length = s.length();
            if (s_length==4) { X=""next"";id=Id_next; }
            else if (s_length==11) { X=""constructor"";id=Id_constructor; }
            else if (s_length==12) { X=""__iterator__"";id=Id___iterator__; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,getClassName,"    public String getClassName() {
        return ""JavaArray"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,wrap,"    public static NativeJavaArray wrap(Scriptable scope, Object array) {
        return new NativeJavaArray(scope, array);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,unwrap,"    public Object unwrap() {
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,has,"    public boolean has(String id, Scriptable start) {
        return id.equals(""length"") || super.has(id, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,has,"    public boolean has(int index, Scriptable start) {
        return 0 <= index && index < length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,get,"    public Object get(String id, Scriptable start) {
        if (id.equals(""length""))
            return new Integer(length);
        Object result = super.get(id, start);
        if (result == NOT_FOUND &&
            !ScriptableObject.hasProperty(getPrototype(), id))
        {
            throw Context.reportRuntimeError2(
                ""msg.java.member.not.found"", array.getClass().getName(), id);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,get,"    public Object get(int index, Scriptable start) {
        if (0 <= index && index < length) {
            Context cx = Context.getContext();
            Object obj = Array.get(array, index);
            return cx.getWrapFactory().wrap(cx, this, obj, cls);
        }
        return Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,put,"    public void put(String id, Scriptable start, Object value) {
        // Ignore assignments to ""length""--it's readonly.
        if (!id.equals(""length""))
            throw Context.reportRuntimeError1(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,put,"    public void put(int index, Scriptable start, Object value) {
        if (0 <= index && index < length) {
            Array.set(array, index, Context.jsToJava(value, cls));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,getDefaultValue,"    public Object getDefaultValue(Class hint) {
        if (hint == null || hint == ScriptRuntime.StringClass)
            return array.toString();
        if (hint == ScriptRuntime.BooleanClass)
            return Boolean.TRUE;
        if (hint == ScriptRuntime.NumberClass)
            return ScriptRuntime.NaNobj;
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,getIds,"    public Object[] getIds() {
        Object[] result = new Object[length];
        int i = length;
        while (--i >= 0)
            result[i] = new Integer(i);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,hasInstance,"    public boolean hasInstance(Scriptable value) {
        if (!(value instanceof Wrapper))
            return false;
        Object instance = ((Wrapper)value).unwrap();
        return cls.isInstance(instance);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaArray.java,getPrototype,"    public Scriptable getPrototype() {
        if (prototype == null) {
            prototype =
                ScriptableObject.getClassPrototype(this.getParentScope(),
                                                   ""Array"");
        }
        return prototype;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,initMembers,"    protected void initMembers() {
        Class cl = (Class)javaObject;
        members = JavaMembers.lookupClass(parent, cl, cl, false);
        staticFieldAndMethods
            = members.getFieldAndMethodsObjects(this, cl, true);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,getClassName,"    public String getClassName() {
        return ""JavaClass"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,has,"    public boolean has(String name, Scriptable start) {
        return members.has(name, true) || javaClassPropertyName.equals(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,get,"    public Object get(String name, Scriptable start) {
        // When used as a constructor, ScriptRuntime.newObject() asks
        // for our prototype to create an object of the correct type.
        // We don't really care what the object is, since we're returning
        // one constructed out of whole cloth, so we return null.
        if (name.equals(""prototype""))
            return null;

         if (staticFieldAndMethods != null) {
            Object result = staticFieldAndMethods.get(name);
            if (result != null)
                return result;
        }

        if (members.has(name, true)) {
            return members.get(this, name, javaObject, true);
        }
        
        if (javaClassPropertyName.equals(name)) {
            Context cx = Context.getContext();
            Scriptable scope = ScriptableObject.getTopLevelScope(start);
            return cx.getWrapFactory().wrap(cx, scope, javaObject, 
                                            ScriptRuntime.ClassClass);
        }
        
        // experimental:  look for nested classes by appending $name to
        // current class' name.
        Class nestedClass = findNestedClass(getClassObject(), name);
        if (nestedClass != null) {
            NativeJavaClass nestedValue = new NativeJavaClass
                (ScriptableObject.getTopLevelScope(this), nestedClass);
            nestedValue.setParentScope(this);
            return nestedValue;
        }
        
        throw members.reportMemberNotFound(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,put,"    public void put(String name, Scriptable start, Object value) {
        members.put(this, name, javaObject, value, true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,getIds,"    public Object[] getIds() {
        return members.getIds(true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,getClassObject,"    public Class getClassObject() {
        return (Class) super.unwrap();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,getDefaultValue,"    public Object getDefaultValue(Class hint) {
        if (hint == null || hint == ScriptRuntime.StringClass)
            return this.toString();
        if (hint == ScriptRuntime.BooleanClass)
            return Boolean.TRUE;
        if (hint == ScriptRuntime.NumberClass)
            return ScriptRuntime.NaNobj;
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        // If it looks like a ""cast"" of an object to this class type,
        // walk the prototype chain to see if there's a wrapper of a
        // object that's an instanceof this class.
        if (args.length == 1 && args[0] instanceof Scriptable) {
            Class c = getClassObject();
            Scriptable p = (Scriptable) args[0];
            do {
                if (p instanceof Wrapper) {
                    Object o = ((Wrapper) p).unwrap();
                    if (c.isInstance(o))
                        return p;
                }
                p = p.getPrototype();
            } while (p != null);
        }
        return construct(cx, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        Class classObject = getClassObject();
        int modifiers = classObject.getModifiers();
        if (! (Modifier.isInterface(modifiers) ||
               Modifier.isAbstract(modifiers)))",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,constructSpecific,"    static Scriptable constructSpecific(Context cx, Scriptable scope,
                                        Object[] args, MemberBox ctor)
    {
        Scriptable topLevel = ScriptableObject.getTopLevelScope(scope);
        Class[] argTypes = ctor.argTypes;
      
        if (ctor.vararg) {
            // marshall the explicit parameter
            Object[] newArgs = new Object[argTypes.length];
            for (int i = 0; i < argTypes.length-1; i++) {
                newArgs[i] = Context.jsToJava(args[i], argTypes[i]);
            }
            
            Object varArgs;
            
            // Handle special situation where a single variable parameter
            // is given and it is a Java or ECMA array.
            if (args.length == argTypes.length &&
                (args[args.length-1] == null ||
                 args[args.length-1] instanceof NativeArray ||
                 args[args.length-1] instanceof NativeJavaArray))
            {
                // convert the ECMA array into a native array
                varArgs = Context.jsToJava(args[args.length-1], 
                                           argTypes[argTypes.length - 1]);
            } else {            
                // marshall the variable parameter
                Class componentType = argTypes[argTypes.length - 1].
                                        getComponentType();
                varArgs = Array.newInstance(componentType, 
                                            args.length - argTypes.length + 1);            
                for (int i=0; i < Array.getLength(varArgs); i++) {
                    Object value = Context.jsToJava(args[argTypes.length-1 + i],
                                                    componentType);
                    Array.set(varArgs, i, value);
                }
            }
            
            // add varargs
            newArgs[argTypes.length-1] = varArgs;
            // replace the original args with the new one
            args = newArgs;
        } else {
            Object[] origArgs = args;
            for (int i = 0; i < args.length; i++) {
                Object arg = args[i];
                Object x = Context.jsToJava(arg, argTypes[i]);
                if (x != arg) {
                    if (args == origArgs) {
                        args = origArgs.clone();
                    }
                    args[i] = x;
                }
            }
        }
        
        Object instance = ctor.newInstance(args);
        // we need to force this to be wrapped, because construct _has_
        // to return a scriptable
        return cx.getWrapFactory().wrapNewObject(cx, topLevel, instance);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,toString,"    public String toString() {
        return ""[JavaClass "" + getClassObject().getName() + ""]"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,hasInstance,"    public boolean hasInstance(Scriptable value) {

        if (value instanceof Wrapper &&
            !(value instanceof NativeJavaClass)) {
            Object instance = ((Wrapper)value).unwrap();

            return getClassObject().isInstance(instance);
        }

        // value wasn't something we understand
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaClass.java,findNestedClass,"    private static Class findNestedClass(Class parentClass, String name) {
        String nestedClassName = parentClass.getName() + '$' + name;
        ClassLoader loader = parentClass.getClassLoader();
        if (loader == null) {
            // ALERT: if loader is null, nested class should be loaded",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaConstructor.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        return NativeJavaClass.constructSpecific(cx, scope, args, ctor);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaConstructor.java,getFunctionName,"    public String getFunctionName()
    {
        String sig = JavaMembers.liveConnectSignature(ctor.argTypes);
        return ""<init>"".concat(sig);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaConstructor.java,toString,"    public String toString()
    {
        return ""[JavaConstructor "" + ctor.getName() + ""]"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaMethod.java,getFunctionName,"    public String getFunctionName()
    {
        return functionName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaMethod.java,scriptSignature,"    static String scriptSignature(Object[] values)
    {
        StringBuffer sig = new StringBuffer();
        for (int i = 0; i != values.length; ++i) {
            Object value = values[i];

            String s;
            if (value == null) {
                s = ""null"";
            } else if (value instanceof Boolean) {
                s = ""boolean"";
            } else if (value instanceof String) {
                s = ""string"";
            } else if (value instanceof Number) {
                s = ""number"";
            } else if (value instanceof Scriptable) {
                if (value instanceof Undefined) {
                    s = ""undefined"";
                } else if (value instanceof Wrapper) {
                    Object wrapped = ((Wrapper)value).unwrap();
                    s = wrapped.getClass().getName();
                } else if (value instanceof Function) {
                    s = ""function"";
                } else {
                    s = ""object"";
                }
            } else {
                s = JavaMembers.javaSignature(value.getClass());
            }

            if (i != 0) {
                sig.append(',');
            }
            sig.append(s);
        }
        return sig.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaMethod.java,decompile,"    String decompile(int indent, int flags)
    {
        StringBuffer sb = new StringBuffer();
        boolean justbody = (0 != (flags & Decompiler.ONLY_BODY_FLAG));
        if (!justbody) {
            sb.append(""function "");
            sb.append(getFunctionName());
            sb.append(""() {"");
        }
        sb.append(""/*\n"");
        sb.append(toString());
        sb.append(justbody ? ""*/\n"" : ""*/}\n"");
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaMethod.java,toString,"    public String toString()
    {
        StringBuffer sb = new StringBuffer();
        for (int i = 0, N = methods.length; i != N; ++i) {
            Method method = methods[i].method();
            sb.append(JavaMembers.javaSignature(method.getReturnType()));
            sb.append(' ');
            sb.append(method.getName());
            sb.append(JavaMembers.liveConnectSignature(methods[i].argTypes));
            sb.append('\n');
        }
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaMethod.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        // Find a method that matches the types given.
        if (methods.length == 0) {
            throw new RuntimeException(""No methods defined for call"");
        }

        int index = findFunction(cx, methods, args);
        if (index < 0) {
            Class c = methods[0].method().getDeclaringClass();
            String sig = c.getName() + '.' + getFunctionName() + '(' +
                         scriptSignature(args) + ')';
            throw Context.reportRuntimeError1(""msg.java.no_such_method"", sig);
        }

        MemberBox meth = methods[index];
        Class[] argTypes = meth.argTypes;
      
        if (meth.vararg) {
            // marshall the explicit parameters
            Object[] newArgs = new Object[argTypes.length];
            for (int i = 0; i < argTypes.length-1; i++) {
                newArgs[i] = Context.jsToJava(args[i], argTypes[i]);
            }
            
            Object varArgs;
            
            // Handle special situation where a single variable parameter
            // is given and it is a Java or ECMA array or is null.
            if (args.length == argTypes.length &&
                (args[args.length-1] == null ||
                 args[args.length-1] instanceof NativeArray ||
                 args[args.length-1] instanceof NativeJavaArray))
            {
                // convert the ECMA array into a native array
                varArgs = Context.jsToJava(args[args.length-1], 
                                           argTypes[argTypes.length - 1]);
            } else {            
                // marshall the variable parameters
                Class componentType = argTypes[argTypes.length - 1].
                                         getComponentType();
                varArgs = Array.newInstance(componentType, 
                                            args.length - argTypes.length + 1);            
                for (int i = 0; i < Array.getLength(varArgs); i++) {
                    Object value = Context.jsToJava(args[argTypes.length-1 + i], 
                                                    componentType);
                    Array.set(varArgs, i, value);
                }
            }
            
            // add varargs
            newArgs[argTypes.length-1] = varArgs;
            // replace the original args with the new one
            args = newArgs;
        } else {  
            // First, we marshall the args.
            Object[] origArgs = args;
            for (int i = 0; i < args.length; i++) {
                Object arg = args[i];
                Object coerced = Context.jsToJava(arg, argTypes[i]);
                if (coerced != arg) {
                    if (origArgs == args) {
                        args = args.clone();
                    }
                    args[i] = coerced;
                }
            }
        }
        Object javaObject;
        if (meth.isStatic()) {
            javaObject = null;  // don't need an object
        } else {
            Scriptable o = thisObj;
            Class c = meth.getDeclaringClass();
            for (;;) {
                if (o == null) {
                    throw Context.reportRuntimeError3(
                        ""msg.nonjava.method"", getFunctionName(),
                        ScriptRuntime.toString(thisObj), c.getName());
                }
                if (o instanceof Wrapper) {
                    javaObject = ((Wrapper)o).unwrap();
                    if (c.isInstance(javaObject)) {
                        break;
                    }
                }
                o = o.getPrototype();
            }
        }
        if (debug) {
            printDebug(""Calling "", meth, args);
        }

        Object retval = meth.invoke(javaObject, args);
        Class staticType = meth.method().getReturnType();

        if (debug) {
            Class actualType = (retval == null) ? null
                                                : retval.getClass();
            System.err.println("" ----- Returned "" + retval +
                               "" actual = "" + actualType +
                               "" expect = "" + staticType);
        }

        Object wrapped = cx.getWrapFactory().wrap(cx, scope,
                                                  retval, staticType);
        if (debug) {
            Class actualType = (wrapped == null) ? null
                                                 : wrapped.getClass();
            System.err.println("" ----- Wrapped as "" + wrapped +
                               "" class = "" + actualType);
        }

        if (wrapped == null && staticType == Void.TYPE) {
            wrapped = Undefined.instance;
        }
        return wrapped;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaMethod.java,findFunction,"    static int findFunction(Context cx,
                            MemberBox[] methodsOrCtors, Object[] args)
    {
        if (methodsOrCtors.length == 0) {
            return -1;
        } else if (methodsOrCtors.length == 1) {
            MemberBox member = methodsOrCtors[0];
            Class[] argTypes = member.argTypes;
            int alength = argTypes.length;
            
            if (member.vararg) {
                alength--;
                if ( alength > args.length) {
                    return -1;
                }
            } else {
                if (alength != args.length) {
                    return -1;
                }
            }
            for (int j = 0; j != alength; ++j) {
                if (!NativeJavaObject.canConvert(args[j], argTypes[j])) {
                    if (debug) printDebug(""Rejecting (args can't convert) "",
                                          member, args);
                    return -1;
                }
            }
            if (debug) printDebug(""Found "", member, args);
            return 0;
        }

        int firstBestFit = -1;
        int[] extraBestFits = null;
        int extraBestFitsCount = 0;

      search:
        for (int i = 0; i < methodsOrCtors.length; i++) {
            MemberBox member = methodsOrCtors[i];
            Class[] argTypes = member.argTypes;
            int alength = argTypes.length;
            if (member.vararg) {
                alength--;
                if ( alength > args.length) {
                    continue search;
                }
            } else {
                if (alength != args.length) {
                    continue search;
                }
            }
            for (int j = 0; j < alength; j++) {
                if (!NativeJavaObject.canConvert(args[j], argTypes[j])) {
                    if (debug) printDebug(""Rejecting (args can't convert) "",
                                          member, args);
                    continue search;
                }
            }
            if (firstBestFit < 0) {
                if (debug) printDebug(""Found first applicable "", member, args);
                firstBestFit = i;
            } else {
                // Compare with all currently fit methods.
                // The loop starts from -1 denoting firstBestFit and proceed
                // until extraBestFitsCount to avoid extraBestFits allocation
                // in the most common case of no ambiguity
                int betterCount = 0; // number of times member was prefered over
                                     // best fits
                int worseCount = 0;  // number of times best fits were prefered
                                     // over member
                for (int j = -1; j != extraBestFitsCount; ++j) {
                    int bestFitIndex;
                    if (j == -1) {
                        bestFitIndex = firstBestFit;
                    } else {
                        bestFitIndex = extraBestFits[j];
                    }
                    MemberBox bestFit = methodsOrCtors[bestFitIndex];
                    if (cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS) &&
                        (bestFit.member().getModifiers() & Modifier.PUBLIC) !=
                            (member.member().getModifiers() & Modifier.PUBLIC))
                    {
                        // When FEATURE_ENHANCED_JAVA_ACCESS gives us access
                        // to non-public members, continue to prefer public
                        // methods in overloading
                        if ((bestFit.member().getModifiers() & Modifier.PUBLIC) == 0)
                            ++betterCount;
                        else
                            ++worseCount;
                    } else {
                        int preference = preferSignature(args, argTypes,
                                                         member.vararg,
                                                         bestFit.argTypes,
                                                         bestFit.vararg );
                        if (preference == PREFERENCE_AMBIGUOUS) {
                            break;
                        } else if (preference == PREFERENCE_FIRST_ARG) {
                            ++betterCount;
                        } else if (preference == PREFERENCE_SECOND_ARG) {
                            ++worseCount;
                        } else {
                            if (preference != PREFERENCE_EQUAL) Kit.codeBug();
                            // This should not happen in theory
                            // but on some JVMs, Class.getMethods will return all
                            // static methods of the class heirarchy, even if
                            // a derived class's parameters match exactly.
                            // We want to call the dervied class's method.
                            if (bestFit.isStatic()
                                && bestFit.getDeclaringClass().isAssignableFrom(
                                       member.getDeclaringClass()))
                            {
                                // On some JVMs, Class.getMethods will return all
                                // static methods of the class heirarchy, even if
                                // a derived class's parameters match exactly.
                                // We want to call the dervied class's method.
                                if (debug) printDebug(
                                    ""Substituting (overridden static)"",
                                    member, args);
                                if (j == -1) {
                                    firstBestFit = i;
                                } else {
                                    extraBestFits[j] = i;
                                }
                            } else {
                                if (debug) printDebug(
                                    ""Ignoring same signature member "",
                                    member, args);
                            }
                            continue search;
                        }
                    }
                }
                if (betterCount == 1 + extraBestFitsCount) {
                    // member was prefered over all best fits
                    if (debug) printDebug(
                        ""New first applicable "", member, args);
                    firstBestFit = i;
                    extraBestFitsCount = 0;
                } else if (worseCount == 1 + extraBestFitsCount) {
                    // all best fits were prefered over member, ignore it
                    if (debug) printDebug(
                        ""Rejecting (all current bests better) "", member, args);
                } else {
                    // some ambiguity was present, add member to best fit set
                    if (debug) printDebug(
                        ""Added to best fit set "", member, args);
                    if (extraBestFits == null) {
                        // Allocate maximum possible array
                        extraBestFits = new int[methodsOrCtors.length - 1];
                    }
                    extraBestFits[extraBestFitsCount] = i;
                    ++extraBestFitsCount;
                }
            }
        }

        if (firstBestFit < 0) {
            // Nothing was found
            return -1;
        } else if (extraBestFitsCount == 0) {
            // single best fit
            return firstBestFit;
        }

        // report remaining ambiguity
        StringBuffer buf = new StringBuffer();
        for (int j = -1; j != extraBestFitsCount; ++j) {
            int bestFitIndex;
            if (j == -1) {
                bestFitIndex = firstBestFit;
            } else {
                bestFitIndex = extraBestFits[j];
            }
            buf.append(""\n    "");
            buf.append(methodsOrCtors[bestFitIndex].toJavaDeclaration());
        }

        MemberBox firstFitMember = methodsOrCtors[firstBestFit];
        String memberName = firstFitMember.getName();
        String memberClass = firstFitMember.getDeclaringClass().getName();

        if (methodsOrCtors[0].isMethod()) {
            throw Context.reportRuntimeError3(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaMethod.java,preferSignature,"    private static int preferSignature(Object[] args, 
                                       Class[] sig1,
                                       boolean vararg1,
                                       Class[] sig2,
                                       boolean vararg2 )
    {
        // TODO: This test is pretty primitive. It bascially prefers
        // a matching no vararg method over a vararg method independent
        // of the type conversion cost. This can lead to unexpected results.
        int alength = args.length;
        if (!vararg1 && vararg2) {
            // prefer the no vararg signature
            return PREFERENCE_FIRST_ARG;
        } else if (vararg1 && !vararg2) {
            // prefer the no vararg signature
            return PREFERENCE_SECOND_ARG;
        } else if (vararg1 && vararg2) {
            if (sig1.length < sig2.length) {
                // prefer the signature with more explicit types
                return PREFERENCE_SECOND_ARG;                
            } else if (sig1.length > sig2.length) {
                // prefer the signature with more explicit types
                return PREFERENCE_FIRST_ARG;                
            } else {
                // Both are varargs and have the same length, so make the
                // decision with the explicit args. 
                alength = Math.min(args.length, sig1.length-1);
            }
        }
        
        int totalPreference = 0;
        for (int j = 0; j < alength; j++) {
            Class type1 = sig1[j];
            Class type2 = sig2[j];
            if (type1 == type2) {
                continue;
            }
            Object arg = args[j];

            // Determine which of type1, type2 is easier to convert from arg.

            int rank1 = NativeJavaObject.getConversionWeight(arg, type1);
            int rank2 = NativeJavaObject.getConversionWeight(arg, type2);

            int preference;
            if (rank1 < rank2) {
                preference = PREFERENCE_FIRST_ARG;
            } else if (rank1 > rank2) {
                preference = PREFERENCE_SECOND_ARG;
            } else {
                // Equal ranks
                if (rank1 == NativeJavaObject.CONVERSION_NONTRIVIAL) {
                    if (type1.isAssignableFrom(type2)) {
                        preference = PREFERENCE_SECOND_ARG;
                    } else if (type2.isAssignableFrom(type1)) {
                        preference = PREFERENCE_FIRST_ARG;
                    } else {
                        preference = PREFERENCE_AMBIGUOUS;
                    }
                } else {
                    preference = PREFERENCE_AMBIGUOUS;
                }
            }

            totalPreference |= preference;

            if (totalPreference == PREFERENCE_AMBIGUOUS) {
                break;
            }
        }
        return totalPreference;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaMethod.java,printDebug,"    private static void printDebug(String msg, MemberBox member,
                                   Object[] args)
    {
        if (debug) {
            StringBuffer sb = new StringBuffer();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,initMembers,"    protected void initMembers() {
        Class dynamicType;
        if (javaObject != null) {
            dynamicType = javaObject.getClass();
        } else {
            dynamicType = staticType;
        }
        members = JavaMembers.lookupClass(parent, dynamicType, staticType, 
                                          isAdapter);
        fieldAndMethods
            = members.getFieldAndMethodsObjects(this, javaObject, false);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,has,"    public boolean has(String name, Scriptable start) {
        return members.has(name, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,has,"    public boolean has(int index, Scriptable start) {
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,get,"    public Object get(String name, Scriptable start) {
        if (fieldAndMethods != null) {
            Object result = fieldAndMethods.get(name);
            if (result != null) {
                return result;
            }
        }
        // TODO: passing 'this' as the scope is bogus since it has
        //  no parent scope
        return members.get(this, name, javaObject, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,get,"    public Object get(int index, Scriptable start) {
        throw members.reportMemberNotFound(Integer.toString(index));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,put,"    public void put(String name, Scriptable start, Object value) {
        // We could be asked to modify the value of a property in the
        // prototype. Since we can't add a property to a Java object,
        // we modify it in the prototype rather than copy it down.
        if (prototype == null || members.has(name, false))
            members.put(this, name, javaObject, value, false);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,put,"    public void put(int index, Scriptable start, Object value) {
        throw members.reportMemberNotFound(Integer.toString(index));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,hasInstance,"    public boolean hasInstance(Scriptable value) {
        // This is an instance of a Java class, so always return false
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,getPrototype,"    public Scriptable getPrototype() {
        if (prototype == null && javaObject instanceof String) {
            return ScriptableObject.getClassPrototype(parent, ""String"");
        }
        return prototype;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,setPrototype,"    public void setPrototype(Scriptable m) {
        prototype = m;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,getParentScope,"    public Scriptable getParentScope() {
        return parent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,setParentScope,"    public void setParentScope(Scriptable m) {
        parent = m;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,getIds,"    public Object[] getIds() {
        return members.getIds(false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,wrap,"    public static Object wrap(Scriptable scope, Object obj, Class staticType) {

        Context cx = Context.getContext();
        return cx.getWrapFactory().wrap(cx, scope, obj, staticType);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,unwrap,"    public Object unwrap() {
        return javaObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,getClassName,"    public String getClassName() {
        return ""JavaObject"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,getDefaultValue,"    public Object getDefaultValue(Class hint)
    {
        Object value;
        if (hint == null) {
            if (javaObject instanceof Boolean) {
                hint = ScriptRuntime.BooleanClass;
            }
        }
        if (hint == null || hint == ScriptRuntime.StringClass) {
            value = javaObject.toString();
        } else {
            String converterName;
            if (hint == ScriptRuntime.BooleanClass) {
                converterName = ""booleanValue"";
            } else if (hint == ScriptRuntime.NumberClass) {
                converterName = ""doubleValue"";
            } else {
                throw Context.reportRuntimeError0(""msg.default.value"");
            }
            Object converterObject = get(converterName, this);
            if (converterObject instanceof Function) {
                Function f = (Function)converterObject;
                value = f.call(Context.getContext(), f.getParentScope(),
                               this, ScriptRuntime.emptyArgs);
            } else {
                if (hint == ScriptRuntime.NumberClass
                    && javaObject instanceof Boolean)
                {
                    boolean b = ((Boolean)javaObject).booleanValue();
                    value = ScriptRuntime.wrapNumber(b ? 1.0 : 0.0);
                } else {
                    value = javaObject.toString();
                }
            }
        }
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,canConvert,"    public static boolean canConvert(Object fromObj, Class to) {
        int weight = getConversionWeight(fromObj, to);

        return (weight < CONVERSION_NONE);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,getConversionWeight,"    static int getConversionWeight(Object fromObj, Class to) {
        int fromCode = getJSTypeCode(fromObj);

        switch (fromCode) {

        case JSTYPE_UNDEFINED:
            if (to == ScriptRuntime.StringClass ||
                to == ScriptRuntime.ObjectClass) {
                return 1;
            }
            break;

        case JSTYPE_NULL:
            if (!to.isPrimitive()) {
                return 1;
            }
            break;

        case JSTYPE_BOOLEAN:
            // ""boolean"" is #1
            if (to == Boolean.TYPE) {
                return 1;
            }
            else if (to == ScriptRuntime.BooleanClass) {
                return 2;
            }
            else if (to == ScriptRuntime.ObjectClass) {
                return 3;
            }
            else if (to == ScriptRuntime.StringClass) {
                return 4;
            }
            break;

        case JSTYPE_NUMBER:
            if (to.isPrimitive()) {
                if (to == Double.TYPE) {
                    return 1;
                }
                else if (to != Boolean.TYPE) {
                    return 1 + getSizeRank(to);
                }
            }
            else {
                if (to == ScriptRuntime.StringClass) {
                    // native numbers are #1-8
                    return 9;
                }
                else if (to == ScriptRuntime.ObjectClass) {
                    return 10;
                }
                else if (ScriptRuntime.NumberClass.isAssignableFrom(to)) {
                    // ""double"" is #1
                    return 2;
                }
            }
            break;

        case JSTYPE_STRING:
            if (to == ScriptRuntime.StringClass) {
                return 1;
            }
            else if (to.isInstance(fromObj)) {
                return 2;
            }
            else if (to.isPrimitive()) {
                if (to == Character.TYPE) {
                    return 3;
                } else if (to != Boolean.TYPE) {
                    return 4;
                }
            }
            break;

        case JSTYPE_JAVA_CLASS:
            if (to == ScriptRuntime.ClassClass) {
                return 1;
            }
            else if (to == ScriptRuntime.ObjectClass) {
                return 3;
            }
            else if (to == ScriptRuntime.StringClass) {
                return 4;
            }
            break;

        case JSTYPE_JAVA_OBJECT:
        case JSTYPE_JAVA_ARRAY:
            Object javaObj = fromObj;
            if (javaObj instanceof Wrapper) {
                javaObj = ((Wrapper)javaObj).unwrap();
            }
            if (to.isInstance(javaObj)) {
                return CONVERSION_NONTRIVIAL;
            }
            if (to == ScriptRuntime.StringClass) {
                return 2;
            }
            else if (to.isPrimitive() && to != Boolean.TYPE) {
                return (fromCode == JSTYPE_JAVA_ARRAY)
                       ? CONVERSION_NONE : 2 + getSizeRank(to);
            }
            break;

        case JSTYPE_OBJECT:
            // Other objects takes #1-#3 spots
            if (to == fromObj.getClass()) {
                // No conversion required
                return 1;
            }
            if (to.isArray()) {
                if (fromObj instanceof NativeArray) {
                    // This is a native array conversion to a java array
                    // Array conversions are all equal, and preferable to object
                    // and string conversion, per LC3.
                    return 1;
                }
            }
            else if (to == ScriptRuntime.ObjectClass) {
                return 2;
            }
            else if (to == ScriptRuntime.StringClass) {
                return 3;
            }
            else if (to == ScriptRuntime.DateClass) {
                if (fromObj instanceof NativeDate) {
                    // This is a native date to java date conversion
                    return 1;
                }
            }
            else if (to.isInterface()) {
                if (fromObj instanceof Function) {
                    // See comments in coerceType
                    if (to.getMethods().length == 1) {
                        return 1;
                    }
                }
                return 11;
            }
            else if (to.isPrimitive() && to != Boolean.TYPE) {
                return 3 + getSizeRank(to);
            }
            break;
        }

        return CONVERSION_NONE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,getSizeRank,"    static int getSizeRank(Class aType) {
        if (aType == Double.TYPE) {
            return 1;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,getJSTypeCode,"    private static int getJSTypeCode(Object value) {
        if (value == null) {
            return JSTYPE_NULL;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,coerceType,"    public static Object coerceType(Class type, Object value)
    {
        return coerceTypeImpl(type, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,coerceTypeImpl,"    static Object coerceTypeImpl(Class type, Object value)
    {
        if (value != null && value.getClass() == type) {
            return value;
        }

        switch (getJSTypeCode(value)) {

        case JSTYPE_NULL:
            // raise error if type.isPrimitive()
            if (type.isPrimitive()) {
                reportConversionError(value, type);
            }
            return null;

        case JSTYPE_UNDEFINED:
            if (type == ScriptRuntime.StringClass ||
                type == ScriptRuntime.ObjectClass) {
                return ""undefined"";
            }
            else {
                reportConversionError(""undefined"", type);
            }
            break;

        case JSTYPE_BOOLEAN:
            // Under LC3, only JS Booleans can be coerced into a Boolean value
            if (type == Boolean.TYPE ||
                type == ScriptRuntime.BooleanClass ||
                type == ScriptRuntime.ObjectClass) {
                return value;
            }
            else if (type == ScriptRuntime.StringClass) {
                return value.toString();
            }
            else {
                reportConversionError(value, type);
            }
            break;

        case JSTYPE_NUMBER:
            if (type == ScriptRuntime.StringClass) {
                return ScriptRuntime.toString(value);
            }
            else if (type == ScriptRuntime.ObjectClass) {
                return coerceToNumber(Double.TYPE, value);
            }
            else if ((type.isPrimitive() && type != Boolean.TYPE) ||
                     ScriptRuntime.NumberClass.isAssignableFrom(type)) {
                return coerceToNumber(type, value);
            }
            else {
                reportConversionError(value, type);
            }
            break;

        case JSTYPE_STRING:
            if (type == ScriptRuntime.StringClass || type.isInstance(value)) {
                return value;
            }
            else if (type == Character.TYPE
                     || type == ScriptRuntime.CharacterClass)
            {
                // Special case for converting a single char string to a
                // character
                // Placed here because it applies *only* to JS strings,
                // not other JS objects converted to strings
                if (((String)value).length() == 1) {
                    return new Character(((String)value).charAt(0));
                }
                else {
                    return coerceToNumber(type, value);
                }
            }
            else if ((type.isPrimitive() && type != Boolean.TYPE)
                     || ScriptRuntime.NumberClass.isAssignableFrom(type))
            {
                return coerceToNumber(type, value);
            }
            else {
                reportConversionError(value, type);
            }
            break;

        case JSTYPE_JAVA_CLASS:
            if (value instanceof Wrapper) {
                value = ((Wrapper)value).unwrap();
            }

            if (type == ScriptRuntime.ClassClass ||
                type == ScriptRuntime.ObjectClass) {
                return value;
            }
            else if (type == ScriptRuntime.StringClass) {
                return value.toString();
            }
            else {
                reportConversionError(value, type);
            }
            break;

        case JSTYPE_JAVA_OBJECT:
        case JSTYPE_JAVA_ARRAY:              
            if (value instanceof Wrapper) {
              value = ((Wrapper)value).unwrap();
            }
            if (type.isPrimitive()) {
                if (type == Boolean.TYPE) {
                    reportConversionError(value, type);
                }
                return coerceToNumber(type, value);
            }
            else { 
              if (type == ScriptRuntime.StringClass) {
                    return value.toString();
                }
                else {
                    if (type.isInstance(value)) {
                        return value;
                    }
                    else {
                        reportConversionError(value, type);
                    }
                }
            }
            break;

        case JSTYPE_OBJECT:
            if (type == ScriptRuntime.StringClass) {
                return ScriptRuntime.toString(value);
            }
            else if (type.isPrimitive()) {
                if (type == Boolean.TYPE) {
                    reportConversionError(value, type);
                }
                return coerceToNumber(type, value);
            }
            else if (type.isInstance(value)) {
                return value;
            }
            else if (type == ScriptRuntime.DateClass
                     && value instanceof NativeDate)
            {
                double time = ((NativeDate)value).getJSTimeValue();
                // XXX: This will replace NaN by 0
                return new Date((long)time);
            }
            else if (type.isArray() && value instanceof NativeArray) {
                // Make a new java array, and coerce the JS array components
                // to the target (component) type.
                NativeArray array = (NativeArray) value;
                long length = array.getLength();
                Class arrayType = type.getComponentType();
                Object Result = Array.newInstance(arrayType, (int)length);
                for (int i = 0 ; i < length ; ++i) {
                    try  {
                        Array.set(Result, i, coerceType(arrayType,
                                                        array.get(i, array)));
                    }
                    catch (EvaluatorException ee) {
                        reportConversionError(value, type);
                    }
                }

                return Result;
            }
            else if (value instanceof Wrapper) {
                value = ((Wrapper)value).unwrap();
                if (type.isInstance(value))
                    return value;
                reportConversionError(value, type);
            }
            else if (type.isInterface() && value instanceof Callable) {
                // Try to use function as implementation of Java interface.
                //
                // XXX: Curently only instances of ScriptableObject are
                // supported since the resulting interface proxies should
                // be reused next time conversion is made and generic
                // Callable has no storage for it. Weak references can
                // address it but for now use this restriction.
                if (value instanceof ScriptableObject) {
                    ScriptableObject so = (ScriptableObject)value;
                    Object key = Kit.makeHashKeyFromPair(
                        COERCED_INTERFACE_KEY, type);
                    Object old = so.getAssociatedValue(key);
                    if (old != null) {
                        // Function was already wrapped
                        return old;
                    }
                    Context cx = Context.getContext();
                    Object glue
                        = InterfaceAdapter.create(cx, type, (Callable)value);
                    // Store for later retrival
                    glue = so.associateValue(key, glue);
                    return glue;
                }
                reportConversionError(value, type);
            } else {
                reportConversionError(value, type);
            }
            break;
        }

        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,coerceToNumber,"    private static Object coerceToNumber(Class type, Object value)
    {
        Class valueClass = value.getClass();

        // Character
        if (type == Character.TYPE || type == ScriptRuntime.CharacterClass) {
            if (valueClass == ScriptRuntime.CharacterClass) {
                return value;
            }
            return new Character((char)toInteger(value,
                                                 ScriptRuntime.CharacterClass,
                                                 Character.MIN_VALUE,
                                                 Character.MAX_VALUE));
        }

        // Double, Float
        if (type == ScriptRuntime.ObjectClass ||
            type == ScriptRuntime.DoubleClass || type == Double.TYPE) {
            return valueClass == ScriptRuntime.DoubleClass
                ? value
                : new Double(toDouble(value));
        }

        if (type == ScriptRuntime.FloatClass || type == Float.TYPE) {
            if (valueClass == ScriptRuntime.FloatClass) {
                return value;
            }
            else {
                double number = toDouble(value);
                if (Double.isInfinite(number) || Double.isNaN(number)
                    || number == 0.0) {
                    return new Float((float)number);
                }
                else {
                    double absNumber = Math.abs(number);
                    if (absNumber < Float.MIN_VALUE) {
                        return new Float((number > 0.0) ? +0.0 : -0.0);
                    }
                    else if (absNumber > Float.MAX_VALUE) {
                        return new Float((number > 0.0) ?
                                         Float.POSITIVE_INFINITY :
                                         Float.NEGATIVE_INFINITY);
                    }
                    else {
                        return new Float((float)number);
                    }
                }
            }
        }

        // Integer, Long, Short, Byte
        if (type == ScriptRuntime.IntegerClass || type == Integer.TYPE) {
            if (valueClass == ScriptRuntime.IntegerClass) {
                return value;
            }
            else {
                return new Integer((int)toInteger(value,
                                                  ScriptRuntime.IntegerClass,
                                                  Integer.MIN_VALUE,
                                                  Integer.MAX_VALUE));
            }
        }

        if (type == ScriptRuntime.LongClass || type == Long.TYPE) {
            if (valueClass == ScriptRuntime.LongClass) {
                return value;
            } else {
                /* Long values cannot be expressed exactly in doubles.
                 * We thus use the largest and smallest double value that
                 * has a value expressible as a long value. We build these
                 * numerical values from their hexidecimal representations
                 * to avoid any problems caused by attempting to parse a
                 * decimal representation.
                 */
                final double max = Double.longBitsToDouble(0x43dfffffffffffffL);
                final double min = Double.longBitsToDouble(0xc3e0000000000000L);
                return new Long(toInteger(value,
                                          ScriptRuntime.LongClass,
                                          min,
                                          max));
            }
        }

        if (type == ScriptRuntime.ShortClass || type == Short.TYPE) {
            if (valueClass == ScriptRuntime.ShortClass) {
                return value;
            }
            else {
                return new Short((short)toInteger(value,
                                                  ScriptRuntime.ShortClass,
                                                  Short.MIN_VALUE,
                                                  Short.MAX_VALUE));
            }
        }

        if (type == ScriptRuntime.ByteClass || type == Byte.TYPE) {
            if (valueClass == ScriptRuntime.ByteClass) {
                return value;
            }
            else {
                return new Byte((byte)toInteger(value,
                                                ScriptRuntime.ByteClass,
                                                Byte.MIN_VALUE,
                                                Byte.MAX_VALUE));
            }
        }

        return new Double(toDouble(value));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,toDouble,"    private static double toDouble(Object value)
    {
        if (value instanceof Number) {
            return ((Number)value).doubleValue();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,toInteger,"    private static long toInteger(Object value, Class type,
                                  double min, double max)
    {
        double d = toDouble(value);

        if (Double.isInfinite(d) || Double.isNaN(d)) {
            // Convert to string first, for more readable message
            reportConversionError(ScriptRuntime.toString(value), type);
        }

        if (d > 0.0) {
            d = Math.floor(d);
        }
        else {
            d = Math.ceil(d);
        }

        if (d < min || d > max) {
            // Convert to string first, for more readable message
            reportConversionError(ScriptRuntime.toString(value), type);
        }
        return (long)d;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,reportConversionError,"    static void reportConversionError(Object value, Class type)
    {
        // It uses String.valueOf(value), not value.toString() since
        // value can be null, bug 282447.
        throw Context.reportRuntimeError2(
            ""msg.conversion.not.allowed"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,writeObject,"    private void writeObject(ObjectOutputStream out)
        throws IOException
    {
        out.defaultWriteObject();

        out.writeBoolean(isAdapter);
        if (isAdapter) {
            if (adapter_writeAdapterObject == null) {
                throw new IOException();
            }
            Object[] args = { javaObject, out };
            try {
                adapter_writeAdapterObject.invoke(null, args);
            } catch (Exception ex) {
                throw new IOException();
            }
        } else {
            out.writeObject(javaObject);
        }

        if (staticType != null) {
            out.writeObject(staticType.getClass().getName());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaObject.java,readObject,"    private void readObject(ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        in.defaultReadObject();

        isAdapter = in.readBoolean();
        if (isAdapter) {
            if (adapter_readAdapterObject == null)
                throw new ClassNotFoundException();
            Object[] args = { this, in };
            try {
                javaObject = adapter_readAdapterObject.invoke(null, args);
            } catch (Exception ex) {
                throw new IOException();
            }
        } else {
            javaObject = in.readObject();
        }

        String className = (String)in.readObject();
        if (className != null) {
            staticType = Class.forName(className);
        } else {
            staticType = null;
        }

        initMembers();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,getClassName,"    public String getClassName() {
        return ""JavaPackage"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,has,"    public boolean has(String id, Scriptable start) {
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,has,"    public boolean has(int index, Scriptable start) {
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,put,"    public void put(int index, Scriptable start, Object value) {
        throw Context.reportRuntimeError0(""msg.pkg.int"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,get,"    public Object get(String id, Scriptable start) {
        return getPkgProperty(id, start, true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,get,"    public Object get(int index, Scriptable start) {
        return NOT_FOUND;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,forcePackage,"    void forcePackage(String name, Scriptable scope)
    {
        NativeJavaPackage pkg;
        int end = name.indexOf('.');
        if (end == -1) {
            end = name.length();
        }

        String id = name.substring(0, end);
        Object cached = super.get(id, this);
        if (cached != null && cached instanceof NativeJavaPackage) {
            pkg = (NativeJavaPackage) cached;
        } else {
            String newPackage = packageName.length() == 0
                                ? id
                                : packageName + ""."" + id;
            pkg = new NativeJavaPackage(true, newPackage, classLoader);
            ScriptRuntime.setObjectProtoAndParent(pkg, scope);
            super.put(id, this, pkg);
        }
        if (end < name.length()) {
            pkg.forcePackage(name.substring(end+1), scope);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,getPkgProperty,"    synchronized Object getPkgProperty(String name, Scriptable start,
                                       boolean createPkg)
    {
        Object cached = super.get(name, start);
        if (cached != NOT_FOUND)
            return cached;

        String className = (packageName.length() == 0)
                               ? name : packageName + '.' + name;
        Context cx = Context.getContext();
        ClassShutter shutter = cx.getClassShutter();
        Scriptable newValue = null;
        if (shutter == null || shutter.visibleToScripts(className)) {
            Class cl = null;
            if (classLoader != null) {
                cl = Kit.classOrNull(classLoader, className);
            } else {
                cl = Kit.classOrNull(className);
            }
            if (cl != null) {
                newValue = new NativeJavaClass(getTopLevelScope(this), cl);
                newValue.setPrototype(getPrototype());
            }
        }
        if (newValue == null && createPkg) {
            NativeJavaPackage pkg;
            pkg = new NativeJavaPackage(true, className, classLoader);
            ScriptRuntime.setObjectProtoAndParent(pkg, getParentScope());
            newValue = pkg;
        }
        if (newValue != null) {
            // Make it available for fast lookup and sharing of
            // lazily-reflected constructors and static members.
            super.put(name, start, newValue);
        }
        return newValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,getDefaultValue,"    public Object getDefaultValue(Class ignored) {
        return toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,toString,"    public String toString() {
        return ""[JavaPackage "" + packageName + ""]"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,equals,"    public boolean equals(Object obj) {
        if(obj instanceof NativeJavaPackage) {
            NativeJavaPackage njp = (NativeJavaPackage)obj;
            return packageName.equals(njp.packageName) && classLoader == njp.classLoader;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaPackage.java,hashCode,"    public int hashCode() {
        return packageName.hashCode() ^ (classLoader == null ? 0 : classLoader.hashCode());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaTopPackage.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        return construct(cx, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaTopPackage.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        ClassLoader loader = null;
        if (args.length != 0) {
            Object arg = args[0];
            if (arg instanceof Wrapper) {
                arg = ((Wrapper)arg).unwrap();
            }
            if (arg instanceof ClassLoader) {
                loader = (ClassLoader)arg;
            }
        }
        if (loader == null) {
            Context.reportRuntimeError0(""msg.not.classloader"");
            return null;
        }
        return new NativeJavaPackage(true, """", loader);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaTopPackage.java,init,"    public static void init(Context cx, Scriptable scope, boolean sealed)
    {
        ClassLoader loader = cx.getApplicationClassLoader();
        final NativeJavaTopPackage top = new NativeJavaTopPackage(loader);
        top.setPrototype(getObjectPrototype(scope));
        top.setParentScope(scope);

        String[] names = Kit.semicolonSplit(commonPackages);
        for (int i = 0; i != names.length; ++i) {
            top.forcePackage(names[i], scope);
        }

        // getClass implementation
        IdFunctionObject getClass = new IdFunctionObject(top, FTAG, Id_getClass,
                                                         ""getClass"", 1, scope);

        // We want to get a real alias, and not a distinct JavaPackage
        // with the same packageName, so that we share classes and top
        // that are underneath.
        String[] topNames = { ""java"", ""javax"", ""org"", ""com"", ""edu"", ""net"" };
        NativeJavaPackage[] topPackages = new NativeJavaPackage[topNames.length];
        for (int i=0; i < topNames.length; i++) {
            topPackages[i] = (NativeJavaPackage)top.get(topNames[i], top);
        }

        // It's safe to downcast here since initStandardObjects takes
        // a ScriptableObject.
        ScriptableObject global = (ScriptableObject) scope;

        if (sealed) {
            getClass.sealObject();
        }
        getClass.exportAsScopeProperty();
        global.defineProperty(""Packages"", top, ScriptableObject.DONTENUM);
        for (int i=0; i < topNames.length; i++) {
            global.defineProperty(topNames[i], topPackages[i],",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaTopPackage.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (f.hasTag(FTAG)) {
            if (f.methodId() == Id_getClass) {
                return js_getClass(cx, scope, args);
            }
        }
        throw f.unknown();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeJavaTopPackage.java,js_getClass,"    private Scriptable js_getClass(Context cx, Scriptable scope, Object[] args)
    {
        if (args.length > 0  && args[0] instanceof Wrapper) {
            Scriptable result = this;
            Class cl = ((Wrapper) args[0]).unwrap().getClass();
            // Evaluate the class name by getting successive properties of
            // the string to find the appropriate NativeJavaClass object
            String name = cl.getName();
            int offset = 0;
            for (;;) {
                int index = name.indexOf('.', offset);
                String propName = index == -1
                                  ? name.substring(offset)
                                  : name.substring(offset, index);
                Object prop = result.get(propName, result);
                if (!(prop instanceof Scriptable))
                    break;  // fall through to error
                result = (Scriptable) prop;
                if (index == -1)
                    return result;
                offset = index+1;
            }
        }
        throw Context.reportRuntimeError0(""msg.not.java.obj"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeMath.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeMath obj = new NativeMath();
        obj.activatePrototypeMap(MAX_ID);
        obj.setPrototype(getObjectPrototype(scope));
        obj.setParentScope(scope);
        if (sealed) { obj.sealObject(); }
        ScriptableObject.defineProperty(scope, ""Math"", obj,
                                        ScriptableObject.DONTENUM);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeMath.java,getClassName,"    public String getClassName() { return ""Math""; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeMath.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        if (id <= LAST_METHOD_ID) {
            String name;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeMath.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(MATH_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        double x;
        int methodId = f.methodId();
        switch (methodId) {
            case Id_toSource:
                return ""Math"";

            case Id_abs:
                x = ScriptRuntime.toNumber(args, 0);
                // abs(-0.0) should be 0.0, but -0.0 < 0.0 == false
                x = (x == 0.0) ? 0.0 : (x < 0.0) ? -x : x;
                break;

            case Id_acos:
            case Id_asin:
                x = ScriptRuntime.toNumber(args, 0);
                if (x == x && -1.0 <= x && x <= 1.0) {
                    x = (methodId == Id_acos) ? Math.acos(x) : Math.asin(x);
                } else {
                    x = Double.NaN;
                }
                break;

            case Id_atan:
                x = ScriptRuntime.toNumber(args, 0);
                x = Math.atan(x);
                break;

            case Id_atan2:
                x = ScriptRuntime.toNumber(args, 0);
                x = Math.atan2(x, ScriptRuntime.toNumber(args, 1));
                break;

            case Id_ceil:
                x = ScriptRuntime.toNumber(args, 0);
                x = Math.ceil(x);
                break;

            case Id_cos:
                x = ScriptRuntime.toNumber(args, 0);
                x = (x == Double.POSITIVE_INFINITY
                     || x == Double.NEGATIVE_INFINITY)
                    ? Double.NaN : Math.cos(x);
                break;

            case Id_exp:
                x = ScriptRuntime.toNumber(args, 0);
                x = (x == Double.POSITIVE_INFINITY) ? x
                    : (x == Double.NEGATIVE_INFINITY) ? 0.0
                    : Math.exp(x);
                break;

            case Id_floor:
                x = ScriptRuntime.toNumber(args, 0);
                x = Math.floor(x);
                break;

            case Id_log:
                x = ScriptRuntime.toNumber(args, 0);
                // Java's log(<0) = -Infinity; we need NaN
                x = (x < 0) ? Double.NaN : Math.log(x);
                break;

            case Id_max:
            case Id_min:
                x = (methodId == Id_max)
                    ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
                for (int i = 0; i != args.length; ++i) {
                    double d = ScriptRuntime.toNumber(args[i]);
                    if (d != d) {
                        x = d; // NaN
                        break;
                    }
                    if (methodId == Id_max) {
                        // if (x < d) x = d; does not work due to -0.0 >= +0.0
                        x = Math.max(x, d);
                    } else {
                        x = Math.min(x, d);
                    }
                }
                break;

            case Id_pow:
                x = ScriptRuntime.toNumber(args, 0);
                x = js_pow(x, ScriptRuntime.toNumber(args, 1));
                break;

            case Id_random:
                x = Math.random();
                break;

            case Id_round:
                x = ScriptRuntime.toNumber(args, 0);
                if (x == x && x != Double.POSITIVE_INFINITY
                    && x != Double.NEGATIVE_INFINITY)
                {
                    // Round only finite x
                    long l = Math.round(x);
                    if (l != 0) {
                        x = l;
                    } else {
                        // We must propagate the sign of d into the result
                        if (x < 0.0) {
                            x = ScriptRuntime.negativeZero;
                        } else if (x != 0.0) {
                            x = 0.0;
                        }
                    }
                }
                break;

            case Id_sin:
                x = ScriptRuntime.toNumber(args, 0);
                x = (x == Double.POSITIVE_INFINITY
                     || x == Double.NEGATIVE_INFINITY)
                    ? Double.NaN : Math.sin(x);
                break;

            case Id_sqrt:
                x = ScriptRuntime.toNumber(args, 0);
                x = Math.sqrt(x);
                break;

            case Id_tan:
                x = ScriptRuntime.toNumber(args, 0);
                x = Math.tan(x);
                break;

            default: throw new IllegalStateException(String.valueOf(methodId));
        }
        return ScriptRuntime.wrapNumber(x);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeMath.java,js_pow,"    private double js_pow(double x, double y) {
        double result;
        if (y != y) {
            // y is NaN, result is always NaN
            result = y;
        } else if (y == 0) {
            // Java's pow(NaN, 0) = NaN; we need 1
            result = 1.0;
        } else if (x == 0) {
            // Many dirrerences from Java's Math.pow
            if (1 / x > 0) {
                result = (y > 0) ? 0 : Double.POSITIVE_INFINITY;
            } else {
                // x is -0, need to check if y is an odd integer
                long y_long = (long)y;
                if (y_long == y && (y_long & 0x1) != 0) {
                    result = (y > 0) ? -0.0 : Double.NEGATIVE_INFINITY;
                } else {
                    result = (y > 0) ? 0.0 : Double.POSITIVE_INFINITY;
                }
            }
        } else {
            result = Math.pow(x, y);
            if (result != result) {
                // Check for broken Java implementations that gives NaN
                // when they should return something else
                if (y == Double.POSITIVE_INFINITY) {
                    if (x < -1.0 || 1.0 < x) {
                        result = Double.POSITIVE_INFINITY;
                    } else if (-1.0 < x && x < 1.0) {
                        result = 0;
                    }
                } else if (y == Double.NEGATIVE_INFINITY) {
                    if (x < -1.0 || 1.0 < x) {
                        result = 0;
                    } else if (-1.0 < x && x < 1.0) {
                        result = Double.POSITIVE_INFINITY;
                    }
                } else if (x == Double.POSITIVE_INFINITY) {
                    result = (y > 0) ? Double.POSITIVE_INFINITY : 0.0;
                } else if (x == Double.NEGATIVE_INFINITY) {
                    long y_long = (long)y;
                    if (y_long == y && (y_long & 0x1) != 0) {
                        // y is odd integer
                        result = (y > 0) ? Double.NEGATIVE_INFINITY : -0.0;
                    } else {
                        result = (y > 0) ? Double.POSITIVE_INFINITY : 0.0;
                    }
                }
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeMath.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2004-03-17 13:51:32 CET
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 1: if (s.charAt(0)=='E') {id=Id_E; break L0;} break L;
            case 2: if (s.charAt(0)=='P' && s.charAt(1)=='I') {id=Id_PI; break L0;} break L;
            case 3: switch (s.charAt(0)) {
                case 'L': if (s.charAt(2)=='2' && s.charAt(1)=='N') {id=Id_LN2; break L0;} break L;
                case 'a': if (s.charAt(2)=='s' && s.charAt(1)=='b') {id=Id_abs; break L0;} break L;
                case 'c': if (s.charAt(2)=='s' && s.charAt(1)=='o') {id=Id_cos; break L0;} break L;
                case 'e': if (s.charAt(2)=='p' && s.charAt(1)=='x') {id=Id_exp; break L0;} break L;
                case 'l': if (s.charAt(2)=='g' && s.charAt(1)=='o') {id=Id_log; break L0;} break L;
                case 'm': c=s.charAt(2);
                    if (c=='n') { if (s.charAt(1)=='i') {id=Id_min; break L0;} }
                    else if (c=='x') { if (s.charAt(1)=='a') {id=Id_max; break L0;} }
                    break L;
                case 'p': if (s.charAt(2)=='w' && s.charAt(1)=='o') {id=Id_pow; break L0;} break L;
                case 's': if (s.charAt(2)=='n' && s.charAt(1)=='i') {id=Id_sin; break L0;} break L;
                case 't': if (s.charAt(2)=='n' && s.charAt(1)=='a') {id=Id_tan; break L0;} break L;
                } break L;
            case 4: switch (s.charAt(1)) {
                case 'N': X=""LN10"";id=Id_LN10; break L;
                case 'c': X=""acos"";id=Id_acos; break L;
                case 'e': X=""ceil"";id=Id_ceil; break L;
                case 'q': X=""sqrt"";id=Id_sqrt; break L;
                case 's': X=""asin"";id=Id_asin; break L;
                case 't': X=""atan"";id=Id_atan; break L;
                } break L;
            case 5: switch (s.charAt(0)) {
                case 'L': X=""LOG2E"";id=Id_LOG2E; break L;
                case 'S': X=""SQRT2"";id=Id_SQRT2; break L;
                case 'a': X=""atan2"";id=Id_atan2; break L;
                case 'f': X=""floor"";id=Id_floor; break L;
                case 'r': X=""round"";id=Id_round; break L;
                } break L;
            case 6: c=s.charAt(0);
                if (c=='L') { X=""LOG10E"";id=Id_LOG10E; }
                else if (c=='r') { X=""random"";id=Id_random; }
                break L;
            case 7: X=""SQRT1_2"";id=Id_SQRT1_2; break L;
            case 8: X=""toSource"";id=Id_toSource; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeNumber.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeNumber obj = new NativeNumber(0.0);
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeNumber.java,getClassName,"    public String getClassName()
    {
        return ""Number"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeNumber.java,fillConstructorProperties,"    protected void fillConstructorProperties(IdFunctionObject ctor)
    {
        final int attr = ScriptableObject.DONTENUM |
                         ScriptableObject.PERMANENT |
                         ScriptableObject.READONLY;

        ctor.defineProperty(""NaN"", ScriptRuntime.NaNobj, attr);
        ctor.defineProperty(""POSITIVE_INFINITY"",
                            ScriptRuntime.wrapNumber(Double.POSITIVE_INFINITY),
                            attr);
        ctor.defineProperty(""NEGATIVE_INFINITY"",
                            ScriptRuntime.wrapNumber(Double.NEGATIVE_INFINITY),
                            attr);
        ctor.defineProperty(""MAX_VALUE"",
                            ScriptRuntime.wrapNumber(Double.MAX_VALUE),
                            attr);
        ctor.defineProperty(""MIN_VALUE"",
                            ScriptRuntime.wrapNumber(Double.MIN_VALUE),
                            attr);

        super.fillConstructorProperties(ctor);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeNumber.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor:    arity=1; s=""constructor"";    break;
          case Id_toString:       arity=1; s=""toString"";       break;
          case Id_toLocaleString: arity=1; s=""toLocaleString""; break;
          case Id_toSource:       arity=0; s=""toSource"";       break;
          case Id_valueOf:        arity=0; s=""valueOf"";        break;
          case Id_toFixed:        arity=1; s=""toFixed"";        break;
          case Id_toExponential:  arity=1; s=""toExponential"";  break;
          case Id_toPrecision:    arity=1; s=""toPrecision"";    break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(NUMBER_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeNumber.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(NUMBER_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        if (id == Id_constructor) {
            double val = (args.length >= 1)
                ? ScriptRuntime.toNumber(args[0]) : 0.0;
            if (thisObj == null) {
                // new Number(val) creates a new Number object.
                return new NativeNumber(val);
            }
            // Number(val) converts val to a number value.
            return ScriptRuntime.wrapNumber(val);
        }

        // The rest of Number.prototype methods require thisObj to be Number

        if (!(thisObj instanceof NativeNumber))
            throw incompatibleCallError(f);
        double value = ((NativeNumber)thisObj).doubleValue;

        switch (id) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeNumber.java,toString,"    public String toString() {
        return ScriptRuntime.numberToString(doubleValue, 10);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeNumber.java,num_to,"    private static String num_to(double val,
                                 Object[] args,
                                 int zeroArgMode, int oneArgMode,
                                 int precisionMin, int precisionOffset)
    {
        int precision;
        if (args.length == 0) {
            precision = 0;
            oneArgMode = zeroArgMode;
        } else {
            /* We allow a larger range of precision than
               ECMA requires; this is permitted by ECMA. */
            precision = ScriptRuntime.toInt32(args[0]);
            if (precision < precisionMin || precision > MAX_PRECISION) {
                String msg = ScriptRuntime.getMessage1(
                    ""msg.bad.precision"", ScriptRuntime.toString(args[0]));
                throw ScriptRuntime.constructError(""RangeError"", msg);
            }
        }
        StringBuffer sb = new StringBuffer();
        DToA.JS_dtostr(sb, oneArgMode, precision + precisionOffset, val);
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeNumber.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:15:50 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 7: c=s.charAt(0);
                if (c=='t') { X=""toFixed"";id=Id_toFixed; }
                else if (c=='v') { X=""valueOf"";id=Id_valueOf; }
                break L;
            case 8: c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
                break L;
            case 11: c=s.charAt(0);
                if (c=='c') { X=""constructor"";id=Id_constructor; }
                else if (c=='t') { X=""toPrecision"";id=Id_toPrecision; }
                break L;
            case 13: X=""toExponential"";id=Id_toExponential; break L;
            case 14: X=""toLocaleString"";id=Id_toLocaleString; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeObject.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeObject obj = new NativeObject();
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeObject.java,getClassName,"    public String getClassName()
    {
        return ""Object"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeObject.java,toString,"    public String toString()
    {
        return ScriptRuntime.defaultObjectToString(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeObject.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor:    arity=1; s=""constructor"";    break;
          case Id_toString:       arity=0; s=""toString"";       break;
          case Id_toLocaleString: arity=0; s=""toLocaleString""; break;
          case Id_valueOf:        arity=0; s=""valueOf"";        break;
          case Id_hasOwnProperty: arity=1; s=""hasOwnProperty""; break;
          case Id_propertyIsEnumerable:
            arity=1; s=""propertyIsEnumerable""; break;
          case Id_isPrototypeOf:  arity=1; s=""isPrototypeOf"";  break;
          case Id_toSource:       arity=0; s=""toSource"";       break;
          case Id___defineGetter__:
            arity=2; s=""__defineGetter__"";     break;
          case Id___defineSetter__:
            arity=2; s=""__defineSetter__"";     break;
          case Id___lookupGetter__:
            arity=1; s=""__lookupGetter__"";     break;
          case Id___lookupSetter__:
            arity=1; s=""__lookupSetter__"";     break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(OBJECT_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeObject.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(OBJECT_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor: {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeObject.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:15:55 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 7: X=""valueOf"";id=Id_valueOf; break L;
            case 8: c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
                break L;
            case 11: X=""constructor"";id=Id_constructor; break L;
            case 13: X=""isPrototypeOf"";id=Id_isPrototypeOf; break L;
            case 14: c=s.charAt(0);
                if (c=='h') { X=""hasOwnProperty"";id=Id_hasOwnProperty; }
                else if (c=='t') { X=""toLocaleString"";id=Id_toLocaleString; }
                break L;
            case 16: c=s.charAt(2);
                if (c=='d') {
                    c=s.charAt(8);
                    if (c=='G') { X=""__defineGetter__"";id=Id___defineGetter__; }
                    else if (c=='S') { X=""__defineSetter__"";id=Id___defineSetter__; }
                }
                else if (c=='l') {
                    c=s.charAt(8);
                    if (c=='G') { X=""__lookupGetter__"";id=Id___lookupGetter__; }
                    else if (c=='S') { X=""__lookupSetter__"";id=Id___lookupSetter__; }
                }
                break L;
            case 20: X=""propertyIsEnumerable"";id=Id_propertyIsEnumerable; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeScript obj = new NativeScript(null);
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,getClassName,"    public String getClassName()
    {
        return ""Script"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        if (script != null) {
            return script.exec(cx, scope);
        }
        return Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        throw Context.reportRuntimeError0(""msg.script.is.not.constructor"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,getLength,"    public int getLength()
    {
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,getArity,"    public int getArity()
    {
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,decompile,"    String decompile(int indent, int flags)
    {
        if (script instanceof NativeFunction) {
            return ((NativeFunction)script).decompile(indent, flags);
        }
        return super.decompile(indent, flags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=1; s=""constructor""; break;
          case Id_toString:    arity=0; s=""toString"";    break;
          case Id_exec:        arity=0; s=""exec"";        break;
          case Id_compile:     arity=1; s=""compile"";     break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(SCRIPT_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(SCRIPT_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor: {
            String source = (args.length == 0)
                            ? """"
                            : ScriptRuntime.toString(args[0]);
            Script script = compile(cx, source);
            NativeScript nscript = new NativeScript(script);
            ScriptRuntime.setObjectProtoAndParent(nscript, scope);
            return nscript;
          }

          case Id_toString: {
            NativeScript real = realThis(thisObj, f);
            Script realScript = real.script;
            if (realScript == null) { return """"; }
            return cx.decompileScript(realScript, 0);
          }

          case Id_exec: {
            throw Context.reportRuntimeError1(
                ""msg.cant.call.indirect"", ""exec"");
          }

          case Id_compile: {
            NativeScript real = realThis(thisObj, f);
            String source = ScriptRuntime.toString(args, 0);
            real.script = compile(cx, source);
            return real;
          }
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,realThis,"    private static NativeScript realThis(Scriptable thisObj, IdFunctionObject f)
    {
        if (!(thisObj instanceof NativeScript))
            throw incompatibleCallError(f);
        return (NativeScript)thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,compile,"    private static Script compile(Context cx, String source)
    {
        int[] linep = { 0 };
        String filename = Context.getSourcePositionFromStack(linep);
        if (filename == null) {
            filename = ""<Script object>"";
            linep[0] = 1;
        }
        ErrorReporter reporter;
        reporter = DefaultErrorReporter.forEval(cx.getErrorReporter());
        return cx.compileString(source, null, reporter, filename,
                                linep[0], null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeScript.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:16:01 EDT
        L0: { id = 0; String X = null;
            L: switch (s.length()) {
            case 4: X=""exec"";id=Id_exec; break L;
            case 7: X=""compile"";id=Id_compile; break L;
            case 8: X=""toString"";id=Id_toString; break L;
            case 11: X=""constructor"";id=Id_constructor; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeString obj = new NativeString("""");
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,getClassName,"    public String getClassName() {
        return ""String"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        if (s.equals(""length"")) {
            return instanceIdInfo(DONTENUM | READONLY | PERMANENT, Id_length);
        }
        return super.findInstanceIdInfo(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        if (id == Id_length) { return ""length""; }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        if (id == Id_length) {
            return ScriptRuntime.wrapInt(string.length());
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,fillConstructorProperties,"    protected void fillConstructorProperties(IdFunctionObject ctor)
    {
        addIdFunctionProperty(ctor, STRING_TAG, ConstructorId_fromCharCode,
                ""fromCharCode"", 1);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_charAt, ""charAt"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_charCodeAt, ""charCodeAt"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_indexOf, ""indexOf"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_lastIndexOf, ""lastIndexOf"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_split, ""split"", 3);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_substring, ""substring"", 3);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_toLowerCase, ""toLowerCase"", 1);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_toUpperCase, ""toUpperCase"", 1);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_substr, ""substr"", 3);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_concat, ""concat"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_slice, ""slice"", 3);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_equalsIgnoreCase, ""equalsIgnoreCase"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_match, ""match"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_search, ""search"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_replace, ""replace"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_localeCompare, ""localeCompare"", 2);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_toLocaleLowerCase, ""toLocaleLowerCase"", 1);
        addIdFunctionProperty(ctor, STRING_TAG,
                ConstructorId_fromCharCode, ""fromCharCode"", 1);
        super.fillConstructorProperties(ctor);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor:       arity=1; s=""constructor"";       break;
          case Id_toString:          arity=0; s=""toString"";          break;
          case Id_toSource:          arity=0; s=""toSource"";          break;
          case Id_valueOf:           arity=0; s=""valueOf"";           break;
          case Id_charAt:            arity=1; s=""charAt"";            break;
          case Id_charCodeAt:        arity=1; s=""charCodeAt"";        break;
          case Id_indexOf:           arity=1; s=""indexOf"";           break;
          case Id_lastIndexOf:       arity=1; s=""lastIndexOf"";       break;
          case Id_split:             arity=2; s=""split"";             break;
          case Id_substring:         arity=2; s=""substring"";         break;
          case Id_toLowerCase:       arity=0; s=""toLowerCase"";       break;
          case Id_toUpperCase:       arity=0; s=""toUpperCase"";       break;
          case Id_substr:            arity=2; s=""substr"";            break;
          case Id_concat:            arity=1; s=""concat"";            break;
          case Id_slice:             arity=2; s=""slice"";             break;
          case Id_bold:              arity=0; s=""bold"";              break;
          case Id_italics:           arity=0; s=""italics"";           break;
          case Id_fixed:             arity=0; s=""fixed"";             break;
          case Id_strike:            arity=0; s=""strike"";            break;
          case Id_small:             arity=0; s=""small"";             break;
          case Id_big:               arity=0; s=""big"";               break;
          case Id_blink:             arity=0; s=""blink"";             break;
          case Id_sup:               arity=0; s=""sup"";               break;
          case Id_sub:               arity=0; s=""sub"";               break;
          case Id_fontsize:          arity=0; s=""fontsize"";          break;
          case Id_fontcolor:         arity=0; s=""fontcolor"";         break;
          case Id_link:              arity=0; s=""link"";              break;
          case Id_anchor:            arity=0; s=""anchor"";            break;
          case Id_equals:            arity=1; s=""equals"";            break;
          case Id_equalsIgnoreCase:  arity=1; s=""equalsIgnoreCase"";  break;
          case Id_match:             arity=1; s=""match"";             break;
          case Id_search:            arity=1; s=""search"";            break;
          case Id_replace:           arity=1; s=""replace"";           break;
          case Id_localeCompare:     arity=1; s=""localeCompare"";     break;
          case Id_toLocaleLowerCase: arity=0; s=""toLocaleLowerCase""; break;
          case Id_toLocaleUpperCase: arity=0; s=""toLocaleUpperCase""; break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(STRING_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(STRING_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
      again:
        for(;;) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,realThis,"    private static NativeString realThis(Scriptable thisObj, IdFunctionObject f)
    {
        if (!(thisObj instanceof NativeString))
            throw incompatibleCallError(f);
        return (NativeString)thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,tagify,"    private static String tagify(Object thisObj, String tag,
                                 String attribute, Object[] args)
    {
        String str = ScriptRuntime.toString(thisObj);
        StringBuffer result = new StringBuffer();
        result.append('<');
        result.append(tag);
        if (attribute != null) {
            result.append(' ');
            result.append(attribute);
            result.append(""=\"""");
            result.append(ScriptRuntime.toString(args, 0));
            result.append('""');
        }
        result.append('>');
        result.append(str);
        result.append(""</"");
        result.append(tag);
        result.append('>');
        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,toString,"    public String toString() {
        return string;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,get,"    public Object get(int index, Scriptable start) {
        if (0 <= index && index < string.length()) {
            return string.substring(index, index + 1);
        }
        return super.get(index, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,put,"    public void put(int index, Scriptable start, Object value) {
        if (0 <= index && index < string.length()) {
            return;
        }
        super.put(index, start, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,js_indexOf,"    private static int js_indexOf(String target, Object[] args) {
        String search = ScriptRuntime.toString(args, 0);
        double begin = ScriptRuntime.toInteger(args, 1);

        if (begin > target.length()) {
            return -1;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,js_lastIndexOf,"    private static int js_lastIndexOf(String target, Object[] args) {
        String search = ScriptRuntime.toString(args, 0);
        double end = ScriptRuntime.toNumber(args, 1);

        if (end != end || end > target.length())
            end = target.length();
        else if (end < 0)
            end = 0;

        return target.lastIndexOf(search, (int)end);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,find_split,"    private static int find_split(Context cx, Scriptable scope, String target,
                                  String separator, int version,
                                  RegExpProxy reProxy, Scriptable re,
                                  int[] ip, int[] matchlen, boolean[] matched,
                                  String[][] parensp)
    {
        int i = ip[0];
        int length = target.length();

        /*
         * Perl4 special case for str.split(' '), only if the user has selected
         * JavaScript1.2 explicitly.  Split on whitespace, and skip leading w/s.
         * Strange but true, apparently modeled after awk.
         */
        if (version == Context.VERSION_1_2 &&
            re == null && separator.length() == 1 && separator.charAt(0) == ' ')
        {
            /* Skip leading whitespace if at front of str. */
            if (i == 0) {
                while (i < length && Character.isWhitespace(target.charAt(i)))
                    i++;
                ip[0] = i;
            }

            /* Don't delimit whitespace at end of string. */
            if (i == length)
                return -1;

            /* Skip over the non-whitespace chars. */
            while (i < length
                   && !Character.isWhitespace(target.charAt(i)))
                i++;

            /* Now skip the next run of whitespace. */
            int j = i;
            while (j < length && Character.isWhitespace(target.charAt(j)))
                j++;

            /* Update matchlen to count delimiter chars. */
            matchlen[0] = j - i;
            return i;
        }

        /*
         * Stop if past end of string.  If at end of string, we will
         * return target length, so that
         *
         *  ""ab,"".split(',') => new Array(""ab"", """")
         *
         * and the resulting array converts back to the string ""ab,""
         * for symmetry.  NB: This differs from perl, which drops the
         * trailing empty substring if the LIMIT argument is omitted.
         */
        if (i > length)
            return -1;

        /*
         * Match a regular expression against the separator at or
         * above index i.  Return -1 at end of string instead of
         * trying for a match, so we don't get stuck in a loop.
         */
        if (re != null) {
            return reProxy.find_split(cx, scope, target, separator, re,
                                      ip, matchlen, matched, parensp);
        }

        /*
         * Deviate from ECMA by never splitting an empty string by any separator
         * string into a non-empty array (an array of length 1 that contains the
         * empty string).
         */
        if (version != Context.VERSION_DEFAULT && version < Context.VERSION_1_3
            && length == 0)
            return -1;

        /*
         * Special case: if sep is the empty string, split str into
         * one character substrings.  Let our caller worry about
         * whether to split once at end of string into an empty
         * substring.
         *
         * For 1.2 compatibility, at the end of the string, we return the length as
         * the result, and set the separator length to 1 -- this allows the caller
         * to include an additional null string at the end of the substring list.
         */
        if (separator.length() == 0) {
            if (version == Context.VERSION_1_2) {
                if (i == length) {
                    matchlen[0] = 1;
                    return i;
                }
                return i + 1;
            }
            return (i == length) ? -1 : i + 1;
        }

        /* Punt to j.l.s.indexOf; return target length if separator is
         * not found.
         */
        if (ip[0] >= length)
            return length;

        i = target.indexOf(separator, ip[0]);

        return (i != -1) ? i : length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,js_split,"    private static Object js_split(Context cx, Scriptable scope,
                                   String target, Object[] args)
    {
        // create an empty Array to return;
        Scriptable top = getTopLevelScope(scope);
        Scriptable result = ScriptRuntime.newObject(cx, top, ""Array"", null);

        // return an array consisting of the target if no separator given
        // don't check against undefined, because we want
        // 'fooundefinedbar'.split(void 0) to split to ['foo', 'bar']
        if (args.length < 1) {
            result.put(0, result, target);
            return result;
        }

        // Use the second argument as the split limit, if given.
        boolean limited = (args.length > 1) && (args[1] != Undefined.instance);
        long limit = 0;  // Initialize to avoid warning.
        if (limited) {
            /* Clamp limit between 0 and 1 + string length. */
            limit = ScriptRuntime.toUint32(args[1]);
            if (limit > target.length())
                limit = 1 + target.length();
        }

        String separator = null;
        int[] matchlen = new int[1];
        Scriptable re = null;
        RegExpProxy reProxy = null;
        if (args[0] instanceof Scriptable) {
            reProxy = ScriptRuntime.getRegExpProxy(cx);
            if (reProxy != null) {
                Scriptable test = (Scriptable)args[0];
                if (reProxy.isRegExp(test)) {
                    re = test;
                }
            }
        }
        if (re == null) {
            separator = ScriptRuntime.toString(args[0]);
            matchlen[0] = separator.length();
        }

        // split target with separator or re
        int[] ip = { 0 };
        int match;
        int len = 0;
        boolean[] matched = { false };
        String[][] parens = { null };
        int version = cx.getLanguageVersion();
        while ((match = find_split(cx, scope, target, separator, version,
                                   reProxy, re, ip, matchlen, matched, parens))
               >= 0)
        {
            if ((limited && len >= limit) || (match > target.length()))
                break;

            String substr;
            if (target.length() == 0)
                substr = target;
            else
                substr = target.substring(ip[0], match);

            result.put(len, result, substr);
            len++;
        /*
         * Imitate perl's feature of including parenthesized substrings
         * that matched part of the delimiter in the new array, after the
         * split substring that was delimited.
         */
            if (re != null && matched[0] == true) {
                int size = parens[0].length;
                for (int num = 0; num < size; num++) {
                    if (limited && len >= limit)
                        break;
                    result.put(len, result, parens[0][num]);
                    len++;
                }
                matched[0] = false;
            }
            ip[0] = match + matchlen[0];

            if (version < Context.VERSION_1_3
                && version != Context.VERSION_DEFAULT)
            {
        /*
         * Deviate from ECMA to imitate Perl, which omits a final
         * split unless a limit argument is given and big enough.
         */
                if (!limited && ip[0] == target.length())
                    break;
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,js_substring,"    private static String js_substring(Context cx, String target,
                                       Object[] args)
    {
        int length = target.length();
        double start = ScriptRuntime.toInteger(args, 0);
        double end;

        if (start < 0)
            start = 0;
        else if (start > length)
            start = length;

        if (args.length <= 1 || args[1] == Undefined.instance) {
            end = length;
        } else {
            end = ScriptRuntime.toInteger(args[1]);
            if (end < 0)
                end = 0;
            else if (end > length)
                end = length;

            // swap if end < start
            if (end < start) {
                if (cx.getLanguageVersion() != Context.VERSION_1_2) {
                    double temp = start;
                    start = end;
                    end = temp;
                } else {
                    // Emulate old JDK1.0 java.lang.String.substring()
                    end = start;
                }
            }
        }
        return target.substring((int)start, (int)end);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,getLength,"    int getLength() {
        return string.length();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,js_substr,"    private static String js_substr(String target, Object[] args) {
        if (args.length < 1)
            return target;

        double begin = ScriptRuntime.toInteger(args[0]);
        double end;
        int length = target.length();

        if (begin < 0) {
            begin += length;
            if (begin < 0)
                begin = 0;
        } else if (begin > length) {
            begin = length;
        }

        if (args.length == 1) {
            end = length;
        } else {
            end = ScriptRuntime.toInteger(args[1]);
            if (end < 0)
                end = 0;
            end += begin;
            if (end > length)
                end = length;
        }

        return target.substring((int)begin, (int)end);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,js_concat,"    private static String js_concat(String target, Object[] args) {
        int N = args.length;
        if (N == 0) { return target; }
        else if (N == 1) {
            String arg = ScriptRuntime.toString(args[0]);
            return target.concat(arg);
        }

        // Find total capacity for the final string to avoid unnecessary
        // re-allocations in StringBuffer
        int size = target.length();
        String[] argsAsStrings = new String[N];
        for (int i = 0; i != N; ++i) {
            String s = ScriptRuntime.toString(args[i]);
            argsAsStrings[i] = s;
            size += s.length();
        }

        StringBuffer result = new StringBuffer(size);
        result.append(target);
        for (int i = 0; i != N; ++i) {
            result.append(argsAsStrings[i]);
        }
        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,js_slice,"    private static String js_slice(String target, Object[] args) {
        if (args.length != 0) {
            double begin = ScriptRuntime.toInteger(args[0]);
            double end;
            int length = target.length();
            if (begin < 0) {
                begin += length;
                if (begin < 0)
                    begin = 0;
            } else if (begin > length) {
                begin = length;
            }

            if (args.length == 1) {
                end = length;
            } else {
                end = ScriptRuntime.toInteger(args[1]);
                if (end < 0) {
                    end += length;
                    if (end < 0)
                        end = 0;
                } else if (end > length) {
                    end = length;
                }
                if (end < begin)
                    end = begin;
            }
            return target.substring((int)begin, (int)end);
        }
        return target;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeString.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-01 22:11:49 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 3: c=s.charAt(2);
                if (c=='b') { if (s.charAt(0)=='s' && s.charAt(1)=='u') {id=Id_sub; break L0;} }
                else if (c=='g') { if (s.charAt(0)=='b' && s.charAt(1)=='i') {id=Id_big; break L0;} }
                else if (c=='p') { if (s.charAt(0)=='s' && s.charAt(1)=='u') {id=Id_sup; break L0;} }
                break L;
            case 4: c=s.charAt(0);
                if (c=='b') { X=""bold"";id=Id_bold; }
                else if (c=='l') { X=""link"";id=Id_link; }
                break L;
            case 5: switch (s.charAt(4)) {
                case 'd': X=""fixed"";id=Id_fixed; break L;
                case 'e': X=""slice"";id=Id_slice; break L;
                case 'h': X=""match"";id=Id_match; break L;
                case 'k': X=""blink"";id=Id_blink; break L;
                case 'l': X=""small"";id=Id_small; break L;
                case 't': X=""split"";id=Id_split; break L;
                } break L;
            case 6: switch (s.charAt(1)) {
                case 'e': X=""search"";id=Id_search; break L;
                case 'h': X=""charAt"";id=Id_charAt; break L;
                case 'n': X=""anchor"";id=Id_anchor; break L;
                case 'o': X=""concat"";id=Id_concat; break L;
                case 'q': X=""equals"";id=Id_equals; break L;
                case 't': X=""strike"";id=Id_strike; break L;
                case 'u': X=""substr"";id=Id_substr; break L;
                } break L;
            case 7: switch (s.charAt(1)) {
                case 'a': X=""valueOf"";id=Id_valueOf; break L;
                case 'e': X=""replace"";id=Id_replace; break L;
                case 'n': X=""indexOf"";id=Id_indexOf; break L;
                case 't': X=""italics"";id=Id_italics; break L;
                } break L;
            case 8: c=s.charAt(4);
                if (c=='r') { X=""toString"";id=Id_toString; }
                else if (c=='s') { X=""fontsize"";id=Id_fontsize; }
                else if (c=='u') { X=""toSource"";id=Id_toSource; }
                break L;
            case 9: c=s.charAt(0);
                if (c=='f') { X=""fontcolor"";id=Id_fontcolor; }
                else if (c=='s') { X=""substring"";id=Id_substring; }
                break L;
            case 10: X=""charCodeAt"";id=Id_charCodeAt; break L;
            case 11: switch (s.charAt(2)) {
                case 'L': X=""toLowerCase"";id=Id_toLowerCase; break L;
                case 'U': X=""toUpperCase"";id=Id_toUpperCase; break L;
                case 'n': X=""constructor"";id=Id_constructor; break L;
                case 's': X=""lastIndexOf"";id=Id_lastIndexOf; break L;
                } break L;
            case 13: X=""localeCompare"";id=Id_localeCompare; break L;
            case 16: X=""equalsIgnoreCase"";id=Id_equalsIgnoreCase; break L;
            case 17: c=s.charAt(8);
                if (c=='L') { X=""toLocaleLowerCase"";id=Id_toLocaleLowerCase; }
                else if (c=='U') { X=""toLocaleUpperCase"";id=Id_toLocaleUpperCase; }
                break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,init,"    static void init(Scriptable scope, boolean sealed)
    {
        NativeWith obj = new NativeWith();

        obj.setParentScope(scope);
        obj.setPrototype(ScriptableObject.getObjectPrototype(scope));

        IdFunctionObject ctor = new IdFunctionObject(obj, FTAG, Id_constructor,
                                         ""With"", 0, scope);
        ctor.markAsConstructor(obj);
        if (sealed) {
            ctor.sealObject();
        }
        ctor.exportAsScopeProperty();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,getClassName,"    public String getClassName() {
        return ""With"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,has,"    public boolean has(String id, Scriptable start)
    {
        return prototype.has(id, prototype);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,has,"    public boolean has(int index, Scriptable start)
    {
        return prototype.has(index, prototype);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,get,"    public Object get(String id, Scriptable start)
    {
        if (start == this)
            start = prototype;
        return prototype.get(id, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,get,"    public Object get(int index, Scriptable start)
    {
        if (start == this)
            start = prototype;
        return prototype.get(index, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,put,"    public void put(String id, Scriptable start, Object value)
    {
        if (start == this)
            start = prototype;
        prototype.put(id, start, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,put,"    public void put(int index, Scriptable start, Object value)
    {
        if (start == this)
            start = prototype;
        prototype.put(index, start, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,delete,"    public void delete(String id)
    {
        prototype.delete(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,delete,"    public void delete(int index)
    {
        prototype.delete(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,getPrototype,"    public Scriptable getPrototype() {
        return prototype;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,setPrototype,"    public void setPrototype(Scriptable prototype) {
        this.prototype = prototype;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,getParentScope,"    public Scriptable getParentScope() {
        return parent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,setParentScope,"    public void setParentScope(Scriptable parent) {
        this.parent = parent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,getIds,"    public Object[] getIds() {
        return prototype.getIds();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,getDefaultValue,"    public Object getDefaultValue(Class typeHint) {
        return prototype.getDefaultValue(typeHint);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,hasInstance,"    public boolean hasInstance(Scriptable value) {
        return prototype.hasInstance(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,updateDotQuery,"    protected Object updateDotQuery(boolean value)
    {
        // NativeWith itself does not support it
        throw new IllegalStateException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (f.hasTag(FTAG)) {
            if (f.methodId() == Id_constructor) {
                throw Context.reportRuntimeError1(""msg.cant.call.indirect"", ""With"");
            }
        }
        throw f.unknown();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,isWithFunction,"    static boolean isWithFunction(Object functionObj)
    {
        if (functionObj instanceof IdFunctionObject) {
            IdFunctionObject f = (IdFunctionObject)functionObj;
            return f.hasTag(FTAG) && f.methodId() == Id_constructor;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeWith.java,newWithSpecial,"    static Object newWithSpecial(Context cx, Scriptable scope, Object[] args)
    {
        ScriptRuntime.checkDeprecated(cx, ""With"");
        scope = ScriptableObject.getTopLevelScope(scope);
        NativeWith thisObj = new NativeWith();
        thisObj.setPrototype(args.length == 0
                             ? ScriptableObject.getClassPrototype(scope,
                                                                  ""Object"")
                             : ScriptRuntime.toObject(cx, scope, args[0]));
        thisObj.setParentScope(scope);
        return thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getJumpStatement,"        public final Jump getJumpStatement()
        {
            if (!(type == Token.BREAK || type == Token.CONTINUE)) Kit.codeBug();
            return jumpNode;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setJumpStatement,"        public final void setJumpStatement(Jump jumpStatement)
        {
            if (!(type == Token.BREAK || type == Token.CONTINUE)) Kit.codeBug();
            if (jumpStatement == null) Kit.codeBug();
            if (this.jumpNode != null) Kit.codeBug(); //only once
            this.jumpNode = jumpStatement;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getDefault,"        public final Node getDefault()
        {
            if (!(type == Token.SWITCH)) Kit.codeBug();
            return target2;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setDefault,"        public final void setDefault(Node defaultTarget)
        {
            if (!(type == Token.SWITCH)) Kit.codeBug();
            if (defaultTarget.type != Token.TARGET) Kit.codeBug();
            if (target2 != null) Kit.codeBug(); //only once
            target2 = defaultTarget;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getFinally,"        public final Node getFinally()
        {
            if (!(type == Token.TRY)) Kit.codeBug();
            return target2;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setFinally,"        public final void setFinally(Node finallyTarget)
        {
            if (!(type == Token.TRY)) Kit.codeBug();
            if (finallyTarget.type != Token.TARGET) Kit.codeBug();
            if (target2 != null) Kit.codeBug(); //only once
            target2 = finallyTarget;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getLoop,"        public final Jump getLoop()
        {
            if (!(type == Token.LABEL)) Kit.codeBug();
            return jumpNode;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setLoop,"        public final void setLoop(Jump loop)
        {
            if (!(type == Token.LABEL)) Kit.codeBug();
            if (loop == null) Kit.codeBug();
            if (jumpNode != null) Kit.codeBug(); //only once
            jumpNode = loop;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getContinue,"        public final Node getContinue()
        {
            if (type != Token.LOOP) Kit.codeBug();
            return target2;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setContinue,"        public final void setContinue(Node continueTarget)
        {
            if (type != Token.LOOP) Kit.codeBug();
            if (continueTarget.type != Token.TARGET) Kit.codeBug();
            if (target2 != null) Kit.codeBug(); //only once
            target2 = continueTarget;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,splitScope,"        public static Scope splitScope(Scope scope) {
            Scope result = new Scope(scope.getType());
            result.symbolTable = scope.symbolTable;
            scope.symbolTable = null;
            result.parent = scope.parent;
            scope.parent = result;
            result.top = scope.top;
            return result;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,joinScopes,"        public static void joinScopes(Scope source, Scope dest) {
            source.ensureSymbolTable();
            dest.ensureSymbolTable();
            if (!Collections.disjoint(source.symbolTable.keySet(),
                                      dest.symbolTable.keySet()))
            {
                throw Kit.codeBug();
            }
            dest.symbolTable.putAll(source.symbolTable);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setParent,"        public void setParent(Scope parent) {
            this.parent = parent;
            this.top = parent == null ? (ScriptOrFnNode)this : parent.top;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getParentScope,"        public Scope getParentScope() {
            return parent;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getDefiningScope,"        public Scope getDefiningScope(String name) {
            for (Scope sn=this; sn != null; sn = sn.parent) {
                if (sn.symbolTable == null)
                    continue;
                if (sn.symbolTable.containsKey(name))
                    return sn;
            }
            return null;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getSymbol,"        public Symbol getSymbol(String name) {
            return symbolTable == null ? null : symbolTable.get(name);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,putSymbol,"        public void putSymbol(String name, Symbol symbol) {
            ensureSymbolTable();
            symbolTable.put(name, symbol);
            symbol.containingTable = this;
            top.addSymbol(symbol);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getSymbolTable,"        public Map<String,Symbol> getSymbolTable() {
            return symbolTable;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,ensureSymbolTable,"        private void ensureSymbolTable() {
            if (symbolTable == null) {
                symbolTable = new LinkedHashMap<String,Symbol>(5);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,newNumber,"    public static Node newNumber(double number) {
        return new NumberNode(number);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,newString,"    public static Node newString(String str) {
        return new StringNode(Token.STRING, str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,newString,"    public static Node newString(int type, String str) {
        return new StringNode(type, str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getType,"    public int getType() {
        return type;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setType,"    public void setType(int type) {
        this.type = type;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,hasChildren,"    public boolean hasChildren() {
        return first != null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getFirstChild,"    public Node getFirstChild() {
        return first;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getLastChild,"    public Node getLastChild() {
        return last;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getNext,"    public Node getNext() {
        return next;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getChildBefore,"    public Node getChildBefore(Node child) {
        if (child == first)
            return null;
        Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null)
                throw new RuntimeException(""node is not a child"");
        }
        return n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getLastSibling,"    public Node getLastSibling() {
        Node n = this;
        while (n.next != null) {
            n = n.next;
        }
        return n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,addChildToFront,"    public void addChildToFront(Node child) {
        child.next = first;
        first = child;
        if (last == null) {
            last = child;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,addChildToBack,"    public void addChildToBack(Node child) {
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,addChildrenToFront,"    public void addChildrenToFront(Node children) {
        Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,addChildrenToBack,"    public void addChildrenToBack(Node children) {
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,addChildBefore,"    public void addChildBefore(Node newChild, Node node) {
        if (newChild.next != null)
            throw new RuntimeException(
                      ""newChild had siblings in addChildBefore"");
        if (first == node) {
            newChild.next = first;
            first = newChild;
            return;
        }
        Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,addChildAfter,"    public void addChildAfter(Node newChild, Node node) {
        if (newChild.next != null)
            throw new RuntimeException(
                      ""newChild had siblings in addChildAfter"");
        newChild.next = node.next;
        node.next = newChild;
        if (last == node)
            last = newChild;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,removeChild,"    public void removeChild(Node child) {
        Node prev = getChildBefore(child);
        if (prev == null)
            first = first.next;
        else
            prev.next = child.next;
        if (child == last) last = prev;
        child.next = null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,replaceChild,"    public void replaceChild(Node child, Node newChild) {
        newChild.next = child.next;
        if (child == first) {
            first = newChild;
        } else {
            Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last)
            last = newChild;
        child.next = null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,replaceChildAfter,"    public void replaceChildAfter(Node prevChild, Node newChild) {
        Node child = prevChild.next;
        newChild.next = child.next;
        prevChild.next = newChild;
        if (child == last)
            last = newChild;
        child.next = null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,propToString,"    private static final String propToString(int propType)
    {
        if (Token.printTrees) {
            // If Context.printTrees is false, the compiler
            // can remove all these strings.
            switch (propType) {
                case FUNCTION_PROP:      return ""function"";
                case LOCAL_PROP:         return ""local"";
                case LOCAL_BLOCK_PROP:   return ""local_block"";
                case REGEXP_PROP:        return ""regexp"";
                case CASEARRAY_PROP:     return ""casearray"";

                case TARGETBLOCK_PROP:   return ""targetblock"";
                case VARIABLE_PROP:      return ""variable"";
                case ISNUMBER_PROP:      return ""isnumber"";
                case DIRECTCALL_PROP:    return ""directcall"";

                case SPECIALCALL_PROP:   return ""specialcall"";
                case SKIP_INDEXES_PROP:  return ""skip_indexes"";
                case OBJECT_IDS_PROP:    return ""object_ids_prop"";
                case INCRDECR_PROP:      return ""incrdecr_prop"";
                case CATCH_SCOPE_PROP:   return ""catch_scope_prop"";
                case LABEL_ID_PROP:      return ""label_id_prop"";
                case MEMBER_TYPE_PROP:   return ""member_type_prop"";
                case NAME_PROP:          return ""name_prop"";
                case CONTROL_BLOCK_PROP: return ""control_block_prop"";
                case PARENTHESIZED_PROP: return ""parenthesized_prop"";
                case GENERATOR_END_PROP: return ""generator_end"";
                case DESTRUCTURING_ARRAY_LENGTH:
                                         return ""destructuring_array_length"";
                case DESTRUCTURING_NAMES:return ""destructuring_names"";

                default: Kit.codeBug();
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,lookupProperty,"    private PropListItem lookupProperty(int propType)
    {
        PropListItem x = propListHead;
        while (x != null && propType != x.type) {
            x = x.next;
        }
        return x;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,ensureProperty,"    private PropListItem ensureProperty(int propType)
    {
        PropListItem item = lookupProperty(propType);
        if (item == null) {
            item = new PropListItem();
            item.type = propType;
            item.next = propListHead;
            propListHead = item;
        }
        return item;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,removeProp,"    public void removeProp(int propType)
    {
        PropListItem x = propListHead;
        if (x != null) {
            PropListItem prev = null;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getProp,"    public Object getProp(int propType)
    {
        PropListItem item = lookupProperty(propType);
        if (item == null) { return null; }
        return item.objectValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getIntProp,"    public int getIntProp(int propType, int defaultValue)
    {
        PropListItem item = lookupProperty(propType);
        if (item == null) { return defaultValue; }
        return item.intValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getExistingIntProp,"    public int getExistingIntProp(int propType)
    {
        PropListItem item = lookupProperty(propType);
        if (item == null) { Kit.codeBug(); }
        return item.intValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,putProp,"    public void putProp(int propType, Object prop)
    {
        if (prop == null) {
            removeProp(propType);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,putIntProp,"    public void putIntProp(int propType, int prop)
    {
        PropListItem item = ensureProperty(propType);
        item.intValue = prop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getLineno,"    public int getLineno() {
        return lineno;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getDouble,"    public final double getDouble() {
        return ((NumberNode)this).number;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setDouble,"    public final void setDouble(double number) {
        ((NumberNode)this).number = number;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getString,"    public final String getString() {
        return ((StringNode)this).str;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setString,"    public final void setString(String s) {
        if (s == null) Kit.codeBug();
        ((StringNode)this).str = s;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,getScope,"    public final Scope getScope() {
        return ((StringNode)this).scope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,setScope,"    public final void setScope(Scope s) {
        if (s == null) Kit.codeBug();
        if (!(this instanceof StringNode)) {
            throw Kit.codeBug();
        }
        ((StringNode)this).scope = s;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,newTarget,"    public static Node newTarget()
    {
        return new Node(Token.TARGET);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,labelId,"    public final int labelId()
    {
        if (type != Token.TARGET && type != Token.YIELD) Kit.codeBug();
        return getIntProp(LABEL_ID_PROP, -1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,labelId,"    public void labelId(int labelId)
    {
        if (type != Token.TARGET  && type != Token.YIELD) Kit.codeBug();
        putIntProp(LABEL_ID_PROP, labelId);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,hasConsistentReturnUsage,"    public boolean hasConsistentReturnUsage()
    {
        int n = endCheck();
        return (n & END_RETURNS_VALUE) == 0 ||
               (n & (END_DROPS_OFF|END_RETURNS|END_YIELDS)) == 0;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,endCheckIf,"    private int endCheckIf()
    {
        Node th, el;
        int rv = END_UNREACHED;

        th = next;
        el = ((Jump)this).target;

        rv = th.endCheck();

        if (el != null)
            rv |= el.endCheck();
        else
            rv |= END_DROPS_OFF;

        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,endCheckSwitch,"    private int endCheckSwitch()
    {
        Node n;
        int rv = END_UNREACHED;

        // examine the cases
        for (n = first.next; n != null; n = n.next)
        {
            if (n.type == Token.CASE) {
                rv |= ((Jump)n).target.endCheck();
            } else
                break;
        }

        // we don't care how the cases drop into each other
        rv &= ~END_DROPS_OFF;

        // examine the default
        n = ((Jump)this).getDefault();
        if (n != null)
            rv |= n.endCheck();
        else
            rv |= END_DROPS_OFF;

        // remove the switch block
        rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);

        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,endCheckTry,"    private int endCheckTry()
    {
        Node n;
        int rv = END_UNREACHED;

        // check the finally if it exists
        n = ((Jump)this).getFinally();
        if(n != null) {
            rv = n.next.first.endCheck();
        } else {
            rv = END_DROPS_OFF;
        }

        // if the finally block always returns, then none of the returns
        // in the try or catch blocks matter
        if ((rv & END_DROPS_OFF) != 0) {
            rv &= ~END_DROPS_OFF;

            // examine the try block
            rv |= first.endCheck();

            // check each catch block
            n = ((Jump)this).target;
            if (n != null)
            {
                // point to the first catch_scope
                for (n = n.next.first; n != null; n = n.next.next)
                {
                    // check the block of user code in the catch_scope
                    rv |= n.next.first.next.first.endCheck();
                }
            }
        }

        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,endCheckLoop,"    private int endCheckLoop()
    {
        Node n;
        int rv = END_UNREACHED;

        // To find the loop body, we look at the second to last node of the
        // loop node, which should be the predicate that the loop should
        // satisfy.
        // The target of the predicate is the loop-body for all 4 kinds of
        // loops.
        for (n = first; n.next != last; n = n.next) {
            /* skip */
        }
        if (n.type != Token.IFEQ)
            return END_DROPS_OFF;

        // The target's next is the loop body block
        rv = ((Jump)n).target.next.endCheck();

        // check to see if the loop condition is true
        if (n.first.type == Token.TRUE)
            rv &= ~END_DROPS_OFF;

        // look for effect of breaks
        rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);

        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,endCheckBlock,"    private int endCheckBlock()
    {
        Node n;
        int rv = END_DROPS_OFF;

        // check each statment and if the statement can continue onto the next
        // one, then check the next statement
        for (n=first; ((rv & END_DROPS_OFF) != 0) && n != null; n = n.next)
        {
            rv &= ~END_DROPS_OFF;
            rv |= n.endCheck();
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,endCheckLabel,"    private int endCheckLabel()
    {
        int rv = END_UNREACHED;

        rv = next.endCheck();
        rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);

        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,endCheckBreak,"    private int endCheckBreak()
    {
        Node n = ((Jump) this).jumpNode;
        n.putIntProp(CONTROL_BLOCK_PROP, END_DROPS_OFF);
        return END_UNREACHED;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,endCheck,"    private int endCheck()
    {
        switch(type)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,hasSideEffects,"    public boolean hasSideEffects()
    {
        switch (type) {
          case Token.EXPR_VOID:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,toString,"    public String toString()
    {
        if (Token.printTrees) {
            StringBuffer sb = new StringBuffer();
            toString(new ObjToIntMap(), sb);
            return sb.toString();
        }
        return String.valueOf(type);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,toString,"    private void toString(ObjToIntMap printIds, StringBuffer sb)
    {
        if (Token.printTrees) {
            sb.append(Token.name(type));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,toStringTree,"    public String toStringTree(ScriptOrFnNode treeTop) {
        if (Token.printTrees) {
            StringBuffer sb = new StringBuffer();
            toStringTreeHelper(treeTop, this, null, 0, sb);
            return sb.toString();
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,toStringTreeHelper,"    private static void toStringTreeHelper(ScriptOrFnNode treeTop, Node n,
                                           ObjToIntMap printIds,
                                           int level, StringBuffer sb)
    {
        if (Token.printTrees) {
            if (printIds == null) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,generatePrintIds,"    private static void generatePrintIds(Node n, ObjToIntMap map)
    {
        if (Token.printTrees) {
            map.put(n, map.size());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Node.java,appendPrintId,"    private static void appendPrintId(Node n, ObjToIntMap printIds,
                                      StringBuffer sb)
    {
        if (Token.printTrees) {
            if (n != null) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NodeTransformer.java,transform,"    public final void transform(ScriptOrFnNode tree)
    {
        transformCompilationUnit(tree);
        for (int i = 0; i != tree.getFunctionCount(); ++i) {
            FunctionNode fn = tree.getFunctionNode(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NodeTransformer.java,transformCompilationUnit,"    private void transformCompilationUnit(ScriptOrFnNode tree)
    {
        loops = new ObjArray();
        loopEnds = new ObjArray();

        // to save against upchecks if no finally blocks are used.
        hasFinally = false;

        // Flatten all only if we are not using scope objects for block scope
        boolean createScopeObjects = tree.getType() != Token.FUNCTION ||
                                  ((FunctionNode)tree).requiresActivation();
        tree.flattenSymbolTable(!createScopeObjects);

        //uncomment to print tree before transformation
        //if (Token.printTrees) System.out.println(tree.toStringTree(tree));
        transformCompilationUnit_r(tree, tree, tree, createScopeObjects);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NodeTransformer.java,transformCompilationUnit_r,"    private void transformCompilationUnit_r(final ScriptOrFnNode tree,
                                            final Node parent,
                                            Node.Scope scope,
                                            boolean createScopeObjects)
    {
        Node node = null;
      siblingLoop:
        for (;;) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NodeTransformer.java,visitLet,"    protected Node visitLet(boolean createWith, Node parent, Node previous, 
                            Node scopeNode)
    {
        Node vars = scopeNode.getFirstChild();
        Node body = vars.getNext();
        scopeNode.removeChild(vars);
        scopeNode.removeChild(body);
        boolean isExpression = scopeNode.getType() == Token.LETEXPR;
        Node result;
        Node newVars;
        if (createWith) {
            result = new Node(isExpression ? Token.WITHEXPR : Token.BLOCK);
            result = replaceCurrent(parent, previous, scopeNode, result);
            ArrayList<Object> list = new ArrayList<Object>();
            Node objectLiteral = new Node(Token.OBJECTLIT);
            for (Node v=vars.getFirstChild(); v != null; v = v.getNext()) {
                Node current = v;
                if (current.getType() == Token.LETEXPR) {
                    // destructuring in let expr, e.g. let ([x, y] = [3, 4]) {}
                    List<?> destructuringNames = (List<?>)
                        current.getProp(Node.DESTRUCTURING_NAMES);
                    Node c = current.getFirstChild();
                    if (c.getType() != Token.LET) throw Kit.codeBug();
                    // Add initialization code to front of body
                    if (isExpression) {
                        body = new Node(Token.COMMA, c.getNext(), body);
                    } else {
                        body = new Node(Token.BLOCK,
                            new Node(Token.EXPR_VOID, c.getNext()),
                            body);
                    }
                    // Update ""list"" and ""objectLiteral"" for the variables
                    // defined in the destructuring assignment
                    if (destructuringNames != null) {
                        list.addAll(destructuringNames);
                        for (int i=0; i < destructuringNames.size(); i++) {
                            objectLiteral.addChildToBack(
                                new Node(Token.VOID, Node.newNumber(0.0)));
                        }
                    }
                    current = c.getFirstChild(); // should be a NAME, checked below
                }
                if (current.getType() != Token.NAME) throw Kit.codeBug();
                list.add(ScriptRuntime.getIndexObject(current.getString()));
                Node init = current.getFirstChild();
                if (init == null) {
                    init = new Node(Token.VOID, Node.newNumber(0.0));
                }
                objectLiteral.addChildToBack(init);
             }
             objectLiteral.putProp(Node.OBJECT_IDS_PROP, list.toArray());
             newVars = new Node(Token.ENTERWITH, objectLiteral);
             result.addChildToBack(newVars);
             result.addChildToBack(new Node(Token.WITH, body));
             result.addChildToBack(new Node(Token.LEAVEWITH));
        } else {
            result = new Node(isExpression ? Token.COMMA : Token.BLOCK);
            result = replaceCurrent(parent, previous, scopeNode, result);
            newVars = new Node(Token.COMMA);
            for (Node v=vars.getFirstChild(); v != null; v = v.getNext()) {
                Node current = v;
                if (current.getType() == Token.LETEXPR) {
                    // destructuring in let expr, e.g. let ([x, y] = [3, 4]) {}
                    Node c = current.getFirstChild();
                    if (c.getType() != Token.LET) throw Kit.codeBug();
                    // Add initialization code to front of body
                    if (isExpression) {
                        body = new Node(Token.COMMA, c.getNext(), body);
                    } else {
                        body = new Node(Token.BLOCK,
                            new Node(Token.EXPR_VOID, c.getNext()),
                            body);
                    }
                    // We're removing the LETEXPR, so move the symbols
                    Node.Scope.joinScopes((Node.Scope)current,
                                          (Node.Scope)scopeNode);
                    current = c.getFirstChild(); // should be a NAME, checked below
                }
                if (current.getType() != Token.NAME) throw Kit.codeBug();
                Node stringNode = Node.newString(current.getString());
                stringNode.setScope((Node.Scope)scopeNode);
                Node init = current.getFirstChild();
                if (init == null) {
                    init = new Node(Token.VOID, Node.newNumber(0.0));
                }
                newVars.addChildToBack(new Node(Token.SETVAR, stringNode, init));
            }
            if (isExpression) {
                result.addChildToBack(newVars);
                scopeNode.setType(Token.COMMA);
                result.addChildToBack(scopeNode);
                scopeNode.addChildToBack(body);
            } else {
                result.addChildToBack(new Node(Token.EXPR_VOID, newVars));
                scopeNode.setType(Token.BLOCK);
                result.addChildToBack(scopeNode);
                scopeNode.addChildrenToBack(body);
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NodeTransformer.java,addBeforeCurrent,"    private static Node addBeforeCurrent(Node parent, Node previous,
                                         Node current, Node toAdd)
    {
        if (previous == null) {
            if (!(current == parent.getFirstChild())) Kit.codeBug();
            parent.addChildToFront(toAdd);
        } else {
            if (!(current == previous.getNext())) Kit.codeBug();
            parent.addChildAfter(toAdd, previous);
        }
        return toAdd;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NodeTransformer.java,replaceCurrent,"    private static Node replaceCurrent(Node parent, Node previous,
                                       Node current, Node replacement)
    {
        if (previous == null) {
            if (!(current == parent.getFirstChild())) Kit.codeBug();
            parent.replaceChild(current, replacement);
        } else if (previous.next == current) {
            // Check cachedPrev.next == current is necessary due to possible
            // tree mutations
            parent.replaceChildAfter(previous, replacement);
        } else {
            parent.replaceChild(current, replacement);
        }
        return replacement;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,isSealed,"    public final boolean isSealed()
    {
        return sealed;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,seal,"    public final void seal()
    {
        sealed = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,isEmpty,"    public final boolean isEmpty()
    {
        return size == 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,size,"    public final int size()
    {
        return size;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,setSize,"    public final void setSize(int newSize)
    {
        if (newSize < 0) throw new IllegalArgumentException();
        if (sealed) throw onSeledMutation();
        int N = size;
        if (newSize < N) {
            for (int i = newSize; i != N; ++i) {
                setImpl(i, null);
            }
        } else if (newSize > N) {
            if (newSize > FIELDS_STORE_SIZE) {
                ensureCapacity(newSize);
            }
        }
        size = newSize;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,get,"    public final Object get(int index)
    {
        if (!(0 <= index && index < size)) throw onInvalidIndex(index, size);
        return getImpl(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,set,"    public final void set(int index, Object value)
    {
        if (!(0 <= index && index < size)) throw onInvalidIndex(index, size);
        if (sealed) throw onSeledMutation();
        setImpl(index, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,getImpl,"    private Object getImpl(int index)
    {
        switch (index) {
            case 0: return f0;
            case 1: return f1;
            case 2: return f2;
            case 3: return f3;
            case 4: return f4;
        }
        return data[index - FIELDS_STORE_SIZE];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,setImpl,"    private void setImpl(int index, Object value)
    {
        switch (index) {
            case 0: f0 = value; break;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,indexOf,"    public int indexOf(Object obj)
    {
        int N = size;
        for (int i = 0; i != N; ++i) {
            Object current = getImpl(i);
            if (current == obj || (current != null && current.equals(obj))) {
                return i;
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,lastIndexOf,"    public int lastIndexOf(Object obj)
    {
        for (int i = size; i != 0;) {
            --i;
            Object current = getImpl(i);
            if (current == obj || (current != null && current.equals(obj))) {
                return i;
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,peek,"    public final Object peek()
    {
        int N = size;
        if (N == 0) throw onEmptyStackTopRead();
        return getImpl(N - 1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,pop,"    public final Object pop()
    {
        if (sealed) throw onSeledMutation();
        int N = size;
        --N;
        Object top;
        switch (N) {
            case -1: throw onEmptyStackTopRead();
            case 0: top = f0; f0 = null; break;
            case 1: top = f1; f1 = null; break;
            case 2: top = f2; f2 = null; break;
            case 3: top = f3; f3 = null; break;
            case 4: top = f4; f4 = null; break;
            default:
                top = data[N - FIELDS_STORE_SIZE];
                data[N - FIELDS_STORE_SIZE] = null;
        }
        size = N;
        return top;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,push,"    public final void push(Object value)
    {
        add(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,add,"    public final void add(Object value)
    {
        if (sealed) throw onSeledMutation();
        int N = size;
        if (N >= FIELDS_STORE_SIZE) {
            ensureCapacity(N + 1);
        }
        size = N + 1;
        setImpl(N, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,add,"    public final void add(int index, Object value)
    {
        int N = size;
        if (!(0 <= index && index <= N)) throw onInvalidIndex(index, N + 1);
        if (sealed) throw onSeledMutation();
        Object tmp;
        switch (index) {
            case 0:
                if (N == 0) { f0 = value; break; }
                tmp = f0; f0 = value; value = tmp;
            case 1:
                if (N == 1) { f1 = value; break; }
                tmp = f1; f1 = value; value = tmp;
            case 2:
                if (N == 2) { f2 = value; break; }
                tmp = f2; f2 = value; value = tmp;
            case 3:
                if (N == 3) { f3 = value; break; }
                tmp = f3; f3 = value; value = tmp;
            case 4:
                if (N == 4) { f4 = value; break; }
                tmp = f4; f4 = value; value = tmp;

                index = FIELDS_STORE_SIZE;
            default:
                ensureCapacity(N + 1);
                if (index != N) {
                    System.arraycopy(data, index - FIELDS_STORE_SIZE,
                                     data, index - FIELDS_STORE_SIZE + 1,
                                     N - index);
                }
                data[index - FIELDS_STORE_SIZE] = value;
        }
        size = N + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,remove,"    public final void remove(int index)
    {
        int N = size;
        if (!(0 <= index && index < N)) throw onInvalidIndex(index, N);
        if (sealed) throw onSeledMutation();
        --N;
        switch (index) {
            case 0:
                if (N == 0) { f0 = null; break; }
                f0 = f1;
            case 1:
                if (N == 1) { f1 = null; break; }
                f1 = f2;
            case 2:
                if (N == 2) { f2 = null; break; }
                f2 = f3;
            case 3:
                if (N == 3) { f3 = null; break; }
                f3 = f4;
            case 4:
                if (N == 4) { f4 = null; break; }
                f4 = data[0];

                index = FIELDS_STORE_SIZE;
            default:
                if (index != N) {
                    System.arraycopy(data, index - FIELDS_STORE_SIZE + 1,
                                     data, index - FIELDS_STORE_SIZE,
                                     N - index);
                }
                data[N - FIELDS_STORE_SIZE] = null;
        }
        size = N;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,clear,"    public final void clear()
    {
        if (sealed) throw onSeledMutation();
        int N = size;
        for (int i = 0; i != N; ++i) {
            setImpl(i, null);
        }
        size = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,toArray,"    public final Object[] toArray()
    {
        Object[] array = new Object[size];
        toArray(array, 0);
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,toArray,"    public final void toArray(Object[] array)
    {
        toArray(array, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,toArray,"    public final void toArray(Object[] array, int offset)
    {
        int N = size;
        switch (N) {
            default:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,ensureCapacity,"    private void ensureCapacity(int minimalCapacity)
    {
        int required = minimalCapacity - FIELDS_STORE_SIZE;
        if (required <= 0) throw new IllegalArgumentException();
        if (data == null) {
            int alloc = FIELDS_STORE_SIZE * 2;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,onInvalidIndex,"    private static RuntimeException onInvalidIndex(int index, int upperBound)
    {
        // \u2209 is ""NOT ELEMENT OF""
        String msg = index+"" \u2209 [0, ""+upperBound+')';
        throw new IndexOutOfBoundsException(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,onEmptyStackTopRead,"    private static RuntimeException onEmptyStackTopRead()
    {
        throw new RuntimeException(""Empty stack"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,onSeledMutation,"    private static RuntimeException onSeledMutation()
    {
        throw new IllegalStateException(""Attempt to modify sealed array"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,writeObject,"    private void writeObject(ObjectOutputStream os) throws IOException
    {
        os.defaultWriteObject();
        int N = size;
        for (int i = 0; i != N; ++i) {
            Object obj = getImpl(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjArray.java,readObject,"    private void readObject(ObjectInputStream is)
        throws IOException, ClassNotFoundException
    {
        is.defaultReadObject(); // It reads size
        int N = size;
        if (N > FIELDS_STORE_SIZE) {
            data = new Object[N - FIELDS_STORE_SIZE];
        }
        for (int i = 0; i != N; ++i) {
            Object obj = is.readObject();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,init,"        final void init(Object[] keys, int[] values, int keyCount) {
            this.keys = keys;
            this.values = values;
            this.cursor = -1;
            this.remaining = keyCount;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,start,"        public void start() {
            master.initIterator(this);
            next();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,done,"        public boolean done() {
            return remaining < 0;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,next,"        public void next() {
            if (remaining == -1) Kit.codeBug();
            if (remaining == 0) {
                remaining = -1;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,getKey,"        public Object getKey() {
            Object key = keys[cursor];
            if (key == UniqueTag.NULL_VALUE) { key = null; }
            return key;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,getValue,"        public int getValue() {
            return values[cursor];
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,setValue,"        public void setValue(int value) {
            values[cursor] = value;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,isEmpty,"    public boolean isEmpty() {
        return keyCount == 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,size,"    public int size() {
        return keyCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,has,"    public boolean has(Object key) {
        if (key == null) { key = UniqueTag.NULL_VALUE; }
        return 0 <= findIndex(key);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,get,"    public int get(Object key, int defaultValue) {
        if (key == null) { key = UniqueTag.NULL_VALUE; }
        int index = findIndex(key);
        if (0 <= index) {
            return values[index];
        }
        return defaultValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,getExisting,"    public int getExisting(Object key) {
        if (key == null) { key = UniqueTag.NULL_VALUE; }
        int index = findIndex(key);
        if (0 <= index) {
            return values[index];
        }
        // Key must exist
        Kit.codeBug();
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,put,"    public void put(Object key, int value) {
        if (key == null) { key = UniqueTag.NULL_VALUE; }
        int index = ensureIndex(key);
        values[index] = value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,intern,"    public Object intern(Object keyArg) {
        boolean nullKey = false;
        if (keyArg == null) {
            nullKey = true;
            keyArg = UniqueTag.NULL_VALUE;
        }
        int index = ensureIndex(keyArg);
        values[index] = 0;
        return (nullKey) ? null : keys[index];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,remove,"    public void remove(Object key) {
        if (key == null) { key = UniqueTag.NULL_VALUE; }
        int index = findIndex(key);
        if (0 <= index) {
            keys[index] = DELETED;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,clear,"    public void clear() {
        int i = keys.length;
        while (i != 0) {
            keys[--i] = null;
        }
        keyCount = 0;
        occupiedCount = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,newIterator,"    public Iterator newIterator() {
        return new Iterator(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,initIterator,"    final void initIterator(Iterator i) {
        i.init(keys, values, keyCount);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,getKeys,"    public Object[] getKeys() {
        Object[] array = new Object[keyCount];
        getKeys(array, 0);
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,getKeys,"    public void getKeys(Object[] array, int offset) {
        int count = keyCount;
        for (int i = 0; count != 0; ++i) {
            Object key = keys[i];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,tableLookupStep,"    private static int tableLookupStep(int fraction, int mask, int power) {
        int shift = 32 - 2 * power;
        if (shift >= 0) {
            return ((fraction >>> shift) & mask) | 1;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,findIndex,"    private int findIndex(Object key) {
        if (keys != null) {
            int hash = key.hashCode();
            int fraction = hash * A;
            int index = fraction >>> (32 - power);
            Object test = keys[index];
            if (test != null) {
                int N = 1 << power;
                if (test == key
                    || (values[N + index] == hash && test.equals(key)))
                {
                    return index;
                }
                // Search in table after first failed attempt
                int mask = N - 1;
                int step = tableLookupStep(fraction, mask, power);
                int n = 0;
                for (;;) {
                    if (check) {
                        if (n >= occupiedCount) Kit.codeBug();
                        ++n;
                    }
                    index = (index + step) & mask;
                    test = keys[index];
                    if (test == null) {
                        break;
                    }
                    if (test == key
                        || (values[N + index] == hash && test.equals(key)))
                    {
                        return index;
                    }
                }
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,insertNewKey,"    private int insertNewKey(Object key, int hash) {
        if (check && occupiedCount != keyCount) Kit.codeBug();
        if (check && keyCount == 1 << power) Kit.codeBug();
        int fraction = hash * A;
        int index = fraction >>> (32 - power);
        int N = 1 << power;
        if (keys[index] != null) {
            int mask = N - 1;
            int step = tableLookupStep(fraction, mask, power);
            int firstIndex = index;
            do {
                if (check && keys[index] == DELETED) Kit.codeBug();
                index = (index + step) & mask;
                if (check && firstIndex == index) Kit.codeBug();
            } while (keys[index] != null);
        }
        keys[index] = key;
        values[N + index] = hash;
        ++occupiedCount;
        ++keyCount;

        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,rehashTable,"    private void rehashTable() {
        if (keys == null) {
            if (check && keyCount != 0) Kit.codeBug();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,ensureIndex,"    private int ensureIndex(Object key) {
        int hash = key.hashCode();
        int index = -1;
        int firstDeleted = -1;
        if (keys != null) {
            int fraction = hash * A;
            index = fraction >>> (32 - power);
            Object test = keys[index];
            if (test != null) {
                int N = 1 << power;
                if (test == key
                    || (values[N + index] == hash && test.equals(key)))
                {
                    return index;
                }
                if (test == DELETED) {
                    firstDeleted = index;
                }

                // Search in table after first failed attempt
                int mask = N - 1;
                int step = tableLookupStep(fraction, mask, power);
                int n = 0;
                for (;;) {
                    if (check) {
                        if (n >= occupiedCount) Kit.codeBug();
                        ++n;
                    }
                    index = (index + step) & mask;
                    test = keys[index];
                    if (test == null) {
                        break;
                    }
                    if (test == key
                        || (values[N + index] == hash && test.equals(key)))
                    {
                        return index;
                    }
                    if (test == DELETED && firstDeleted < 0) {
                        firstDeleted = index;
                    }
                }
            }
        }
        // Inserting of new key
        if (check && keys != null && keys[index] != null)
            Kit.codeBug();
        if (firstDeleted >= 0) {
            index = firstDeleted;
        }
        else {
            // Need to consume empty entry: check occupation level
            if (keys == null || occupiedCount * 4 >= (1 << power) * 3) {
                // Too litle unused entries: rehash
                rehashTable();
                return insertNewKey(key, hash);
            }
            ++occupiedCount;
        }
        keys[index] = key;
        values[(1 << power) + index] = hash;
        ++keyCount;
        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,writeObject,"    private void writeObject(ObjectOutputStream out)
        throws IOException
    {
        out.defaultWriteObject();

        int count = keyCount;
        for (int i = 0; count != 0; ++i) {
            Object key = keys[i];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ObjToIntMap.java,readObject,"    private void readObject(ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        in.defaultReadObject();

        int writtenKeyCount = keyCount;
        if (writtenKeyCount != 0) {
            keyCount = 0;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,getCurrentLineNumber,"    public int getCurrentLineNumber() {
        return ts.getLineno();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,createDecompiler,"    protected Decompiler createDecompiler(CompilerEnvirons compilerEnv)
    {
        return new Decompiler();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addStrictWarning,"    void addStrictWarning(String messageId, String messageArg)
    {
        if (compilerEnv.isStrictMode())
            addWarning(messageId, messageArg);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addWarning,"    void addWarning(String messageId, String messageArg)
    {
        String message = ScriptRuntime.getMessage1(messageId, messageArg);
        if (compilerEnv.reportWarningAsError()) {
            ++syntaxErrorCount;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addError,"    void addError(String messageId)
    {
        ++syntaxErrorCount;
        String message = ScriptRuntime.getMessage0(messageId);
        errorReporter.error(message, sourceURI, ts.getLineno(),
                            ts.getLine(), ts.getOffset());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addError,"    void addError(String messageId, String messageArg)
    {
        ++syntaxErrorCount;
        String message = ScriptRuntime.getMessage1(messageId, messageArg);
        errorReporter.error(message, sourceURI, ts.getLineno(),
                            ts.getLine(), ts.getOffset());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,reportError,"    RuntimeException reportError(String messageId)
    {
        addError(messageId);

        // Throw a ParserException exception to unwind the recursive descent
        // parse.
        throw new ParserException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,reportError,"    RuntimeException reportError(String messageId, String messageArg)
    {
        addError(messageId, messageArg);

        // Throw a ParserException exception to unwind the recursive descent
        // parse.
        throw new ParserException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,peekToken,"    /*APPJET*//*no longer: private*/int peekToken()
        throws IOException
    {
        int tt = currentFlaggedToken;
        if (tt == Token.EOF) {
            tt = ts.getToken();
            if (tt == Token.EOL) {
                do {
                    tt = ts.getToken();
                } while (tt == Token.EOL);
                tt |= TI_AFTER_EOL;
            }
            currentFlaggedToken = tt;
        }
        return tt & CLEAR_TI_MASK;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,peekFlaggedToken,"    private int peekFlaggedToken()
        throws IOException
    {
        peekToken();
        return currentFlaggedToken;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,consumeToken,"    /*APPJET*//*no longer:private*/ void consumeToken()
    {
        currentFlaggedToken = Token.EOF;
        /*APPJET*/lastConsumedTokenLine = ts.getLineno();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,nextToken,"    private int nextToken()
        throws IOException
    {
        int tt = peekToken();
        consumeToken();
        return tt;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,nextFlaggedToken,"    private int nextFlaggedToken()
        throws IOException
    {
        peekToken();
        int ttFlagged = currentFlaggedToken;
        consumeToken();
        return ttFlagged;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,matchToken,"    private boolean matchToken(int toMatch)
        throws IOException
    {
        int tt = peekToken();
        if (tt != toMatch) {
            return false;
        }
        consumeToken();
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,peekTokenOrEOL,"    private int peekTokenOrEOL()
        throws IOException
    {
        int tt = peekToken();
        // Check for last peeked token flags
        if ((currentFlaggedToken & TI_AFTER_EOL) != 0) {
            tt = Token.EOL;
        }
        return tt;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,setCheckForLabel,"    private void setCheckForLabel()
    {
        if ((currentFlaggedToken & CLEAR_TI_MASK) != Token.NAME)
            throw Kit.codeBug();
        currentFlaggedToken |= TI_CHECK_LABEL;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,mustMatchToken,"    private void mustMatchToken(int toMatch, String messageId)
        throws IOException, ParserException
    {
        if (!matchToken(toMatch)) {
            reportError(messageId);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,mustMatchToken,"    private void mustMatchToken(int toMatch, String messageId, String messageArg)
        throws IOException, ParserException
    {
        if (!matchToken(toMatch)) {
            reportError(messageId, messageArg);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,mustHaveXML,"    private void mustHaveXML()
    {
        if (!compilerEnv.isXmlAvailable()) {
            reportError(""msg.XML.not.available"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,getEncodedSource,"    public String getEncodedSource()
    {
        return encodedSource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,eof,"    public boolean eof()
    {
        return ts.eof();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,insideFunction,"    boolean insideFunction()
    {
        return nestingOfFunction != 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,pushScope,"    void pushScope(Node node) {
        Node.Scope scopeNode = (Node.Scope) node;
        if (scopeNode.getParentScope() != null) throw Kit.codeBug();
        scopeNode.setParent(currentScope);
        currentScope = scopeNode;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,popScope,"    void popScope() {
        currentScope = currentScope.getParentScope();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,enterLoop,"    private Node enterLoop(Node loopLabel, boolean doPushScope)
    {
        Node loop = nf.createLoopNode(loopLabel, ts.getLineno());
        if (loopSet == null) {
            loopSet = new ObjArray();
            if (loopAndSwitchSet == null) {
                loopAndSwitchSet = new ObjArray();
            }
        }
        loopSet.push(loop);
        loopAndSwitchSet.push(loop);
        if (doPushScope) {
            pushScope(loop);
        }
        return loop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,exitLoop,"    private void exitLoop(boolean doPopScope)
    {
        loopSet.pop();
        loopAndSwitchSet.pop();
        if (doPopScope) {
            popScope();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,enterSwitch,"    private Node enterSwitch(Node switchSelector, int lineno)
    {
        Node switchNode = nf.createSwitch(switchSelector, lineno);
        if (loopAndSwitchSet == null) {
            loopAndSwitchSet = new ObjArray();
        }
        loopAndSwitchSet.push(switchNode);
        return switchNode;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,exitSwitch,"    private void exitSwitch()
    {
        loopAndSwitchSet.pop();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,parse,"    public ScriptOrFnNode parse(String sourceString,
                                String sourceURI, int lineno)
    {
        this.sourceURI = sourceURI;
        this.ts = new TokenStream(this, null, sourceString, lineno);
        try {
            return parse();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,parse,"    public ScriptOrFnNode parse(Reader sourceReader,
                                String sourceURI, int lineno)
        throws IOException
    {
        this.sourceURI = sourceURI;
        this.ts = new TokenStream(this, sourceReader, null, lineno);
        return parse();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,parse,"    private ScriptOrFnNode parse()
        throws IOException
    {
        this.decompiler = createDecompiler(compilerEnv);
        this.nf = new IRFactory(this);
        currentScriptOrFn = nf.createScript();
        currentScope = currentScriptOrFn;
        int sourceStartOffset = decompiler.getCurrentOffset();
        this.encodedSource = null;
        decompiler.addToken(Token.SCRIPT);

        this.currentFlaggedToken = Token.EOF;
        this.syntaxErrorCount = 0;

        int baseLineno = ts.getLineno();  // line number where source starts

        /*APPJET*/lastConsumedTokenLine = baseLineno;
        
        /* so we have something to add nodes to until
         * we've collected all the source */
        Node pn = nf.createLeaf(Token.BLOCK);

        try {
            for (;;) {
                int tt = peekToken();

                if (tt <= Token.EOF) {
                    break;
                }

                Node n;
                if (tt == Token.FUNCTION) {
                    consumeToken();
                    try {
                        n = function(calledByCompileFunction
                                     ? FunctionNode.FUNCTION_EXPRESSION
                                     : FunctionNode.FUNCTION_STATEMENT);
                    } catch (ParserException e) {
                        break;
                    }
                } else {
                    n = statement();
                }
                nf.addChildToBack(pn, n);
            }
        } catch (StackOverflowError ex) {
            String msg = ScriptRuntime.getMessage0(
                ""msg.too.deep.parser.recursion"");
            throw Context.reportRuntimeError(msg, sourceURI,
                                             ts.getLineno(), null, 0);
        }

        if (this.syntaxErrorCount != 0) {
            String msg = String.valueOf(this.syntaxErrorCount);
            msg = ScriptRuntime.getMessage1(""msg.got.syntax.errors"", msg);
            throw errorReporter.runtimeError(msg, sourceURI, baseLineno,
                                             null, 0);
        }

        currentScriptOrFn.setSourceName(sourceURI);
        currentScriptOrFn.setBaseLineno(baseLineno);
        currentScriptOrFn.setEndLineno(ts.getLineno());

        int sourceEndOffset = decompiler.getCurrentOffset();
        currentScriptOrFn.setEncodedSourceBounds(sourceStartOffset,
                                                 sourceEndOffset);

        nf.initScript(currentScriptOrFn, pn);

        if (compilerEnv.isGeneratingSource()) {
            encodedSource = decompiler.getEncodedSource();
        }
        this.decompiler = null; // It helps GC

        return currentScriptOrFn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,parseFunctionBody,"    private Node parseFunctionBody()
        throws IOException
    {
        ++nestingOfFunction;
        Node pn = nf.createBlock(ts.getLineno());
        try {
            bodyLoop: for (;;) {
                Node n;
                int tt = peekToken();
                switch (tt) {
                  case Token.ERROR:
                  case Token.EOF:
                  case Token.RC:
                    break bodyLoop;

                  case Token.FUNCTION:
                    consumeToken();
                    n = function(FunctionNode.FUNCTION_STATEMENT);
                    break;
                  default:
                    n = statement();
                    break;
                }
                nf.addChildToBack(pn, n);
            }
        } catch (ParserException e) {
            // Ignore it
        } finally {
            --nestingOfFunction;
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,function,"    private Node function(int functionType)
        throws IOException, ParserException
    {
        int syntheticType = functionType;
        int baseLineno = ts.getLineno();  // line number where source starts

        int functionSourceStart = decompiler.markFunctionStart(functionType);
        String name;
        Node memberExprNode = null;
        if (matchToken(Token.NAME)) {
            name = ts.getString();
            decompiler.addName(name);
            if (!matchToken(Token.LP)) {
                if (compilerEnv.isAllowMemberExprAsFunctionName()) {
                    // Extension to ECMA: if 'function <name>' does not follow
                    // by '(', assume <name> starts memberExpr
                    Node memberExprHead = nf.createName(name);
                    name = """";
                    memberExprNode = memberExprTail(false, memberExprHead);
                }
                mustMatchToken(Token.LP, ""msg.no.paren.parms"");
            }
        } else if (matchToken(Token.LP)) {
            // Anonymous function
            name = """";
        } else {
            name = """";
            if (compilerEnv.isAllowMemberExprAsFunctionName()) {
                // Note that memberExpr can not start with '(' like
                // in function (1+2).toString(), because 'function (' already
                // processed as anonymous function
                memberExprNode = memberExpr(false);
            }
            mustMatchToken(Token.LP, ""msg.no.paren.parms"");
        }

        if (memberExprNode != null) {
            syntheticType = FunctionNode.FUNCTION_EXPRESSION;
        } 
        
        if (syntheticType != FunctionNode.FUNCTION_EXPRESSION && 
            name.length() > 0)
        {
            // Function statements define a symbol in the enclosing scope
            defineSymbol(Token.FUNCTION, name);
        }

        boolean nested = insideFunction();

        FunctionNode fnNode = nf.createFunction(name);
        if (nested || nestingOfWith > 0) {
            // 1. Nested functions are not affected by the dynamic scope flag
            // as dynamic scope is already a parent of their scope.
            // 2. Functions defined under the with statement also immune to
            // this setup, in which case dynamic scope is ignored in favor
            // of with object.
            fnNode.itsIgnoreDynamicScope = true;
        }
        int functionIndex = currentScriptOrFn.addFunction(fnNode);

        int functionSourceEnd;

        ScriptOrFnNode savedScriptOrFn = currentScriptOrFn;
        currentScriptOrFn = fnNode;
        Node.Scope savedCurrentScope = currentScope;
        currentScope = fnNode;
        int savedNestingOfWith = nestingOfWith;
        nestingOfWith = 0;
        Hashtable savedLabelSet = labelSet;
        labelSet = null;
        ObjArray savedLoopSet = loopSet;
        loopSet = null;
        ObjArray savedLoopAndSwitchSet = loopAndSwitchSet;
        loopAndSwitchSet = null;
        boolean savedHasReturnValue = hasReturnValue;
        int savedFunctionEndFlags = endFlags;

        Node destructuring = null;
        Node body;
        try {
            decompiler.addToken(Token.LP);
            if (!matchToken(Token.RP)) {
                boolean first = true;
                do {
                    if (!first)
                        decompiler.addToken(Token.COMMA);
                    first = false;
                    int tt = peekToken();
                    if (tt == Token.LB || tt == Token.LC) {
                        // Destructuring assignment for parameters: add a 
                        // dummy parameter name, and add a statement to the
                        // body to initialize variables from the destructuring
                        // assignment
                        if (destructuring == null) {
                            destructuring = new Node(Token.COMMA);
                        }
                        String parmName = currentScriptOrFn.getNextTempName();
                        defineSymbol(Token.LP, parmName);
                        destructuring.addChildToBack(
                            nf.createDestructuringAssignment(Token.VAR,
                                primaryExpr(), nf.createName(parmName)));
                    } else {
                        mustMatchToken(Token.NAME, ""msg.no.parm"");
                        String s = ts.getString();
                        defineSymbol(Token.LP, s);
                        decompiler.addName(s);
                    }
                } while (matchToken(Token.COMMA));

                mustMatchToken(Token.RP, ""msg.no.paren.after.parms"");
            }
            decompiler.addToken(Token.RP);

            mustMatchToken(Token.LC, ""msg.no.brace.body"");
            decompiler.addEOL(Token.LC);
            body = parseFunctionBody();
            if (destructuring != null) {
                body.addChildToFront(
                    new Node(Token.EXPR_VOID, destructuring, ts.getLineno()));
            }
            mustMatchToken(Token.RC, ""msg.no.brace.after.body"");

            if (compilerEnv.isStrictMode() && !body.hasConsistentReturnUsage())
            {
              String msg = name.length() > 0 ? ""msg.no.return.value""
                                             : ""msg.anon.no.return.value"";
              addStrictWarning(msg, name);
            }
            
            if (syntheticType == FunctionNode.FUNCTION_EXPRESSION &&
                name.length() > 0 && currentScope.getSymbol(name) == null) 
            {
                // Function expressions define a name only in the body of the 
                // function, and only if not hidden by a parameter name
                defineSymbol(Token.FUNCTION, name);
            }
            
            decompiler.addToken(Token.RC);
            functionSourceEnd = decompiler.markFunctionEnd(functionSourceStart);
            if (functionType != FunctionNode.FUNCTION_EXPRESSION) {
                // Add EOL only if function is not part of expression
                // since it gets SEMI + EOL from Statement in that case
                decompiler.addToken(Token.EOL);
            }
        }
        finally {
            hasReturnValue = savedHasReturnValue;
            endFlags = savedFunctionEndFlags;
            loopAndSwitchSet = savedLoopAndSwitchSet;
            loopSet = savedLoopSet;
            labelSet = savedLabelSet;
            nestingOfWith = savedNestingOfWith;
            currentScriptOrFn = savedScriptOrFn;
            currentScope = savedCurrentScope;
        }

        fnNode.setEncodedSourceBounds(functionSourceStart, functionSourceEnd);
        fnNode.setSourceName(sourceURI);
        fnNode.setBaseLineno(baseLineno);
        fnNode.setEndLineno(ts.getLineno());

        Node pn = nf.initFunction(fnNode, functionIndex, body, syntheticType);
        if (memberExprNode != null) {
            pn = nf.createAssignment(Token.ASSIGN, memberExprNode, pn);
            if (functionType != FunctionNode.FUNCTION_EXPRESSION) {
                // XXX check JScript behavior: should it be createExprStatement?
                pn = nf.createExprStatementNoReturn(pn, baseLineno);
            }
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,statements,"    private Node statements(Node scope)
        throws IOException
    {
        Node pn = scope != null ? scope : nf.createBlock(ts.getLineno());

        int tt;
        while ((tt = peekToken()) > Token.EOF && tt != Token.RC) {
            nf.addChildToBack(pn, statement());
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,condition,"    private Node condition()
        throws IOException, ParserException
    {
        mustMatchToken(Token.LP, ""msg.no.paren.cond"");
        decompiler.addToken(Token.LP);
        Node pn = expr(false);
        mustMatchToken(Token.RP, ""msg.no.paren.after.cond"");
        decompiler.addToken(Token.RP);

        // Report strict warning on code like ""if (a = 7) ..."". Suppress the
        // warning if the condition is parenthesized, like ""if ((a = 7)) ..."".
        if (pn.getProp(Node.PARENTHESIZED_PROP) == null &&
            (pn.getType() == Token.SETNAME || pn.getType() == Token.SETPROP ||
             pn.getType() == Token.SETELEM))
        {
            addStrictWarning(""msg.equal.as.assign"", """");
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,matchJumpLabelName,"    private Node matchJumpLabelName()
        throws IOException, ParserException
    {
        Node label = null;

        int tt = peekTokenOrEOL();
        if (tt == Token.NAME) {
            consumeToken();
            String name = ts.getString();
            decompiler.addName(name);
            if (labelSet != null) {
                label = (Node)labelSet.get(name);
            }
            if (label == null) {
                reportError(""msg.undef.label"");
            }
        }

        return label;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,statement,"    private Node statement()
        throws IOException
    {
        try {
            Node pn = statementHelper(null);
            if (pn != null) {
                if (compilerEnv.isStrictMode() && !pn.hasSideEffects())
                    addStrictWarning(""msg.no.side.effects"", """");
                return pn;
            }
        } catch (ParserException e) { }

        // skip to end of statement
        int lineno = ts.getLineno();
        guessingStatementEnd: for (;;) {
            int tt = peekTokenOrEOL();
            consumeToken();
            switch (tt) {
              case Token.ERROR:
              case Token.EOF:
              case Token.EOL:
              case Token.SEMI:
                break guessingStatementEnd;
            }
        }
        return nf.createExprStatement(nf.createName(""error""), lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,statementHelper,"    private Node statementHelper(Node statementLabel)
        throws IOException, ParserException {
        
        Node pn = statementHelper0(statementLabel);
        if (pn != null && pn.getType() != Token.BLOCK && pn.getType() != Token.LOOP) {
            pn.statementEndLineNum = lastConsumedTokenLine;
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,statementHelper0,"    private Node statementHelper0(Node statementLabel) /*APPJET*/
        throws IOException, ParserException
    {
        Node pn = null;
        int tt = peekToken();

        switch (tt) {
          case Token.IF: {
            consumeToken();

            decompiler.addToken(Token.IF);
            int lineno = ts.getLineno();
            Node cond = condition();
            /*APPJET*/cond.lineno = lineno;
            /*APPJET*/cond.statementEndLineNum = lastConsumedTokenLine;
            decompiler.addEOL(Token.LC);
            Node ifTrue = statement();
            Node ifFalse = null;
            if (matchToken(Token.ELSE)) {
                decompiler.addToken(Token.RC);
                decompiler.addToken(Token.ELSE);
                decompiler.addEOL(Token.LC);
                ifFalse = statement();
            }
            decompiler.addEOL(Token.RC);
            pn = nf.createIf(cond, ifTrue, ifFalse, lineno);
            return pn;
          }

          case Token.SWITCH: {
            consumeToken();

            decompiler.addToken(Token.SWITCH);
            int lineno = ts.getLineno();
            mustMatchToken(Token.LP, ""msg.no.paren.switch"");
            decompiler.addToken(Token.LP);
            /*APPJET*/Node toSwitchOn = expr(false);
            /*APPJET*/toSwitchOn.lineno = lineno;
            /*APPJET*/toSwitchOn.statementEndLineNum = lastConsumedTokenLine;
            pn = enterSwitch(toSwitchOn, lineno); /*APPJET*/
            try {
                mustMatchToken(Token.RP, ""msg.no.paren.after.switch"");
                decompiler.addToken(Token.RP);
                mustMatchToken(Token.LC, ""msg.no.brace.switch"");
                decompiler.addEOL(Token.LC);

                boolean hasDefault = false;
                switchLoop: for (;;) {
                    tt = nextToken();
                    Node caseExpression;
                    switch (tt) {
                      case Token.RC:
                        break switchLoop;

                      case Token.CASE:
                        decompiler.addToken(Token.CASE);
                        caseExpression = expr(false);
                        mustMatchToken(Token.COLON, ""msg.no.colon.case"");
                        decompiler.addEOL(Token.COLON);
                        break;

                      case Token.DEFAULT:
                        if (hasDefault) {
                            reportError(""msg.double.switch.default"");
                        }
                        decompiler.addToken(Token.DEFAULT);
                        hasDefault = true;
                        caseExpression = null;
                        mustMatchToken(Token.COLON, ""msg.no.colon.case"");
                        decompiler.addEOL(Token.COLON);
                        break;

                      default:
                        reportError(""msg.bad.switch"");
                        break switchLoop;
                    }

                    Node block = nf.createLeaf(Token.BLOCK);
                    while ((tt = peekToken()) != Token.RC
                           && tt != Token.CASE
                           && tt != Token.DEFAULT
                           && tt != Token.EOF)
                    {
                        nf.addChildToBack(block, statement());
                    }

                    // caseExpression == null => add default label
                    nf.addSwitchCase(pn, caseExpression, block);
                }
                decompiler.addEOL(Token.RC);
                nf.closeSwitch(pn);
            } finally {
                exitSwitch();
            }
            return pn;
          }

          case Token.WHILE: {
            consumeToken();
            decompiler.addToken(Token.WHILE);

            Node loop = enterLoop(statementLabel, true);
            try {
                /*APPJET*/int lineno = ts.getLineno();                
                Node cond = condition();
                /*APPJET*/cond.lineno = lineno;
                /*APPJET*/cond.statementEndLineNum = lastConsumedTokenLine;
                decompiler.addEOL(Token.LC);
                Node body = statement();
                decompiler.addEOL(Token.RC);
                pn = nf.createWhile(loop, cond, body);
            } finally {
                exitLoop(true);
            }
            return pn;
          }

          case Token.DO: {
            consumeToken();
            decompiler.addToken(Token.DO);
            decompiler.addEOL(Token.LC);

            Node loop = enterLoop(statementLabel, true);
            try {
                Node body = statement();
                decompiler.addToken(Token.RC);
                mustMatchToken(Token.WHILE, ""msg.no.while.do"");
                decompiler.addToken(Token.WHILE);
                Node cond = condition();
                pn = nf.createDoWhile(loop, body, cond);
            } finally {
                exitLoop(true);
            }
            // Always auto-insert semicolon to follow SpiderMonkey:
            // It is required by ECMAScript but is ignored by the rest of
            // world, see bug 238945
            matchToken(Token.SEMI);
            decompiler.addEOL(Token.SEMI);
            return pn;
          }

          case Token.FOR: {
            consumeToken();
            boolean isForEach = false;
            decompiler.addToken(Token.FOR);

            Node loop = enterLoop(statementLabel, true);
            try {
                Node init;  // Node init is also foo in 'foo in object'
                Node cond;  // Node cond is also object in 'foo in object'
                Node incr = null;
                Node body;
                int declType = -1;

                // See if this is a for each () instead of just a for ()
                if (matchToken(Token.NAME)) {
                    decompiler.addName(ts.getString());
                    if (ts.getString().equals(""each"")) {
                        isForEach = true;
                    } else {
                        reportError(""msg.no.paren.for"");
                    }
                }

                mustMatchToken(Token.LP, ""msg.no.paren.for"");
                decompiler.addToken(Token.LP);
                tt = peekToken();
                if (tt == Token.SEMI) {
                    init = nf.createLeaf(Token.EMPTY);
                } else {
                    if (tt == Token.VAR || tt == Token.LET) {
                        // set init to a var list or initial
                        consumeToken();    // consume the token
                        decompiler.addToken(tt);
                        init = variables(true, tt);
                        declType = tt;
                    }
                    else {
                        init = expr(true);
                    }
                }

                if (matchToken(Token.IN)) {
                    decompiler.addToken(Token.IN);
                    // 'cond' is the object over which we're iterating
                    cond = expr(false);
                } else {  // ordinary for loop
                    mustMatchToken(Token.SEMI, ""msg.no.semi.for"");
                    decompiler.addToken(Token.SEMI);
                    if (peekToken() == Token.SEMI) {
                        // no loop condition
                        cond = nf.createLeaf(Token.EMPTY);
                    } else {
                        cond = expr(false);
                    }

                    mustMatchToken(Token.SEMI, ""msg.no.semi.for.cond"");
                    decompiler.addToken(Token.SEMI);
                    if (peekToken() == Token.RP) {
                        incr = nf.createLeaf(Token.EMPTY);
                    } else {
                        incr = expr(false);
                    }
                }

                mustMatchToken(Token.RP, ""msg.no.paren.for.ctrl"");
                decompiler.addToken(Token.RP);
                decompiler.addEOL(Token.LC);
                /*APPJET*/int parenEndLine = lastConsumedTokenLine;
                body = statement();
                decompiler.addEOL(Token.RC);

                if (incr == null) {
                    // cond could be null if 'in obj' got eaten
                    // by the init node.
                    pn = nf.createForIn(declType, loop, init, cond, body,
                                        isForEach);
                } else {
                    pn = nf.createFor(loop, init, cond, incr, body);
                }
                /*APPJET*/ // use the LOOP object to hold the range of the paren'd expr
                /*APPJET*/pn.statementEndLineNum = parenEndLine;
            } finally {
                exitLoop(true);
            }
            return pn;
          }

          case Token.TRY: {
            consumeToken();
            int lineno = ts.getLineno();

            Node tryblock;
            Node catchblocks = null;
            Node finallyblock = null;

            decompiler.addToken(Token.TRY);
            if (peekToken() != Token.LC) {
                reportError(""msg.no.brace.try"");
            }
            decompiler.addEOL(Token.LC);
            tryblock = statement();
            decompiler.addEOL(Token.RC);

            catchblocks = nf.createLeaf(Token.BLOCK);

            boolean sawDefaultCatch = false;
            int peek = peekToken();
            if (peek == Token.CATCH) {
                while (matchToken(Token.CATCH)) {
                    if (sawDefaultCatch) {
                        reportError(""msg.catch.unreachable"");
                    }
                    decompiler.addToken(Token.CATCH);
                    mustMatchToken(Token.LP, ""msg.no.paren.catch"");
                    decompiler.addToken(Token.LP);

                    mustMatchToken(Token.NAME, ""msg.bad.catchcond"");
                    String varName = ts.getString();
                    decompiler.addName(varName);

                    Node catchCond = null;
                    if (matchToken(Token.IF)) {
                        decompiler.addToken(Token.IF);
                        catchCond = expr(false);
                    } else {
                        sawDefaultCatch = true;
                    }

                    mustMatchToken(Token.RP, ""msg.bad.catchcond"");
                    decompiler.addToken(Token.RP);
                    mustMatchToken(Token.LC, ""msg.no.brace.catchblock"");
                    decompiler.addEOL(Token.LC);

                    nf.addChildToBack(catchblocks,
                        nf.createCatch(varName, catchCond,
                                       statements(null),
                                       ts.getLineno()));

                    mustMatchToken(Token.RC, ""msg.no.brace.after.body"");
                    decompiler.addEOL(Token.RC);
                }
            } else if (peek != Token.FINALLY) {
                mustMatchToken(Token.FINALLY, ""msg.try.no.catchfinally"");
            }

            if (matchToken(Token.FINALLY)) {
                decompiler.addToken(Token.FINALLY);
                decompiler.addEOL(Token.LC);
                finallyblock = statement();
                decompiler.addEOL(Token.RC);
            }

            pn = nf.createTryCatchFinally(tryblock, catchblocks,
                                          finallyblock, lineno);

            return pn;
          }

          case Token.THROW: {
            consumeToken();
            if (peekTokenOrEOL() == Token.EOL) {
                // ECMAScript does not allow new lines before throw expression,
                // see bug 256617
                reportError(""msg.bad.throw.eol"");
            }

            int lineno = ts.getLineno();
            decompiler.addToken(Token.THROW);
            pn = nf.createThrow(expr(false), lineno);
            break;
          }

          case Token.BREAK: {
            consumeToken();
            int lineno = ts.getLineno();

            decompiler.addToken(Token.BREAK);

            // matchJumpLabelName only matches if there is one
            Node breakStatement = matchJumpLabelName();
            if (breakStatement == null) {
                if (loopAndSwitchSet == null || loopAndSwitchSet.size() == 0) {
                    reportError(""msg.bad.break"");
                    return null;
                }
                breakStatement = (Node)loopAndSwitchSet.peek();
            }
            pn = nf.createBreak(breakStatement, lineno);
            break;
          }

          case Token.CONTINUE: {
            consumeToken();
            int lineno = ts.getLineno();

            decompiler.addToken(Token.CONTINUE);

            Node loop;
            // matchJumpLabelName only matches if there is one
            Node label = matchJumpLabelName();
            if (label == null) {
                if (loopSet == null || loopSet.size() == 0) {
                    reportError(""msg.continue.outside"");
                    return null;
                }
                loop = (Node)loopSet.peek();
            } else {
                loop = nf.getLabelLoop(label);
                if (loop == null) {
                    reportError(""msg.continue.nonloop"");
                    return null;
                }
            }
            pn = nf.createContinue(loop, lineno);
            break;
          }

          case Token.WITH: {
            consumeToken();

            decompiler.addToken(Token.WITH);
            int lineno = ts.getLineno();
            mustMatchToken(Token.LP, ""msg.no.paren.with"");
            decompiler.addToken(Token.LP);
            Node obj = expr(false);
            /*APPJET*/obj.lineno = lineno;
            /*APPJET*/obj.statementEndLineNum = lastConsumedTokenLine;
            mustMatchToken(Token.RP, ""msg.no.paren.after.with"");
            decompiler.addToken(Token.RP);
            decompiler.addEOL(Token.LC);

            ++nestingOfWith;
            Node body;
            try {
                body = statement();
            } finally {
                --nestingOfWith;
            }

            decompiler.addEOL(Token.RC);

            pn = nf.createWith(obj, body, lineno);
            return pn;
          }

          case Token.CONST:
          case Token.VAR: {
            consumeToken();
            decompiler.addToken(tt);
            pn = variables(false, tt);
            break;
          }
          
          case Token.LET: {
            consumeToken();
            decompiler.addToken(Token.LET);
            if (peekToken() == Token.LP) {
                pn = let(true);
            } else {
                pn = variables(false, tt);
            }
            return pn;
          }

          case Token.RETURN: 
          case Token.YIELD: {
            pn = returnOrYield(tt, false);
            break;
          }

          case Token.DEBUGGER:
            consumeToken();
            decompiler.addToken(Token.DEBUGGER);
            pn = nf.createDebugger(ts.getLineno());
            break;

          case Token.LC:
            consumeToken();
            if (statementLabel != null) {
                decompiler.addToken(Token.LC);
            }
            Node scope = nf.createScopeNode(Token.BLOCK, ts.getLineno());
            pushScope(scope);
            try {
                statements(scope);
                mustMatchToken(Token.RC, ""msg.no.brace.block"");
                if (statementLabel != null) {
                    decompiler.addEOL(Token.RC);
                }
                return scope;
            } finally {
                popScope();
            }

          case Token.ERROR:
            // Fall thru, to have a node for error recovery to work on
          case Token.SEMI:
            consumeToken();
            pn = nf.createLeaf(Token.EMPTY);
            return pn;

          case Token.FUNCTION: {
            consumeToken();
            pn = function(FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
            return pn;
          }

          case Token.DEFAULT :
            consumeToken();
            mustHaveXML();

            decompiler.addToken(Token.DEFAULT);
            int nsLine = ts.getLineno();

            if (!(matchToken(Token.NAME)
                  && ts.getString().equals(""xml"")))
            {
                reportError(""msg.bad.namespace"");
            }
            decompiler.addName("" xml"");

            if (!(matchToken(Token.NAME)
                  && ts.getString().equals(""namespace"")))
            {
                reportError(""msg.bad.namespace"");
            }
            decompiler.addName("" namespace"");

            if (!matchToken(Token.ASSIGN)) {
                reportError(""msg.bad.namespace"");
            }
            decompiler.addToken(Token.ASSIGN);

            Node expr = expr(false);
            pn = nf.createDefaultNamespace(expr, nsLine);
            break;

          case Token.NAME: {
            int lineno = ts.getLineno();
            String name = ts.getString();
            setCheckForLabel();
            pn = expr(false);
            if (pn.getType() != Token.LABEL) {
                pn = nf.createExprStatement(pn, lineno);
            } else {
                // Parsed the label: push back token should be
                // colon that primaryExpr left untouched.
                if (peekToken() != Token.COLON) Kit.codeBug();
                consumeToken();
                // depend on decompiling lookahead to guess that that
                // last name was a label.
                decompiler.addName(name);
                decompiler.addEOL(Token.COLON);

                if (labelSet == null) {
                    labelSet = new Hashtable();
                } else if (labelSet.containsKey(name)) {
                    reportError(""msg.dup.label"");
                }

                boolean firstLabel;
                if (statementLabel == null) {
                    firstLabel = true;
                    statementLabel = pn;
                } else {
                    // Discard multiple label nodes and use only
                    // the first: it allows to simplify IRFactory
                    firstLabel = false;
                }
                labelSet.put(name, statementLabel);
                try {
                    pn = statementHelper(statementLabel);
                } finally {
                    labelSet.remove(name);
                }
                if (firstLabel) {
                    pn = nf.createLabeledStatement(statementLabel, pn);
                }
                return pn;
            }
            break;
          }

          default: {
            int lineno = ts.getLineno();
            pn = expr(false);
            pn = nf.createExprStatement(pn, lineno);
            break;
          }
        }

        int ttFlagged = peekFlaggedToken();
        switch (ttFlagged & CLEAR_TI_MASK) {
          case Token.SEMI:
            // Consume ';' as a part of expression
            consumeToken();
            break;
          case Token.ERROR:
          case Token.EOF:
          case Token.RC:
            // Autoinsert ;
            break;
          default:
            if ((ttFlagged & TI_AFTER_EOL) == 0) {
                // Report error if no EOL or autoinsert ; otherwise
                reportError(""msg.no.semi.stmt"");
            }
            break;
        }
        decompiler.addEOL(Token.SEMI);

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,nowAllSet,"    private static final boolean nowAllSet(int before, int after, int mask)
    {
        return ((before & mask) != mask) && ((after & mask) == mask);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,returnOrYield,"    private Node returnOrYield(int tt, boolean exprContext)
        throws IOException, ParserException
    {
        if (!insideFunction()) {
            reportError(tt == Token.RETURN ? ""msg.bad.return""
                                           : ""msg.bad.yield"");
        }
        consumeToken();
        decompiler.addToken(tt);
        int lineno = ts.getLineno();

        Node e;
        /* This is ugly, but we don't want to require a semicolon. */
        switch (peekTokenOrEOL()) {
          case Token.SEMI:
          case Token.RC:
          case Token.EOF:
          case Token.EOL:
          case Token.ERROR:
          case Token.RB:
          case Token.RP:
          case Token.YIELD:
            e = null;
            break;
          default:
            e = expr(false);
            break;
        }

        int before = endFlags;
        Node ret;

        if (tt == Token.RETURN) {
            if (e == null ) {
                endFlags |= Node.END_RETURNS;
            } else {
                endFlags |= Node.END_RETURNS_VALUE;
                hasReturnValue = true;
            }
            ret = nf.createReturn(e, lineno);
            
            // see if we need a strict mode warning
            if (nowAllSet(before, endFlags, 
                          Node.END_RETURNS|Node.END_RETURNS_VALUE))
            {
                addStrictWarning(""msg.return.inconsistent"", """");
            }
        } else {
            endFlags |= Node.END_YIELDS;
            ret = nf.createYield(e, lineno);
            if (!exprContext)
                ret = new Node(Token.EXPR_VOID, ret, lineno);
        }

        // see if we are mixing yields and value returns.
        if (nowAllSet(before, endFlags, 
                      Node.END_YIELDS|Node.END_RETURNS_VALUE))
        {
            String name = ((FunctionNode)currentScriptOrFn).getFunctionName();
            if (name.length() == 0)
                addError(""msg.anon.generator.returns"", """");
            else
                addError(""msg.generator.returns"", name);
        }

        return ret;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,variables,"    private Node variables(boolean inFor, int declType)
        throws IOException, ParserException
    {
        Node result = nf.createVariables(declType, ts.getLineno());
        boolean first = true;
        for (;;) {
            Node destructuring = null;
            String s = null;
            int tt = peekToken();
            if (tt == Token.LB || tt == Token.LC) {
                // Destructuring assignment, e.g., var [a,b] = ...
                destructuring = primaryExpr();
            } else {
                // Simple variable name
                mustMatchToken(Token.NAME, ""msg.bad.var"",
                               Token.name(declType).toLowerCase());
                s = ts.getString();
    
                if (!first)
                    decompiler.addToken(Token.COMMA);
                first = false;
    
                decompiler.addName(s);
                defineSymbol(declType, s);
            }
    
            Node init = null;
            if (matchToken(Token.ASSIGN)) {
                decompiler.addToken(Token.ASSIGN);
                init = assignExpr(inFor);
            }
    
            if (destructuring != null) {
                if (init == null) {
                    if (!inFor)
                        reportError(""msg.destruct.assign.no.init"");
                    nf.addChildToBack(result, destructuring);
                } else {
                    nf.addChildToBack(result,
                        nf.createDestructuringAssignment(declType,
                            destructuring, init));
                }
            } else {
                Node name = nf.createName(s);
                if (init != null)
                    nf.addChildToBack(name, init);
                nf.addChildToBack(result, name);
            }
    
            if (!matchToken(Token.COMMA))
                break;
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,let,"    private Node let(boolean isStatement)
        throws IOException, ParserException
    {
        mustMatchToken(Token.LP, ""msg.no.paren.after.let"");
        decompiler.addToken(Token.LP);
        Node result = nf.createScopeNode(Token.LET, ts.getLineno());
        pushScope(result);
        try {
              Node vars = variables(false, Token.LET);
              nf.addChildToBack(result, vars);
              mustMatchToken(Token.RP, ""msg.no.paren.let"");
              decompiler.addToken(Token.RP);
              if (isStatement && peekToken() == Token.LC) {
                  // let statement
                  consumeToken();
                  decompiler.addEOL(Token.LC);
                  nf.addChildToBack(result, statements(null));
                  mustMatchToken(Token.RC, ""msg.no.curly.let"");
                  decompiler.addToken(Token.RC);
              } else {
                  // let expression
                  result.setType(Token.LETEXPR);
                  nf.addChildToBack(result, expr(false));
                  if (isStatement) {
                      // let expression in statement context
                      result = nf.createExprStatement(result, ts.getLineno());
                  }
              }
        } finally {
            popScope();
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,defineSymbol,"    void defineSymbol(int declType, String name) {
        Node.Scope definingScope = currentScope.getDefiningScope(name);
        Node.Scope.Symbol symbol = definingScope != null 
                                  ? definingScope.getSymbol(name)
                                  : null;
        boolean error = false;
        if (symbol != null && (symbol.declType == Token.CONST ||
            declType == Token.CONST))
        {
            error = true;
        } else {
            switch (declType) {
              case Token.LET:
                if (symbol != null && definingScope == currentScope) {
                    error = symbol.declType == Token.LET;
                }
                currentScope.putSymbol(name, 
                    new Node.Scope.Symbol(declType, name));
                break;
                
              case Token.VAR:
              case Token.CONST:
              case Token.FUNCTION:
                if (symbol != null) {
                    if (symbol.declType == Token.VAR)
                        addStrictWarning(""msg.var.redecl"", name);
                    else if (symbol.declType == Token.LP) {
                        addStrictWarning(""msg.var.hides.arg"", name);
                    }
                } else {
                    currentScriptOrFn.putSymbol(name, 
                        new Node.Scope.Symbol(declType, name));
                }
                break;
                
              case Token.LP:
                if (symbol != null) {
                    // must be duplicate parameter. Second parameter hides the 
                    // first, so go ahead and add the second pararameter
                    addWarning(""msg.dup.parms"", name);
                }
                currentScriptOrFn.putSymbol(name, 
                    new Node.Scope.Symbol(declType, name));
                break;
                
              default:
                throw Kit.codeBug();
            }
        }
        if (error) {
            addError(symbol.declType == Token.CONST ? ""msg.const.redecl"" :",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,expr,"    private Node expr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = assignExpr(inForInit);
        while (matchToken(Token.COMMA)) {
            decompiler.addToken(Token.COMMA);
            if (compilerEnv.isStrictMode() && !pn.hasSideEffects())
                addStrictWarning(""msg.no.side.effects"", """");
            if (peekToken() == Token.YIELD) {
              reportError(""msg.yield.parenthesized"");
            }
            pn = nf.createBinary(Token.COMMA, pn, assignExpr(inForInit));
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,assignExpr,"    private Node assignExpr(boolean inForInit)
        throws IOException, ParserException
    {
        int tt = peekToken();
        if (tt == Token.YIELD) {
            consumeToken();
            return returnOrYield(tt, true);
        }
        Node pn = condExpr(inForInit);

        tt = peekToken();
        if (Token.FIRST_ASSIGN <= tt && tt <= Token.LAST_ASSIGN) {
            consumeToken();
            decompiler.addToken(tt);
            pn = nf.createAssignment(tt, pn, assignExpr(inForInit));
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,condExpr,"    private Node condExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = orExpr(inForInit);

        if (matchToken(Token.HOOK)) {
            decompiler.addToken(Token.HOOK);
            Node ifTrue = assignExpr(false);
            mustMatchToken(Token.COLON, ""msg.no.colon.cond"");
            decompiler.addToken(Token.COLON);
            Node ifFalse = assignExpr(inForInit);
            return nf.createCondExpr(pn, ifTrue, ifFalse);
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,orExpr,"    private Node orExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = andExpr(inForInit);
        if (matchToken(Token.OR)) {
            decompiler.addToken(Token.OR);
            pn = nf.createBinary(Token.OR, pn, orExpr(inForInit));
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,andExpr,"    private Node andExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = bitOrExpr(inForInit);
        if (matchToken(Token.AND)) {
            decompiler.addToken(Token.AND);
            pn = nf.createBinary(Token.AND, pn, andExpr(inForInit));
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,bitOrExpr,"    private Node bitOrExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = bitXorExpr(inForInit);
        while (matchToken(Token.BITOR)) {
            decompiler.addToken(Token.BITOR);
            pn = nf.createBinary(Token.BITOR, pn, bitXorExpr(inForInit));
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,bitXorExpr,"    private Node bitXorExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = bitAndExpr(inForInit);
        while (matchToken(Token.BITXOR)) {
            decompiler.addToken(Token.BITXOR);
            pn = nf.createBinary(Token.BITXOR, pn, bitAndExpr(inForInit));
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,bitAndExpr,"    private Node bitAndExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = eqExpr(inForInit);
        while (matchToken(Token.BITAND)) {
            decompiler.addToken(Token.BITAND);
            pn = nf.createBinary(Token.BITAND, pn, eqExpr(inForInit));
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,eqExpr,"    private Node eqExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = relExpr(inForInit);
        for (;;) {
            int tt = peekToken();
            switch (tt) {
              case Token.EQ:
              case Token.NE:
              case Token.SHEQ:
              case Token.SHNE:
                consumeToken();
                int decompilerToken = tt;
                int parseToken = tt;
                if (compilerEnv.getLanguageVersion() == Context.VERSION_1_2) {
                    // JavaScript 1.2 uses shallow equality for == and != .
                    // In addition, convert === and !== for decompiler into
                    // == and != since the decompiler is supposed to show
                    // canonical source and in 1.2 ===, !== are allowed
                    // only as an alias to ==, !=.
                    switch (tt) {
                      case Token.EQ:
                        parseToken = Token.SHEQ;
                        break;
                      case Token.NE:
                        parseToken = Token.SHNE;
                        break;
                      case Token.SHEQ:
                        decompilerToken = Token.EQ;
                        break;
                      case Token.SHNE:
                        decompilerToken = Token.NE;
                        break;
                    }
                }
                decompiler.addToken(decompilerToken);
                pn = nf.createBinary(parseToken, pn, relExpr(inForInit));
                continue;
            }
            break;
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,relExpr,"    private Node relExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = shiftExpr();
        for (;;) {
            int tt = peekToken();
            switch (tt) {
              case Token.IN:
                if (inForInit)
                    break;
                // fall through
              case Token.INSTANCEOF:
              case Token.LE:
              case Token.LT:
              case Token.GE:
              case Token.GT:
                consumeToken();
                decompiler.addToken(tt);
                pn = nf.createBinary(tt, pn, shiftExpr());
                continue;
            }
            break;
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,shiftExpr,"    private Node shiftExpr()
        throws IOException, ParserException
    {
        Node pn = addExpr();
        for (;;) {
            int tt = peekToken();
            switch (tt) {
              case Token.LSH:
              case Token.URSH:
              case Token.RSH:
                consumeToken();
                decompiler.addToken(tt);
                pn = nf.createBinary(tt, pn, addExpr());
                continue;
            }
            break;
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addExpr,"    private Node addExpr()
        throws IOException, ParserException
    {
        Node pn = mulExpr();
        for (;;) {
            int tt = peekToken();
            if (tt == Token.ADD || tt == Token.SUB) {
                consumeToken();
                decompiler.addToken(tt);
                // flushNewLines
                pn = nf.createBinary(tt, pn, mulExpr());
                continue;
            }
            break;
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,mulExpr,"    private Node mulExpr()
        throws IOException, ParserException
    {
        Node pn = unaryExpr();
        for (;;) {
            int tt = peekToken();
            switch (tt) {
              case Token.MUL:
              case Token.DIV:
              case Token.MOD:
                consumeToken();
                decompiler.addToken(tt);
                pn = nf.createBinary(tt, pn, unaryExpr());
                continue;
            }
            break;
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,unaryExpr,"    private Node unaryExpr()
        throws IOException, ParserException
    {
        int tt;

        tt = peekToken();

        switch(tt) {
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.TYPEOF:
            consumeToken();
            decompiler.addToken(tt);
            return nf.createUnary(tt, unaryExpr());

        case Token.ADD:
            consumeToken();
            // Convert to special POS token in decompiler and parse tree
            decompiler.addToken(Token.POS);
            return nf.createUnary(Token.POS, unaryExpr());

        case Token.SUB:
            consumeToken();
            // Convert to special NEG token in decompiler and parse tree
            decompiler.addToken(Token.NEG);
            return nf.createUnary(Token.NEG, unaryExpr());

        case Token.INC:
        case Token.DEC:
            consumeToken();
            decompiler.addToken(tt);
            return nf.createIncDec(tt, false, memberExpr(true));

        case Token.DELPROP:
            consumeToken();
            decompiler.addToken(Token.DELPROP);
            return nf.createUnary(Token.DELPROP, unaryExpr());

        case Token.ERROR:
            consumeToken();
            break;

        // XML stream encountered in expression.
        case Token.LT:
            if (compilerEnv.isXmlAvailable()) {
                consumeToken();
                Node pn = xmlInitializer();
                return memberExprTail(true, pn);
            }
            // Fall thru to the default handling of RELOP

        default:
            Node pn = memberExpr(true);

            // Don't look across a newline boundary for a postfix incop.
            tt = peekTokenOrEOL();
            if (tt == Token.INC || tt == Token.DEC) {
                consumeToken();
                decompiler.addToken(tt);
                return nf.createIncDec(tt, true, pn);
            }
            return pn;
        }
        return nf.createName(""error""); // Only reached on error.Try to continue.
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,xmlInitializer,"    private Node xmlInitializer() throws IOException
    {
        int tt = ts.getFirstXMLToken();
        if (tt != Token.XML && tt != Token.XMLEND) {
            reportError(""msg.syntax"");
            return null;
        }

        /* Make a NEW node to append to. */
        Node pnXML = nf.createLeaf(Token.NEW);

        String xml = ts.getString();
        boolean fAnonymous = xml.trim().startsWith(""<>"");

        Node pn = nf.createName(fAnonymous ? ""XMLList"" : ""XML"");
        nf.addChildToBack(pnXML, pn);

        pn = null;
        Node expr;
        for (;;tt = ts.getNextXMLToken()) {
            switch (tt) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,argumentList,"    private void argumentList(Node listNode)
        throws IOException, ParserException
    {
        boolean matched;
        matched = matchToken(Token.RP);
        if (!matched) {
            boolean first = true;
            do {
                if (!first)
                    decompiler.addToken(Token.COMMA);
                first = false;
                if (peekToken() == Token.YIELD) {
                    reportError(""msg.yield.parenthesized"");
                }
                nf.addChildToBack(listNode, assignExpr(false));
            } while (matchToken(Token.COMMA));

            mustMatchToken(Token.RP, ""msg.no.paren.arg"");
        }
        decompiler.addToken(Token.RP);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,memberExpr,"    private Node memberExpr(boolean allowCallSyntax)
        throws IOException, ParserException
    {
        int tt;

        Node pn;

        /* Check for new expressions. */
        tt = peekToken();
        if (tt == Token.NEW) {
            /* Eat the NEW token. */
            consumeToken();
            decompiler.addToken(Token.NEW);

            /* Make a NEW node to append to. */
            pn = nf.createCallOrNew(Token.NEW, memberExpr(false));

            if (matchToken(Token.LP)) {
                decompiler.addToken(Token.LP);
                /* Add the arguments to pn, if any are supplied. */
                argumentList(pn);
            }

            /* XXX there's a check in the C source against
             * ""too many constructor arguments"" - how many
             * do we claim to support?
             */

            /* Experimental syntax:  allow an object literal to follow a new expression,
             * which will mean a kind of anonymous class built with the JavaAdapter.
             * the object literal will be passed as an additional argument to the constructor.
             */
            tt = peekToken();
            if (tt == Token.LC) {
                nf.addChildToBack(pn, primaryExpr());
            }
        } else {
            pn = primaryExpr();
        }

        return memberExprTail(allowCallSyntax, pn);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,memberExprTail,"    private Node memberExprTail(boolean allowCallSyntax, Node pn)
        throws IOException, ParserException
    {
      tailLoop:
        for (;;) {
            int tt = peekToken();
            switch (tt) {

              case Token.DOT:
              case Token.DOTDOT:
                {
                    int memberTypeFlags;
                    String s;

                    consumeToken();
                    decompiler.addToken(tt);
                    memberTypeFlags = 0;
                    if (tt == Token.DOTDOT) {
                        mustHaveXML();
                        memberTypeFlags = Node.DESCENDANTS_FLAG;
                    }
                    if (!compilerEnv.isXmlAvailable()) {
                        mustMatchToken(Token.NAME, ""msg.no.name.after.dot"");
                        s = ts.getString();
                        decompiler.addName(s);
                        pn = nf.createPropertyGet(pn, null, s, memberTypeFlags);
                        break;
                    }

                    tt = nextToken();
                    switch (tt) {
                    
                      // needed for generator.throw();
                      case Token.THROW:
                        decompiler.addName(""throw"");
                        pn = propertyName(pn, ""throw"", memberTypeFlags);
                        break;

                      // handles: name, ns::name, ns::*, ns::[expr]
                      case Token.NAME:
                        s = ts.getString();
                        decompiler.addName(s);
                        pn = propertyName(pn, s, memberTypeFlags);
                        break;

                      // handles: *, *::name, *::*, *::[expr]
                      case Token.MUL:
                        decompiler.addName(""*"");
                        pn = propertyName(pn, ""*"", memberTypeFlags);
                        break;

                      // handles: '@attr', '@ns::attr', '@ns::*', '@ns::*',
                      //          '@::attr', '@::*', '@*', '@*::attr', '@*::*'
                      case Token.XMLATTR:
                        decompiler.addToken(Token.XMLATTR);
                        pn = attributeAccess(pn, memberTypeFlags);
                        break;

                      default:
                        reportError(""msg.no.name.after.dot"");
                    }
                }
                break;

              case Token.DOTQUERY:
                consumeToken();
                mustHaveXML();
                decompiler.addToken(Token.DOTQUERY);
                pn = nf.createDotQuery(pn, expr(false), ts.getLineno());
                mustMatchToken(Token.RP, ""msg.no.paren"");
                decompiler.addToken(Token.RP);
                break;

              case Token.LB:
                consumeToken();
                decompiler.addToken(Token.LB);
                pn = nf.createElementGet(pn, null, expr(false), 0);
                mustMatchToken(Token.RB, ""msg.no.bracket.index"");
                decompiler.addToken(Token.RB);
                break;

              case Token.LP:
                if (!allowCallSyntax) {
                    break tailLoop;
                }
                consumeToken();
                decompiler.addToken(Token.LP);
                pn = nf.createCallOrNew(Token.CALL, pn);
                /* Add the arguments to pn, if any are supplied. */
                argumentList(pn);
                break;

              default:
                break tailLoop;
            }
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,attributeAccess,"    private Node attributeAccess(Node pn, int memberTypeFlags)
        throws IOException
    {
        memberTypeFlags |= Node.ATTRIBUTE_FLAG;
        int tt = nextToken();

        switch (tt) {
          // handles: @name, @ns::name, @ns::*, @ns::[expr]
          case Token.NAME:
            {
                String s = ts.getString();
                decompiler.addName(s);
                pn = propertyName(pn, s, memberTypeFlags);
            }
            break;

          // handles: @*, @*::name, @*::*, @*::[expr]
          case Token.MUL:
            decompiler.addName(""*"");
            pn = propertyName(pn, ""*"", memberTypeFlags);
            break;

          // handles @[expr]
          case Token.LB:
            decompiler.addToken(Token.LB);
            pn = nf.createElementGet(pn, null, expr(false), memberTypeFlags);
            mustMatchToken(Token.RB, ""msg.no.bracket.index"");
            decompiler.addToken(Token.RB);
            break;

          default:
            reportError(""msg.no.name.after.xmlAttr"");
            pn = nf.createPropertyGet(pn, null, ""?"", memberTypeFlags);
            break;
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,propertyName,"    private Node propertyName(Node pn, String name, int memberTypeFlags)
        throws IOException, ParserException
    {
        String namespace = null;
        if (matchToken(Token.COLONCOLON)) {
            decompiler.addToken(Token.COLONCOLON);
            namespace = name;

            int tt = nextToken();
            switch (tt) {
              // handles name::name
              case Token.NAME:
                name = ts.getString();
                decompiler.addName(name);
                break;

              // handles name::*
              case Token.MUL:
                decompiler.addName(""*"");
                name = ""*"";
                break;

              // handles name::[expr]
              case Token.LB:
                decompiler.addToken(Token.LB);
                pn = nf.createElementGet(pn, namespace, expr(false),
                                         memberTypeFlags);
                mustMatchToken(Token.RB, ""msg.no.bracket.index"");
                decompiler.addToken(Token.RB);
                return pn;

              default:
                reportError(""msg.no.name.after.coloncolon"");
                name = ""?"";
            }
        }

        pn = nf.createPropertyGet(pn, namespace, name, memberTypeFlags);
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,arrayComprehension,"    private Node arrayComprehension(String arrayName, Node expr)
        throws IOException, ParserException
    {
        if (nextToken() != Token.FOR)
            throw Kit.codeBug(); // shouldn't be here if next token isn't 'for'
        decompiler.addName("" ""); // space after array literal expr
        decompiler.addToken(Token.FOR);
        boolean isForEach = false;
        if (matchToken(Token.NAME)) {
            decompiler.addName(ts.getString());
            if (ts.getString().equals(""each"")) {
                isForEach = true;
            } else {
                reportError(""msg.no.paren.for"");
            }
        }
        mustMatchToken(Token.LP, ""msg.no.paren.for"");
        decompiler.addToken(Token.LP);
        String name;
        int tt = peekToken();
        if (tt == Token.LB || tt == Token.LC) {
            // handle destructuring assignment
            name = currentScriptOrFn.getNextTempName();
            defineSymbol(Token.LP, name);
            expr = nf.createBinary(Token.COMMA,
                nf.createAssignment(Token.ASSIGN, primaryExpr(), 
                                    nf.createName(name)),
                expr);
        } else if (tt == Token.NAME) {
            consumeToken();
            name = ts.getString();
            decompiler.addName(name);
        } else {
            reportError(""msg.bad.var"");
            return nf.createNumber(0);
        }

        Node init = nf.createName(name);
        // Define as a let since we want the scope of the variable to
        // be restricted to the array comprehension
        defineSymbol(Token.LET, name);
        
        mustMatchToken(Token.IN, ""msg.in.after.for.name"");
        decompiler.addToken(Token.IN);
        Node iterator = expr(false);
        mustMatchToken(Token.RP, ""msg.no.paren.for.ctrl"");
        decompiler.addToken(Token.RP);
        
        Node body;
        tt = peekToken();
        if (tt == Token.FOR) {
            body = arrayComprehension(arrayName, expr);
        } else {
            Node call = nf.createCallOrNew(Token.CALL,
                nf.createPropertyGet(nf.createName(arrayName), null,
                                     ""push"", 0));
            call.addChildToBack(expr);
            body = new Node(Token.EXPR_VOID, call, ts.getLineno());
            if (tt == Token.IF) {
                consumeToken();
                decompiler.addToken(Token.IF);
                int lineno = ts.getLineno();
                Node cond = condition();
                body = nf.createIf(cond, body, null, lineno);
            }
            mustMatchToken(Token.RB, ""msg.no.bracket.arg"");
            decompiler.addToken(Token.RB);
        }

        Node loop = enterLoop(null, true);
        try {
            return nf.createForIn(Token.LET, loop, init, iterator, body,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,primaryExpr,"    private Node primaryExpr()
        throws IOException, ParserException
    {
        Node pn;

        int ttFlagged = nextFlaggedToken();
        int tt = ttFlagged & CLEAR_TI_MASK;

        switch(tt) {

          case Token.FUNCTION:
            return function(FunctionNode.FUNCTION_EXPRESSION);

          case Token.LB: {
            ObjArray elems = new ObjArray();
            int skipCount = 0;
            int destructuringLen = 0;
            decompiler.addToken(Token.LB);
            boolean after_lb_or_comma = true;
            for (;;) {
                tt = peekToken();

                if (tt == Token.COMMA) {
                    consumeToken();
                    decompiler.addToken(Token.COMMA);
                    if (!after_lb_or_comma) {
                        after_lb_or_comma = true;
                    } else {
                        elems.add(null);
                        ++skipCount;
                    }
                } else if (tt == Token.RB) {
                    consumeToken();
                    decompiler.addToken(Token.RB);
                    // for ([a,] in obj) is legal, but for ([a] in obj) is 
                    // not since we have both key and value supplied. The
                    // trick is that [a,] and [a] are equivalent in other
                    // array literal contexts. So we calculate a special
                    // length value just for destructuring assignment.
                    destructuringLen = elems.size() + 
                                       (after_lb_or_comma ? 1 : 0);
                    break;
                } else if (skipCount == 0 && elems.size() == 1 &&
                           tt == Token.FOR)
                {
                    Node scopeNode = nf.createScopeNode(Token.ARRAYCOMP, 
                                                        ts.getLineno());
                    String tempName = currentScriptOrFn.getNextTempName();
                    pushScope(scopeNode);
                    try {
                        defineSymbol(Token.LET, tempName);
                        Node expr = (Node) elems.get(0);
                        Node block = nf.createBlock(ts.getLineno());
                        Node init = new Node(Token.EXPR_VOID, 
                            nf.createAssignment(Token.ASSIGN, 
                                nf.createName(tempName),
                                nf.createCallOrNew(Token.NEW,
                                    nf.createName(""Array""))), ts.getLineno());
                        block.addChildToBack(init);
                        block.addChildToBack(arrayComprehension(tempName, 
                            expr));
                        scopeNode.addChildToBack(block);
                        scopeNode.addChildToBack(nf.createName(tempName));
                        return scopeNode;
                    } finally {
                        popScope();
                    }
                } else {
                    if (!after_lb_or_comma) {
                        reportError(""msg.no.bracket.arg"");
                    }
                    elems.add(assignExpr(false));
                    after_lb_or_comma = false;
                }
            }
            return nf.createArrayLiteral(elems, skipCount, destructuringLen);
          }

          case Token.LC: {
            ObjArray elems = new ObjArray();
            decompiler.addToken(Token.LC);
            if (!matchToken(Token.RC)) {

                boolean first = true;
            commaloop:
                do {
                    Object property;

                    if (!first)
                        decompiler.addToken(Token.COMMA);
                    else
                        first = false;

                    tt = peekToken();
                    switch(tt) {
                      case Token.NAME:
                      case Token.STRING:
                        consumeToken();
                        // map NAMEs to STRINGs in object literal context
                        // but tell the decompiler the proper type
                        String s = ts.getString();
                        if (tt == Token.NAME) {
                            if (s.equals(""get"") &&
                                peekToken() == Token.NAME) {
                                decompiler.addToken(Token.GET);
                                consumeToken();
                                s = ts.getString();
                                decompiler.addName(s);
                                property = ScriptRuntime.getIndexObject(s);
                                if (!getterSetterProperty(elems, property,
                                                          true))
                                    break commaloop;
                                break;
                            } else if (s.equals(""set"") &&
                                       peekToken() == Token.NAME) {
                                decompiler.addToken(Token.SET);
                                consumeToken();
                                s = ts.getString();
                                decompiler.addName(s);
                                property = ScriptRuntime.getIndexObject(s);
                                if (!getterSetterProperty(elems, property,
                                                          false))
                                    break commaloop;
                                break;
                            }
                            decompiler.addName(s);
                        } else {
                            decompiler.addString(s);
                        }
                        property = ScriptRuntime.getIndexObject(s);
                        plainProperty(elems, property);
                        break;

                      case Token.NUMBER:
                        consumeToken();
                        double n = ts.getNumber();
                        decompiler.addNumber(n);
                        property = ScriptRuntime.getIndexObject(n);
                        plainProperty(elems, property);
                        break;

                      case Token.RC:
                        // trailing comma is OK.
                        break commaloop;
                    default:
                        reportError(""msg.bad.prop"");
                        break commaloop;
                    }
                } while (matchToken(Token.COMMA));

                mustMatchToken(Token.RC, ""msg.no.brace.prop"");
            }
            decompiler.addToken(Token.RC);
            return nf.createObjectLiteral(elems);
          }
          
          case Token.LET:
            decompiler.addToken(Token.LET);
            return let(false);

          case Token.LP:

            /* Brendan's IR-jsparse.c makes a new node tagged with
             * TOK_LP here... I'm not sure I understand why.  Isn't
             * the grouping already implicit in the structure of the
             * parse tree?  also TOK_LP is already overloaded (I
             * think) in the C IR as 'function call.'  */
            decompiler.addToken(Token.LP);
            pn = expr(false);
            pn.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);
            decompiler.addToken(Token.RP);
            mustMatchToken(Token.RP, ""msg.no.paren"");
            return pn;

          case Token.XMLATTR:
            mustHaveXML();
            decompiler.addToken(Token.XMLATTR);
            pn = attributeAccess(null, 0);
            return pn;

          case Token.NAME: {
            String name = ts.getString();
            if ((ttFlagged & TI_CHECK_LABEL) != 0) {
                if (peekToken() == Token.COLON) {
                    // Do not consume colon, it is used as unwind indicator
                    // to return to statementHelper.
                    // XXX Better way?
                    return nf.createLabel(ts.getLineno());
                }
            }

            decompiler.addName(name);
            if (compilerEnv.isXmlAvailable()) {
                pn = propertyName(null, name, 0);
            } else {
                pn = nf.createName(name);
            }
            return pn;
          }

          case Token.NUMBER: {
            double n = ts.getNumber();
            decompiler.addNumber(n);
            return nf.createNumber(n);
          }

          case Token.STRING: {
            String s = ts.getString();
            decompiler.addString(s);
            return nf.createString(s);
          }

          case Token.DIV:
          case Token.ASSIGN_DIV: {
            // Got / or /= which should be treated as regexp in fact
            ts.readRegExp(tt);
            String flags = ts.regExpFlags;
            ts.regExpFlags = null;
            String re = ts.getString();
            decompiler.addRegexp(re, flags);
            /*APPJET*/
            int index = currentScriptOrFn.addRegexp
                (re, flags, getCurrentLineNumber());
            return nf.createRegExp(index);
          }

          case Token.NULL:
          case Token.THIS:
          case Token.FALSE:
          case Token.TRUE:
            decompiler.addToken(tt);
            return nf.createLeaf(tt);

          case Token.RESERVED:
            reportError(""msg.reserved.id"");
            break;

          case Token.ERROR:
            /* the scanner or one of its subroutines reported the error. */
            break;

          case Token.EOF:
            reportError(""msg.unexpected.eof"");
            break;

          default:
            reportError(""msg.syntax"");
            break;
        }
        return null;    // should never reach here
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,plainProperty,"    private void plainProperty(ObjArray elems, Object property)
            throws IOException {
        mustMatchToken(Token.COLON, ""msg.no.colon.prop"");

        // OBJLIT is used as ':' in object literal for
        // decompilation to solve spacing ambiguity.
        decompiler.addToken(Token.OBJECTLIT);
        elems.add(property);
        elems.add(assignExpr(false));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,getterSetterProperty,"    private boolean getterSetterProperty(ObjArray elems, Object property,
                                         boolean isGetter) throws IOException {
        Node f = function(FunctionNode.FUNCTION_EXPRESSION);
        if (f.getType() != Token.FUNCTION) {
            reportError(""msg.bad.prop"");
            return false;
        }
        int fnIndex = f.getExistingIntProp(Node.FUNCTION_PROP);
        FunctionNode fn = currentScriptOrFn.getFunctionNode(fnIndex);
        if (fn.getFunctionName().length() != 0) {
            reportError(""msg.bad.prop"");
            return false;
        }
        elems.add(property);
        if (isGetter) {
            elems.add(nf.createUnary(Token.GET, f));
        } else {
            elems.add(nf.createUnary(Token.SET, f));
        }
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,getStaticSecurityDomainClassInternal,"    public Class getStaticSecurityDomainClassInternal() {
        return CodeSource.class;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,defineClass,"        public Class defineClass(String name, byte[] data)
        {
            return defineClass(name, data, 0, data.length, codeSource);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,linkClass,"        public void linkClass(Class cl)
        {
            resolveClass(cl);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,createClassLoader,"    public GeneratedClassLoader createClassLoader(final ClassLoader parent, 
            final Object securityDomain)
    {
        return (Loader)AccessController.doPrivileged(
            new PrivilegedAction()",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,run,"                public Object run()
                {
                    return new Loader(parent, (CodeSource)securityDomain);
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,getDynamicSecurityDomain,"    public Object getDynamicSecurityDomain(Object securityDomain)
    {
        // No separate notion of dynamic security domain - just return what was
        // passed in.
        return securityDomain;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,callWithDomain,"    public Object callWithDomain(final Object securityDomain, final Context cx, 
            Callable callable, Scriptable scope, Scriptable thisObj, 
            Object[] args)
    {
        // Run in doPrivileged as we might be checked for ""getClassLoader"" 
        // runtime permission
        final ClassLoader classLoader = (ClassLoader)AccessController.doPrivileged(
            new PrivilegedAction() {
                public Object run() {
                    return cx.getApplicationClassLoader();
                }
            });
        final CodeSource codeSource = (CodeSource)securityDomain;
        Map classLoaderMap;
        synchronized(callers)
        {
            classLoaderMap = (Map)callers.get(codeSource);
            if(classLoaderMap == null)
            {
                classLoaderMap = new WeakHashMap();
                callers.put(codeSource, classLoaderMap);
            }
        }
        SecureCaller caller;
        synchronized(classLoaderMap)
        {
            SoftReference ref = (SoftReference)classLoaderMap.get(classLoader);
            if(ref != null)
            {
                caller = (SecureCaller)ref.get();
            }
            else
            {
                caller = null;
            }
            if(caller == null)
            {
                try
                {
                    // Run in doPrivileged as we'll be checked for 
                    // ""createClassLoader"" runtime permission
                    caller = (SecureCaller)AccessController.doPrivileged(
                            new PrivilegedExceptionAction()
                    {
                        public Object run() throws Exception
                        {
                            Loader loader = new Loader(classLoader, 
                                    codeSource);
                            Class c = loader.defineClass(
                                    SecureCaller.class.getName() + ""Impl"", 
                                    secureCallerImplBytecode);
                            return c.newInstance();
                        }
                    });
                    classLoaderMap.put(classLoader, new SoftReference(caller));
                }
                catch(PrivilegedActionException ex)
                {
                    throw new UndeclaredThrowableException(ex.getCause());
                }
            }
        }
        return caller.call(callable, cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,run,"                public Object run() {
                    return cx.getApplicationClassLoader();
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,run,"                        public Object run() throws Exception
                        {
                            Loader loader = new Loader(classLoader, 
                                    codeSource);
                            Class c = loader.defineClass(
                                    SecureCaller.class.getName() + ""Impl"", 
                                    secureCallerImplBytecode);
                            return c.newInstance();
                        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PolicySecurityController.java,loadBytecode,"    private static byte[] loadBytecode()
    {
        String secureCallerClassName = SecureCaller.class.getName();
        ClassFileWriter cfw = new ClassFileWriter(
                secureCallerClassName + ""Impl"", secureCallerClassName, 
                ""<generated>"");
        cfw.startMethod(""<init>"", ""()V"", ClassFileWriter.ACC_PUBLIC);
        cfw.addALoad(0);
        cfw.addInvoke(ByteCode.INVOKESPECIAL, secureCallerClassName, 
                ""<init>"", ""()V"");
        cfw.add(ByteCode.RETURN);
        cfw.stopMethod((short)1);
        String callableCallSig = 
            ""Lorg/mozilla/javascript/Context;"" +
            ""Lorg/mozilla/javascript/Scriptable;"" +
            ""Lorg/mozilla/javascript/Scriptable;"" +
            ""[Ljava/lang/Object;)Ljava/lang/Object;"";
        
        cfw.startMethod(""call"",
                ""(Lorg/mozilla/javascript/Callable;"" + callableCallSig,
                (short)(ClassFileWriter.ACC_PUBLIC
                        | ClassFileWriter.ACC_FINAL));
        for(int i = 1; i < 6; ++i) {
            cfw.addALoad(i);
        }
        cfw.addInvoke(ByteCode.INVOKEINTERFACE, 
                ""org/mozilla/javascript/Callable"", ""call"", 
                ""("" + callableCallSig);
        cfw.add(ByteCode.ARETURN);
        cfw.stopMethod((short)6);
        return cfw.toByteArray();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Ref.java,has,"    public boolean has(Context cx)
    {
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Ref.java,delete,"    public boolean delete(Context cx)
    {
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,getMessage,"    public final String getMessage()
    {
        String details = details();
        if (sourceName == null || lineNumber <= 0) {
            return details;
        }
        StringBuffer buf = new StringBuffer(details);
        buf.append("" ("");
        if (sourceName != null) {
            buf.append(sourceName);
        }
        if (lineNumber > 0) {
            buf.append('#');
            buf.append(lineNumber);
        }
        buf.append(')');
        return buf.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,details,"    public String details()
    {
        return super.getMessage();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,sourceName,"    public final String sourceName()
    {
        return sourceName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,initSourceName,"    public final void initSourceName(String sourceName)
    {
        if (sourceName == null) throw new IllegalArgumentException();
        if (this.sourceName != null) throw new IllegalStateException();
        this.sourceName = sourceName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,lineNumber,"    public final int lineNumber()
    {
        return lineNumber;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,initLineNumber,"    public final void initLineNumber(int lineNumber)
    {
        if (lineNumber <= 0) throw new IllegalArgumentException(String.valueOf(lineNumber));
        if (this.lineNumber > 0) throw new IllegalStateException();
        this.lineNumber = lineNumber;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,columnNumber,"    public final int columnNumber()
    {
        return columnNumber;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,initColumnNumber,"    public final void initColumnNumber(int columnNumber)
    {
        if (columnNumber <= 0) throw new IllegalArgumentException(String.valueOf(columnNumber));
        if (this.columnNumber > 0) throw new IllegalStateException();
        this.columnNumber = columnNumber;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,lineSource,"    public final String lineSource()
    {
        return lineSource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,initLineSource,"    public final void initLineSource(String lineSource)
    {
        if (lineSource == null) throw new IllegalArgumentException();
        if (this.lineSource != null) throw new IllegalStateException();
        this.lineSource = lineSource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,recordErrorOrigin,"    final void recordErrorOrigin(String sourceName, int lineNumber,
                                 String lineSource, int columnNumber)
    {
        // XXX: for compatibility allow for now -1 to mean 0
        if (lineNumber == -1) {
            lineNumber = 0;
        }

        if (sourceName != null) {
            initSourceName(sourceName);
        }
        if (lineNumber != 0) {
            initLineNumber(lineNumber);
        }
        if (lineSource != null) {
            initLineSource(lineSource);
        }
        if (columnNumber != 0) {
            initColumnNumber(columnNumber);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,generateStackTrace,"    private String generateStackTrace()
    {
        // Get stable reference to work properly with concurrent access
        CharArrayWriter writer = new CharArrayWriter();
        super.printStackTrace(new PrintWriter(writer));
        String origStackTrace = writer.toString();
        Evaluator e = Context.createInterpreter();
        if (e != null)
            return e.getPatchedStack(this, origStackTrace);
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,getScriptStackTrace,"    public String getScriptStackTrace()
    {
        return getScriptStackTrace(new FilenameFilter() {
            public boolean accept(File dir, String name) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,accept,"            public boolean accept(File dir, String name) {
                return name.endsWith("".js"");
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,getScriptStackTrace,"    public String getScriptStackTrace(FilenameFilter filter)
    {
        List interpreterStack;
        Evaluator interpreter = Context.createInterpreter();
        if (interpreter != null)
            interpreterStack = interpreter.getScriptStack(this);
        else
            interpreterStack = new ArrayList();
        int interpreterStackIndex = 0;
        StringBuffer buffer = new StringBuffer();
        String lineSeparator = SecurityUtilities.getSystemProperty(""line.separator"");
        StackTraceElement[] stack = getStackTrace();
        for (int i = 0; i < stack.length; i++) {
            StackTraceElement e = stack[i];
            String name = e.getFileName();
            if (e.getLineNumber() > -1 && name != null &&
                filter.accept(null, name))
            {
                buffer.append(""\tat "");
                buffer.append(e.getFileName());
                buffer.append(':');
                buffer.append(e.getLineNumber());
                buffer.append(lineSeparator);
            } else if (interpreterStack != null &&
                ""org.mozilla.javascript.Interpreter"".equals(e.getClassName()) &&
                ""interpretLoop"".equals(e.getMethodName()))
            {
                buffer.append(interpreterStack.get(interpreterStackIndex++));
            }
        }
        return buffer.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,printStackTrace,"    public void printStackTrace(PrintWriter s)
    {
        if (interpreterStackInfo == null) {
            super.printStackTrace(s);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RhinoException.java,printStackTrace,"    public void printStackTrace(PrintStream s)
    {
        if (interpreterStackInfo == null) {
            super.printStackTrace(s);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getSourceName,"    public final String getSourceName() { return sourceName; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,setSourceName,"    public final void setSourceName(String sourceName) {
        this.sourceName = sourceName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getEncodedSourceStart,"    public final int getEncodedSourceStart() { return encodedSourceStart; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getEncodedSourceEnd,"    public final int getEncodedSourceEnd() { return encodedSourceEnd; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,setEncodedSourceBounds,"    public final void setEncodedSourceBounds(int start, int end) {
        this.encodedSourceStart = start;
        this.encodedSourceEnd = end;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getBaseLineno,"    public final int getBaseLineno() { return this.lineno; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,setBaseLineno,"    public final void setBaseLineno(int lineno) {
        // One time action
        if (lineno < 0 || this.lineno >= 0) Kit.codeBug();
        this.lineno = lineno;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getEndLineno,"    public final int getEndLineno() { return endLineno; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,setEndLineno,"    public final void setEndLineno(int lineno) {
        // One time action
        if (lineno < 0 || endLineno >= 0) Kit.codeBug();
        endLineno = lineno;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getFunctionCount,"    public final int getFunctionCount() {
        if (functions == null) { return 0; }
        return functions.size();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getFunctionNode,"    public final FunctionNode getFunctionNode(int i) {
        return (FunctionNode)functions.get(i);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,addFunction,"    public final int addFunction(FunctionNode fnNode) {
        if (fnNode == null) Kit.codeBug();
        if (functions == null) { functions = new ObjArray(); }
        functions.add(fnNode);
        return functions.size() - 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getRegexpCount,"    public final int getRegexpCount() {
        if (regexps == null) { return 0; }
        return regexps.size() / 2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getRegexpString,"    public final String getRegexpString(int index) {
        return (String)regexps.get(index * 2);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getRegexpFlags,"    public final String getRegexpFlags(int index) {
        return (String)regexps.get(index * 2 + 1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getRegexpLineno,"    /*APPJET*/public final int getRegexpLineno(int index) {
        return (Integer)regexpLinenos.get(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,addRegexp,"    public final int addRegexp(String string, String flags, /*APPJET*/
                               int lineno) {
        if (string == null) Kit.codeBug();
        if (regexps == null) {
            /*APPJET*/
            regexps = new ObjArray();
            regexpLinenos = new ObjArray();
        }
        regexps.add(string);
        regexps.add(flags);
        /*APPJET*/regexpLinenos.add(lineno);
        return regexps.size() / 2 - 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getIndexForNameNode,"    public int getIndexForNameNode(Node nameNode) {
        if (variableNames == null) throw Kit.codeBug();
        Node.Scope node = nameNode.getScope();
        Symbol symbol = node == null ? null 
                                     : node.getSymbol(nameNode.getString());
        if (symbol == null)
            return -1;
        return symbol.index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getParamOrVarName,"    public final String getParamOrVarName(int index) {
        if (variableNames == null) throw Kit.codeBug();
        return variableNames[index];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getParamCount,"    public final int getParamCount() {
        return paramCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getParamAndVarCount,"    public final int getParamAndVarCount() {
        if (variableNames == null) throw Kit.codeBug();
        return symbols.size();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getParamAndVarNames,"    public final String[] getParamAndVarNames() {
        if (variableNames == null) throw Kit.codeBug();
        return variableNames;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getParamAndVarConst,"    public final boolean[] getParamAndVarConst() {
        if (variableNames == null) throw Kit.codeBug();
        return isConsts;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,addSymbol,"    void addSymbol(Symbol symbol) {
        if (variableNames != null) throw Kit.codeBug();
        if (symbol.declType == Token.LP) {
            paramCount++;
        }
        symbols.add(symbol);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,flattenSymbolTable,"    void flattenSymbolTable(boolean flattenAllTables) {
        if (!flattenAllTables) {
            ArrayList newSymbols = new ArrayList();
            if (this.symbolTable != null) {
                // Just replace ""symbols"" with the symbols in this object's
                // symbol table. Can't just work from symbolTable map since
                // we need to retain duplicate parameters.
                for (int i=0; i < symbols.size(); i++) {
                    Symbol symbol = (Symbol) symbols.get(i);
                    if (symbol.containingTable == this) {
                        newSymbols.add(symbol);
                    }
                }
            }
            symbols = newSymbols;
        }
        variableNames = new String[symbols.size()];
        isConsts = new boolean[symbols.size()];
        for (int i=0; i < symbols.size(); i++) {
            Symbol symbol = (Symbol) symbols.get(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getCompilerData,"    public final Object getCompilerData()
    {
        return compilerData;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,setCompilerData,"    public final void setCompilerData(Object data)
    {
        if (data == null) throw new IllegalArgumentException();
        // Can only call once
        if (compilerData != null) throw new IllegalStateException();
        compilerData = data;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnNode.java,getNextTempName,"    public String getNextTempName()
    {
        return ""$"" + tempNumber++;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,call,"        public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                           Object[] args)
        {
            Object[] nestedArgs = new Object[2];

            nestedArgs[0] = methodName;
            nestedArgs[1] = newArrayLiteral(args, null, cx, scope);
            return noSuchMethodMethod.call(cx, scope, thisObj, nestedArgs);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,isRhinoRuntimeType,"    public static boolean isRhinoRuntimeType(Class cl)
    {
        if (cl.isPrimitive()) {
            return (cl != Character.TYPE);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,initStandardObjects,"    public static ScriptableObject initStandardObjects(Context cx,
                                                       ScriptableObject scope,
                                                       boolean sealed)
    {
        if (scope == null) {
            scope = new NativeObject();
        }
        scope.associateValue(LIBRARY_SCOPE_KEY, scope);
        (new ClassCache()).associate(scope);

        BaseFunction.init(scope, sealed);
        NativeObject.init(scope, sealed);

        Scriptable objectProto = ScriptableObject.getObjectPrototype(scope);

        // Function.prototype.__proto__ should be Object.prototype
        Scriptable functionProto = ScriptableObject.getFunctionPrototype(scope);
        functionProto.setPrototype(objectProto);

        // Set the prototype of the object passed in if need be
        if (scope.getPrototype() == null)
            scope.setPrototype(objectProto);

        // must precede NativeGlobal since it's needed therein
        NativeError.init(scope, sealed);
        NativeGlobal.init(cx, scope, sealed);

        NativeArray.init(scope, sealed);
        if (cx.getOptimizationLevel() > 0) {
            // When optimizing, attempt to fulfill all requests for new Array(N)
            // with a higher threshold before switching to a sparse 
            // representation
            NativeArray.setMaximumInitialCapacity(200000);            
        }
        NativeString.init(scope, sealed);
        NativeBoolean.init(scope, sealed);
        NativeNumber.init(scope, sealed);
        NativeDate.init(scope, sealed);
        NativeMath.init(scope, sealed);

        NativeWith.init(scope, sealed);
        NativeCall.init(scope, sealed);
        NativeScript.init(scope, sealed);
        
        NativeIterator.init(scope, sealed); // Also initializes NativeGenerator

        boolean withXml = cx.hasFeature(Context.FEATURE_E4X) && 
                          cx.getE4xImplementationFactory() != null;

        for (int i = 0; i != lazilyNames.length; i += 2) {
            String topProperty = lazilyNames[i];
            String className = lazilyNames[i + 1];
            if (!withXml && className.equals(""(xml)"")) {
                continue;
            } else if (withXml && className.equals(""(xml)"")) {
				className = cx.getE4xImplementationFactory().
                               getImplementationClassName();
			}
            new LazilyLoadedCtor(scope, topProperty, className, sealed);
        }

        return scope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getLibraryScopeOrNull,"    public static ScriptableObject getLibraryScopeOrNull(Scriptable scope)
    {
        ScriptableObject libScope;
        libScope = (ScriptableObject)ScriptableObject.
                       getTopScopeValue(scope, LIBRARY_SCOPE_KEY);
        return libScope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,isJSLineTerminator,"    public static boolean isJSLineTerminator(int c)
    {
        // Optimization for faster check for eol character:
        // they do not have 0xDFD0 bits set
        if ((c & 0xDFD0) != 0) {
            return false;
        }
        return c == '\n' || c == '\r' || c == 0x2028 || c == 0x2029;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,wrapBoolean,"    public static Boolean wrapBoolean(boolean b)
    {
        return b ? Boolean.TRUE : Boolean.FALSE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,wrapInt,"    public static Integer wrapInt(int i)
    {
        return new Integer(i);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,wrapNumber,"    public static Number wrapNumber(double x)
    {
        if (x != x) {
            return ScriptRuntime.NaNobj;
        }
        return new Double(x);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toBoolean,"    public static boolean toBoolean(Object val)
    {
        for (;;) {
            if (val instanceof Boolean)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toNumber,"    public static double toNumber(Object val)
    {
        for (;;) {
            if (val instanceof Number)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toNumber,"    public static double toNumber(Object[] args, int index) {
        return (index < args.length) ? toNumber(args[index]) : NaN;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,stringToNumber,"    static double stringToNumber(String s, int start, int radix) {
        char digitMax = '9';
        char lowerCaseBound = 'a';
        char upperCaseBound = 'A';
        int len = s.length();
        if (radix < 10) {
            digitMax = (char) ('0' + radix - 1);
        }
        if (radix > 10) {
            lowerCaseBound = (char) ('a' + radix - 10);
            upperCaseBound = (char) ('A' + radix - 10);
        }
        int end;
        double sum = 0.0;
        for (end=start; end < len; end++) {
            char c = s.charAt(end);
            int newDigit;
            if ('0' <= c && c <= digitMax)
                newDigit = c - '0';
            else if ('a' <= c && c < lowerCaseBound)
                newDigit = c - 'a' + 10;
            else if ('A' <= c && c < upperCaseBound)
                newDigit = c - 'A' + 10;
            else
                break;
            sum = sum*radix + newDigit;
        }
        if (start == end) {
            return NaN;
        }
        if (sum >= 9007199254740992.0) {
            if (radix == 10) {
                /* If we're accumulating a decimal number and the number
                 * is >= 2^53, then the result from the repeated multiply-add
                 * above may be inaccurate.  Call Java to get the correct
                 * answer.
                 */
                try {
                    return Double.valueOf(s.substring(start, end)).doubleValue();
                } catch (NumberFormatException nfe) {
                    return NaN;
                }
            } else if (radix == 2 || radix == 4 || radix == 8 ||
                       radix == 16 || radix == 32)
            {
                /* The number may also be inaccurate for one of these bases.
                 * This happens if the addition in value*radix + digit causes
                 * a round-down to an even least significant mantissa bit
                 * when the first dropped bit is a one.  If any of the
                 * following digits in the number (which haven't been added
                 * in yet) are nonzero then the correct action would have
                 * been to round up instead of down.  An example of this
                 * occurs when reading the number 0x1000000000000081, which
                 * rounds to 0x1000000000000000 instead of 0x1000000000000100.
                 */
                int bitShiftInChar = 1;
                int digit = 0;

                final int SKIP_LEADING_ZEROS = 0;
                final int FIRST_EXACT_53_BITS = 1;
                final int AFTER_BIT_53         = 2;
                final int ZEROS_AFTER_54 = 3;
                final int MIXED_AFTER_54 = 4;

                int state = SKIP_LEADING_ZEROS;
                int exactBitsLimit = 53;
                double factor = 0.0;
                boolean bit53 = false;
                // bit54 is the 54th bit (the first dropped from the mantissa)
                boolean bit54 = false;

                for (;;) {
                    if (bitShiftInChar == 1) {
                        if (start == end)
                            break;
                        digit = s.charAt(start++);
                        if ('0' <= digit && digit <= '9')
                            digit -= '0';
                        else if ('a' <= digit && digit <= 'z')
                            digit -= 'a' - 10;
                        else
                            digit -= 'A' - 10;
                        bitShiftInChar = radix;
                    }
                    bitShiftInChar >>= 1;
                    boolean bit = (digit & bitShiftInChar) != 0;

                    switch (state) {
                      case SKIP_LEADING_ZEROS:
                          if (bit) {
                            --exactBitsLimit;
                            sum = 1.0;
                            state = FIRST_EXACT_53_BITS;
                        }
                        break;
                      case FIRST_EXACT_53_BITS:
                           sum *= 2.0;
                        if (bit)
                            sum += 1.0;
                        --exactBitsLimit;
                        if (exactBitsLimit == 0) {
                            bit53 = bit;
                            state = AFTER_BIT_53;
                        }
                        break;
                      case AFTER_BIT_53:
                        bit54 = bit;
                        factor = 2.0;
                        state = ZEROS_AFTER_54;
                        break;
                      case ZEROS_AFTER_54:
                        if (bit) {
                            state = MIXED_AFTER_54;
                        }
                        // fallthrough
                      case MIXED_AFTER_54:
                        factor *= 2;
                        break;
                    }
                }
                switch (state) {
                  case SKIP_LEADING_ZEROS:
                    sum = 0.0;
                    break;
                  case FIRST_EXACT_53_BITS:
                  case AFTER_BIT_53:
                    // do nothing
                    break;
                  case ZEROS_AFTER_54:
                    // x1.1 -> x1 + 1 (round up)
                    // x0.1 -> x0 (round down)
                    if (bit54 & bit53)
                        sum += 1.0;
                    sum *= factor;
                    break;
                  case MIXED_AFTER_54:
                    // x.100...1.. -> x + 1 (round up)
                    // x.0anything -> x (round down)
                    if (bit54)
                        sum += 1.0;
                    sum *= factor;
                    break;
                }
            }
            /* We don't worry about inaccurate numbers for any other base. */
        }
        return sum;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toNumber,"    public static double toNumber(String s) {
        int len = s.length();
        int start = 0;
        char startChar;
        for (;;) {
            if (start == len) {
                // Empty or contains only whitespace
                return +0.0;
            }
            startChar = s.charAt(start);
            if (!Character.isWhitespace(startChar))
                break;
            start++;
        }

        if (startChar == '0') {
            if (start + 2 < len) {
                int c1 = s.charAt(start + 1);
                if (c1 == 'x' || c1 == 'X') {
                    // A hexadecimal number
                    return stringToNumber(s, start + 2, 16);
                }
            }
        } else if (startChar == '+' || startChar == '-') {
            if (start + 3 < len && s.charAt(start + 1) == '0') {
                int c2 = s.charAt(start + 2);
                if (c2 == 'x' || c2 == 'X') {
                    // A hexadecimal number with sign
                    double val = stringToNumber(s, start + 3, 16);
                    return startChar == '-' ? -val : val;
                }
            }
        }

        int end = len - 1;
        char endChar;
        while (Character.isWhitespace(endChar = s.charAt(end)))
            end--;
        if (endChar == 'y') {
            // check for ""Infinity""
            if (startChar == '+' || startChar == '-')
                start++;
            if (start + 7 == end && s.regionMatches(start, ""Infinity"", 0, 8))
                return startChar == '-'
                    ? Double.NEGATIVE_INFINITY
                    : Double.POSITIVE_INFINITY;
            return NaN;
        }
        // A non-hexadecimal, non-infinity number:
        // just try a normal floating point conversion
        String sub = s.substring(start, end+1);
        if (MSJVM_BUG_WORKAROUNDS) {
            // The MS JVM will accept non-conformant strings
            // rather than throwing a NumberFormatException
            // as it should.
            for (int i=sub.length()-1; i >= 0; i--) {
                char c = sub.charAt(i);
                if (('0' <= c && c <= '9') || c == '.' ||
                    c == 'e' || c == 'E'  ||
                    c == '+' || c == '-')
                    continue;
                return NaN;
            }
        }
        try {
            return Double.valueOf(sub).doubleValue();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,padArguments,"    public static Object[] padArguments(Object[] args, int count) {
        if (count < args.length)
            return args;

        int i;
        Object[] result = new Object[count];
        for (i = 0; i < args.length; i++) {
            result[i] = args[i];
        }

        for (; i < count; i++) {
            result[i] = Undefined.instance;
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,escapeString,"    public static String escapeString(String s)
    {
        return escapeString(s, '""');
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,escapeString,"    public static String escapeString(String s, char escapeQuote)
    {
        if (!(escapeQuote == '""' || escapeQuote == '\'')) Kit.codeBug();
        StringBuffer sb = null;

        for(int i = 0, L = s.length(); i != L; ++i) {
            int c = s.charAt(i);

            if (' ' <= c && c <= '~' && c != escapeQuote && c != '\\') {
                // an ordinary print character (like C isprint()) and not ""
                // or \ .
                if (sb != null) {
                    sb.append((char)c);
                }
                continue;
            }
            if (sb == null) {
                sb = new StringBuffer(L + 3);
                sb.append(s);
                sb.setLength(i);
            }

            int escape = -1;
            switch (c) {
                case '\b':  escape = 'b';  break;
                case '\f':  escape = 'f';  break;
                case '\n':  escape = 'n';  break;
                case '\r':  escape = 'r';  break;
                case '\t':  escape = 't';  break;
                case 0xb:   escape = 'v';  break; // Java lacks \v.
                case ' ':   escape = ' ';  break;
                case '\\':  escape = '\\'; break;
            }
            if (escape >= 0) {
                // an \escaped sort of character
                sb.append('\\');
                sb.append((char)escape);
            } else if (c == escapeQuote) {
                sb.append('\\');
                sb.append(escapeQuote);
            } else {
                int hexSize;
                if (c < 256) {
                    // 2-digit hex
                    sb.append(""\\x"");
                    hexSize = 2;
                } else {
                    // Unicode.
                    sb.append(""\\u"");
                    hexSize = 4;
                }
                // append hexadecimal form of c left-padded with 0
                for (int shift = (hexSize - 1) * 4; shift >= 0; shift -= 4) {
                    int digit = 0xf & (c >> shift);
                    int hc = (digit < 10) ? '0' + digit : 'a' - 10 + digit;
                    sb.append((char)hc);
                }
            }
        }
        return (sb == null) ? s : sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,isValidIdentifierName,"    static boolean isValidIdentifierName(String s)
    {
        int L = s.length();
        if (L == 0)
            return false;
        if (!Character.isJavaIdentifierStart(s.charAt(0)))
            return false;
        for (int i = 1; i != L; ++i) {
            if (!Character.isJavaIdentifierPart(s.charAt(i)))
                return false;
        }
        return !TokenStream.isKeyword(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toString,"    public static String toString(Object val) {
        for (;;) {
            if (val == null) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,defaultObjectToString,"    static String defaultObjectToString(Scriptable obj)
    {
        return ""[object "" + obj.getClassName() + ']';
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toString,"    public static String toString(Object[] args, int index)
    {
        return (index < args.length) ? toString(args[index]) : ""undefined"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toString,"    public static String toString(double val) {
        return numberToString(val, 10);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,numberToString,"    public static String numberToString(double d, int base) {
        if (d != d)
            return ""NaN"";
        if (d == Double.POSITIVE_INFINITY)
            return ""Infinity"";
        if (d == Double.NEGATIVE_INFINITY)
            return ""-Infinity"";
        if (d == 0.0)
            return ""0"";

        if ((base < 2) || (base > 36)) {
            throw Context.reportRuntimeError1(
                ""msg.bad.radix"", Integer.toString(base));
        }

        if (base != 10) {
            return DToA.JS_dtobasestr(base, d);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,uneval,"    static String uneval(Context cx, Scriptable scope, Object value)
    {
        if (value == null) {
            return ""null"";
        }
        if (value == Undefined.instance) {
            return ""undefined"";
        }
        if (value instanceof String) {
            String escaped = escapeString((String)value);
            StringBuffer sb = new StringBuffer(escaped.length() + 2);
            sb.append('\""');
            sb.append(escaped);
            sb.append('\""');
            return sb.toString();
        }
        if (value instanceof Number) {
            double d = ((Number)value).doubleValue();
            if (d == 0 && 1 / d < 0) {
                return ""-0"";
            }
            return toString(d);
        }
        if (value instanceof Boolean) {
            return toString(value);
        }
        if (value instanceof Scriptable) {
            Scriptable obj = (Scriptable)value;
            // Wrapped Java objects won't have ""toSource"" and will report
            // errors for get()s of nonexistent name, so use has() first
            if (ScriptableObject.hasProperty(obj, ""toSource"")) {
                Object v = ScriptableObject.getProperty(obj, ""toSource"");
                if (v instanceof Function) {
                    Function f = (Function)v;
                    return toString(f.call(cx, scope, obj, emptyArgs));
                }
            }
            return toString(value);
        }
        warnAboutNonJSObject(value);
        return value.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,defaultObjectToSource,"    static String defaultObjectToSource(Context cx, Scriptable scope,
                                        Scriptable thisObj, Object[] args)
    {
        boolean toplevel, iterating;
        if (cx.iterating == null) {
            toplevel = true;
            iterating = false;
            cx.iterating = new ObjToIntMap(31);
        } else {
            toplevel = false;
            iterating = cx.iterating.has(thisObj);
        }

        StringBuffer result = new StringBuffer(128);
        if (toplevel) {
            result.append(""("");
        }
        result.append('{');

        // Make sure cx.iterating is set to null when done
        // so we don't leak memory
        try {
            if (!iterating) {
                cx.iterating.intern(thisObj); // stop recursion.
                Object[] ids = thisObj.getIds();
                for (int i=0; i < ids.length; i++) {
                    Object id = ids[i];
                    Object value;
                    if (id instanceof Integer) {
                        int intId = ((Integer)id).intValue();
                        value = thisObj.get(intId, thisObj);
                        if (value == Scriptable.NOT_FOUND)
                            continue;   // a property has been removed
                        if (i > 0)
                            result.append("", "");
                        result.append(intId);
                    } else {
                        String strId = (String)id;
                        value = thisObj.get(strId, thisObj);
                        if (value == Scriptable.NOT_FOUND)
                            continue;   // a property has been removed
                        if (i > 0)
                            result.append("", "");
                        if (ScriptRuntime.isValidIdentifierName(strId)) {
                            result.append(strId);
                        } else {
                            result.append('\'');
                            result.append(
                                ScriptRuntime.escapeString(strId, '\''));
                            result.append('\'');
                        }
                    }
                    result.append(':');
                    result.append(ScriptRuntime.uneval(cx, scope, value));
                }
            }
        } finally {
            if (toplevel) {
                cx.iterating = null;
            }
        }

        result.append('}');
        if (toplevel) {
            result.append(')');
        }
        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toObject,"    public static Scriptable toObject(Scriptable scope, Object val)
    {
        if (val instanceof Scriptable) {
            return (Scriptable)val;
        }
        return toObject(Context.getContext(), scope, val);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toObjectOrNull,"    public static Scriptable toObjectOrNull(Context cx, Object obj)
    {
        if (obj instanceof Scriptable) {
            return (Scriptable)obj;
        } else if (obj != null && obj != Undefined.instance) {
            return toObject(cx, getTopCallScope(cx), obj);
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toObject,"    public static Scriptable toObject(Scriptable scope, Object val,
                                      Class staticClass)
    {
        if (val instanceof Scriptable) {
            return (Scriptable)val;
        }
        return toObject(Context.getContext(), scope, val);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toObject,"    public static Scriptable toObject(Context cx, Scriptable scope, Object val)
    {
        if (val instanceof Scriptable) {
            return (Scriptable) val;
        }
        if (val == null) {
            throw typeError0(""msg.null.to.object"");
        }
        if (val == Undefined.instance) {
            throw typeError0(""msg.undef.to.object"");
        }
        String className = val instanceof String ? ""String"" :
                           val instanceof Number ? ""Number"" :
                           val instanceof Boolean ? ""Boolean"" :
                           null;
        if (className != null) {
            Object[] args = { val };
            scope = ScriptableObject.getTopLevelScope(scope);
            return newObject(cx, scope, className, args);
        }

        // Extension: Wrap as a LiveConnect object.
        Object wrapped = cx.getWrapFactory().wrap(cx, scope, val, null);
        if (wrapped instanceof Scriptable)
            return (Scriptable) wrapped;
        throw errorWithClassName(""msg.invalid.type"", val);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toObject,"    public static Scriptable toObject(Context cx, Scriptable scope, Object val,
                                      Class staticClass)
    {
        return toObject(cx, scope, val);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,call,"    public static Object call(Context cx, Object fun, Object thisArg,
                              Object[] args, Scriptable scope)
    {
        if (!(fun instanceof Function)) {
            throw notFunctionError(toString(fun));
        }
        Function function = (Function)fun;
        Scriptable thisObj = toObjectOrNull(cx, thisArg);
        if (thisObj == null) {
            throw undefCallError(thisObj, ""function"");
        }
        return function.call(cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,newObject,"    public static Scriptable newObject(Context cx, Scriptable scope,
                                       String constructorName, Object[] args)
    {
        scope = ScriptableObject.getVeryTopLevelScope(scope); // APPJET
        Function ctor = getExistingCtor(cx, scope, constructorName);
        if (args == null) { args = ScriptRuntime.emptyArgs; }
        return ctor.construct(cx, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toInteger,"    public static double toInteger(Object val) {
        return toInteger(toNumber(val));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toInteger,"    public static double toInteger(double d) {
        // if it's NaN
        if (d != d)
            return +0.0;

        if (d == 0.0 ||
            d == Double.POSITIVE_INFINITY ||
            d == Double.NEGATIVE_INFINITY)
            return d;

        if (d > 0.0)
            return Math.floor(d);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toInteger,"    public static double toInteger(Object[] args, int index) {
        return (index < args.length) ? toInteger(args[index]) : +0.0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toInt32,"    public static int toInt32(Object val)
    {
        // short circuit for common integer values
        if (val instanceof Integer)
            return ((Integer)val).intValue();

        return toInt32(toNumber(val));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toInt32,"    public static int toInt32(Object[] args, int index) {
        return (index < args.length) ? toInt32(args[index]) : 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toInt32,"    public static int toInt32(double d) {
        int id = (int)d;
        if (id == d) {
            // This covers -0.0 as well
            return id;
        }

        if (d != d
            || d == Double.POSITIVE_INFINITY
            || d == Double.NEGATIVE_INFINITY)
        {
            return 0;
        }

        d = (d >= 0) ? Math.floor(d) : Math.ceil(d);

        double two32 = 4294967296.0;
        d = Math.IEEEremainder(d, two32);
        // (double)(long)d == d should hold here

        long l = (long)d;
        // returning (int)d does not work as d can be outside int range
        // but the result must always be 32 lower bits of l
        return (int)l;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toUint32,"    public static long toUint32(double d) {
        long l = (long)d;
        if (l == d) {
            // This covers -0.0 as well
            return l & 0xffffffffL;
        }

        if (d != d
            || d == Double.POSITIVE_INFINITY
            || d == Double.NEGATIVE_INFINITY)
        {
            return 0;
        }

        d = (d >= 0) ? Math.floor(d) : Math.ceil(d);

        // 0x100000000 gives me a numeric overflow...
        double two32 = 4294967296.0;
        l = (long)Math.IEEEremainder(d, two32);

        return l & 0xffffffffL;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toUint32,"    public static long toUint32(Object val) {
        return toUint32(toNumber(val));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toUint16,"    public static char toUint16(Object val) {
        double d = toNumber(val);

        int i = (int)d;
        if (i == d) {
            return (char)i;
        }

        if (d != d
            || d == Double.POSITIVE_INFINITY
            || d == Double.NEGATIVE_INFINITY)
        {
            return 0;
        }

        d = (d >= 0) ? Math.floor(d) : Math.ceil(d);

        int int16 = 0x10000;
        i = (int)Math.IEEEremainder(d, int16);

        return (char)i;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setDefaultNamespace,"    public static Object setDefaultNamespace(Object namespace, Context cx)
    {
        Scriptable scope = cx.currentActivationCall;
        if (scope == null) {
            scope = getTopCallScope(cx);
        }

        XMLLib xmlLib = currentXMLLib(cx);
        Object ns = xmlLib.toDefaultXmlNamespace(cx, namespace);

        // XXX : this should be in separated namesapce from Scriptable.get/put
        if (!scope.has(DEFAULT_NS_TAG, scope)) {
            // XXX: this is racy of cause
            ScriptableObject.defineProperty(scope, DEFAULT_NS_TAG, ns,
                                            ScriptableObject.PERMANENT
                                            | ScriptableObject.DONTENUM);
        } else {
            scope.put(DEFAULT_NS_TAG, scope, ns);
        }

        return Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,searchDefaultNamespace,"    public static Object searchDefaultNamespace(Context cx)
    {
        Scriptable scope = cx.currentActivationCall;
        if (scope == null) {
            scope = getTopCallScope(cx);
        }
        Object nsObject;
        for (;;) {
            Scriptable parent = scope.getParentScope();
            if (parent == null) {
                nsObject = ScriptableObject.getProperty(scope, DEFAULT_NS_TAG);
                if (nsObject == Scriptable.NOT_FOUND) {
                    return null;
                }
                break;
            }
            nsObject = scope.get(DEFAULT_NS_TAG, scope);
            if (nsObject != Scriptable.NOT_FOUND) {
                break;
            }
            scope = parent;
        }
        return nsObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getTopLevelProp,"    public static Object getTopLevelProp(Scriptable scope, String id) {
        scope = ScriptableObject.getTopLevelScope(scope);
        return ScriptableObject.getProperty(scope, id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getExistingCtor,"    static Function getExistingCtor(Context cx, Scriptable scope,
                                    String constructorName)
    {
        Object ctorVal = ScriptableObject.getProperty(scope, constructorName);
        if (ctorVal instanceof Function) {
            return (Function)ctorVal;
        }
        if (ctorVal == Scriptable.NOT_FOUND) {
            throw Context.reportRuntimeError1(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,indexFromString,"    private static long indexFromString(String str)
    {
        // The length of the decimal string representation of
        //  Integer.MAX_VALUE, 2147483647
        final int MAX_VALUE_LENGTH = 10;

        int len = str.length();
        if (len > 0) {
            int i = 0;
            boolean negate = false;
            int c = str.charAt(0);
            if (c == '-') {
                if (len > 1) {
                    c = str.charAt(1);
                    i = 1;
                    negate = true;
                }
            }
            c -= '0';
            if (0 <= c && c <= 9
                && len <= (negate ? MAX_VALUE_LENGTH + 1 : MAX_VALUE_LENGTH))
            {
                // Use negative numbers to accumulate index to handle
                // Integer.MIN_VALUE that is greater by 1 in absolute value
                // then Integer.MAX_VALUE
                int index = -c;
                int oldIndex = 0;
                i++;
                if (index != 0) {
                    // Note that 00, 01, 000 etc. are not indexes
                    while (i != len && 0 <= (c = str.charAt(i) - '0') && c <= 9)
                    {
                        oldIndex = index;
                        index = 10 * index - c;
                        i++;
                    }
                }
                // Make sure all characters were consumed and that it couldn't
                // have overflowed.
                if (i == len &&
                    (oldIndex > (Integer.MIN_VALUE / 10) ||
                     (oldIndex == (Integer.MIN_VALUE / 10) &&
                      c <= (negate ? -(Integer.MIN_VALUE % 10)
                                   : (Integer.MAX_VALUE % 10)))))
                {
                    return 0xFFFFFFFFL & (negate ? index : -index);
                }
            }
        }
        return -1L;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,testUint32String,"    public static long testUint32String(String str)
    {
        // The length of the decimal string representation of
        //  UINT32_MAX_VALUE, 4294967296
        final int MAX_VALUE_LENGTH = 10;

        int len = str.length();
        if (1 <= len && len <= MAX_VALUE_LENGTH) {
            int c = str.charAt(0);
            c -= '0';
            if (c == 0) {
                // Note that 00,01 etc. are not valid Uint32 presentations
                return (len == 1) ? 0L : -1L;
            }
            if (1 <= c && c <= 9) {
                long v = c;
                for (int i = 1; i != len; ++i) {
                    c = str.charAt(i) - '0';
                    if (!(0 <= c && c <= 9)) {
                        return -1;
                    }
                    v = 10 * v + c;
                }
                // Check for overflow
                if ((v >>> 32) == 0) {
                    return v;
                }
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getIndexObject,"    static Object getIndexObject(String s)
    {
        long indexTest = indexFromString(s);
        if (indexTest >= 0) {
            return new Integer((int)indexTest);
        }
        return s;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getIndexObject,"    static Object getIndexObject(double d)
    {
        int i = (int)d;
        if (i == d) {
            return new Integer(i);
        }
        return toString(d);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toStringIdOrIndex,"    static String toStringIdOrIndex(Context cx, Object id)
    {
        if (id instanceof Number) {
            double d = ((Number)id).doubleValue();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getObjectElem,"    public static Object getObjectElem(Object obj, Object elem, Context cx)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            throw undefReadError(obj, elem);
        }
        return getObjectElem(sobj, elem, cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getObjectElem,"    public static Object getObjectElem(Scriptable obj, Object elem,
                                       Context cx)
    {
        if (obj instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)obj;
            return xmlObject.ecmaGet(cx, elem);
        }

        Object result;

        String s = toStringIdOrIndex(cx, elem);
        if (s == null) {
            int index = lastIndexResult(cx);
            result = ScriptableObject.getProperty(obj, index);
        } else {
            result = ScriptableObject.getProperty(obj, s);
        }

        if (result == Scriptable.NOT_FOUND) {
            result = Undefined.instance;
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getObjectProp,"    public static Object getObjectProp(Object obj, String property,
                                       Context cx)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            throw undefReadError(obj, property);
        }
        return getObjectProp(sobj, property, cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getObjectProp,"    public static Object getObjectProp(Scriptable obj, String property,
                                       Context cx)
    {
        if (obj instanceof XMLObject) {
            // TODO: Change XMLObject to just use Scriptable interface
            // to avoid paying cost of instanceof check on *every property
            // lookup* !
            XMLObject xmlObject = (XMLObject)obj;
            return xmlObject.ecmaGet(cx, property);
        }

        Object result = ScriptableObject.getProperty(obj, property);
        if (result == Scriptable.NOT_FOUND) {
            if (cx.hasFeature(Context.FEATURE_STRICT_MODE)) {
                Context.reportWarning(ScriptRuntime.getMessage1(
                    ""msg.ref.undefined.prop"", property));
            }
            result = Undefined.instance;
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getObjectPropNoWarn,"    public static Object getObjectPropNoWarn(Object obj, String property,
                                             Context cx)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            throw undefReadError(obj, property);
        }
        if (obj instanceof XMLObject) {
            // TODO: fix as mentioned in note in method above
            getObjectProp(sobj, property, cx);
        }
        Object result = ScriptableObject.getProperty(sobj, property);
        if (result == Scriptable.NOT_FOUND) {
          return Undefined.instance;
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getObjectIndex,"    public static Object getObjectIndex(Object obj, double dblIndex,
                                        Context cx)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            throw undefReadError(obj, toString(dblIndex));
        }

        int index = (int)dblIndex;
        if (index == dblIndex) {
            return getObjectIndex(sobj, index, cx);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getObjectIndex,"    public static Object getObjectIndex(Scriptable obj, int index,
                                        Context cx)
    {
        if (obj instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)obj;
            return xmlObject.ecmaGet(cx, new Integer(index));
        }

        Object result = ScriptableObject.getProperty(obj, index);
        if (result == Scriptable.NOT_FOUND) {
            result = Undefined.instance;
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setObjectElem,"    public static Object setObjectElem(Object obj, Object elem, Object value,
                                       Context cx)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            throw undefWriteError(obj, elem, value);
        }
        return setObjectElem(sobj, elem, value, cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setObjectElem,"    public static Object setObjectElem(Scriptable obj, Object elem,
                                       Object value, Context cx)
    {
        if (obj instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)obj;
            xmlObject.ecmaPut(cx, elem, value);
            return value;
        }

        String s = toStringIdOrIndex(cx, elem);
        if (s == null) {
            int index = lastIndexResult(cx);
            ScriptableObject.putProperty(obj, index, value);
        } else {
            ScriptableObject.putProperty(obj, s, value);
        }

        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setObjectProp,"    public static Object setObjectProp(Object obj, String property,
                                       Object value, Context cx)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            throw undefWriteError(obj, property, value);
        }
        return setObjectProp(sobj, property, value, cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setObjectProp,"    public static Object setObjectProp(Scriptable obj, String property,
                                       Object value, Context cx)
    {
        if (obj instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)obj;
            xmlObject.ecmaPut(cx, property, value);
        } else {
            ScriptableObject.putProperty(obj, property, value);
        }
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setObjectIndex,"    public static Object setObjectIndex(Object obj, double dblIndex,
                                        Object value, Context cx)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            throw undefWriteError(obj, String.valueOf(dblIndex), value);
        }

        int index = (int)dblIndex;
        if (index == dblIndex) {
            return setObjectIndex(sobj, index, value, cx);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setObjectIndex,"    public static Object setObjectIndex(Scriptable obj, int index, Object value,
                                        Context cx)
    {
        if (obj instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)obj;
            xmlObject.ecmaPut(cx, new Integer(index), value);
        } else {
            ScriptableObject.putProperty(obj, index, value);
        }
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,deleteObjectElem,"    public static boolean deleteObjectElem(Scriptable target, Object elem,
                                           Context cx)
    {
        boolean result;
        if (target instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)target;
            result = xmlObject.ecmaDelete(cx, elem);
        } else {
            String s = toStringIdOrIndex(cx, elem);
            if (s == null) {
                int index = lastIndexResult(cx);
                result = ScriptableObject.deleteProperty(target, index);
            } else {
                result = ScriptableObject.deleteProperty(target, s);
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,hasObjectElem,"    public static boolean hasObjectElem(Scriptable target, Object elem,
                                        Context cx)
    {
        boolean result;

        if (target instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)target;
            result = xmlObject.ecmaHas(cx, elem);
        } else {
            String s = toStringIdOrIndex(cx, elem);
            if (s == null) {
                int index = lastIndexResult(cx);
                result = ScriptableObject.hasProperty(target, index);
            } else {
                result = ScriptableObject.hasProperty(target, s);
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,refGet,"    public static Object refGet(Ref ref, Context cx)
    {
        return ref.get(cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,refSet,"    public static Object refSet(Ref ref, Object value, Context cx)
    {
        return ref.set(cx, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,refDel,"    public static Object refDel(Ref ref, Context cx)
    {
        return wrapBoolean(ref.delete(cx));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,isSpecialProperty,"    static boolean isSpecialProperty(String s)
    {
        return s.equals(""__proto__"") || s.equals(""__parent__"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,specialRef,"    public static Ref specialRef(Object obj, String specialProperty,
                                 Context cx)
    {
        return SpecialRef.createSpecial(cx, obj, specialProperty);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,delete,"    public static Object delete(Object obj, Object id, Context cx)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            String idStr = (id == null) ? ""null"" : id.toString();
            throw typeError2(""msg.undef.prop.delete"", toString(obj), idStr);
        }
        boolean result = deleteObjectElem(sobj, id, cx);
        return wrapBoolean(result);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,name,"    public static Object name(Context cx, Scriptable scope, String name)
    {
        Scriptable parent = scope.getParentScope();
        if (parent == null) {
            Object result = topScopeName(cx, scope, name);
            if (result == Scriptable.NOT_FOUND) {
                throw notFoundError(scope, name);
            }
            return result;
        }

        return nameOrFunction(cx, scope, parent, name, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,nameOrFunction,"    private static Object nameOrFunction(Context cx, Scriptable scope,
                                         Scriptable parentScope, String name,
                                         boolean asFunctionCall)
    {
        Object result;
        Scriptable thisObj = scope; // It is used only if asFunctionCall==true.

        XMLObject firstXMLObject = null;
        for (;;) {
            if (scope instanceof NativeWith) {
                Scriptable withObj = scope.getPrototype();
                if (withObj instanceof XMLObject) {
                    XMLObject xmlObj = (XMLObject)withObj;
                    if (xmlObj.ecmaHas(cx, name)) {
                        // function this should be the target object of with
                        thisObj = xmlObj;
                        result = xmlObj.ecmaGet(cx, name);
                        break;
                    }
                    if (firstXMLObject == null) {
                        firstXMLObject = xmlObj;
                    }
                } else {
                    result = ScriptableObject.getProperty(withObj, name);
                    if (result != Scriptable.NOT_FOUND) {
                        // function this should be the target object of with
                        thisObj = withObj;
                        break;
                    }
                }
            } else if (scope instanceof NativeCall) {
                // NativeCall does not prototype chain and Scriptable.get
                // can be called directly.
                result = scope.get(name, scope);
                if (result != Scriptable.NOT_FOUND) {
                    if (asFunctionCall) {
                        // ECMA 262 requires that this for nested funtions
                        // should be top scope
                        thisObj = ScriptableObject.
                                      getTopLevelScope(parentScope);
                    }
                    break;
                }
            } else {
                // Can happen if Rhino embedding decided that nested
                // scopes are useful for what ever reasons.
                result = ScriptableObject.getProperty(scope, name);
                if (result != Scriptable.NOT_FOUND) {
                    thisObj = scope;
                    break;
                }
            }
            scope = parentScope;
            parentScope = parentScope.getParentScope();
            if (parentScope == null) {
                result = topScopeName(cx, scope, name);
                if (result == Scriptable.NOT_FOUND) {
                    if (firstXMLObject == null || asFunctionCall) {
                        throw notFoundError(scope, name);
                    }
                    // The name was not found, but we did find an XML
                    // object in the scope chain and we are looking for name,
                    // not function. The result should be an empty XMLList
                    // in name context.
                    result = firstXMLObject.ecmaGet(cx, name);
                }
                // For top scope thisObj for functions is always scope itself.
                thisObj = scope;
                break;
            }
        }

        if (asFunctionCall) {
            if (!(result instanceof Callable)) {
                throw notFunctionError(result, name);
            }
            storeScriptable(cx, thisObj);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,topScopeName,"    private static Object topScopeName(Context cx, Scriptable scope,
                                       String name)
    {
        if (cx.useDynamicScope) {
            scope = checkDynamicScope(cx.topCallScope, scope);
        }
        return ScriptableObject.getProperty(scope, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,bind,"    public static Scriptable bind(Context cx, Scriptable scope, String id)
    {
        Scriptable firstXMLObject = null;
        Scriptable parent = scope.getParentScope();
        childScopesChecks: if (parent != null) {
            // Check for possibly nested ""with"" scopes first
            while (scope instanceof NativeWith) {
                Scriptable withObj = scope.getPrototype();
                if (withObj instanceof XMLObject) {
                    XMLObject xmlObject = (XMLObject)withObj;
                    if (xmlObject.ecmaHas(cx, id)) {
                        return xmlObject;
                    }
                    if (firstXMLObject == null) {
                        firstXMLObject = xmlObject;
                    }
                } else {
                    if (ScriptableObject.hasProperty(withObj, id)) {
                        return withObj;
                    }
                }
                scope = parent;
                parent = parent.getParentScope();
                if (parent == null) {
                    break childScopesChecks;
                }
            }
            for (;;) {
                if (ScriptableObject.hasProperty(scope, id)) {
                    return scope;
                }
                scope = parent;
                parent = parent.getParentScope();
                if (parent == null) {
                    break childScopesChecks;
                }
            }
        }
        // scope here is top scope
        if (cx.useDynamicScope) {
            scope = checkDynamicScope(cx.topCallScope, scope);
        }
        if (ScriptableObject.hasProperty(scope, id)) {
            return scope;
        }
        // Nothing was found, but since XML objects always bind
        // return one if found
        return firstXMLObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setName,"    public static Object setName(Scriptable bound, Object value,
                                 Context cx, Scriptable scope, String id)
    {
        if (bound != null) {
            if (bound instanceof XMLObject) {
                XMLObject xmlObject = (XMLObject)bound;
                xmlObject.ecmaPut(cx, id, value);
            } else {
                ScriptableObject.putProperty(bound, id, value);
            }
        } else {
            // ""newname = 7;"", where 'newname' has not yet
            // been defined, creates a new property in the
            // top scope unless strict mode is specified.
            if (cx.hasFeature(Context.FEATURE_STRICT_MODE) ||
                cx.hasFeature(Context.FEATURE_STRICT_VARS))
            {
                Context.reportWarning(
                    ScriptRuntime.getMessage1(""msg.assn.create.strict"", id));
            }
            // Find the top scope by walking up the scope chain.
            bound = ScriptableObject.getTopLevelScope(scope);
            if (cx.useDynamicScope) {
                bound = checkDynamicScope(cx.topCallScope, bound);
            }
            bound.put(id, bound, value);
        }
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setConst,"    public static Object setConst(Scriptable bound, Object value,
                                 Context cx, String id)
    {
        if (bound instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)bound;
            xmlObject.ecmaPut(cx, id, value);
        } else {
            ScriptableObject.putConstProperty(bound, id, value);
        }
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toIterator,"    public static Scriptable toIterator(Context cx, Scriptable scope, 
                                        Scriptable obj, boolean keyOnly)
    {
        /*APPJET 1.6*//*
        if (ScriptableObject.hasProperty(obj, 
            NativeIterator.ITERATOR_PROPERTY_NAME))
        {
            Object v = ScriptableObject.getProperty(obj, 
                NativeIterator.ITERATOR_PROPERTY_NAME);
            if (!(v instanceof Callable)) {
               throw typeError0(""msg.invalid.iterator"");
            }
            Callable f = (Callable) v;
            Object[] args = new Object[] { keyOnly ? Boolean.TRUE
                                                   : Boolean.FALSE };
            v = f.call(cx, scope, obj, args);
            if (!(v instanceof Scriptable)) {
                throw typeError0(""msg.iterator.primitive"");
            }
            return (Scriptable) v;
            }*/
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enumInit,"    public static Object enumInit(Object value, Context cx, boolean enumValues)
    {
        return enumInit(value, cx, enumValues ? ENUMERATE_VALUES
                                              : ENUMERATE_KEYS);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enumInit,"    public static Object enumInit(Object value, Context cx, int enumType)
    {
        IdEnumeration x = new IdEnumeration();
        x.obj = toObjectOrNull(cx, value);
        if (x.obj == null) {
            // null or undefined do not cause errors but rather lead to empty
            // ""for in"" loop
            return x;
        }
        x.enumType = enumType;
        x.iterator = null;
        if (enumType != ENUMERATE_KEYS_NO_ITERATOR &&
            enumType != ENUMERATE_VALUES_NO_ITERATOR &&
            enumType != ENUMERATE_ARRAY_NO_ITERATOR)
        {
            x.iterator = toIterator(cx, x.obj.getParentScope(), x.obj, true);
        }
        if (x.iterator == null) {
            // enumInit should read all initial ids before returning
            // or ""for (a.i in a)"" would wrongly enumerate i in a as well
            enumChangeObject(x);
        }
        
        return x;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setEnumNumbers,"    public static void setEnumNumbers(Object enumObj, boolean enumNumbers) {
        ((IdEnumeration)enumObj).enumNumbers = enumNumbers;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enumNext,"    public static Boolean enumNext(Object enumObj)
    {
        IdEnumeration x = (IdEnumeration)enumObj;
        if (x.iterator != null) {
            Object v = ScriptableObject.getProperty(x.iterator, ""next"");
            if (!(v instanceof Callable))
                return Boolean.FALSE;
            Callable f = (Callable) v;
            Context cx = Context.enter();
            try {
                x.currentId = f.call(cx, x.iterator.getParentScope(), 
                                     x.iterator, emptyArgs);
                return Boolean.TRUE;
            } catch (JavaScriptException e) {
                if (e.getValue() instanceof NativeIterator.StopIteration) {
                  return Boolean.FALSE;
                }
                throw e;
            } finally {
                Context.exit();
            }
        }
        for (;;) {
            if (x.obj == null) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enumId,"    public static Object enumId(Object enumObj, Context cx)
    {
        IdEnumeration x = (IdEnumeration)enumObj;
        if (x.iterator != null) {
            return x.currentId;
        }
        switch (x.enumType) {
          case ENUMERATE_KEYS:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enumValue,"    public static Object enumValue(Object enumObj, Context cx) {
        IdEnumeration x = (IdEnumeration)enumObj;

        Object result;

        String s = toStringIdOrIndex(cx, x.currentId);
        if (s == null) {
            int index = lastIndexResult(cx);
            result = x.obj.get(index, x.obj);
        } else {
            result = x.obj.get(s, x.obj);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enumChangeObject,"    private static void enumChangeObject(IdEnumeration x)
    {
        Object[] ids = null;
        while (x.obj != null) {
            ids = x.obj.getIds();
            if (ids.length != 0) {
                break;
            }
            x.obj = x.obj.getPrototype();
        }
        if (x.obj != null && x.ids != null) {
            Object[] previous = x.ids;
            int L = previous.length;
            if (x.used == null) {
                x.used = new ObjToIntMap(L);
            }
            for (int i = 0; i != L; ++i) {
                x.used.intern(previous[i]);
            }
        }
        x.ids = ids;
        x.index = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getNameFunctionAndThis,"    public static Callable getNameFunctionAndThis(String name,
                                                  Context cx,
                                                  Scriptable scope)
    {
        Scriptable parent = scope.getParentScope();
        if (parent == null) {
            Object result = topScopeName(cx, scope, name);
            if (!(result instanceof Callable)) {
                if (result == Scriptable.NOT_FOUND) {
                    throw notFoundError(scope, name);
                } else {
                    throw notFunctionError(result, name);
                }
            }
            // Top scope is not NativeWith or NativeCall => thisObj == scope
            Scriptable thisObj = scope;
            storeScriptable(cx, thisObj);
            return (Callable)result;
        }

        // name will call storeScriptable(cx, thisObj);
        return (Callable)nameOrFunction(cx, scope, parent, name, true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getElemFunctionAndThis,"    public static Callable getElemFunctionAndThis(Object obj,
                                                  Object elem,
                                                  Context cx)
    {
        String s = toStringIdOrIndex(cx, elem);
        if (s != null) {
            return getPropFunctionAndThis(obj, s, cx);
        }
        int index = lastIndexResult(cx);

        Scriptable thisObj = toObjectOrNull(cx, obj);
        if (thisObj == null) {
            throw undefCallError(obj, String.valueOf(index));
        }

        Object value;
        for (;;) {
            // Ignore XML lookup as requred by ECMA 357, 11.2.2.1
            value = ScriptableObject.getProperty(thisObj, index);
            if (value != Scriptable.NOT_FOUND) {
                break;
            }
            if (!(thisObj instanceof XMLObject)) {
                break;
            }
            XMLObject xmlObject = (XMLObject)thisObj;
            Scriptable extra = xmlObject.getExtraMethodSource(cx);
            if (extra == null) {
                break;
            }
            thisObj = extra;
        }
        if (!(value instanceof Callable)) {
            throw notFunctionError(value, elem);
        }

        storeScriptable(cx, thisObj);
        return (Callable)value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getPropFunctionAndThis,"    public static Callable getPropFunctionAndThis(Object obj,
                                                  String property,
                                                  Context cx)
    {
        Scriptable thisObj = toObjectOrNull(cx, obj);
        if (thisObj == null) {
            throw undefCallError(obj, property);
        }

        Object value;
        for (;;) {
            // Ignore XML lookup as required by ECMA 357, 11.2.2.1
            value = ScriptableObject.getProperty(thisObj, property);
            if (value != Scriptable.NOT_FOUND) {
                break;
            }
            if (!(thisObj instanceof XMLObject)) {
                break;
            }
            XMLObject xmlObject = (XMLObject)thisObj;
            Scriptable extra = xmlObject.getExtraMethodSource(cx);
            if (extra == null) {
                break;
            }
            thisObj = extra;
        }

        if (!(value instanceof Callable)) {
            Object noSuchMethod = ScriptableObject.getProperty(thisObj, ""__noSuchMethod__"");
            if (noSuchMethod instanceof Callable)
                value = new NoSuchMethodShim((Callable)noSuchMethod, property);
            else
                throw notFunctionError(thisObj, value, property);
        }

        storeScriptable(cx, thisObj);
        return (Callable)value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getValueFunctionAndThis,"    public static Callable getValueFunctionAndThis(Object value, Context cx)
    {
        if (!(value instanceof Callable)) {
            throw notFunctionError(value);
        }

        Callable f = (Callable)value;
        Scriptable thisObj = null;
        if (f instanceof Scriptable) {
            thisObj = ((Scriptable)f).getParentScope();
        }
        if (thisObj == null) {
            if (cx.topCallScope == null) throw new IllegalStateException();
            thisObj = cx.topCallScope;
        }
        if (thisObj.getParentScope() != null) {
            if (thisObj instanceof NativeWith) {
                // functions defined inside with should have with target
                // as their thisObj
            } else if (thisObj instanceof NativeCall) {
                // nested functions should have top scope as their thisObj
                thisObj = ScriptableObject.getTopLevelScope(thisObj);
            }
        }
        storeScriptable(cx, thisObj);
        return f;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,callRef,"    public static Ref callRef(Callable function, Scriptable thisObj,
                              Object[] args, Context cx)
    {
        if (function instanceof RefCallable) {
            RefCallable rfunction = (RefCallable)function;
            Ref ref = rfunction.refCall(cx, thisObj, args);
            if (ref == null) {
                throw new IllegalStateException(rfunction.getClass().getName()+"".refCall() returned null"");
            }
            return ref;
        }
        // No runtime support for now
        String msg = getMessage1(""msg.no.ref.from.function"",
                                 toString(function));
        throw constructError(""ReferenceError"", msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,newObject,"    public static Scriptable newObject(Object fun, Context cx,
                                       Scriptable scope, Object[] args)
    {
        if (!(fun instanceof Function)) {
            throw notFunctionError(fun);
        }
        Function function = (Function)fun;
        return function.construct(cx, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,callSpecial,"    public static Object callSpecial(Context cx, Callable fun,
                                     Scriptable thisObj,
                                     Object[] args, Scriptable scope,
                                     Scriptable callerThis, int callType,
                                     String filename, int lineNumber)
    {
        if (callType == Node.SPECIALCALL_EVAL) {
            if (NativeGlobal.isEvalFunction(fun)) {
                return evalSpecial(cx, scope, callerThis, args,
                                   filename, lineNumber);
            }
        } else if (callType == Node.SPECIALCALL_WITH) {
            if (NativeWith.isWithFunction(fun)) {
                throw Context.reportRuntimeError1(""msg.only.from.new"",
                                                  ""With"");
            }
        } else {
            throw Kit.codeBug();
        }

        return fun.call(cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,newSpecial,"    public static Object newSpecial(Context cx, Object fun,
                                    Object[] args, Scriptable scope,
                                    int callType)
    {
        if (callType == Node.SPECIALCALL_EVAL) {
            if (NativeGlobal.isEvalFunction(fun)) {
                throw typeError1(""msg.not.ctor"", ""eval"");
            }
        } else if (callType == Node.SPECIALCALL_WITH) {
            if (NativeWith.isWithFunction(fun)) {
                return NativeWith.newWithSpecial(cx, scope, args);
            }
        } else {
            throw Kit.codeBug();
        }

        return newObject(fun, cx, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,applyOrCall,"    public static Object applyOrCall(boolean isApply,
                                     Context cx, Scriptable scope,
                                     Scriptable thisObj, Object[] args)
    {
        int L = args.length;
        Callable function = getCallable(thisObj);

        Scriptable callThis = null;
        if (L != 0) {
            callThis = toObjectOrNull(cx, args[0]);
        }
        if (callThis == null) {
            // This covers the case of args[0] == (null|undefined) as well.
            callThis = getTopCallScope(cx);
        }

        Object[] callArgs;
        if (isApply) {
            // Follow Ecma 15.3.4.3
            callArgs = L <= 1 ? ScriptRuntime.emptyArgs : 
                getApplyArguments(cx, args[1]);
        } else {
            // Follow Ecma 15.3.4.4
            if (L <= 1) {
                callArgs = ScriptRuntime.emptyArgs;
            } else {
                callArgs = new Object[L - 1];
                System.arraycopy(args, 1, callArgs, 0, L - 1);
            }
        }

        return function.call(cx, scope, callThis, callArgs);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getApplyArguments,"    static Object[] getApplyArguments(Context cx, Object arg1)
    {
        if (arg1 == null || arg1 == Undefined.instance) {
            return ScriptRuntime.emptyArgs;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getCallable,"    static Callable getCallable(Scriptable thisObj)
    {
        Callable function;
        if (thisObj instanceof Callable) {
            function = (Callable)thisObj;
        } else {
            Object value = thisObj.getDefaultValue(ScriptRuntime.FunctionClass);
            if (!(value instanceof Callable)) {
                throw ScriptRuntime.notFunctionError(value, thisObj);
            }
            function = (Callable)value;
        }
        return function;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,evalSpecial,"    public static Object evalSpecial(Context cx, Scriptable scope,
                                     Object thisArg, Object[] args,
                                     String filename, int lineNumber)
    {
        if (args.length < 1)
            return Undefined.instance;
        Object x = args[0];
        if (!(x instanceof String)) {
            if (cx.hasFeature(Context.FEATURE_STRICT_MODE) ||
                cx.hasFeature(Context.FEATURE_STRICT_EVAL))
            {
                throw Context.reportRuntimeError0(""msg.eval.nonstring.strict"");
            }
            String message = ScriptRuntime.getMessage0(""msg.eval.nonstring"");
            Context.reportWarning(message);
            return x;
        }
        if (filename == null) {
            int[] linep = new int[1];
            filename = Context.getSourcePositionFromStack(linep);
            if (filename != null) {
                lineNumber = linep[0];
            } else {
                filename = """";
            }
        }
        String sourceName = ScriptRuntime.
            makeUrlForGeneratedScript(true, filename, lineNumber);

        ErrorReporter reporter;
        reporter = DefaultErrorReporter.forEval(cx.getErrorReporter());

        Evaluator evaluator = Context.createInterpreter();
        if (evaluator == null) {
            throw new JavaScriptException(""Interpreter not present"",
                    filename, lineNumber);            
        }

        // Compile with explicit interpreter instance to force interpreter
        // mode.
        Script script = cx.compileString((String)x, evaluator,
                                         reporter, sourceName, 1, null);
        evaluator.setEvalScriptFlag(script);
        Callable c = (Callable)script;
        return c.call(cx, scope, (Scriptable)thisArg, ScriptRuntime.emptyArgs);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,typeof,"    public static String typeof(Object value)
    {
        if (value == null)
            return ""object"";
        if (value == Undefined.instance)
            return ""undefined"";
        if (value instanceof Scriptable)
        {
            if (value instanceof ScriptableObject &&
                ((ScriptableObject)value).avoidObjectDetection())
            {
                return ""undefined"";
            }
            if (value instanceof XMLObject)
                return ""xml"";
            return (value instanceof Callable) ? ""function"" : ""object"";
        }
        if (value instanceof String)
            return ""string"";
        if (value instanceof Number)
            return ""number"";
        if (value instanceof Boolean)
            return ""boolean"";
        throw errorWithClassName(""msg.invalid.type"", value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,typeofName,"    public static String typeofName(Scriptable scope, String id)
    {
        Context cx = Context.getContext();
        Scriptable val = bind(cx, scope, id);
        if (val == null)
            return ""undefined"";
        return typeof(getObjectProp(val, id, cx));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,add,"    public static Object add(Object val1, Object val2, Context cx)
    {
        if(val1 instanceof Number && val2 instanceof Number) {
            return wrapNumber(((Number)val1).doubleValue() +
                              ((Number)val2).doubleValue());
        }
        if (val1 instanceof XMLObject) {
            Object test = ((XMLObject)val1).addValues(cx, true, val2);
            if (test != Scriptable.NOT_FOUND) {
                return test;
            }
        }
        if (val2 instanceof XMLObject) {
            Object test = ((XMLObject)val2).addValues(cx, false, val1);
            if (test != Scriptable.NOT_FOUND) {
                return test;
            }
        }
        if (val1 instanceof Scriptable)
            val1 = ((Scriptable) val1).getDefaultValue(null);
        if (val2 instanceof Scriptable)
            val2 = ((Scriptable) val2).getDefaultValue(null);
        if (!(val1 instanceof String) && !(val2 instanceof String))
            if ((val1 instanceof Number) && (val2 instanceof Number))
                return wrapNumber(((Number)val1).doubleValue() +
                                  ((Number)val2).doubleValue());
            else
                return wrapNumber(toNumber(val1) + toNumber(val2));
        return toString(val1).concat(toString(val2));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,add,"    public static String add(String val1, Object val2) {
        return val1.concat(toString(val2));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,add,"    public static String add(Object val1, String val2) {
        return toString(val1).concat(val2);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,nameIncrDecr,"    public static Object nameIncrDecr(Scriptable scopeChain, String id,
                                      int incrDecrMask)
    {
        return nameIncrDecr(scopeChain, id, Context.getContext(), incrDecrMask);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,nameIncrDecr,"    public static Object nameIncrDecr(Scriptable scopeChain, String id,
                                      Context cx, int incrDecrMask)
    {
        Scriptable target;
        Object value;
      search: {
            do {
                if (cx.useDynamicScope && scopeChain.getParentScope() == null) {
                    scopeChain = checkDynamicScope(cx.topCallScope, scopeChain);
                }
                target = scopeChain;
                do {
                    value = target.get(id, scopeChain);
                    if (value != Scriptable.NOT_FOUND) {
                        break search;
                    }
                    target = target.getPrototype();
                } while (target != null);
                scopeChain = scopeChain.getParentScope();
            } while (scopeChain != null);
            throw notFoundError(scopeChain, id);
        }
        return doScriptableIncrDecr(target, id, scopeChain, value,
                                    incrDecrMask);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,propIncrDecr,"    public static Object propIncrDecr(Object obj, String id,
                                      Context cx, int incrDecrMask)
    {
        Scriptable start = toObjectOrNull(cx, obj);
        if (start == null) {
            throw undefReadError(obj, id);
        }

        Scriptable target = start;
        Object value;
      search: {
            do {
                value = target.get(id, start);
                if (value != Scriptable.NOT_FOUND) {
                    break search;
                }
                target = target.getPrototype();
            } while (target != null);
            start.put(id, start, NaNobj);
            return NaNobj;
        }
        return doScriptableIncrDecr(target, id, start, value,
                                    incrDecrMask);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,doScriptableIncrDecr,"    private static Object doScriptableIncrDecr(Scriptable target,
                                               String id,
                                               Scriptable protoChainStart,
                                               Object value,
                                               int incrDecrMask)
    {
        boolean post = ((incrDecrMask & Node.POST_FLAG) != 0);
        double number;
        if (value instanceof Number) {
            number = ((Number)value).doubleValue();
        } else {
            number = toNumber(value);
            if (post) {
                // convert result to number
                value = wrapNumber(number);
            }
        }
        if ((incrDecrMask & Node.DECR_FLAG) == 0) {
            ++number;
        } else {
            --number;
        }
        Number result = wrapNumber(number);
        target.put(id, protoChainStart, result);
        if (post) {
            return value;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,elemIncrDecr,"    public static Object elemIncrDecr(Object obj, Object index,
                                      Context cx, int incrDecrMask)
    {
        Object value = getObjectElem(obj, index, cx);
        boolean post = ((incrDecrMask & Node.POST_FLAG) != 0);
        double number;
        if (value instanceof Number) {
            number = ((Number)value).doubleValue();
        } else {
            number = toNumber(value);
            if (post) {
                // convert result to number
                value = wrapNumber(number);
            }
        }
        if ((incrDecrMask & Node.DECR_FLAG) == 0) {
            ++number;
        } else {
            --number;
        }
        Number result = wrapNumber(number);
        setObjectElem(obj, index, result, cx);
        if (post) {
            return value;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,refIncrDecr,"    public static Object refIncrDecr(Ref ref, Context cx, int incrDecrMask)
    {
        Object value = ref.get(cx);
        boolean post = ((incrDecrMask & Node.POST_FLAG) != 0);
        double number;
        if (value instanceof Number) {
            number = ((Number)value).doubleValue();
        } else {
            number = toNumber(value);
            if (post) {
                // convert result to number
                value = wrapNumber(number);
            }
        }
        if ((incrDecrMask & Node.DECR_FLAG) == 0) {
            ++number;
        } else {
            --number;
        }
        Number result = wrapNumber(number);
        ref.set(cx, result);
        if (post) {
            return value;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,toPrimitive,"    private static Object toPrimitive(Object val)
    {
        if (!(val instanceof Scriptable)) {
            return val;
        }
        Scriptable s = (Scriptable)val;
        Object result = s.getDefaultValue(null);
        if (result instanceof Scriptable)
            throw typeError0(""msg.bad.default.value"");
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,eq,"    public static boolean eq(Object x, Object y)
    {
        if (x == null || x == Undefined.instance) {
            if (y == null || y == Undefined.instance) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,isPrimitive,"    private static boolean isPrimitive(Object obj) {
        return (obj instanceof Number) || (obj instanceof String) ||
               (obj instanceof Boolean);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,eqNumber,"    static boolean eqNumber(double x, Object y)
    {
        for (;;) {
            if (y == null || y == Undefined.instance) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,eqString,"    private static boolean eqString(String x, Object y)
    {
        for (;;) {
            if (y == null || y == Undefined.instance) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,shallowEq,"    public static boolean shallowEq(Object x, Object y)
    {
        if (x == y) {
            if (!(x instanceof Number)) {
                return true;
            }
            // NaN check
            double d = ((Number)x).doubleValue();
            return d == d;
        }
        if (x == null || x == Undefined.instance) {
            return false;
        } else if (x instanceof Number) {
            if (y instanceof Number) {
                return ((Number)x).doubleValue() == ((Number)y).doubleValue();
            }
        } else if (x instanceof String) {
            if (y instanceof String) {
                return x.equals(y);
            }
        } else if (x instanceof Boolean) {
            if (y instanceof Boolean) {
                return x.equals(y);
            }
        } else if (x instanceof Scriptable) {
            if (x instanceof Wrapper && y instanceof Wrapper) {
                return ((Wrapper)x).unwrap() == ((Wrapper)y).unwrap();
            }
        } else {
            warnAboutNonJSObject(x);
            return x == y;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,instanceOf,"    public static boolean instanceOf(Object a, Object b, Context cx)
    {
        // Check RHS is an object
        if (! (b instanceof Scriptable)) {
            throw typeError0(""msg.instanceof.not.object"");
        }

        // for primitive values on LHS, return false
        // XXX we may want to change this so that
        // 5 instanceof Number == true
        if (! (a instanceof Scriptable))
            return false;

        return ((Scriptable)b).hasInstance((Scriptable)a);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,jsDelegatesTo,"    public static boolean jsDelegatesTo(Scriptable lhs, Scriptable rhs) {
        Scriptable proto = lhs.getPrototype();

        while (proto != null) {
            if (proto.equals(rhs)) return true;
            proto = proto.getPrototype();
        }

        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,in,"    public static boolean in(Object a, Object b, Context cx)
    {
        if (!(b instanceof Scriptable)) {
            throw typeError0(""msg.instanceof.not.object"");
        }

        return hasObjectElem((Scriptable)b, a, cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,cmp_LT,"    public static boolean cmp_LT(Object val1, Object val2)
    {
        double d1, d2;
        if (val1 instanceof Number && val2 instanceof Number) {
            d1 = ((Number)val1).doubleValue();
            d2 = ((Number)val2).doubleValue();
        } else {
            if (val1 instanceof Scriptable)
                val1 = ((Scriptable) val1).getDefaultValue(NumberClass);
            if (val2 instanceof Scriptable)
                val2 = ((Scriptable) val2).getDefaultValue(NumberClass);
            if (val1 instanceof String && val2 instanceof String) {
                return ((String)val1).compareTo((String)val2) < 0;
            }
            d1 = toNumber(val1);
            d2 = toNumber(val2);
        }
        return d1 < d2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,cmp_LE,"    public static boolean cmp_LE(Object val1, Object val2)
    {
        double d1, d2;
        if (val1 instanceof Number && val2 instanceof Number) {
            d1 = ((Number)val1).doubleValue();
            d2 = ((Number)val2).doubleValue();
        } else {
            if (val1 instanceof Scriptable)
                val1 = ((Scriptable) val1).getDefaultValue(NumberClass);
            if (val2 instanceof Scriptable)
                val2 = ((Scriptable) val2).getDefaultValue(NumberClass);
            if (val1 instanceof String && val2 instanceof String) {
                return ((String)val1).compareTo((String)val2) <= 0;
            }
            d1 = toNumber(val1);
            d2 = toNumber(val2);
        }
        return d1 <= d2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getGlobal,"    public static ScriptableObject getGlobal(Context cx) {
        final String GLOBAL_CLASS = ""org.mozilla.javascript.tools.shell.Global"";
        Class globalClass = Kit.classOrNull(GLOBAL_CLASS);
        if (globalClass != null) {
            try {
                Class[] parm = { ScriptRuntime.ContextClass };
                Constructor globalClassCtor = globalClass.getConstructor(parm);
                Object[] arg = { cx };
                return (ScriptableObject) globalClassCtor.newInstance(arg);
            } catch (Exception e) {
                // fall through...
            }
        }
        return new ImporterTopLevel(cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,hasTopCall,"    public static boolean hasTopCall(Context cx)
    {
        return (cx.topCallScope != null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getTopCallScope,"    public static Scriptable getTopCallScope(Context cx)
    {
        Scriptable scope = cx.topCallScope;
        if (scope == null) {
            throw new IllegalStateException();
        }
        return scope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,doTopCall,"    public static Object doTopCall(Callable callable,
                                   Context cx, Scriptable scope,
                                   Scriptable thisObj, Object[] args)
    {
        if (scope == null) throw new IllegalArgumentException();
        if (cx.topCallScope != null) throw new IllegalStateException();

        Object result;
        cx.topCallScope = ScriptableObject.getTopLevelScope(scope);
        cx.useDynamicScope = cx.hasFeature(Context.FEATURE_DYNAMIC_SCOPE);
        ContextFactory f = cx.getFactory();
        try {
            result = f.doTopCall(callable, cx, scope, thisObj, args);
        } finally {
            cx.topCallScope = null;
            // Cleanup cached references
            cx.cachedXMLLib = null;

            if (cx.currentActivationCall != null) {
                // Function should always call exitActivationFunction
                // if it creates activation record
                throw new IllegalStateException();
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,checkDynamicScope,"    static Scriptable checkDynamicScope(Scriptable possibleDynamicScope,
                                        Scriptable staticTopScope)
    {
        // Return cx.topCallScope if scope
        if (possibleDynamicScope == staticTopScope) {
            return possibleDynamicScope;
        }
        Scriptable proto = possibleDynamicScope;
        for (;;) {
            proto = proto.getPrototype();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,addInstructionCount,"    public static void addInstructionCount(Context cx, int instructionsToAdd)
    {
    	cx.instructionCount += instructionsToAdd;
        if (cx.instructionCount > cx.instructionThreshold) 
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,initScript,"    public static void initScript(NativeFunction funObj, Scriptable thisObj,
                                  Context cx, Scriptable scope,
                                  boolean evalScript)
    {
        if (cx.topCallScope == null)
            throw new IllegalStateException();

        int varCount = funObj.getParamAndVarCount();
        if (varCount != 0) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,createFunctionActivation,"    public static Scriptable createFunctionActivation(NativeFunction funObj,
                                                      Scriptable scope,
                                                      Object[] args)
    {
        return new NativeCall(funObj, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enterActivationFunction,"    public static void enterActivationFunction(Context cx,
                                               Scriptable scope)
    {
        if (cx.topCallScope == null)
            throw new IllegalStateException();
        NativeCall call = (NativeCall)scope;
        call.parentActivationCall = cx.currentActivationCall;
        cx.currentActivationCall = call;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,exitActivationFunction,"    public static void exitActivationFunction(Context cx)
    {
        NativeCall call = cx.currentActivationCall;
        cx.currentActivationCall = call.parentActivationCall;
        call.parentActivationCall = null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,findFunctionActivation,"    static NativeCall findFunctionActivation(Context cx, Function f)
    {
        NativeCall call = cx.currentActivationCall;
        while (call != null) {
            if (call.function == f)
                return call;
            call = call.parentActivationCall;
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,newCatchScope,"    public static Scriptable newCatchScope(Throwable t,
                                           Scriptable lastCatchScope,
                                           String exceptionName,
                                           Context cx, Scriptable scope)
    {
        Object obj;
        boolean cacheObj;

      getObj:
        if (t instanceof JavaScriptException) {
            cacheObj = false;
            obj = ((JavaScriptException)t).getValue();
        } else {
            cacheObj = true;

            // Create wrapper object unless it was associated with
            // the previous scope object

            if (lastCatchScope != null) {
                NativeObject last = (NativeObject)lastCatchScope;
                obj = last.getAssociatedValue(t);
                if (obj == null) Kit.codeBug();
                break getObj;
            }

            RhinoException re;
            String errorName;
            String errorMsg;
            Throwable javaException = null;

            if (t instanceof EcmaError) {
                EcmaError ee = (EcmaError)t;
                re = ee;
                errorName = ee.getName();
                errorMsg = ee.getErrorMessage();
            } else if (t instanceof WrappedException) {
                WrappedException we = (WrappedException)t;
                re = we;
                javaException = we.getWrappedException();
                errorName = ""JavaException"";
                errorMsg = javaException.getClass().getName()
                           +"": ""+javaException.getMessage();
            } else if (t instanceof EvaluatorException) {
                // Pure evaluator exception, nor WrappedException instance
                EvaluatorException ee = (EvaluatorException)t;
                re = ee;
                errorName = ""InternalError"";
                errorMsg = ee.getMessage();
            } else if (cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS)) {
                // With FEATURE_ENHANCED_JAVA_ACCESS, scripts can catch
                // all exception types
                re = new WrappedException(t);
                errorName = ""JavaException"";
                errorMsg = t.toString();
            } else {
                // Script can catch only instances of JavaScriptException,
                // EcmaError and EvaluatorException
                throw Kit.codeBug();
            }

            String sourceUri = re.sourceName();
            if (sourceUri == null) {
                sourceUri = """";
            }
            int line = re.lineNumber();
            Object args[];
            if (line > 0) {
                args = new Object[] { errorMsg, sourceUri, new Integer(line) };
            } else {
                args = new Object[] { errorMsg, sourceUri };
            }

            Scriptable errorObject = cx.newObject(scope, errorName, args);
            ScriptableObject.putProperty(errorObject, ""name"", errorName);

            if (javaException != null) {
                Object wrap = cx.getWrapFactory().wrap(cx, scope, javaException,
                                                       null);
                ScriptableObject.defineProperty(
                    errorObject, ""javaException"", wrap,
                    ScriptableObject.PERMANENT | ScriptableObject.READONLY);
            }
            Object wrap = cx.getWrapFactory().wrap(cx, scope, re, null);
            ScriptableObject.defineProperty(
                errorObject, ""rhinoException"", wrap,
                ScriptableObject.PERMANENT | ScriptableObject.READONLY);

            obj = errorObject;
        }

        NativeObject catchScopeObject = new NativeObject();
        // See ECMA 12.4
        catchScopeObject.defineProperty(
            exceptionName, obj, ScriptableObject.PERMANENT);

        // Add special Rhino object __exception__ defined in the catch
        // scope that can be used to retrieve the Java exception associated
        // with the JavaScript exception (to get stack trace info, etc.)
        /*APPJET NOJAVA*/
        /*catchScopeObject.defineProperty(
            ""__exception__"", Context.javaToJS(t, scope),
            ScriptableObject.PERMANENT|ScriptableObject.DONTENUM);*/

        if (cacheObj) {
            catchScopeObject.associateValue(t, obj);
        }
        return catchScopeObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enterWith,"    public static Scriptable enterWith(Object obj, Context cx,
                                       Scriptable scope)
    {
        Scriptable sobj = toObjectOrNull(cx, obj);
        if (sobj == null) {
            throw typeError1(""msg.undef.with"", toString(obj));
        }
        if (sobj instanceof XMLObject) {
            XMLObject xmlObject = (XMLObject)sobj;
            return xmlObject.enterWith(scope);
        }
        return new NativeWith(scope, sobj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,leaveWith,"    public static Scriptable leaveWith(Scriptable scope)
    {
        NativeWith nw = (NativeWith)scope;
        return nw.getParentScope();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,enterDotQuery,"    public static Scriptable enterDotQuery(Object value, Scriptable scope)
    {
        if (!(value instanceof XMLObject)) {
            throw notXmlError(value);
        }
        XMLObject object = (XMLObject)value;
        return object.enterDotQuery(scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,updateDotQuery,"    public static Object updateDotQuery(boolean value, Scriptable scope)
    {
        // Return null to continue looping
        NativeWith nw = (NativeWith)scope;
        return nw.updateDotQuery(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,leaveDotQuery,"    public static Scriptable leaveDotQuery(Scriptable scope)
    {
        NativeWith nw = (NativeWith)scope;
        return nw.getParentScope();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setFunctionProtoAndParent,"    public static void setFunctionProtoAndParent(BaseFunction fn,
                                                 Scriptable scope)
    {
        fn.setParentScope(scope);
        fn.setPrototype(ScriptableObject.getFunctionPrototype(scope));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setObjectProtoAndParent,"    public static void setObjectProtoAndParent(ScriptableObject object,
                                               Scriptable scope)
    {
        // Compared with function it always sets the scope to top scope
        scope = ScriptableObject.getVeryTopLevelScope(scope); // APPJET
        object.setParentScope(scope);
        Scriptable proto
            = ScriptableObject.getClassPrototype(scope, object.getClassName());
        object.setPrototype(proto);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,initFunction,"    public static void initFunction(Context cx, Scriptable scope,
                                    NativeFunction function, int type,
                                    boolean fromEvalCode)
    {
        if (type == FunctionNode.FUNCTION_STATEMENT) {
            String name = function.getFunctionName();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,newArrayLiteral,"    public static Scriptable newArrayLiteral(Object[] objects,
                                             int[] skipIndices,
                                             Context cx, Scriptable scope)
    {
        final int SKIP_DENSITY = 2;
        int count = objects.length;
        int skipCount = 0;
        if (skipIndices != null) {
            skipCount = skipIndices.length;
        }
        int length = count + skipCount;
        if (length > 1 && skipCount * SKIP_DENSITY < length) {
            // If not too sparse, create whole array for constructor
            Object[] sparse;
            if (skipCount == 0) {
                sparse = objects;
            } else {
                sparse = new Object[length];
                int skip = 0;
                for (int i = 0, j = 0; i != length; ++i) {
                    if (skip != skipCount && skipIndices[skip] == i) {
                        sparse[i] = Scriptable.NOT_FOUND;
                        ++skip;
                        continue;
                    }
                    sparse[i] = objects[j];
                    ++j;
                }
            }
            return cx.newObject(scope, ""Array"", sparse);
        }
        
        Scriptable arrayObj = cx.newObject(scope, ""Array"",
                                           ScriptRuntime.emptyArgs);
        int skip = 0;
        for (int i = 0, j = 0; i != length; ++i) {
            if (skip != skipCount && skipIndices[skip] == i) {
                ++skip;
                continue;
            }
            ScriptableObject.putProperty(arrayObj, i, objects[j]);
            ++j;
        }
        return arrayObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,newObjectLiteral,"    public static Scriptable newObjectLiteral(Object[] propertyIds,
                                              Object[] propertyValues,
                                              Context cx, Scriptable scope)
    {
        // This will initialize to all zeros, exactly what we need for old-style
        // getterSetters values (no getters or setters in the list)
        int [] getterSetters = new int[propertyIds.length];
        return newObjectLiteral(propertyIds, propertyValues, getterSetters,
                cx, scope);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,newObjectLiteral,"    public static Scriptable newObjectLiteral(Object[] propertyIds,
                                              Object[] propertyValues,
                                              int [] getterSetters,
                                              Context cx, Scriptable scope)
    {
        Scriptable object = cx.newObject(scope);
        for (int i = 0, end = propertyIds.length; i != end; ++i) {
            Object id = propertyIds[i];
            int getterSetter = getterSetters[i];
            Object value = propertyValues[i];
            if (id instanceof String) {
                if (getterSetter == 0)
                    ScriptableObject.putProperty(object, (String)id, value);
                else {
                    Callable fun;
                    String definer;
                    if (getterSetter < 0)   // < 0 means get foo() ...
                        definer = ""__defineGetter__"";
                    else
                        definer = ""__defineSetter__"";
                    fun = getPropFunctionAndThis(object, definer, cx);
                    // Must consume the last scriptable object in cx
                    lastStoredScriptable(cx);
                    Object[] outArgs = new Object[2];
                    outArgs[0] = id;
                    outArgs[1] = value;
                    fun.call(cx, scope, object, outArgs);
                }              
            } else {
                int index = ((Integer)id).intValue();
                ScriptableObject.putProperty(object, index, value);
            }
        }
        return object;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,isArrayObject,"    public static boolean isArrayObject(Object obj)
    {
        return obj instanceof NativeArray || obj instanceof Arguments;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getArrayElements,"    public static Object[] getArrayElements(Scriptable object)
    {
        Context cx = Context.getContext();
        long longLen = NativeArray.getLengthProperty(cx, object);
        if (longLen > Integer.MAX_VALUE) {
            // arrays beyond  MAX_INT is not in Java in any case
            throw new IllegalArgumentException();
        }
        int len = (int) longLen;
        if (len == 0) {
            return ScriptRuntime.emptyArgs;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,checkDeprecated,"    static void checkDeprecated(Context cx, String name) {
        int version = cx.getLanguageVersion();
        if (version >= Context.VERSION_1_4 || version == Context.VERSION_DEFAULT) {
            String msg = getMessage1(""msg.deprec.ctor"", name);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getMessage0,"    public static String getMessage0(String messageId)
    {
        return getMessage(messageId, null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getMessage1,"    public static String getMessage1(String messageId, Object arg1)
    {
        Object[] arguments = {arg1};
        return getMessage(messageId, arguments);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getMessage2,"    public static String getMessage2(
        String messageId, Object arg1, Object arg2)
    {
        Object[] arguments = {arg1, arg2};
        return getMessage(messageId, arguments);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getMessage3,"    public static String getMessage3(
        String messageId, Object arg1, Object arg2, Object arg3)
    {
        Object[] arguments = {arg1, arg2, arg3};
        return getMessage(messageId, arguments);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getMessage4,"    public static String getMessage4(
        String messageId, Object arg1, Object arg2, Object arg3, Object arg4)
    {
        Object[] arguments = {arg1, arg2, arg3, arg4};
        return getMessage(messageId, arguments);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getMessage,"    public static String getMessage(String messageId, Object[] arguments)
    {
        final String defaultResource
            = ""org.mozilla.javascript.resources.Messages"";

        Context cx = Context.getCurrentContext();
        Locale locale = cx != null ? cx.getLocale() : Locale.getDefault();

        // ResourceBundle does cacheing.
        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);

        String formatString;
        try {
            formatString = rb.getString(messageId);
        } catch (java.util.MissingResourceException mre) {
            throw new RuntimeException
                (""no message resource found for message property ""+ messageId);
        }

        /*
         * It's OK to format the string, even if 'arguments' is null;
         * we need to format it anyway, to make double ''s collapse to
         * single 's.
         */
        MessageFormat formatter = new MessageFormat(formatString);
        return formatter.format(arguments);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,constructError,"    public static EcmaError constructError(String error, String message)
    {
        int[] linep = new int[1];
        String filename = Context.getSourcePositionFromStack(linep);
        return constructError(error, message, filename, linep[0], null, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,constructError,"    public static EcmaError constructError(String error,
                                           String message,
                                           int lineNumberDelta)
    {
        int[] linep = new int[1];
        String filename = Context.getSourcePositionFromStack(linep);
        if (linep[0] != 0) {
            linep[0] += lineNumberDelta;
        }
        return constructError(error, message, filename, linep[0], null, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,constructError,"    public static EcmaError constructError(String error,
                                           String message,
                                           String sourceName,
                                           int lineNumber,
                                           String lineSource,
                                           int columnNumber)
    {
        return new EcmaError(error, message, sourceName,
                             lineNumber, lineSource, columnNumber);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,typeError,"    public static EcmaError typeError(String message)
    {
        return constructError(""TypeError"", message);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,typeError0,"    public static EcmaError typeError0(String messageId)
    {
        String msg = getMessage0(messageId);
        return typeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,typeError1,"    public static EcmaError typeError1(String messageId, String arg1)
    {
        String msg = getMessage1(messageId, arg1);
        return typeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,typeError2,"    public static EcmaError typeError2(String messageId, String arg1,
                                       String arg2)
    {
        String msg = getMessage2(messageId, arg1, arg2);
        return typeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,typeError3,"    public static EcmaError typeError3(String messageId, String arg1,
                                       String arg2, String arg3)
    {
        String msg = getMessage3(messageId, arg1, arg2, arg3);
        return typeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,undefReadError,"    public static RuntimeException undefReadError(Object object, Object id)
    {
        String idStr = (id == null) ? ""null"" : id.toString();
        return typeError2(""msg.undef.prop.read"", toString(object), idStr);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,undefCallError,"    public static RuntimeException undefCallError(Object object, Object id)
    {
        String idStr = (id == null) ? ""null"" : id.toString();
        return typeError2(""msg.undef.method.call"", toString(object), idStr);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,undefWriteError,"    public static RuntimeException undefWriteError(Object object,
                                                   Object id,
                                                   Object value)
    {
        String idStr = (id == null) ? ""null"" : id.toString();
        String valueStr = (value instanceof Scriptable)
                          ? value.toString() : toString(value);
        return typeError3(""msg.undef.prop.write"", toString(object), idStr,
                          valueStr);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,notFoundError,"    public static RuntimeException notFoundError(Scriptable object,
                                                 String property)
    {
        // XXX: use object to improve the error message
        String msg = getMessage1(""msg.is.not.defined"", property);
        throw constructError(""ReferenceError"", msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,notFunctionError,"    public static RuntimeException notFunctionError(Object value)
    {
        return notFunctionError(value, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,notFunctionError,"    public static RuntimeException notFunctionError(Object value,
                                                    Object messageHelper)
    {
        // Use value for better error reporting
        String msg = (messageHelper == null)
                     ? ""null"" : messageHelper.toString();
        if (value == Scriptable.NOT_FOUND) {
            return typeError1(""msg.function.not.found"", msg);
        }
        return typeError2(""msg.isnt.function"", msg, typeof(value));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,notFunctionError,"    public static RuntimeException notFunctionError(Object obj, Object value,
            String propertyName)
    {
        // Use obj and value for better error reporting
        String objString = toString(obj);
        if (value == Scriptable.NOT_FOUND) {
            return typeError2(""msg.function.not.found.in"", propertyName,
                    objString);
        }
        return typeError3(""msg.isnt.function.in"", propertyName, objString,
                          typeof(value));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,notXmlError,"    private static RuntimeException notXmlError(Object value)
    {
        throw typeError1(""msg.isnt.xml.object"", toString(value));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,warnAboutNonJSObject,"    private static void warnAboutNonJSObject(Object nonJSObject)
    {
        String message =
""RHINO USAGE WARNING: Missed Context.javaToJS() conversion:\n""
+""Rhino runtime detected object ""+nonJSObject+"" of class ""+nonJSObject.getClass().getName()+"" where it expected String, Number, Boolean or Scriptable instance. Please check your code for missing Context.javaToJS() call."";
        Context.reportWarning(message);
        // Just to be sure that it would be noticed
        System.err.println(message);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,getRegExpProxy,"    public static RegExpProxy getRegExpProxy(Context cx)
    {
        return cx.getRegExpProxy();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,setRegExpProxy,"    public static void setRegExpProxy(Context cx, RegExpProxy proxy)
    {
        if (proxy == null) throw new IllegalArgumentException();
        cx.regExpProxy = proxy;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,checkRegExpProxy,"    public static RegExpProxy checkRegExpProxy(Context cx)
    {
        RegExpProxy result = getRegExpProxy(cx);
        if (result == null) {
            throw Context.reportRuntimeError0(""msg.no.regexp"");
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,currentXMLLib,"    private static XMLLib currentXMLLib(Context cx)
    {
        // Scripts should be running to access this
        if (cx.topCallScope == null)
            throw new IllegalStateException();

        XMLLib xmlLib = cx.cachedXMLLib;
        if (xmlLib == null) {
            xmlLib = XMLLib.extractFromScope(cx.topCallScope);
            if (xmlLib == null)
                throw new IllegalStateException();
            cx.cachedXMLLib = xmlLib;
        }

        return xmlLib;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,escapeAttributeValue,"    public static String escapeAttributeValue(Object value, Context cx)
    {
        XMLLib xmlLib = currentXMLLib(cx);
        return xmlLib.escapeAttributeValue(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,escapeTextValue,"    public static String escapeTextValue(Object value, Context cx)
    {
        XMLLib xmlLib = currentXMLLib(cx);
        return xmlLib.escapeTextValue(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,memberRef,"    public static Ref memberRef(Object obj, Object elem,
                                Context cx, int memberTypeFlags)
    {
        if (!(obj instanceof XMLObject)) {
            throw notXmlError(obj);
        }
        XMLObject xmlObject = (XMLObject)obj;
        return xmlObject.memberRef(cx, elem, memberTypeFlags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,memberRef,"    public static Ref memberRef(Object obj, Object namespace, Object elem,
                                Context cx, int memberTypeFlags)
    {
        if (!(obj instanceof XMLObject)) {
            throw notXmlError(obj);
        }
        XMLObject xmlObject = (XMLObject)obj;
        return xmlObject.memberRef(cx, namespace, elem, memberTypeFlags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,nameRef,"    public static Ref nameRef(Object name, Context cx,
                              Scriptable scope, int memberTypeFlags)
    {
        XMLLib xmlLib = currentXMLLib(cx);
        return xmlLib.nameRef(cx, name, scope, memberTypeFlags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,nameRef,"    public static Ref nameRef(Object namespace, Object name, Context cx,
                              Scriptable scope, int memberTypeFlags)
    {
        XMLLib xmlLib = currentXMLLib(cx);
        return xmlLib.nameRef(cx, namespace, name, scope, memberTypeFlags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,storeIndexResult,"    private static void storeIndexResult(Context cx, int index)
    {
        cx.scratchIndex = index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,lastIndexResult,"    static int lastIndexResult(Context cx)
    {
        return cx.scratchIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,storeUint32Result,"    public static void storeUint32Result(Context cx, long value)
    {
        if ((value >>> 32) != 0)
            throw new IllegalArgumentException();
        cx.scratchUint32 = value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,lastUint32Result,"    public static long lastUint32Result(Context cx)
    {
        long value = cx.scratchUint32;
        if ((value >>> 32) != 0)
            throw new IllegalStateException();
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,storeScriptable,"    private static void storeScriptable(Context cx, Scriptable value)
    {
        // The previosly stored scratchScriptable should be consumed
        if (cx.scratchScriptable != null)
            throw new IllegalStateException();
        cx.scratchScriptable = value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,lastStoredScriptable,"    public static Scriptable lastStoredScriptable(Context cx)
    {
        Scriptable result = cx.scratchScriptable;
        cx.scratchScriptable = null;
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,makeUrlForGeneratedScript,"    static String makeUrlForGeneratedScript
        (boolean isEval, String masterScriptUrl, int masterScriptLine)
    {
        if (isEval) {
            return masterScriptUrl+'#'+masterScriptLine+""(eval)"";",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,isGeneratedScript,"    static boolean isGeneratedScript(String sourceUrl) {
        // ALERT: this may clash with a valid URL containing (eval) or
        // (Function)
        return sourceUrl.indexOf(""(eval)"") >= 0
               || sourceUrl.indexOf(""(Function)"") >= 0;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptRuntime.java,errorWithClassName,"    private static RuntimeException errorWithClassName(String msg, Object val)
    {
        return Context.reportRuntimeError1(msg, val.getClass().getName());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,readObject,"        private void readObject(ObjectInputStream in)
            throws IOException, ClassNotFoundException
        {
            in.defaultReadObject();
            if (name != null) {
                indexOrHash = name.hashCode();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getAttributes,"        final int getAttributes()
        {
            return attributes;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,setAttributes,"        final synchronized void setAttributes(int value)
        {
            checkValidAttributes(value);
            attributes = (short)value;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,checkNotReadonly,"        final void checkNotReadonly()
        {
            if ((attributes & READONLY) != 0) {
                String str = (name != null ? name",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,checkValidAttributes,"    static void checkValidAttributes(int attributes)
    {
        final int mask = READONLY | DONTENUM | PERMANENT | UNINITIALIZED_CONST;
        if ((attributes & ~mask) != 0) {
            throw new IllegalArgumentException(String.valueOf(attributes));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,has,"    public boolean has(String name, Scriptable start)
    {
        return null != getSlot(name, 0, SLOT_QUERY);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,has,"    public boolean has(int index, Scriptable start)
    {
        return null != getSlot(null, index, SLOT_QUERY);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,get,"    public Object get(String name, Scriptable start)
    {
        return getImpl(name, 0, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,get,"    public Object get(int index, Scriptable start)
    {
        return getImpl(null, index, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,put,"    public void put(String name, Scriptable start, Object value)
    {
        if (putImpl(name, 0, start, value, EMPTY))
            return;

        if (start == this) throw Kit.codeBug();
        start.put(name, start, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,put,"    public void put(int index, Scriptable start, Object value)
    {
        if (putImpl(null, index, start, value, EMPTY))
            return;

        if (start == this) throw Kit.codeBug();
        start.put(index, start, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,delete,"    public void delete(String name)
    {
        checkNotSealed(name, 0);
        accessSlot(name, 0, SLOT_REMOVE);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,delete,"    public void delete(int index)
    {
        checkNotSealed(null, index);
        accessSlot(null, index, SLOT_REMOVE);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,putConst,"    public void putConst(String name, Scriptable start, Object value)
    {
        if (putImpl(name, 0, start, value, READONLY))
            return;

        if (start == this) throw Kit.codeBug();
        if (start instanceof ConstProperties)
            ((ConstProperties)start).putConst(name, start, value);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineConst,"    public void defineConst(String name, Scriptable start)
    {
        if (putImpl(name, 0, start, Undefined.instance, UNINITIALIZED_CONST))
            return;

        if (start == this) throw Kit.codeBug();
        if (start instanceof ConstProperties)
            ((ConstProperties)start).defineConst(name, start);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,isConst,"    public boolean isConst(String name)
    {
        Slot slot = getSlot(name, 0, SLOT_QUERY);
        if (slot == null) {
            return false;
        }
        return (slot.getAttributes() & (PERMANENT|READONLY)) ==
                                       (PERMANENT|READONLY);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getAttributes,"    public final int getAttributes(String name, Scriptable start)
    {
        return getAttributes(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getAttributes,"    public final int getAttributes(int index, Scriptable start)
    {
        return getAttributes(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,setAttributes,"    public final void setAttributes(String name, Scriptable start,
                                    int attributes)
    {
        setAttributes(name, attributes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,setAttributes,"    public void setAttributes(int index, Scriptable start,
                              int attributes)
    {
        setAttributes(index, attributes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getAttributes,"    public int getAttributes(String name)
    {
        return findAttributeSlot(name, 0, SLOT_QUERY).getAttributes();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getAttributes,"    public int getAttributes(int index)
    {
        return findAttributeSlot(null, index, SLOT_QUERY).getAttributes();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,setAttributes,"    public void setAttributes(String name, int attributes)
    {
        checkNotSealed(name, 0);
        findAttributeSlot(name, 0, SLOT_MODIFY).setAttributes(attributes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,setAttributes,"    public void setAttributes(int index, int attributes)
    {
        checkNotSealed(null, index);
        findAttributeSlot(null, index, SLOT_MODIFY).setAttributes(attributes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,setGetterOrSetter,"    public void setGetterOrSetter(String name, int index,
                                  Callable getterOrSeter, boolean isSetter)
    {
        if (name != null && index != 0)
            throw new IllegalArgumentException(name);

        checkNotSealed(name, index);
        GetterSlot gslot = (GetterSlot)getSlot(name, index,
                                               SLOT_MODIFY_GETTER_SETTER);
        gslot.checkNotReadonly();
        if (isSetter) {
            gslot.setter = getterOrSeter;
        } else {
            gslot.getter = getterOrSeter;
        }
        gslot.value = Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getGetterOrSetter,"    public Object getGetterOrSetter(String name, int index, boolean isSetter)
    {
        if (name != null && index != 0)
            throw new IllegalArgumentException(name);
        Slot slot = getSlot(name, index, SLOT_QUERY);
        if (slot == null)
            return null;
        if (slot instanceof GetterSlot) {
            GetterSlot gslot = (GetterSlot)slot;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,isGetterOrSetter,"    protected boolean isGetterOrSetter(String name, int index, boolean setter) {
        Slot slot = getSlot(name, index, SLOT_QUERY);
        if (slot instanceof GetterSlot) {
            if (setter && ((GetterSlot)slot).setter != null) return true;
            if (!setter && ((GetterSlot)slot).getter != null) return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,addLazilyInitializedValue,"    void addLazilyInitializedValue(String name, int index,
                                   LazilyLoadedCtor init, int attributes)
    {
        if (name != null && index != 0)
            throw new IllegalArgumentException(name);
        checkNotSealed(name, index);
        GetterSlot gslot = (GetterSlot)getSlot(name, index,
                                               SLOT_MODIFY_GETTER_SETTER);
        gslot.setAttributes(attributes);
        gslot.getter = null;
        gslot.setter = null;
        gslot.value = init;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getPrototype,"    public Scriptable getPrototype()
    {
        return prototypeObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,setPrototype,"    public void setPrototype(Scriptable m)
    {
        prototypeObject = m;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getParentScope,"    public Scriptable getParentScope()
    {
        return parentScopeObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,setParentScope,"    public void setParentScope(Scriptable m)
    {
        parentScopeObject = m;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getIds,"    public Object[] getIds() {
        return getIds(false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getAllIds,"    public Object[] getAllIds() {
        return getIds(true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getDefaultValue,"    public Object getDefaultValue(Class typeHint)
    {
        return getDefaultValue(this, typeHint);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getDefaultValue,"    public static Object getDefaultValue(Scriptable object, Class typeHint)
    {
        Context cx = null;
        for (int i=0; i < 2; i++) {
            boolean tryToString;
            if (typeHint == ScriptRuntime.StringClass) {
                tryToString = (i == 0);
            } else {
                tryToString = (i == 1);
            }

            String methodName;
            Object[] args;
            if (tryToString) {
                methodName = ""toString"";
                args = ScriptRuntime.emptyArgs;
            } else {
                methodName = ""valueOf"";
                args = new Object[1];
                String hint;
                if (typeHint == null) {
                    hint = ""undefined"";
                } else if (typeHint == ScriptRuntime.StringClass) {
                    hint = ""string"";
                } else if (typeHint == ScriptRuntime.ScriptableClass) {
                    hint = ""object"";
                } else if (typeHint == ScriptRuntime.FunctionClass) {
                    hint = ""function"";
                } else if (typeHint == ScriptRuntime.BooleanClass
                           || typeHint == Boolean.TYPE)
                {
                    hint = ""boolean"";
                } else if (typeHint == ScriptRuntime.NumberClass ||
                         typeHint == ScriptRuntime.ByteClass ||
                         typeHint == Byte.TYPE ||
                         typeHint == ScriptRuntime.ShortClass ||
                         typeHint == Short.TYPE ||
                         typeHint == ScriptRuntime.IntegerClass ||
                         typeHint == Integer.TYPE ||
                         typeHint == ScriptRuntime.FloatClass ||
                         typeHint == Float.TYPE ||
                         typeHint == ScriptRuntime.DoubleClass ||
                         typeHint == Double.TYPE)
                {
                    hint = ""number"";
                } else {
                    throw Context.reportRuntimeError1(
                        ""msg.invalid.type"", typeHint.toString());
                }
                args[0] = hint;
            }
            Object v = getProperty(object, methodName);
            if (!(v instanceof Function))
                continue;
            Function fun = (Function) v;
            if (cx == null)
                cx = Context.getContext();
            v = fun.call(cx, fun.getParentScope(), object, args);
            if (v != null) {
                if (!(v instanceof Scriptable)) {
                    return v;
                }
                if (typeHint == ScriptRuntime.ScriptableClass
                    || typeHint == ScriptRuntime.FunctionClass)
                {
                    return v;
                }
                if (tryToString && v instanceof Wrapper) {
                    // Let a wrapped java.lang.String pass for a primitive
                    // string.
                    Object u = ((Wrapper)v).unwrap();
                    if (u instanceof String)
                        return u;
                }
            }
        }
        // fall through to error
        String arg = (typeHint == null) ? ""undefined"" : typeHint.getName();
        throw ScriptRuntime.typeError1(""msg.default.value"", arg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,hasInstance,"    public boolean hasInstance(Scriptable instance) {
        // Default for JS objects (other than Function) is to do prototype
        // chasing.  This will be overridden in NativeFunction and non-JS
        // objects.

        return ScriptRuntime.jsDelegatesTo(instance, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,avoidObjectDetection,"    public boolean avoidObjectDetection() {
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,equivalentValues,"    protected Object equivalentValues(Object value)
    {
        return (this == value) ? Boolean.TRUE : Scriptable.NOT_FOUND;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineClass,"    public static void defineClass(Scriptable scope, Class clazz)
        throws IllegalAccessException, InstantiationException,
               InvocationTargetException
    {
        defineClass(scope, clazz, false, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineClass,"    public static void defineClass(Scriptable scope, Class clazz,
                                   boolean sealed)
        throws IllegalAccessException, InstantiationException,
               InvocationTargetException
    {
        defineClass(scope, clazz, sealed, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineClass,"    public static String defineClass(Scriptable scope, Class clazz,
                                     boolean sealed, boolean mapInheritance)
        throws IllegalAccessException, InstantiationException,
               InvocationTargetException
    {
        BaseFunction ctor = buildClassCtor(scope, clazz, sealed,
                                           mapInheritance);
        if (ctor == null)
            return null;
        String name = ctor.getClassPrototype().getClassName();
        defineProperty(scope, name, ctor, ScriptableObject.DONTENUM);
        return name;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,buildClassCtor,"    static BaseFunction buildClassCtor(Scriptable scope, Class clazz,
                                       boolean sealed,
                                       boolean mapInheritance)
        throws IllegalAccessException, InstantiationException,
               InvocationTargetException
    {
        Method[] methods = FunctionObject.getMethodList(clazz);
        for (int i=0; i < methods.length; i++) {
            Method method = methods[i];
            if (!method.getName().equals(""init""))
                continue;
            Class[] parmTypes = method.getParameterTypes();
            if (parmTypes.length == 3 &&
                parmTypes[0] == ScriptRuntime.ContextClass &&
                parmTypes[1] == ScriptRuntime.ScriptableClass &&
                parmTypes[2] == Boolean.TYPE &&
                Modifier.isStatic(method.getModifiers()))
            {
                Object args[] = { Context.getContext(), scope,
                                  sealed ? Boolean.TRUE : Boolean.FALSE };
                method.invoke(null, args);
                return null;
            }
            if (parmTypes.length == 1 &&
                parmTypes[0] == ScriptRuntime.ScriptableClass &&
                Modifier.isStatic(method.getModifiers()))
            {
                Object args[] = { scope };
                method.invoke(null, args);
                return null;
            }

        }

        // If we got here, there isn't an ""init"" method with the right
        // parameter types.

        Constructor[] ctors = clazz.getConstructors();
        Constructor protoCtor = null;
        for (int i=0; i < ctors.length; i++) {
            if (ctors[i].getParameterTypes().length == 0) {
                protoCtor = ctors[i];
                break;
            }
        }
        if (protoCtor == null) {
            throw Context.reportRuntimeError1(
                      ""msg.zero.arg.ctor"", clazz.getName());
        }

        Scriptable proto = (Scriptable) protoCtor.newInstance(ScriptRuntime.emptyArgs);
        String className = proto.getClassName();

        // Set the prototype's prototype, trying to map Java inheritance to JS
        // prototype-based inheritance if requested to do so.
        Scriptable superProto = null;
        if (mapInheritance) {
            Class superClass = clazz.getSuperclass();
            if (ScriptRuntime.ScriptableClass.isAssignableFrom(superClass)
                    && !Modifier.isAbstract(superClass.getModifiers())) {
                String name = ScriptableObject.defineClass(scope, superClass, sealed, mapInheritance);
                if (name != null) {
                    superProto = ScriptableObject.getClassPrototype(scope, name);
                }
            }
        }
        if (superProto == null) {
            superProto = ScriptableObject.getObjectPrototype(scope);
        }
        proto.setPrototype(superProto);

        // Find out whether there are any methods that begin with
        // ""js"". If so, then only methods that begin with special
        // prefixes will be defined as JavaScript entities.
        final String functionPrefix = ""jsFunction_"";
        final String staticFunctionPrefix = ""jsStaticFunction_"";
        final String getterPrefix = ""jsGet_"";
        final String setterPrefix = ""jsSet_"";
        final String ctorName = ""jsConstructor"";

        Member ctorMember = FunctionObject.findSingleMethod(methods, ctorName);

        if (ctorMember == null) {
            if (ctors.length == 1) {
                ctorMember = ctors[0];
            } else if (ctors.length == 2) {
                if (ctors[0].getParameterTypes().length == 0)
                    ctorMember = ctors[1];
                else if (ctors[1].getParameterTypes().length == 0)
                    ctorMember = ctors[0];
            }
            if (ctorMember == null) {
                throw Context.reportRuntimeError1(
                          ""msg.ctor.multiple.parms"", clazz.getName());
            }
        }

        FunctionObject ctor = new FunctionObject(className, ctorMember, scope);
        if (ctor.isVarArgsMethod()) {
            throw Context.reportRuntimeError1
                (""msg.varargs.ctor"", ctorMember.getName());
        }
        ctor.initAsConstructor(scope, proto);

        Method finishInit = null;
        for (int i=0; i < methods.length; i++) {
            if (methods[i] == ctorMember) {
                continue;
            }
            String name = methods[i].getName();
            if (name.equals(""finishInit"")) {
                Class[] parmTypes = methods[i].getParameterTypes();
                if (parmTypes.length == 3 &&
                    parmTypes[0] == ScriptRuntime.ScriptableClass &&
                    parmTypes[1] == FunctionObject.class &&
                    parmTypes[2] == ScriptRuntime.ScriptableClass &&
                    Modifier.isStatic(methods[i].getModifiers()))
                {
                    finishInit = methods[i];
                    continue;
                }
            }
            // ignore any compiler generated methods.
            if (name.indexOf('$') != -1)
                continue;
            if (name.equals(ctorName))
                continue;

            String prefix = null;
            if (name.startsWith(functionPrefix)) {
                prefix = functionPrefix;
            } else if (name.startsWith(staticFunctionPrefix)) {
                prefix = staticFunctionPrefix;
                if (!Modifier.isStatic(methods[i].getModifiers())) {
                    throw Context.reportRuntimeError(
                        ""jsStaticFunction must be used with static method."");
                }
            } else if (name.startsWith(getterPrefix)) {
                prefix = getterPrefix;
            } else if (name.startsWith(setterPrefix)) {
                prefix = setterPrefix;
            } else {
                continue;
            }
            name = name.substring(prefix.length());
            if (prefix == setterPrefix)
                continue;   // deal with set when we see get
            if (prefix == getterPrefix) {
                if (!(proto instanceof ScriptableObject)) {
                    throw Context.reportRuntimeError2(
                        ""msg.extend.scriptable"",
                        proto.getClass().toString(), name);
                }
                Method setter = FunctionObject.findSingleMethod(
                                    methods,
                                    setterPrefix + name);
                int attr = ScriptableObject.PERMANENT |
                           ScriptableObject.DONTENUM  |
                           (setter != null ? 0
                                           : ScriptableObject.READONLY);
                ((ScriptableObject) proto).defineProperty(name, null,
                                                          methods[i], setter,
                                                          attr);
                continue;
            }

            FunctionObject f = new FunctionObject(name, methods[i], proto);
            if (f.isVarArgsConstructor()) {
                throw Context.reportRuntimeError1
                    (""msg.varargs.fun"", ctorMember.getName());
            }
            Scriptable dest = prefix == staticFunctionPrefix
                              ? ctor
                              : proto;
            defineProperty(dest, name, f, DONTENUM);
            if (sealed) {
                f.sealObject();
            }
        }

        // Call user code to complete initialization if necessary.
        if (finishInit != null) {
            Object[] finishArgs = { scope, ctor, proto };
            finishInit.invoke(null, finishArgs);
        }

        // Seal the object if necessary.
        if (sealed) {
            ctor.sealObject();
            if (proto instanceof ScriptableObject) {
                ((ScriptableObject) proto).sealObject();
            }
        }

        return ctor;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineProperty,"    public void defineProperty(String propertyName, Object value,
                               int attributes)
    {
        checkNotSealed(propertyName, 0);
        put(propertyName, this, value);
        setAttributes(propertyName, attributes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineProperty,"    public static void defineProperty(Scriptable destination,
                                      String propertyName, Object value,
                                      int attributes)
    {
        if (!(destination instanceof ScriptableObject)) {
            destination.put(propertyName, destination, value);
            return;
        }
        ScriptableObject so = (ScriptableObject)destination;
        so.defineProperty(propertyName, value, attributes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineConstProperty,"    public static void defineConstProperty(Scriptable destination,
                                           String propertyName)
    {
        if (destination instanceof ConstProperties) {
            ConstProperties cp = (ConstProperties)destination;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineProperty,"    public void defineProperty(String propertyName, Class clazz,
                               int attributes)
    {
        int length = propertyName.length();
        if (length == 0) throw new IllegalArgumentException();
        char[] buf = new char[3 + length];
        propertyName.getChars(0, length, buf, 3);
        buf[3] = Character.toUpperCase(buf[3]);
        buf[0] = 'g';
        buf[1] = 'e';
        buf[2] = 't';
        String getterName = new String(buf);
        buf[0] = 's';
        String setterName = new String(buf);

        Method[] methods = FunctionObject.getMethodList(clazz);
        Method getter = FunctionObject.findSingleMethod(methods, getterName);
        Method setter = FunctionObject.findSingleMethod(methods, setterName);
        if (setter == null)
            attributes |= ScriptableObject.READONLY;
        defineProperty(propertyName, null, getter,
                       setter == null ? null : setter, attributes);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineProperty,"    public void defineProperty(String propertyName, Object delegateTo,
                               Method getter, Method setter, int attributes)
    {
        MemberBox getterBox = null;
        if (getter != null) {
            getterBox = new MemberBox(getter);

            boolean delegatedForm;
            if (!Modifier.isStatic(getter.getModifiers())) {
                delegatedForm = (delegateTo != null);
                getterBox.delegateTo = delegateTo;
            } else {
                delegatedForm = true;
                // Ignore delegateTo for static getter but store
                // non-null delegateTo indicator.
                getterBox.delegateTo = Void.TYPE;
            }

            String errorId = null;
            Class[] parmTypes = getter.getParameterTypes();
            if (parmTypes.length == 0) {
                if (delegatedForm) {
                    errorId = ""msg.obj.getter.parms"";
                }
            } else if (parmTypes.length == 1) {
                Object argType = parmTypes[0];
                // Allow ScriptableObject for compatibility
                if (!(argType == ScriptRuntime.ScriptableClass ||
                      argType == ScriptRuntime.ScriptableObjectClass))
                {
                    errorId = ""msg.bad.getter.parms"";
                } else if (!delegatedForm) {
                    errorId = ""msg.bad.getter.parms"";
                }
            } else {
                errorId = ""msg.bad.getter.parms"";
            }
            if (errorId != null) {
                throw Context.reportRuntimeError1(errorId, getter.toString());
            }
        }

        MemberBox setterBox = null;
        if (setter != null) {
            if (setter.getReturnType() != Void.TYPE)
                throw Context.reportRuntimeError1(""msg.setter.return"",
                                                  setter.toString());

            setterBox = new MemberBox(setter);

            boolean delegatedForm;
            if (!Modifier.isStatic(setter.getModifiers())) {
                delegatedForm = (delegateTo != null);
                setterBox.delegateTo = delegateTo;
            } else {
                delegatedForm = true;
                // Ignore delegateTo for static setter but store
                // non-null delegateTo indicator.
                setterBox.delegateTo = Void.TYPE;
            }

            String errorId = null;
            Class[] parmTypes = setter.getParameterTypes();
            if (parmTypes.length == 1) {
                if (delegatedForm) {
                    errorId = ""msg.setter2.expected"";
                }
            } else if (parmTypes.length == 2) {
                Object argType = parmTypes[0];
                // Allow ScriptableObject for compatibility
                if (!(argType == ScriptRuntime.ScriptableClass ||
                      argType == ScriptRuntime.ScriptableObjectClass))
                {
                    errorId = ""msg.setter2.parms"";
                } else if (!delegatedForm) {
                    errorId = ""msg.setter1.parms"";
                }
            } else {
                errorId = ""msg.setter.parms"";
            }
            if (errorId != null) {
                throw Context.reportRuntimeError1(errorId, setter.toString());
            }
        }

        GetterSlot gslot = (GetterSlot)getSlot(propertyName, 0,
                                               SLOT_MODIFY_GETTER_SETTER);
        gslot.setAttributes(attributes);
        gslot.getter = getterBox;
        gslot.setter = setterBox;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,defineFunctionProperties,"    public void defineFunctionProperties(String[] names, Class clazz,
                                         int attributes)
    {
        Method[] methods = FunctionObject.getMethodList(clazz);
        for (int i=0; i < names.length; i++) {
            String name = names[i];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getObjectPrototype,"    public static Scriptable getObjectPrototype(Scriptable scope) {
        return getClassPrototype(scope, ""Object"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getFunctionPrototype,"    public static Scriptable getFunctionPrototype(Scriptable scope) {
        return getClassPrototype(scope, ""Function"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getClassPrototype,"    public static Scriptable getClassPrototype(Scriptable scope,
                                               String className)
    {
        scope = getTopLevelScope(scope);
        Object ctor = getProperty(scope, className);
        Object proto;
        if (ctor instanceof BaseFunction) {
            proto = ((BaseFunction)ctor).getPrototypeProperty();
        } else if (ctor instanceof Scriptable) {
            Scriptable ctorObj = (Scriptable)ctor;
            proto = ctorObj.get(""prototype"", ctorObj);
        } else {
            return null;
        }
        if (proto instanceof Scriptable) {
            return (Scriptable)proto;
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getTopLevelScope,"    public static Scriptable getTopLevelScope(Scriptable obj)
    {
        for (;;) {
            Scriptable parent = obj.getParentScope();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getVeryTopLevelScope,"    public static Scriptable getVeryTopLevelScope(Scriptable obj) {
        return ScriptRuntime.getLibraryScopeOrNull(obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,sealObject,"    public synchronized void sealObject() {
        if (count >= 0) {
            count = ~count;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,isSealed,"    public final boolean isSealed() {
        return count < 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,checkNotSealed,"    private void checkNotSealed(String name, int index)
    {
        if (!isSealed())
            return;

        String str = (name != null) ? name : Integer.toString(index);
        throw Context.reportRuntimeError1(""msg.modify.sealed"", str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getProperty,"    public static Object getProperty(Scriptable obj, String name)
    {
        Scriptable start = obj;
        Object result;
        do {
            result = obj.get(name, start);
            if (result != Scriptable.NOT_FOUND)
                break;
            obj = obj.getPrototype();
        } while (obj != null);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getProperty,"    public static Object getProperty(Scriptable obj, int index)
    {
        Scriptable start = obj;
        Object result;
        do {
            result = obj.get(index, start);
            if (result != Scriptable.NOT_FOUND)
                break;
            obj = obj.getPrototype();
        } while (obj != null);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,hasProperty,"    public static boolean hasProperty(Scriptable obj, String name)
    {
        return null != getBase(obj, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,redefineProperty,"    public static void redefineProperty(Scriptable obj, String name,
                                        boolean isConst)
    {
        Scriptable base = getBase(obj, name);
        if (base == null)
            return;
        if (base instanceof ConstProperties) {
            ConstProperties cp = (ConstProperties)base;

            if (cp.isConst(name))
                throw Context.reportRuntimeError1(""msg.const.redecl"", name);
        }
        if (isConst)
            throw Context.reportRuntimeError1(""msg.var.redecl"", name);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,hasProperty,"    public static boolean hasProperty(Scriptable obj, int index)
    {
        return null != getBase(obj, index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,putProperty,"    public static void putProperty(Scriptable obj, String name, Object value)
    {
        Scriptable base = getBase(obj, name);
        if (base == null)
            base = obj;
        base.put(name, obj, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,putConstProperty,"    public static void putConstProperty(Scriptable obj, String name, Object value)
    {
        Scriptable base = getBase(obj, name);
        if (base == null)
            base = obj;
        if (base instanceof ConstProperties)
            ((ConstProperties)base).putConst(name, obj, value);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,putProperty,"    public static void putProperty(Scriptable obj, int index, Object value)
    {
        Scriptable base = getBase(obj, index);
        if (base == null)
            base = obj;
        base.put(index, obj, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,deleteProperty,"    public static boolean deleteProperty(Scriptable obj, String name)
    {
        Scriptable base = getBase(obj, name);
        if (base == null)
            return true;
        base.delete(name);
        return !base.has(name, obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,deleteProperty,"    public static boolean deleteProperty(Scriptable obj, int index)
    {
        Scriptable base = getBase(obj, index);
        if (base == null)
            return true;
        base.delete(index);
        return !base.has(index, obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getPropertyIds,"    public static Object[] getPropertyIds(Scriptable obj)
    {
        if (obj == null) {
            return ScriptRuntime.emptyArgs;
        }
        Object[] result = obj.getIds();
        ObjToIntMap map = null;
        for (;;) {
            obj = obj.getPrototype();
            if (obj == null) {
                break;
            }
            Object[] ids = obj.getIds();
            if (ids.length == 0) {
                continue;
            }
            if (map == null) {
                if (result.length == 0) {
                    result = ids;
                    continue;
                }
                map = new ObjToIntMap(result.length + ids.length);
                for (int i = 0; i != result.length; ++i) {
                    map.intern(result[i]);
                }
                result = null; // Allow to GC the result
            }
            for (int i = 0; i != ids.length; ++i) {
                map.intern(ids[i]);
            }
        }
        if (map != null) {
            result = map.getKeys();
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,callMethod,"    public static Object callMethod(Scriptable obj, String methodName,
                                    Object[] args)
    {
        return callMethod(null, obj, methodName, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,callMethod,"    public static Object callMethod(Context cx, Scriptable obj,
                                    String methodName,
                                    Object[] args)
    {
        Object funObj = getProperty(obj, methodName);
        if (!(funObj instanceof Function)) {
            throw ScriptRuntime.notFunctionError(obj, methodName);
        }
        Function fun = (Function)funObj;
        // XXX: What should be the scope when calling funObj?
        // The following favor scope stored in the object on the assumption
        // that is more useful especially under dynamic scope setup.
        // An alternative is to check for dynamic scope flag
        // and use ScriptableObject.getTopLevelScope(fun) if the flag is not
        // set. But that require access to Context and messy code
        // so for now it is not checked.
        Scriptable scope = ScriptableObject.getTopLevelScope(obj);
        if (cx != null) {
            return fun.call(cx, scope, obj, args);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getBase,"    private static Scriptable getBase(Scriptable obj, String name)
    {
        do {
            if (obj.has(name, obj))
                break;
            obj = obj.getPrototype();
        } while(obj != null);
        return obj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getBase,"    private static Scriptable getBase(Scriptable obj, int index)
    {
        do {
            if (obj.has(index, obj))
                break;
            obj = obj.getPrototype();
        } while(obj != null);
        return obj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getAssociatedValue,"    public final Object getAssociatedValue(Object key)
    {
        Hashtable h = associatedValues;
        if (h == null)
            return null;
        return h.get(key);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getTopScopeValue,"    public static Object getTopScopeValue(Scriptable scope, Object key)
    {
        scope = ScriptableObject.getTopLevelScope(scope);
        for (;;) {
            if (scope instanceof ScriptableObject) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,associateValue,"    public final Object associateValue(Object key, Object value)
    {
        if (value == null) throw new IllegalArgumentException();
        Hashtable h = associatedValues;
        if (h == null) {
            synchronized (this) {
                h = associatedValues;
                if (h == null) {
                    h = new Hashtable();
                    associatedValues = h;
                }
            }
        }
        return Kit.initHash(h, key, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getImpl,"    private Object getImpl(String name, int index, Scriptable start)
    {
        Slot slot = getSlot(name, index, SLOT_QUERY);
        if (slot == null) {
            return Scriptable.NOT_FOUND;
        }
        if (!(slot instanceof GetterSlot)) {
            return slot.value;
        }
        Object getterObj = ((GetterSlot)slot).getter;
        if (getterObj != null) {
            if (getterObj instanceof MemberBox) {
                MemberBox nativeGetter = (MemberBox)getterObj;
                Object getterThis;
                Object[] args;
                if (nativeGetter.delegateTo == null) {
                    getterThis = start;
                    args = ScriptRuntime.emptyArgs;
                } else {
                    getterThis = nativeGetter.delegateTo;
                    args = new Object[] { start };
                }
                return nativeGetter.invoke(getterThis, args);
            } else {
                Function f = (Function)getterObj;
                Context cx = Context.getContext();
                return f.call(cx, f.getParentScope(), start,
                              ScriptRuntime.emptyArgs);
            }
        }
        Object value = slot.value;
        if (value instanceof LazilyLoadedCtor) {
            LazilyLoadedCtor initializer = (LazilyLoadedCtor)value;
            try {
                initializer.init();
            } finally {
                value = initializer.getValue();
                slot.value = value;
            }
        }
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,putImpl,"    private boolean putImpl(String name, int index, Scriptable start,
                            Object value, int constFlag)
    {
        Slot slot;
        if (this != start) {
            slot = getSlot(name, index, SLOT_QUERY);
            if (slot == null) {
                return false;
            }
        } else {
            checkNotSealed(name, index);
            // either const hoisted declaration or initialization
            if (constFlag != EMPTY) {
                slot = getSlot(name, index, SLOT_MODIFY_CONST);
                int attr = slot.getAttributes();
                if ((attr & READONLY) == 0)
                    throw Context.reportRuntimeError1(""msg.var.redecl"", name);
                if ((attr & UNINITIALIZED_CONST) != 0) {
                    slot.value = value;
                    // clear the bit on const initialization
                    if (constFlag != UNINITIALIZED_CONST)
                        slot.setAttributes(attr & ~UNINITIALIZED_CONST);
                }
                return true;
            }
            slot = getSlot(name, index, SLOT_MODIFY);
        }
        if ((slot.getAttributes() & READONLY) != 0)
            return true;
        if (slot instanceof GetterSlot) {
            Object setterObj = ((GetterSlot)slot).setter;
            if (setterObj != null) {
                Context cx = Context.getContext();
                if (setterObj instanceof MemberBox) {
                    MemberBox nativeSetter = (MemberBox)setterObj;
                    Class pTypes[] = nativeSetter.argTypes;
                    // XXX: cache tag since it is already calculated in
                    // defineProperty ?
                    Class valueType = pTypes[pTypes.length - 1];
                    int tag = FunctionObject.getTypeTag(valueType);
                    Object actualArg = FunctionObject.convertArg(cx, start,
                                                                 value, tag);
                    Object setterThis;
                    Object[] args;
                    if (nativeSetter.delegateTo == null) {
                        setterThis = start;
                        args = new Object[] { actualArg };
                    } else {
                        setterThis = nativeSetter.delegateTo;
                        args = new Object[] { start, actualArg };
                    }
                    nativeSetter.invoke(setterThis, args);
                } else {
                    Function f = (Function)setterObj;
                    f.call(cx, f.getParentScope(), start,
                           new Object[] { value });
                }
                return true;
            }
        }
        if (this == start) {
            slot.value = value;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,findAttributeSlot,"    private Slot findAttributeSlot(String name, int index, int accessType)
    {
        Slot slot = getSlot(name, index, accessType);
        if (slot == null) {
            String str = (name != null ? name : Integer.toString(index));
            throw Context.reportRuntimeError1(""msg.prop.not.found"", str);
        }
        return slot;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getSlot,"    private Slot getSlot(String name, int index, int accessType)
    {
        Slot slot;

        // Query last access cache and check that it was not deleted.
      lastAccessCheck:
        {
            slot = lastAccess;
            if (name != null) {
                if (name != slot.name)
                    break lastAccessCheck;
                // No String.equals here as successful slot search update
                // name object with fresh reference of the same string.
            } else {
                if (slot.name != null || index != slot.indexOrHash)
                    break lastAccessCheck;
            }

            if (slot.wasDeleted != 0)
                break lastAccessCheck;

            if (accessType == SLOT_MODIFY_GETTER_SETTER &&
                !(slot instanceof GetterSlot))
                break lastAccessCheck;

            return slot;
        }

        slot = accessSlot(name, index, accessType);
        if (slot != null) {
            // Update the cache
            lastAccess = slot;
        }
        return slot;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,accessSlot,"    private Slot accessSlot(String name, int index, int accessType)
    {
        int indexOrHash = (name != null ? name.hashCode() : index);

        if (accessType == SLOT_QUERY ||
            accessType == SLOT_MODIFY ||",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getSlotIndex,"    private static int getSlotIndex(int tableSize, int indexOrHash)
    {
        return (indexOrHash & 0x7fffffff) % tableSize;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,copyTable,"    private static void copyTable(Slot[] slots, Slot[] newSlots, int count)
    {
        if (count == 0) throw Kit.codeBug();

        int tableSize = newSlots.length;
        int i = slots.length;
        for (;;) {
            --i;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,addKnownAbsentSlot,"    private static void addKnownAbsentSlot(Slot[] slots, Slot slot, int insertPos)
    {
        if (slots[insertPos] == null) {
            slots[insertPos] = slot;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,getIds,"    Object[] getIds(boolean getAll) {
        Slot[] s = slots;
        Object[] a = ScriptRuntime.emptyArgs;
        if (s == null)
            return a;
        int c = 0;
        for (int i=0; i < s.length; i++) {
            Slot slot = s[i];
            while (slot != null) {
                if (getAll || (slot.getAttributes() & DONTENUM) == 0) {
                    if (c == 0)
                        a = new Object[s.length];
                    a[c++] = (slot.name != null ? (Object) slot.name
                              : new Integer(slot.indexOrHash));
                }
                slot = slot.next;
            }
        }
        if (c == a.length)
            return a;
        Object[] result = new Object[c];
        System.arraycopy(a, 0, result, 0, c);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,writeObject,"    private synchronized void writeObject(ObjectOutputStream out)
        throws IOException
    {
        out.defaultWriteObject();
        int objectsCount = count;
        if (objectsCount < 0) {
            // ""this"" was sealed
            objectsCount = ~objectsCount;
        }
        if (objectsCount == 0) {
            out.writeInt(0);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableObject.java,readObject,"    private void readObject(ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        in.defaultReadObject();
        lastAccess = REMOVED;

        int tableSize = in.readInt();
        if (tableSize != 0) {
            slots = new Slot[tableSize];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecureCaller.java,callSecurely,"    static Object callSecurely(final CodeSource codeSource, Callable callable, 
            Context cx, Scriptable scope, Scriptable thisObj, Object[] args)
    {
        final Thread thread = Thread.currentThread();
        // Run in doPrivileged as we might be checked for ""getClassLoader"" 
        // runtime permission
        final ClassLoader classLoader = (ClassLoader)AccessController.doPrivileged(
            new PrivilegedAction() {
                public Object run() {
                    return thread.getContextClassLoader();
                }
            });
        Map classLoaderMap;
        synchronized(callers)
        {
            classLoaderMap = (Map)callers.get(codeSource);
            if(classLoaderMap == null)
            {
                classLoaderMap = new WeakHashMap();
                callers.put(codeSource, classLoaderMap);
            }
        }
        SecureCaller caller;
        synchronized(classLoaderMap)
        {
            SoftReference ref = (SoftReference)classLoaderMap.get(classLoader);
            if(ref != null)
            {
                caller = (SecureCaller)ref.get();
            }
            else
            {
                caller = null;
            }
            if(caller == null)
            {
                try
                {
                    // Run in doPrivileged as we'll be checked for 
                    // ""createClassLoader"" runtime permission
                    caller = (SecureCaller)AccessController.doPrivileged(
                            new PrivilegedExceptionAction()
                    {
                        public Object run() throws Exception
                        {
                            ClassLoader effectiveClassLoader;
                            Class thisClass = getClass();
                            if(classLoader.loadClass(thisClass.getName()) != thisClass) {
                                effectiveClassLoader = thisClass.getClassLoader();
                            } else {
                                effectiveClassLoader = classLoader;
                            }  
                            SecureClassLoaderImpl secCl = 
                                new SecureClassLoaderImpl(effectiveClassLoader);
                            Class c = secCl.defineAndLinkClass(
                                    SecureCaller.class.getName() + ""Impl"", 
                                    secureCallerImplBytecode, codeSource);
                            return c.newInstance();
                        }
                    });
                    classLoaderMap.put(classLoader, new SoftReference(caller));
                }
                catch(PrivilegedActionException ex)
                {
                    throw new UndeclaredThrowableException(ex.getCause());
                }
            }
        }
        return caller.call(callable, cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecureCaller.java,run,"                public Object run() {
                    return thread.getContextClassLoader();
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecureCaller.java,run,"                        public Object run() throws Exception
                        {
                            ClassLoader effectiveClassLoader;
                            Class thisClass = getClass();
                            if(classLoader.loadClass(thisClass.getName()) != thisClass) {
                                effectiveClassLoader = thisClass.getClassLoader();
                            } else {
                                effectiveClassLoader = classLoader;
                            }  
                            SecureClassLoaderImpl secCl = 
                                new SecureClassLoaderImpl(effectiveClassLoader);
                            Class c = secCl.defineAndLinkClass(
                                    SecureCaller.class.getName() + ""Impl"", 
                                    secureCallerImplBytecode, codeSource);
                            return c.newInstance();
                        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecureCaller.java,defineAndLinkClass,"        Class defineAndLinkClass(String name, byte[] bytes, CodeSource cs)
        {
            Class cl = defineClass(name, bytes, 0, bytes.length, cs);
            resolveClass(cl);
            return cl;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecureCaller.java,loadBytecode,"    private static byte[] loadBytecode()
    {
        return (byte[])AccessController.doPrivileged(new PrivilegedAction()
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecureCaller.java,run,"            public Object run()
            {
                return loadBytecodePrivileged();
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecureCaller.java,loadBytecodePrivileged,"    private static byte[] loadBytecodePrivileged()
    {
        URL url = SecureCaller.class.getResource(""SecureCallerImpl.clazz"");
        try
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,global,"    static SecurityController global()
    {
        return global;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,hasGlobal,"    public static boolean hasGlobal()
    {
        return global != null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,initGlobal,"    public static void initGlobal(SecurityController controller)
    {
        if (controller == null) throw new IllegalArgumentException();
        if (global != null) {
            throw new SecurityException(""Cannot overwrite already installed global SecurityController"");
        }
        global = controller;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,createLoader,"    public static GeneratedClassLoader createLoader(
        ClassLoader parent, Object staticDomain)
    {
        Context cx = Context.getContext();
        if (parent == null) {
            parent = cx.getApplicationClassLoader();
        }
        SecurityController sc = cx.getSecurityController();
        GeneratedClassLoader loader;
        if (sc == null) {
            loader = cx.createClassLoader(parent);
        } else {
            Object dynamicDomain = sc.getDynamicSecurityDomain(staticDomain);
            loader = sc.createClassLoader(parent, dynamicDomain);
        }
        return loader;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,getStaticSecurityDomainClass,"    public static Class getStaticSecurityDomainClass() {
        SecurityController sc = Context.getContext().getSecurityController();
        return sc == null ? null : sc.getStaticSecurityDomainClassInternal(); 
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,getStaticSecurityDomainClassInternal,"    public Class getStaticSecurityDomainClassInternal()
    {
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,callWithDomain,"    public Object callWithDomain(Object securityDomain, Context cx,
                                 final Callable callable, Scriptable scope,
                                 final Scriptable thisObj, final Object[] args)
    {
        return execWithDomain(cx, scope, new Script()
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,exec,"            public Object exec(Context cx, Scriptable scope)
            {
                return callable.call(cx, scope, thisObj, args);
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityController.java,execWithDomain,"    public Object execWithDomain(Context cx, Scriptable scope,
                                 Script script, Object securityDomain)
    {
        throw new IllegalStateException(""callWithDomain should be overridden"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityUtilities.java,getSystemProperty,"    public static String getSystemProperty(final String name)
    {
        return (String)AccessController.doPrivileged(
            new PrivilegedAction()",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityUtilities.java,run,"                public Object run()
                {
                    return System.getProperty(name);
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityUtilities.java,getProtectionDomain,"    public static ProtectionDomain getProtectionDomain(final Class clazz)
    {
        return (ProtectionDomain)AccessController.doPrivileged(
                new PrivilegedAction()",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SecurityUtilities.java,run,"                    public Object run()
                    {
                        return clazz.getProtectionDomain();
                    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SpecialRef.java,createSpecial,"    static Ref createSpecial(Context cx, Object object, String name)
    {
        Scriptable target = ScriptRuntime.toObjectOrNull(cx, object);
        if (target == null) {
            throw ScriptRuntime.undefReadError(object, name);
        }

        int type;
        if (name.equals(""__proto__"")) {
            type = SPECIAL_PROTO;
        } else if (name.equals(""__parent__"")) {
            type = SPECIAL_PARENT;
        } else {
            throw new IllegalArgumentException(name);
        }

        if (!cx.hasFeature(Context.FEATURE_PARENT_PROTO_PROPERTIES)) {
            // Clear special after checking for valid name!
            type = SPECIAL_NONE;
        }

        return new SpecialRef(target, type, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SpecialRef.java,get,"    public Object get(Context cx)
    {
        switch (type) {
          case SPECIAL_NONE:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SpecialRef.java,set,"    public Object set(Context cx, Object value)
    {
        switch (type) {
          case SPECIAL_NONE:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SpecialRef.java,has,"    public boolean has(Context cx)
    {
        if (type == SPECIAL_NONE) {
            return ScriptRuntime.hasObjectElem(target, name, cx);
        }
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SpecialRef.java,delete,"    public boolean delete(Context cx)
    {
        if (type == SPECIAL_NONE) {
            return ScriptRuntime.deleteObjectElem(target, name, cx);
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Synchronizer.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        synchronized(thisObj instanceof Wrapper ? ((Wrapper)thisObj).unwrap() : thisObj) {
            return ((Function)obj).call(cx,scope,thisObj,args);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Token.java,name,"    public static String name(int token)
    {
        if (!printNames) {
            return String.valueOf(token);
        }
        switch (token) {
          case ERROR:           return ""ERROR"";
          case EOF:             return ""EOF"";
          case EOL:             return ""EOL"";
          case ENTERWITH:       return ""ENTERWITH"";
          case LEAVEWITH:       return ""LEAVEWITH"";
          case RETURN:          return ""RETURN"";
          case GOTO:            return ""GOTO"";
          case IFEQ:            return ""IFEQ"";
          case IFNE:            return ""IFNE"";
          case SETNAME:         return ""SETNAME"";
          case BITOR:           return ""BITOR"";
          case BITXOR:          return ""BITXOR"";
          case BITAND:          return ""BITAND"";
          case EQ:              return ""EQ"";
          case NE:              return ""NE"";
          case LT:              return ""LT"";
          case LE:              return ""LE"";
          case GT:              return ""GT"";
          case GE:              return ""GE"";
          case LSH:             return ""LSH"";
          case RSH:             return ""RSH"";
          case URSH:            return ""URSH"";
          case ADD:             return ""ADD"";
          case SUB:             return ""SUB"";
          case MUL:             return ""MUL"";
          case DIV:             return ""DIV"";
          case MOD:             return ""MOD"";
          case NOT:             return ""NOT"";
          case BITNOT:          return ""BITNOT"";
          case POS:             return ""POS"";
          case NEG:             return ""NEG"";
          case NEW:             return ""NEW"";
          case DELPROP:         return ""DELPROP"";
          case TYPEOF:          return ""TYPEOF"";
          case GETPROP:         return ""GETPROP"";
          case GETPROPNOWARN:   return ""GETPROPNOWARN"";
          case SETPROP:         return ""SETPROP"";
          case GETELEM:         return ""GETELEM"";
          case SETELEM:         return ""SETELEM"";
          case CALL:            return ""CALL"";
          case NAME:            return ""NAME"";
          case NUMBER:          return ""NUMBER"";
          case STRING:          return ""STRING"";
          case NULL:            return ""NULL"";
          case THIS:            return ""THIS"";
          case FALSE:           return ""FALSE"";
          case TRUE:            return ""TRUE"";
          case SHEQ:            return ""SHEQ"";
          case SHNE:            return ""SHNE"";
          case REGEXP:          return ""OBJECT"";
          case BINDNAME:        return ""BINDNAME"";
          case THROW:           return ""THROW"";
          case RETHROW:         return ""RETHROW"";
          case IN:              return ""IN"";
          case INSTANCEOF:      return ""INSTANCEOF"";
          case LOCAL_LOAD:      return ""LOCAL_LOAD"";
          case GETVAR:          return ""GETVAR"";
          case SETVAR:          return ""SETVAR"";
          case CATCH_SCOPE:     return ""CATCH_SCOPE"";
          case ENUM_INIT_KEYS:  return ""ENUM_INIT_KEYS"";
          case ENUM_INIT_VALUES:return ""ENUM_INIT_VALUES"";
          case ENUM_INIT_ARRAY: return ""ENUM_INIT_ARRAY"";
          case ENUM_NEXT:       return ""ENUM_NEXT"";
          case ENUM_ID:         return ""ENUM_ID"";
          case THISFN:          return ""THISFN"";
          case RETURN_RESULT:   return ""RETURN_RESULT"";
          case ARRAYLIT:        return ""ARRAYLIT"";
          case OBJECTLIT:       return ""OBJECTLIT"";
          case GET_REF:         return ""GET_REF"";
          case SET_REF:         return ""SET_REF"";
          case DEL_REF:         return ""DEL_REF"";
          case REF_CALL:        return ""REF_CALL"";
          case REF_SPECIAL:     return ""REF_SPECIAL"";
          case DEFAULTNAMESPACE:return ""DEFAULTNAMESPACE"";
          case ESCXMLTEXT:      return ""ESCXMLTEXT"";
          case ESCXMLATTR:      return ""ESCXMLATTR"";
          case REF_MEMBER:      return ""REF_MEMBER"";
          case REF_NS_MEMBER:   return ""REF_NS_MEMBER"";
          case REF_NAME:        return ""REF_NAME"";
          case REF_NS_NAME:     return ""REF_NS_NAME"";
          case TRY:             return ""TRY"";
          case SEMI:            return ""SEMI"";
          case LB:              return ""LB"";
          case RB:              return ""RB"";
          case LC:              return ""LC"";
          case RC:              return ""RC"";
          case LP:              return ""LP"";
          case RP:              return ""RP"";
          case COMMA:           return ""COMMA"";
          case ASSIGN:          return ""ASSIGN"";
          case ASSIGN_BITOR:    return ""ASSIGN_BITOR"";
          case ASSIGN_BITXOR:   return ""ASSIGN_BITXOR"";
          case ASSIGN_BITAND:   return ""ASSIGN_BITAND"";
          case ASSIGN_LSH:      return ""ASSIGN_LSH"";
          case ASSIGN_RSH:      return ""ASSIGN_RSH"";
          case ASSIGN_URSH:     return ""ASSIGN_URSH"";
          case ASSIGN_ADD:      return ""ASSIGN_ADD"";
          case ASSIGN_SUB:      return ""ASSIGN_SUB"";
          case ASSIGN_MUL:      return ""ASSIGN_MUL"";
          case ASSIGN_DIV:      return ""ASSIGN_DIV"";
          case ASSIGN_MOD:      return ""ASSIGN_MOD"";
          case HOOK:            return ""HOOK"";
          case COLON:           return ""COLON"";
          case OR:              return ""OR"";
          case AND:             return ""AND"";
          case INC:             return ""INC"";
          case DEC:             return ""DEC"";
          case DOT:             return ""DOT"";
          case FUNCTION:        return ""FUNCTION"";
          case EXPORT:          return ""EXPORT"";
          case IMPORT:          return ""IMPORT"";
          case IF:              return ""IF"";
          case ELSE:            return ""ELSE"";
          case SWITCH:          return ""SWITCH"";
          case CASE:            return ""CASE"";
          case DEFAULT:         return ""DEFAULT"";
          case WHILE:           return ""WHILE"";
          case DO:              return ""DO"";
          case FOR:             return ""FOR"";
          case BREAK:           return ""BREAK"";
          case CONTINUE:        return ""CONTINUE"";
          case VAR:             return ""VAR"";
          case WITH:            return ""WITH"";
          case CATCH:           return ""CATCH"";
          case FINALLY:         return ""FINALLY"";
          case VOID:            return ""VOID"";
          case RESERVED:        return ""RESERVED"";
          case EMPTY:           return ""EMPTY"";
          case BLOCK:           return ""BLOCK"";
          case LABEL:           return ""LABEL"";
          case TARGET:          return ""TARGET"";
          case LOOP:            return ""LOOP"";
          case EXPR_VOID:       return ""EXPR_VOID"";
          case EXPR_RESULT:     return ""EXPR_RESULT"";
          case JSR:             return ""JSR"";
          case SCRIPT:          return ""SCRIPT"";
          case TYPEOFNAME:      return ""TYPEOFNAME"";
          case USE_STACK:       return ""USE_STACK"";
          case SETPROP_OP:      return ""SETPROP_OP"";
          case SETELEM_OP:      return ""SETELEM_OP"";
          case LOCAL_BLOCK:     return ""LOCAL_BLOCK"";
          case SET_REF_OP:      return ""SET_REF_OP"";
          case DOTDOT:          return ""DOTDOT"";
          case COLONCOLON:      return ""COLONCOLON"";
          case XML:             return ""XML"";
          case DOTQUERY:        return ""DOTQUERY"";
          case XMLATTR:         return ""XMLATTR"";
          case XMLEND:          return ""XMLEND"";
          case TO_OBJECT:       return ""TO_OBJECT"";
          case TO_DOUBLE:       return ""TO_DOUBLE"";
          case GET:             return ""GET"";
          case SET:             return ""SET"";
          case LET:             return ""LET"";
          case YIELD:           return ""YIELD"";
          case CONST:           return ""CONST"";
          case SETCONST:        return ""SETCONST"";
          case ARRAYCOMP:       return ""ARRAYCOMP"";
          case WITHEXPR:        return ""WITHEXPR"";
          case LETEXPR:         return ""LETEXPR"";
          case DEBUGGER:        return ""DEBUGGER"";
        }

        // Token without name
        throw new IllegalStateException(String.valueOf(token));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,tokenToString,"    String tokenToString(int token)
    {
        if (Token.printTrees) {
            String name = Token.name(token);

            switch (token) {
            case Token.STRING:
            case Token.REGEXP:
            case Token.NAME:
                return name + "" `"" + this.string + ""'"";

            case Token.NUMBER:
                return ""NUMBER "" + this.number;
            }

            return name;
        }
        return """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isKeyword,"    static boolean isKeyword(String s)
    {
        return Token.EOF != stringToKeyword(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,stringToKeyword,"    private static int stringToKeyword(String name)
    {
// #string_id_map#
// The following assumes that Token.EOF == 0
        final int
            Id_break         = Token.BREAK,
            Id_case          = Token.CASE,
            Id_continue      = Token.CONTINUE,
            Id_default       = Token.DEFAULT,
            Id_delete        = Token.DELPROP,
            Id_do            = Token.DO,
            Id_else          = Token.ELSE,
            Id_export        = Token.EXPORT,
            Id_false         = Token.FALSE,
            Id_for           = Token.FOR,
            Id_function      = Token.FUNCTION,
            Id_if            = Token.IF,
            Id_in            = Token.IN,
            Id_let           = Token.LET,
            Id_new           = Token.NEW,
            Id_null          = Token.NULL,
            Id_return        = Token.RETURN,
            Id_switch        = Token.SWITCH,
            Id_this          = Token.THIS,
            Id_true          = Token.TRUE,
            Id_typeof        = Token.TYPEOF,
            Id_var           = Token.VAR,
            Id_void          = Token.VOID,
            Id_while         = Token.WHILE,
            Id_with          = Token.WITH,
            Id_yield         = Token.YIELD,

            // the following are #ifdef RESERVE_JAVA_KEYWORDS in jsscan.c
            Id_abstract      = Token.RESERVED,
            Id_boolean       = Token.RESERVED,
            Id_byte          = Token.RESERVED,
            Id_catch         = Token.CATCH,
            Id_char          = Token.RESERVED,
            Id_class         = Token.RESERVED,
            Id_const         = Token.CONST,
            Id_debugger      = Token.DEBUGGER,
            Id_double        = Token.RESERVED,
            Id_enum          = Token.RESERVED,
            Id_extends       = Token.RESERVED,
            Id_final         = Token.RESERVED,
            Id_finally       = Token.FINALLY,
            Id_float         = Token.RESERVED,
            Id_goto          = Token.RESERVED,
            Id_implements    = Token.RESERVED,
            Id_import        = Token.IMPORT,
            Id_instanceof    = Token.INSTANCEOF,
            Id_int           = Token.RESERVED,
            Id_interface     = Token.RESERVED,
            Id_long          = Token.RESERVED,
            Id_native        = Token.RESERVED,
            Id_package       = Token.RESERVED,
            Id_private       = Token.RESERVED,
            Id_protected     = Token.RESERVED,
            Id_public        = Token.RESERVED,
            Id_short         = Token.RESERVED,
            Id_static        = Token.RESERVED,
            Id_super         = Token.RESERVED,
            Id_synchronized  = Token.RESERVED,
            Id_throw         = Token.THROW,
            Id_throws        = Token.RESERVED,
            Id_transient     = Token.RESERVED,
            Id_try           = Token.TRY,
            Id_volatile      = Token.RESERVED;

        int id;
        String s = name;
// #generated# Last update: 2007-04-18 13:53:30 PDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 2: c=s.charAt(1);
                if (c=='f') { if (s.charAt(0)=='i') {id=Id_if; break L0;} }
                else if (c=='n') { if (s.charAt(0)=='i') {id=Id_in; break L0;} }
                else if (c=='o') { if (s.charAt(0)=='d') {id=Id_do; break L0;} }
                break L;
            case 3: switch (s.charAt(0)) {
                case 'f': if (s.charAt(2)=='r' && s.charAt(1)=='o') {id=Id_for; break L0;} break L;
                case 'i': if (s.charAt(2)=='t' && s.charAt(1)=='n') {id=Id_int; break L0;} break L;
                case 'l': if (s.charAt(2)=='t' && s.charAt(1)=='e') {id=Id_let; break L0;} break L;
                case 'n': if (s.charAt(2)=='w' && s.charAt(1)=='e') {id=Id_new; break L0;} break L;
                case 't': if (s.charAt(2)=='y' && s.charAt(1)=='r') {id=Id_try; break L0;} break L;
                case 'v': if (s.charAt(2)=='r' && s.charAt(1)=='a') {id=Id_var; break L0;} break L;
                } break L;
            case 4: switch (s.charAt(0)) {
                case 'b': X=""byte"";id=Id_byte; break L;
                case 'c': c=s.charAt(3);
                    if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='a') {id=Id_case; break L0;} }
                    else if (c=='r') { if (s.charAt(2)=='a' && s.charAt(1)=='h') {id=Id_char; break L0;} }
                    break L;
                case 'e': c=s.charAt(3);
                    if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='l') {id=Id_else; break L0;} }
                    else if (c=='m') { if (s.charAt(2)=='u' && s.charAt(1)=='n') {id=Id_enum; break L0;} }
                    break L;
                case 'g': X=""goto"";id=Id_goto; break L;
                case 'l': X=""long"";id=Id_long; break L;
                case 'n': X=""null"";id=Id_null; break L;
                case 't': c=s.charAt(3);
                    if (c=='e') { if (s.charAt(2)=='u' && s.charAt(1)=='r') {id=Id_true; break L0;} }
                    else if (c=='s') { if (s.charAt(2)=='i' && s.charAt(1)=='h') {id=Id_this; break L0;} }
                    break L;
                case 'v': X=""void"";id=Id_void; break L;
                case 'w': X=""with"";id=Id_with; break L;
                } break L;
            case 5: switch (s.charAt(2)) {
                case 'a': X=""class"";id=Id_class; break L;
                case 'e': c=s.charAt(0);
                    if (c=='b') { X=""break"";id=Id_break; }
                    else if (c=='y') { X=""yield"";id=Id_yield; }
                    break L;
                case 'i': X=""while"";id=Id_while; break L;
                case 'l': X=""false"";id=Id_false; break L;
                case 'n': c=s.charAt(0);
                    if (c=='c') { X=""const"";id=Id_const; }
                    else if (c=='f') { X=""final"";id=Id_final; }
                    break L;
                case 'o': c=s.charAt(0);
                    if (c=='f') { X=""float"";id=Id_float; }
                    else if (c=='s') { X=""short"";id=Id_short; }
                    break L;
                case 'p': X=""super"";id=Id_super; break L;
                case 'r': X=""throw"";id=Id_throw; break L;
                case 't': X=""catch"";id=Id_catch; break L;
                } break L;
            case 6: switch (s.charAt(1)) {
                case 'a': X=""native"";id=Id_native; break L;
                case 'e': c=s.charAt(0);
                    if (c=='d') { X=""delete"";id=Id_delete; }
                    else if (c=='r') { X=""return"";id=Id_return; }
                    break L;
                case 'h': X=""throws"";id=Id_throws; break L;
                    /*APPJET*//* case 'm': X=""import"";id=Id_import; break L;*/
                case 'o': X=""double"";id=Id_double; break L;
                case 't': X=""static"";id=Id_static; break L;
                case 'u': X=""public"";id=Id_public; break L;
                case 'w': X=""switch"";id=Id_switch; break L;
                case 'x': X=""export"";id=Id_export; break L;
                case 'y': X=""typeof"";id=Id_typeof; break L;
                } break L;
            case 7: switch (s.charAt(1)) {
                case 'a': X=""package"";id=Id_package; break L;
                case 'e': X=""default"";id=Id_default; break L;
                case 'i': X=""finally"";id=Id_finally; break L;
                case 'o': X=""boolean"";id=Id_boolean; break L;
                case 'r': X=""private"";id=Id_private; break L;
                case 'x': X=""extends"";id=Id_extends; break L;
                } break L;
            case 8: switch (s.charAt(0)) {
                case 'a': X=""abstract"";id=Id_abstract; break L;
                case 'c': X=""continue"";id=Id_continue; break L;
                case 'd': X=""debugger"";id=Id_debugger; break L;
                case 'f': X=""function"";id=Id_function; break L;
                case 'v': X=""volatile"";id=Id_volatile; break L;
                } break L;
            case 9: c=s.charAt(0);
                if (c=='i') { X=""interface"";id=Id_interface; }
                else if (c=='p') { X=""protected"";id=Id_protected; }
                else if (c=='t') { X=""transient"";id=Id_transient; }
                break L;
            case 10: c=s.charAt(1);
                if (c=='m') { X=""implements"";id=Id_implements; }
                else if (c=='n') { X=""instanceof"";id=Id_instanceof; }
                break L;
            case 12: X=""synchronized"";id=Id_synchronized; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#
// #/string_id_map#
        if (id == 0) { return Token.EOF; }
        return id & 0xff;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getLineno,"    final int getLineno() { return lineno; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getString,"    final String getString() { return string; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getNumber,"    final double getNumber() { return number; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,eof,"    final boolean eof() { return hitEOF; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getToken,"    final int getToken() throws IOException
    {
        int c;

    retry:
        for (;;) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isAlpha,"    private static boolean isAlpha(int c)
    {
        // Use 'Z' < 'a'
        if (c <= 'Z') {
            return 'A' <= c;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isDigit,"    static boolean isDigit(int c)
    {
        return '0' <= c && c <= '9';
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isJSSpace,"    static boolean isJSSpace(int c)
    {
        if (c <= 127) {
            return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isJSFormatChar,"    private static boolean isJSFormatChar(int c)
    {
        return c > 127 && Character.getType((char)c) == Character.FORMAT;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readRegExp,"    void readRegExp(int startToken)
        throws IOException
    {
        stringBufferTop = 0;
        if (startToken == Token.ASSIGN_DIV) {
            // Miss-scanned /=
            addToString('=');
        } else {
            if (startToken != Token.DIV) Kit.codeBug();
        }

        int c;
        while ((c = getChar()) != '/') {
            if (c == '\n' || c == EOF_CHAR) {
                ungetChar(c);
                throw parser.reportError(""msg.unterminated.re.lit"");
            }
            if (c == '\\') {
                addToString(c);
                c = getChar();
            }

            addToString(c);
        }
        int reEnd = stringBufferTop;

        while (true) {
            if (matchChar('g'))
                addToString('g');
            else if (matchChar('i'))
                addToString('i');
            else if (matchChar('m'))
                addToString('m');
            else
                break;
        }

        if (isAlpha(peekChar())) {
            throw parser.reportError(""msg.invalid.re.flag"");
        }

        this.string = new String(stringBuffer, 0, reEnd);
        this.regExpFlags = new String(stringBuffer, reEnd,
                                      stringBufferTop - reEnd);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isXMLAttribute,"    boolean isXMLAttribute()
    {
        return xmlIsAttribute;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getFirstXMLToken,"    int getFirstXMLToken() throws IOException
    {
        xmlOpenTagsCount = 0;
        xmlIsAttribute = false;
        xmlIsTagContent = false;
        ungetChar('<');
        return getNextXMLToken();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getNextXMLToken,"    int getNextXMLToken() throws IOException
    {
        stringBufferTop = 0; // remember the XML

        for (int c = getChar(); c != EOF_CHAR; c = getChar()) {
            if (xmlIsTagContent) {
                switch (c) {
                case '>':
                    addToString(c);
                    xmlIsTagContent = false;
                    xmlIsAttribute = false;
                    break;
                case '/':
                    addToString(c);
                    if (peekChar() == '>') {
                        c = getChar();
                        addToString(c);
                        xmlIsTagContent = false;
                        xmlOpenTagsCount--;
                    }
                    break;
                case '{':
                    ungetChar(c);
                    this.string = getStringFromBuffer();
                    return Token.XML;
                case '\'':
                case '""':
                    addToString(c);
                    if (!readQuotedString(c)) return Token.ERROR;
                    break;
                case '=':
                    addToString(c);
                    xmlIsAttribute = true;
                    break;
                case ' ':
                case '\t':
                case '\r':
                case '\n':
                    addToString(c);
                    break;
                default:
                    addToString(c);
                    xmlIsAttribute = false;
                    break;
                }

                if (!xmlIsTagContent && xmlOpenTagsCount == 0) {
                    this.string = getStringFromBuffer();
                    return Token.XMLEND;
                }
            } else {
                switch (c) {
                case '<':
                    addToString(c);
                    c = peekChar();
                    switch (c) {
                    case '!':
                        c = getChar(); // Skip !
                        addToString(c);
                        c = peekChar();
                        switch (c) {
                        case '-':
                            c = getChar(); // Skip -
                            addToString(c);
                            c = getChar();
                            if (c == '-') {
                                addToString(c);
                                if(!readXmlComment()) return Token.ERROR;
                            } else {
                                // throw away the string in progress
                                stringBufferTop = 0;
                                this.string = null;
                                parser.addError(""msg.XML.bad.form"");
                                return Token.ERROR;
                            }
                            break;
                        case '[':
                            c = getChar(); // Skip [
                            addToString(c);
                            if (getChar() == 'C' &&
                                getChar() == 'D' &&
                                getChar() == 'A' &&
                                getChar() == 'T' &&
                                getChar() == 'A' &&
                                getChar() == '[')
                            {
                                addToString('C');
                                addToString('D');
                                addToString('A');
                                addToString('T');
                                addToString('A');
                                addToString('[');
                                if (!readCDATA()) return Token.ERROR;

                            } else {
                                // throw away the string in progress
                                stringBufferTop = 0;
                                this.string = null;
                                parser.addError(""msg.XML.bad.form"");
                                return Token.ERROR;
                            }
                            break;
                        default:
                            if(!readEntity()) return Token.ERROR;
                            break;
                        }
                        break;
                    case '?':
                        c = getChar(); // Skip ?
                        addToString(c);
                        if (!readPI()) return Token.ERROR;
                        break;
                    case '/':
                        // End tag
                        c = getChar(); // Skip /
                        addToString(c);
                        if (xmlOpenTagsCount == 0) {
                            // throw away the string in progress
                            stringBufferTop = 0;
                            this.string = null;
                            parser.addError(""msg.XML.bad.form"");
                            return Token.ERROR;
                        }
                        xmlIsTagContent = true;
                        xmlOpenTagsCount--;
                        break;
                    default:
                        // Start tag
                        xmlIsTagContent = true;
                        xmlOpenTagsCount++;
                        break;
                    }
                    break;
                case '{':
                    ungetChar(c);
                    this.string = getStringFromBuffer();
                    return Token.XML;
                default:
                    addToString(c);
                    break;
                }
            }
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return Token.ERROR;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readQuotedString,"    private boolean readQuotedString(int quote) throws IOException
    {
        for (int c = getChar(); c != EOF_CHAR; c = getChar()) {
            addToString(c);
            if (c == quote) return true;
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readXmlComment,"    private boolean readXmlComment() throws IOException
    {
        for (int c = getChar(); c != EOF_CHAR;) {
            addToString(c);
            if (c == '-' && peekChar() == '-') {
                c = getChar();
                addToString(c);
                if (peekChar() == '>') {
                    c = getChar(); // Skip >
                    addToString(c);
                    return true;
                } else {
                    continue;
                }
            }
            c = getChar();
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readCDATA,"    private boolean readCDATA() throws IOException
    {
        for (int c = getChar(); c != EOF_CHAR;) {
            addToString(c);
            if (c == ']' && peekChar() == ']') {
                c = getChar();
                addToString(c);
                if (peekChar() == '>') {
                    c = getChar(); // Skip >
                    addToString(c);
                    return true;
                } else {
                    continue;
                }
            }
            c = getChar();
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readEntity,"    private boolean readEntity() throws IOException
    {
        int declTags = 1;
        for (int c = getChar(); c != EOF_CHAR; c = getChar()) {
            addToString(c);
            switch (c) {
            case '<':
                declTags++;
                break;
            case '>':
                declTags--;
                if (declTags == 0) return true;
                break;
            }
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readPI,"    private boolean readPI() throws IOException
    {
        for (int c = getChar(); c != EOF_CHAR; c = getChar()) {
            addToString(c);
            if (c == '?' && peekChar() == '>') {
                c = getChar(); // Skip >
                addToString(c);
                return true;
            }
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getStringFromBuffer,"    private String getStringFromBuffer()
    {
        return new String(stringBuffer, 0, stringBufferTop);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,addToString,"    private void addToString(int c)
    {
        int N = stringBufferTop;
        if (N == stringBuffer.length) {
            char[] tmp = new char[stringBuffer.length * 2];
            System.arraycopy(stringBuffer, 0, tmp, 0, N);
            stringBuffer = tmp;
        }
        stringBuffer[N] = (char)c;
        stringBufferTop = N + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,ungetChar,"    private void ungetChar(int c)
    {
        // can not unread past across line boundary
        if (ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\n')
            Kit.codeBug();
        ungetBuffer[ungetCursor++] = c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,matchChar,"    private boolean matchChar(int test) throws IOException
    {
        int c = getChar();
        if (c == test) {
            return true;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,peekChar,"    private int peekChar() throws IOException
    {
        int c = getChar();
        ungetChar(c);
        return c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getChar,"    private int getChar() throws IOException
    {
        if (ungetCursor != 0) {
            return ungetBuffer[--ungetCursor];
        }

        for(;;) {
            int c;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,skipLine,"    private void skipLine() throws IOException
    {
        // skip to end of line
        int c;
        while ((c = getChar()) != EOF_CHAR && c != '\n') { }
        ungetChar(c);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getOffset,"    final int getOffset()
    {
        int n = sourceCursor - lineStart;
        if (lineEndChar >= 0) { --n; }
        return n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getLine,"    final String getLine()
    {
        if (sourceString != null) {
            // String case",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,fillSourceBuffer,"    private boolean fillSourceBuffer() throws IOException
    {
        if (sourceString != null) Kit.codeBug();
        if (sourceEnd == sourceBuffer.length) {
            if (lineStart != 0) {
                System.arraycopy(sourceBuffer, lineStart, sourceBuffer, 0,
                                 sourceEnd - lineStart);
                sourceEnd -= lineStart;
                sourceCursor -= lineStart;
                lineStart = 0;
            } else {
                char[] tmp = new char[sourceBuffer.length * 2];
                System.arraycopy(sourceBuffer, 0, tmp, 0, sourceEnd);
                sourceBuffer = tmp;
            }
        }
        int n = sourceReader.read(sourceBuffer, sourceEnd,
                                  sourceBuffer.length - sourceEnd);
        if (n < 0) {
            return false;
        }
        sourceEnd += n;
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,tryReadTripleQuotedString,"    private boolean tryReadTripleQuotedString() throws IOException {
        // have to be kind of clever, because we don't want to
        // add to the overhead of tokenizing, but there are constraints
        // like ""once you've gotten a newline and put it back (ungotten it),
        // you can't put anything else back""

        // have seen one quote
        int c = getChar();
        if (c != '""') { ungetChar(c); return false; }
        // have seen two quotes
        c = getChar();
        if (c != '""') {
            ungetChar(c);
            this.string = (String)allStrings.intern("""");
            return true;
        }
        // have seen three quotes

        final boolean newPolicy = false;
        
        stringBufferTop = 0;

        boolean afterBackslash = false;
        boolean done = false;
        while (! done) {
            c = getChar();
            if (c == EOF_CHAR) {
                ungetChar(c);
                throw parser.reportError(""msg.unterminated.mstring.appjet"");
            }
            if (c == '""') {
                int quoteCount = 0;
                int quoteLimit = 3;
                if (newPolicy && ! afterBackslash)
                    quoteLimit = 5;
                while (c == '""' && quoteCount < quoteLimit) {
                    quoteCount++;
                    c = getChar();
                }
                ungetChar(c);

                if (afterBackslash) {
                    if (quoteCount < 3) addToString('\\');
                }
                else if (quoteCount >= 3) {
                    quoteCount -= 3;
                    done = true;
                }
                
                while (quoteCount > 0) {
                    addToString('""'); quoteCount--;
                }
                afterBackslash = false;
            }
            else {
                if (afterBackslash) {
                    addToString('\\');
                    afterBackslash = false;
                }
                if (c == '\\') {
                    afterBackslash = true;
                }
                else {
                    addToString(c);
                }
            }
        }

        String str = getStringFromBuffer();
        this.string = (String)allStrings.intern(str);
        
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,isEmpty,"    public boolean isEmpty() {
        return keyCount == 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,size,"    public int size() {
        return keyCount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,has,"    public boolean has(int key) {
        if (key < 0) Kit.codeBug();
        return 0 <= findIndex(key);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,getObject,"    public Object getObject(int key) {
        if (key < 0) Kit.codeBug();
        if (values != null) {
            int index = findIndex(key);
            if (0 <= index) {
                return values[index];
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,getInt,"    public int getInt(int key, int defaultValue) {
        if (key < 0) Kit.codeBug();
        int index = findIndex(key);
        if (0 <= index) {
            if (ivaluesShift != 0) {
                return keys[ivaluesShift + index];
            }
            return 0;
        }
        return defaultValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,getExistingInt,"    public int getExistingInt(int key) {
        if (key < 0) Kit.codeBug();
        int index = findIndex(key);
        if (0 <= index) {
            if (ivaluesShift != 0) {
                return keys[ivaluesShift + index];
            }
            return 0;
        }
        // Key must exist
        Kit.codeBug();
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,put,"    public void put(int key, Object value) {
        if (key < 0) Kit.codeBug();
        int index = ensureIndex(key, false);
        if (values == null) {
            values = new Object[1 << power];
        }
        values[index] = value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,put,"    public void put(int key, int value) {
        if (key < 0) Kit.codeBug();
        int index = ensureIndex(key, true);
        if (ivaluesShift == 0) {
            int N = 1 << power;
            // keys.length can be N * 2 after clear which set ivaluesShift to 0
            if (keys.length != N * 2) {
                int[] tmp = new int[N * 2];
                System.arraycopy(keys, 0, tmp, 0, N);
                keys = tmp;
            }
            ivaluesShift = N;
        }
        keys[ivaluesShift + index] = value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,remove,"    public void remove(int key) {
        if (key < 0) Kit.codeBug();
        int index = findIndex(key);
        if (0 <= index) {
            keys[index] = DELETED;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,clear,"    public void clear() {
        int N = 1 << power;
        if (keys != null) {
            for (int i = 0; i != N; ++i) {
                keys[i] = EMPTY;
            }
            if (values != null) {
                for (int i = 0; i != N; ++i) {
                    values[i] = null;
                }
            }
        }
        ivaluesShift = 0;
        keyCount = 0;
        occupiedCount = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,getKeys,"    public int[] getKeys() {
        int[] keys = this.keys;
        int n = keyCount;
        int[] result = new int[n];
        for (int i = 0; n != 0; ++i) {
            int entry = keys[i];
            if (entry != EMPTY && entry != DELETED) {
                result[--n] = entry;
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,tableLookupStep,"    private static int tableLookupStep(int fraction, int mask, int power) {
        int shift = 32 - 2 * power;
        if (shift >= 0) {
            return ((fraction >>> shift) & mask) | 1;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,findIndex,"    private int findIndex(int key) {
        int[] keys = this.keys;
        if (keys != null) {
            int fraction = key * A;
            int index = fraction >>> (32 - power);
            int entry = keys[index];
            if (entry == key) { return index; }
            if (entry != EMPTY) {
                // Search in table after first failed attempt
                int mask = (1 << power) - 1;
                int step = tableLookupStep(fraction, mask, power);
                int n = 0;
                do {
                    if (check) {
                        if (n >= occupiedCount) Kit.codeBug();
                        ++n;
                    }
                    index = (index + step) & mask;
                    entry = keys[index];
                    if (entry == key) { return index; }
                } while (entry != EMPTY);
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,insertNewKey,"    private int insertNewKey(int key) {
        if (check && occupiedCount != keyCount) Kit.codeBug();
        if (check && keyCount == 1 << power) Kit.codeBug();
        int[] keys = this.keys;
        int fraction = key * A;
        int index = fraction >>> (32 - power);
        if (keys[index] != EMPTY) {
            int mask = (1 << power) - 1;
            int step = tableLookupStep(fraction, mask, power);
            int firstIndex = index;
            do {
                if (check && keys[index] == DELETED) Kit.codeBug();
                index = (index + step) & mask;
                if (check && firstIndex == index) Kit.codeBug();
            } while (keys[index] != EMPTY);
        }
        keys[index] = key;
        ++occupiedCount;
        ++keyCount;
        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,rehashTable,"    private void rehashTable(boolean ensureIntSpace) {
        if (keys != null) {
            // Check if removing deleted entries would free enough space
            if (keyCount * 2 >= occupiedCount) {
                // Need to grow: less then half of deleted entries
                ++power;
            }
        }
        int N = 1 << power;
        int[] old = keys;
        int oldShift = ivaluesShift;
        if (oldShift == 0 && !ensureIntSpace) {
            keys = new int[N];
        }
        else {
            ivaluesShift = N; keys = new int[N * 2];
        }
        for (int i = 0; i != N; ++i) { keys[i] = EMPTY; }

        Object[] oldValues = values;
        if (oldValues != null) { values = new Object[N]; }

        int oldCount = keyCount;
        occupiedCount = 0;
        if (oldCount != 0) {
            keyCount = 0;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,ensureIndex,"    private int ensureIndex(int key, boolean intType) {
        int index = -1;
        int firstDeleted = -1;
        int[] keys = this.keys;
        if (keys != null) {
            int fraction = key * A;
            index = fraction >>> (32 - power);
            int entry = keys[index];
            if (entry == key) { return index; }
            if (entry != EMPTY) {
                if (entry == DELETED) { firstDeleted = index; }
                // Search in table after first failed attempt
                int mask = (1 << power) - 1;
                int step = tableLookupStep(fraction, mask, power);
                int n = 0;
                do {
                    if (check) {
                        if (n >= occupiedCount) Kit.codeBug();
                        ++n;
                    }
                    index = (index + step) & mask;
                    entry = keys[index];
                    if (entry == key) { return index; }
                    if (entry == DELETED && firstDeleted < 0) {
                        firstDeleted = index;
                    }
                } while (entry != EMPTY);
            }
        }
        // Inserting of new key
        if (check && keys != null && keys[index] != EMPTY)
            Kit.codeBug();
        if (firstDeleted >= 0) {
            index = firstDeleted;
        }
        else {
            // Need to consume empty entry: check occupation level
            if (keys == null || occupiedCount * 4 >= (1 << power) * 3) {
                // Too litle unused entries: rehash
                rehashTable(intType);
                keys = this.keys;
                return insertNewKey(key);
            }
            ++occupiedCount;
        }
        keys[index] = key;
        ++keyCount;
        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,writeObject,"    private void writeObject(ObjectOutputStream out)
        throws IOException
    {
        out.defaultWriteObject();

        int count = keyCount;
        if (count != 0) {
            boolean hasIntValues = (ivaluesShift != 0);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UintMap.java,readObject,"    private void readObject(ObjectInputStream in)
        throws IOException, ClassNotFoundException
    {
        in.defaultReadObject();

        int writtenKeyCount = keyCount;
        if (writtenKeyCount != 0) {
            keyCount = 0;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Undefined.java,readResolve,"    public Object readResolve()
    {
        return instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UniqueTag.java,readResolve,"    public Object readResolve()
    {
        switch (tagId) {
          case ID_NOT_FOUND:
            return NOT_FOUND;
          case ID_NULL_VALUE:
            return NULL_VALUE;
          case ID_DOUBLE_MARK:
            return DOUBLE_MARK;
        }
        throw new IllegalStateException(String.valueOf(tagId));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,UniqueTag.java,toString,"    public String toString()
    {
        String name;
        switch (tagId) {
          case ID_NOT_FOUND:
            name = ""NOT_FOUND"";
            break;
          case ID_NULL_VALUE:
            name = ""NULL_VALUE"";
            break;
          case ID_DOUBLE_MARK:
            name = ""DOUBLE_MARK"";
            break;
          default:
            throw Kit.codeBug();
        }
        return super.toString()+"": ""+name;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge.java,makeInstance,"    private static VMBridge makeInstance()
    {
        String[] classNames = {
            ""org.mozilla.javascript.VMBridge_custom"",
            ""org.mozilla.javascript.jdk15.VMBridge_jdk15"",
            ""org.mozilla.javascript.jdk13.VMBridge_jdk13"",
            ""org.mozilla.javascript.jdk11.VMBridge_jdk11"",
        };
        for (int i = 0; i != classNames.length; ++i) {
            String className = classNames[i];
            Class cl = Kit.classOrNull(className);
            if (cl != null) {
                VMBridge bridge = (VMBridge)Kit.newInstanceOrNull(cl);
                if (bridge != null) {
                    return bridge;
                }
            }
        }
        throw new IllegalStateException(""Failed to create VMBridge instance"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge.java,getInterfaceProxyHelper,"    protected Object getInterfaceProxyHelper(ContextFactory cf,
                                             Class[] interfaces)
    {
        throw Context.reportRuntimeError(
            ""VMBridge.getInterfaceProxyHelper is not supported"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge.java,newInterfaceProxy,"    protected Object newInterfaceProxy(Object proxyHelper,
                                       ContextFactory cf,
                                       InterfaceAdapter adapter,
                                       Object target,
                                       Scriptable topScope)
    {
        throw Context.reportRuntimeError(
            ""VMBridge.newInterfaceProxy is not supported"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge.java,getJavaIterator,"    public Iterator getJavaIterator(Context cx, Scriptable scope, Object obj) {
        if (obj instanceof Wrapper) {
            Object unwrapped = ((Wrapper) obj).unwrap();
            Iterator iterator = null;
            if (unwrapped instanceof Iterator)
                iterator = (Iterator) unwrapped;
            return iterator;
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,WrapFactory.java,wrap,"    public Object wrap(Context cx, Scriptable scope,
                       Object obj, Class staticType)
    {
        if (obj == null || obj == Undefined.instance
            || obj instanceof Scriptable)
        {
            return obj;
        }
        if (staticType != null && staticType.isPrimitive()) {
            if (staticType == Void.TYPE)
                return Undefined.instance;
            if (staticType == Character.TYPE)
                return new Integer(((Character) obj).charValue());
            return obj;
        }
        if (!isJavaPrimitiveWrap()) {
            if (obj instanceof String || obj instanceof Number
                || obj instanceof Boolean)
            {
                return obj;
            } else if (obj instanceof Character) {
                return String.valueOf(((Character)obj).charValue());
            }
        }
        Class cls = obj.getClass();
        if (cls.isArray()) {
            return NativeJavaArray.wrap(scope, obj);
        }
        return wrapAsJavaObject(cx, scope, obj, staticType);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,WrapFactory.java,wrapNewObject,"    public Scriptable wrapNewObject(Context cx, Scriptable scope, Object obj)
    {
        if (obj instanceof Scriptable) {
            return (Scriptable)obj;
        }
        Class cls = obj.getClass();
        if (cls.isArray()) {
            return NativeJavaArray.wrap(scope, obj);
        }
        return wrapAsJavaObject(cx, scope, obj, null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,WrapFactory.java,wrapAsJavaObject,"    public Scriptable wrapAsJavaObject(Context cx, Scriptable scope,
                                       Object javaObject, Class staticType)
    {
        Scriptable wrap;
        wrap = new NativeJavaObject(scope, javaObject, staticType);
        return wrap;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,WrapFactory.java,isJavaPrimitiveWrap,"    public final boolean isJavaPrimitiveWrap()
    {
        return javaPrimitiveWrap;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,WrapFactory.java,setJavaPrimitiveWrap,"    public final void setJavaPrimitiveWrap(boolean value)
    {
        Context cx = Context.getCurrentContext();
        if (cx != null && cx.isSealed()) {
            Context.onSealedMutation();
        }
        javaPrimitiveWrap = value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,WrappedException.java,getWrappedException,"    public Throwable getWrappedException()
    {
        return exception;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,WrappedException.java,unwrap,"    public Object unwrap()
    {
        return getWrappedException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,init,"    public static void init(Context cx, Scriptable scope, boolean sealed)
    {
        Continuation obj = new Continuation();
        obj.exportAsJSClass(MAX_PROTOTYPE_ID, scope, sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,getImplementation,"    public Object getImplementation()
    {
        return implementation;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,initImplementation,"    public void initImplementation(Object implementation)
    {
        this.implementation = implementation;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,getClassName,"    public String getClassName()
    {
        return ""Continuation"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        throw Context.reportRuntimeError(""Direct call is not supported"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        return Interpreter.restartContinuation(this, cx, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,isContinuationConstructor,"    public static boolean isContinuationConstructor(IdFunctionObject f)
    {
        if (f.hasTag(FTAG) && f.methodId() == Id_constructor) {
            return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=0; s=""constructor""; break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(FTAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(FTAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor:
            throw Context.reportRuntimeError(""Direct call is not supported"");
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Continuation.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:16:40 EDT
        L0: { id = 0; String X = null;
            if (s.length()==11) { X=""constructor"";id=Id_constructor; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk11.java,getThreadContextHelper,"    protected Object getThreadContextHelper()
    {
        return Thread.currentThread();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk11.java,getContext,"    protected Context getContext(Object contextHelper)
    {
        Thread t = (Thread)contextHelper;
        return (Context)threadsWithContext.get(t);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk11.java,setContext,"    protected void setContext(Object contextHelper, Context cx)
    {
        Thread t = (Thread)contextHelper;
        if (cx == null) {
            // Allow to garbage collect thread reference",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk11.java,getCurrentThreadClassLoader,"    protected ClassLoader getCurrentThreadClassLoader()
    {
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk11.java,tryToMakeAccessible,"    protected boolean tryToMakeAccessible(Object accessibleObject)
    {
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk11.java,isVarArgs,"    protected boolean isVarArgs(Member member) {
      return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,getThreadContextHelper,"    protected Object getThreadContextHelper()
    {
        // To make subsequent batch calls to getContext/setContext faster
        // associate permanently one element array with contextLocal
        // so getContext/setContext would need just to read/write the first
        // array element.
        // Note that it is necessary to use Object[], not Context[] to allow
        // garbage collection of Rhino classes. For details see comments
        // by Attila Szegedi in
        // https://bugzilla.mozilla.org/show_bug.cgi?id=281067#c5

        Object[] storage = (Object[])contextLocal.get();
        if (storage == null) {
            storage = new Object[1];
            contextLocal.set(storage);
        }
        return storage;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,getContext,"    protected Context getContext(Object contextHelper)
    {
        Object[] storage = (Object[])contextHelper;
        return (Context)storage[0];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,setContext,"    protected void setContext(Object contextHelper, Context cx)
    {
        Object[] storage = (Object[])contextHelper;
        storage[0] = cx;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,getCurrentThreadClassLoader,"    protected ClassLoader getCurrentThreadClassLoader()
    {
        return Thread.currentThread().getContextClassLoader();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,tryToMakeAccessible,"    protected boolean tryToMakeAccessible(Object accessibleObject)
    {
        if (!(accessibleObject instanceof AccessibleObject)) {
            return false;
        }
        AccessibleObject accessible = (AccessibleObject)accessibleObject;
        if (accessible.isAccessible()) {
            return true;
        }
        try {
            accessible.setAccessible(true);
        } catch (Exception ex) { }

        return accessible.isAccessible();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,getInterfaceProxyHelper,"    protected Object getInterfaceProxyHelper(ContextFactory cf,
                                             Class[] interfaces)
    {
        // XXX: How to handle interfaces array withclasses from different
        // class loaders? Using cf.getApplicationClassLoader() ?
        ClassLoader loader = interfaces[0].getClassLoader();
        Class cl = Proxy.getProxyClass(loader, interfaces);
        Constructor c;
        try {
            c = cl.getConstructor(new Class[] { InvocationHandler.class });
        } catch (NoSuchMethodException ex) {
            // Should not happen
            throw Kit.initCause(new IllegalStateException(), ex);
        }
        return c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,newInterfaceProxy,"    protected Object newInterfaceProxy(Object proxyHelper,
                                       final ContextFactory cf,
                                       final InterfaceAdapter adapter,
                                       final Object target,
                                       final Scriptable topScope)
    {
        Constructor c = (Constructor)proxyHelper;

        InvocationHandler handler = new InvocationHandler() {
                public Object invoke(Object proxy,
                                     Method method,
                                     Object[] args)
                {
                    return adapter.invoke(cf, target, topScope, method, args);
                }
            };
        Object proxy;
        try {
            proxy = c.newInstance(new Object[] { handler });
        } catch (InvocationTargetException ex) {
            throw Context.throwAsScriptRuntimeEx(ex);
        } catch (IllegalAccessException ex) {
            // Shouls not happen
            throw Kit.initCause(new IllegalStateException(), ex);
        } catch (InstantiationException ex) {
            // Shouls not happen
            throw Kit.initCause(new IllegalStateException(), ex);
        }
        return proxy;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,invoke,"                public Object invoke(Object proxy,
                                     Method method,
                                     Object[] args)
                {
                    return adapter.invoke(cf, target, topScope, method, args);
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk13.java,isVarArgs,"    protected boolean isVarArgs(Member member) {
      return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk15.java,isVarArgs,"    public boolean isVarArgs(Member member) {
        if (member instanceof Method)
            return ((Method) member).isVarArgs();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,VMBridge_jdk15.java,getJavaIterator,"    public Iterator getJavaIterator(Context cx, Scriptable scope, Object obj) {
        if (obj instanceof Wrapper) {
            Object unwrapped = ((Wrapper) obj).unwrap();
            Iterator iterator = null;
            if (unwrapped instanceof Iterator)
                iterator = (Iterator) unwrapped;
            if (unwrapped instanceof Iterable)
                iterator = ((Iterable)unwrapped).iterator();
            return iterator;
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,reduceToArray,"        private static Block[] reduceToArray(ObjToIntMap map)
        {
            Block[] result = null;
            if (!map.isEmpty()) {
                result = new Block[map.size()];
                int i = 0;
                ObjToIntMap.Iterator iter = map.newIterator();
                for (iter.start(); !iter.done(); iter.next()) {
                    FatBlock fb = (FatBlock)(iter.getKey());
                    result[i++] = fb.realBlock;
                }
            }
            return result;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,addSuccessor,"        void addSuccessor(FatBlock b)  { successors.put(b, 0); }
        void addPredecessor(FatBlock b)  { predecessors.put(b, 0); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,addPredecessor,"        void addPredecessor(FatBlock b)  { predecessors.put(b, 0); }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,getSuccessors,"        Block[] getSuccessors() { return reduceToArray(successors); }
        Block[] getPredecessors() { return reduceToArray(predecessors); }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,getPredecessors,"        Block[] getPredecessors() { return reduceToArray(predecessors); }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,runFlowAnalyzes,"    static void runFlowAnalyzes(OptFunctionNode fn, Node[] statementNodes)
    {
        int paramCount = fn.fnode.getParamCount();
        int varCount = fn.fnode.getParamAndVarCount();
        int[] varTypes = new int[varCount];
        // If the variable is a parameter, it could have any type.
        for (int i = 0; i != paramCount; ++i) {
            varTypes[i] = Optimizer.AnyType;
        }
        // If the variable is from a ""var"" statement, its typeEvent will be set
        // when we see the setVar node.
        for (int i = paramCount; i != varCount; ++i) {
            varTypes[i] = Optimizer.NoType;
        }

        Block[] theBlocks = buildBlocks(statementNodes);

        if (DEBUG) {
            ++debug_blockCount;
            System.out.println(""-------------------""+fn.fnode.getFunctionName()+""  ""+debug_blockCount+""--------"");
            System.out.println(toString(theBlocks, statementNodes));
        }

        reachingDefDataFlow(fn, statementNodes, theBlocks, varTypes);
        typeFlow(fn, statementNodes, theBlocks, varTypes);

        if (DEBUG) {
            for (int i = 0; i < theBlocks.length; i++) {
                System.out.println(""For block "" + theBlocks[i].itsBlockID);
                theBlocks[i].printLiveOnEntrySet(fn);
            }
            System.out.println(""Variable Table, size = "" + varCount);
            for (int i = 0; i != varCount; i++) {
                System.out.println(""[""+i+""] type: ""+varTypes[i]);
            }
        }

        for (int i = paramCount; i != varCount; i++) {
            if (varTypes[i] == Optimizer.NumberType) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,buildBlocks,"    private static Block[] buildBlocks(Node[] statementNodes)
    {
            // a mapping from each target node to the block it begins
        Hashtable theTargetBlocks = new Hashtable();
        ObjArray theBlocks = new ObjArray();

            // there's a block that starts at index 0
        int beginNodeIndex = 0;

        for (int i = 0; i < statementNodes.length; i++) {
            switch (statementNodes[i].getType()) {
                case Token.TARGET :
                    {
                        if (i != beginNodeIndex) {
                            FatBlock fb = newFatBlock(beginNodeIndex, i - 1);
                            if (statementNodes[beginNodeIndex].getType()
                                                        == Token.TARGET)
                                theTargetBlocks.put(statementNodes[beginNodeIndex], fb);
                            theBlocks.add(fb);
                             // start the next block at this node
                            beginNodeIndex = i;
                        }
                    }
                    break;
                case Token.IFNE :
                case Token.IFEQ :
                case Token.GOTO :
                    {
                        FatBlock fb = newFatBlock(beginNodeIndex, i);
                        if (statementNodes[beginNodeIndex].getType()
                                                       == Token.TARGET)
                            theTargetBlocks.put(statementNodes[beginNodeIndex], fb);
                        theBlocks.add(fb);
                            // start the next block at the next node
                        beginNodeIndex = i + 1;
                    }
                    break;
            }
        }

        if (beginNodeIndex != statementNodes.length) {
            FatBlock fb = newFatBlock(beginNodeIndex, statementNodes.length - 1);
            if (statementNodes[beginNodeIndex].getType() == Token.TARGET)
                theTargetBlocks.put(statementNodes[beginNodeIndex], fb);
            theBlocks.add(fb);
        }

        // build successor and predecessor links

        for (int i = 0; i < theBlocks.size(); i++) {
            FatBlock fb = (FatBlock)(theBlocks.get(i));

            Node blockEndNode = statementNodes[fb.realBlock.itsEndNodeIndex];
            int blockEndNodeType = blockEndNode.getType();

            if ((blockEndNodeType != Token.GOTO)
                                         && (i < (theBlocks.size() - 1))) {
                FatBlock fallThruTarget = (FatBlock)(theBlocks.get(i + 1));
                fb.addSuccessor(fallThruTarget);
                fallThruTarget.addPredecessor(fb);
            }


            if ( (blockEndNodeType == Token.IFNE)
                        || (blockEndNodeType == Token.IFEQ)
                                || (blockEndNodeType == Token.GOTO) ) {
                Node target = ((Node.Jump)blockEndNode).target;
                FatBlock branchTargetBlock
                                    = (FatBlock)(theTargetBlocks.get(target));
                target.putProp(Node.TARGETBLOCK_PROP,
                                           branchTargetBlock.realBlock);
                fb.addSuccessor(branchTargetBlock);
                branchTargetBlock.addPredecessor(fb);
            }
        }

        Block[] result = new Block[theBlocks.size()];

        for (int i = 0; i < theBlocks.size(); i++) {
            FatBlock fb = (FatBlock)(theBlocks.get(i));
            Block b = fb.realBlock;
            b.itsSuccessors = fb.getSuccessors();
            b.itsPredecessors = fb.getPredecessors();
            b.itsBlockID = i;
            result[i] = b;
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,newFatBlock,"    private static FatBlock newFatBlock(int startNodeIndex, int endNodeIndex)
    {
        FatBlock fb = new FatBlock();
        fb.realBlock = new Block(startNodeIndex, endNodeIndex);
        return fb;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,toString,"    private static String toString(Block[] blockList, Node[] statementNodes)
    {
        if (!DEBUG) return null;

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);

        pw.println(blockList.length + "" Blocks"");
        for (int i = 0; i < blockList.length; i++) {
            Block b = blockList[i];
            pw.println(""#"" + b.itsBlockID);
            pw.println(""from "" + b.itsStartNodeIndex
                            + "" ""
                            + statementNodes[b.itsStartNodeIndex].toString());
            pw.println(""thru "" + b.itsEndNodeIndex
                            + "" ""
                            + statementNodes[b.itsEndNodeIndex].toString());
            pw.print(""Predecessors "");
            if (b.itsPredecessors != null) {
                for (int j = 0; j < b.itsPredecessors.length; j++)
                    pw.print(b.itsPredecessors[j].itsBlockID + "" "");
                pw.println();
            }
            else
                pw.println(""none"");
            pw.print(""Successors "");
            if (b.itsSuccessors != null) {
                for (int j = 0; j < b.itsSuccessors.length; j++)
                    pw.print(b.itsSuccessors[j].itsBlockID + "" "");
                pw.println();
            }
            else
                pw.println(""none"");
        }
        return sw.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,reachingDefDataFlow,"    private static void reachingDefDataFlow(OptFunctionNode fn, Node[] statementNodes, Block theBlocks[], int[] varTypes)
    {
/*
    initialize the liveOnEntry and liveOnExit sets, then discover the variables
    that are def'd by each function, and those that are used before being def'd
    (hence liveOnEntry)
*/
        for (int i = 0; i < theBlocks.length; i++) {
            theBlocks[i].initLiveOnEntrySets(fn, statementNodes);
        }
/*
    this visits every block starting at the last, re-adding the predecessors of
    any block whose inputs change as a result of the dataflow.
    REMIND, better would be to visit in CFG postorder
*/
        boolean visit[] = new boolean[theBlocks.length];
        boolean doneOnce[] = new boolean[theBlocks.length];
        int vIndex = theBlocks.length - 1;
        boolean needRescan = false;
        visit[vIndex] = true;
        while (true) {
            if (visit[vIndex] || !doneOnce[vIndex]) {
                doneOnce[vIndex] = true;
                visit[vIndex] = false;
                if (theBlocks[vIndex].doReachedUseDataFlow()) {
                    Block pred[] = theBlocks[vIndex].itsPredecessors;
                    if (pred != null) {
                        for (int i = 0; i < pred.length; i++) {
                            int index = pred[i].itsBlockID;
                            visit[index] = true;
                            needRescan |= (index > vIndex);
                        }
                    }
                }
            }
            if (vIndex == 0) {
                if (needRescan) {
                    vIndex = theBlocks.length - 1;
                    needRescan = false;
                }
                else
                    break;
            }
            else
                vIndex--;
        }
/*
        if any variable is live on entry to block 0, we have to mark it as
        not jRegable - since it means that someone is trying to access the
        'undefined'-ness of that variable.
*/

        theBlocks[0].markAnyTypeVariables(varTypes);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,typeFlow,"    private static void typeFlow(OptFunctionNode fn, Node[] statementNodes, Block theBlocks[], int[] varTypes)
    {
        boolean visit[] = new boolean[theBlocks.length];
        boolean doneOnce[] = new boolean[theBlocks.length];
        int vIndex = 0;
        boolean needRescan = false;
        visit[vIndex] = true;
        while (true) {
            if (visit[vIndex] || !doneOnce[vIndex]) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,assignType,"    private static boolean assignType(int[] varTypes, int index, int type)
    {
        return type != (varTypes[index] |= type);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,markAnyTypeVariables,"    private void markAnyTypeVariables(int[] varTypes)
    {
        for (int i = 0; i != varTypes.length; i++) {
            if (itsLiveOnEntrySet.test(i)) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,lookForVariableAccess,"    private void lookForVariableAccess(OptFunctionNode fn, Node n)
    {
        switch (n.getType()) {
            case Token.DEC :",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,initLiveOnEntrySets,"    private void initLiveOnEntrySets(OptFunctionNode fn, Node[] statementNodes)
    {
        int listLength = fn.getVarCount();
        itsUseBeforeDefSet = new DataFlowBitSet(listLength);
        itsNotDefSet = new DataFlowBitSet(listLength);
        itsLiveOnEntrySet = new DataFlowBitSet(listLength);
        itsLiveOnExitSet = new DataFlowBitSet(listLength);
        for (int i = itsStartNodeIndex; i <= itsEndNodeIndex; i++) {
            Node n = statementNodes[i];
            lookForVariableAccess(fn, n);
        }
        itsNotDefSet.not();         // truth in advertising
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,doReachedUseDataFlow,"    private boolean doReachedUseDataFlow()
    {
        itsLiveOnExitSet.clear();
        if (itsSuccessors != null)
            for (int i = 0; i < itsSuccessors.length; i++)
                itsLiveOnExitSet.or(itsSuccessors[i].itsLiveOnEntrySet);
        return itsLiveOnEntrySet.df2(itsLiveOnExitSet,
                                            itsUseBeforeDefSet, itsNotDefSet);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,findExpressionType,"    private static int findExpressionType(OptFunctionNode fn, Node n,
                                          int[] varTypes)
    {
        switch (n.getType()) {
          case Token.NUMBER :
              return Optimizer.NumberType;

          case Token.CALL :
          case Token.NEW :
          case Token.REF_CALL :
              return Optimizer.AnyType;

          case Token.GETELEM :
             return Optimizer.AnyType;

          case Token.GETVAR :
              return varTypes[fn.getVarIndex(n)];

          case Token.INC :
          case Token.DEC :
          case Token.DIV:
          case Token.MOD:
          case Token.BITOR:
          case Token.BITXOR:
          case Token.BITAND:
          case Token.LSH:
          case Token.RSH:
          case Token.URSH:
          case Token.SUB :
              return Optimizer.NumberType;
          
          case Token.ARRAYLIT:
          case Token.OBJECTLIT:
              return Optimizer.AnyType; // XXX: actually, we know it's not
                                        // number, but no type yet for that

          case Token.ADD : {
              // if the lhs & rhs are known to be numbers, we can be sure that's
              // the result, otherwise it could be a string.
              Node child = n.getFirstChild();
              int lType = findExpressionType(fn, child, varTypes);
              int rType = findExpressionType(fn, child.getNext(), varTypes);
              return lType | rType;    // we're not distinguishing strings yet
          }
        }

        Node child = n.getFirstChild();
        if (child == null) {
            return Optimizer.AnyType;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,findDefPoints,"    private static boolean findDefPoints(OptFunctionNode fn, Node n,
                                         int[] varTypes)
    {
        boolean result = false;
        Node child = n.getFirstChild();
        switch (n.getType()) {
          default :
            while (child != null) {
                result |= findDefPoints(fn, child, varTypes);
                child = child.getNext();
            }
            break;
          case Token.DEC :
          case Token.INC :
            if (child.getType() == Token.GETVAR) {
                // theVar is a Number now
                int i = fn.getVarIndex(child);
                result |= assignType(varTypes, i, Optimizer.NumberType);
            }
            break;
          case Token.SETPROP :
          case Token.SETPROP_OP :
            if (child.getType() == Token.GETVAR) {
                int i = fn.getVarIndex(child);
                assignType(varTypes, i, Optimizer.AnyType);
            }
            while (child != null) {
                result |= findDefPoints(fn, child, varTypes);
                child = child.getNext();
            }
            break;
          case Token.SETVAR : {
            Node rValue = child.getNext();
            int theType = findExpressionType(fn, rValue, varTypes);
            int i = fn.getVarIndex(n);
            result |= assignType(varTypes, i, theType);
            break;
          }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,doTypeFlow,"    private boolean doTypeFlow(OptFunctionNode fn, Node[] statementNodes,
                               int[] varTypes)
    {
        boolean changed = false;

        for (int i = itsStartNodeIndex; i <= itsEndNodeIndex; i++) {
            Node n = statementNodes[i];
            if (n != null)
                changed |= findDefPoints(fn, n, varTypes);
        }

        return changed;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Block.java,printLiveOnEntrySet,"    private void printLiveOnEntrySet(OptFunctionNode fn)
    {
        if (DEBUG) {
            for (int i = 0; i < fn.getVarCount(); i++) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,setMainMethodClass,"    public void setMainMethodClass(String className)
    {
        // XXX Should this check for a valid class name?
        mainMethodClassName = className;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,getMainMethodClass,"    public String getMainMethodClass()
    {
        return mainMethodClassName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,getCompilerEnv,"    public CompilerEnvirons getCompilerEnv()
    {
        return compilerEnv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,getTargetExtends,"    public Class getTargetExtends()
    {
        return targetExtends;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,setTargetExtends,"    public void setTargetExtends(Class extendsClass)
    {
        targetExtends = extendsClass;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,getTargetImplements,"    public Class[] getTargetImplements()
    {
        return targetImplements == null ? null : (Class[])targetImplements.clone();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,setTargetImplements,"    public void setTargetImplements(Class[] implementsClasses)
    {
        targetImplements = implementsClasses == null ? null : (Class[])implementsClasses.clone();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,makeAuxiliaryClassName,"    protected String makeAuxiliaryClassName(String mainClassName,
                                            String auxMarker)
    {
        return mainClassName+auxMarker;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ClassCompiler.java,compileToClassFiles,"    public Object[] compileToClassFiles(String source,
                                        String sourceLocation,
                                        int lineno,
                                        String mainClassName)
    {
	/*APPJET*/
        Parser p =
	    InformativeParser.makeParser(compilerEnv,
					 compilerEnv.getErrorReporter());
        ScriptOrFnNode tree = p.parse(source, sourceLocation, lineno);
        String encodedSource = p.getEncodedSource();

        Class superClass = getTargetExtends();
        Class[] interfaces = getTargetImplements();
        String scriptClassName;
        boolean isPrimary = (interfaces == null && superClass == null);
        if (isPrimary) {
            scriptClassName = mainClassName;
        } else {
            scriptClassName = makeAuxiliaryClassName(mainClassName, ""1"");
        }

        Codegen codegen = new Codegen();
        codegen.setMainMethodClass(mainMethodClassName);
        byte[] scriptClassBytes
            = codegen.compileToClassFile(compilerEnv, scriptClassName,
                                         tree, encodedSource,
                                         false);

        if (isPrimary) {
            return new Object[] { scriptClassName, scriptClassBytes };
        }
        int functionCount = tree.getFunctionCount();
        ObjToIntMap functionNames = new ObjToIntMap(functionCount);
        for (int i = 0; i != functionCount; ++i) {
            FunctionNode ofn = tree.getFunctionNode(i);
            String name = ofn.getFunctionName();
            if (name != null && name.length() != 0) {
                functionNames.put(name, ofn.getParamCount());
            }
        }
        if (superClass == null) {
            superClass = ScriptRuntime.ObjectClass;
        }
        byte[] mainClassBytes
            = JavaAdapter.createAdapterCode(
                functionNames, mainClassName,
                superClass, interfaces, scriptClassName);

        return new Object[] { mainClassName, mainClassBytes,
                              scriptClassName, scriptClassBytes };",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,captureStackInfo,"    public void captureStackInfo(RhinoException ex) {
        throw new UnsupportedOperationException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getSourcePositionFromStack,"    public String getSourcePositionFromStack(Context cx, int[] linep) {
        throw new UnsupportedOperationException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getPatchedStack,"    public String getPatchedStack(RhinoException ex, String nativeStackTrace) {
        throw new UnsupportedOperationException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getScriptStack,"    public List getScriptStack(RhinoException ex) {
        throw new UnsupportedOperationException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,setEvalScriptFlag,"    public void setEvalScriptFlag(Script script) {
        throw new UnsupportedOperationException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,compile,"    public Object compile(CompilerEnvirons compilerEnv,
                          ScriptOrFnNode tree,
                          String encodedSource,
                          boolean returnFunction)
    {
        int serial;
        synchronized (globalLock) {
            serial = ++globalSerialClassCounter;
        }
        String mainClassName = ""org.mozilla.javascript.gen.c""+serial;

        byte[] mainClassBytes = compileToClassFile(compilerEnv, mainClassName,
                                                   tree, encodedSource,
                                                   returnFunction);

        return new Object[] { mainClassName, mainClassBytes };
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,createScriptObject,"    public Script createScriptObject(Object bytecode,
                                     Object staticSecurityDomain)
    {
        Class cl = defineClass(bytecode, staticSecurityDomain);

        Script script;
        try {
            script = (Script)cl.newInstance();
        } catch (Exception ex) {
            throw new RuntimeException
                (""Unable to instantiate compiled class:""+ex.toString());
        }
        return script;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,createFunctionObject,"    public Function createFunctionObject(Context cx, Scriptable scope,
                                         Object bytecode,
                                         Object staticSecurityDomain)
    {
        Class cl = defineClass(bytecode, staticSecurityDomain);

        NativeFunction f;
        try {
            Constructor ctor = cl.getConstructors()[0];
            Object[] initArgs = { scope, cx, new Integer(0) };
            f = (NativeFunction)ctor.newInstance(initArgs);
        } catch (Exception ex) {
            throw new RuntimeException
                (""Unable to instantiate compiled class:""+ex.toString());
        }
        return f;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,defineClass,"    private Class defineClass(Object bytecode,
                              Object staticSecurityDomain)
    {
        Object[] nameBytesPair = (Object[])bytecode;
        String className = (String)nameBytesPair[0];
        byte[] classBytes = (byte[])nameBytesPair[1];

        // The generated classes in this case refer only to Rhino classes
        // which must be accessible through this class loader
        ClassLoader rhinoLoader = getClass().getClassLoader();
        GeneratedClassLoader loader;
        loader = SecurityController.createLoader(rhinoLoader,
                                                 staticSecurityDomain);
        Exception e;
        try {
            Class cl = loader.defineClass(className, classBytes);
            loader.linkClass(cl);
            return cl;
        } catch (SecurityException x) {
            e = x;
        } catch (IllegalArgumentException x) {
            e = x;
        }
        throw new RuntimeException(""Malformed optimizer package "" + e);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,compileToClassFile,"    byte[] compileToClassFile(CompilerEnvirons compilerEnv,
                              String mainClassName,
                              ScriptOrFnNode scriptOrFn,
                              String encodedSource,
                              boolean returnFunction)
    {
        this.compilerEnv = compilerEnv;

        transform(scriptOrFn);

        if (Token.printTrees) {
            /*APPJET*///System.out.println(scriptOrFn.toStringTree(scriptOrFn));
        }

        if (returnFunction) {
            scriptOrFn = scriptOrFn.getFunctionNode(0);
        }

        initScriptOrFnNodesData(scriptOrFn);

        this.mainClassName = mainClassName;
        this.mainClassSignature
            = ClassFileWriter.classNameToSignature(mainClassName);

        try {
            return generateCode(encodedSource);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,reportClassFileFormatException,"    private RuntimeException reportClassFileFormatException(
        ScriptOrFnNode scriptOrFn,
        String message)
    {
        String msg = scriptOrFn instanceof FunctionNode
        ? ScriptRuntime.getMessage2(""msg.while.compiling.fn"",
            ((FunctionNode)scriptOrFn).getFunctionName(), message)
        : ScriptRuntime.getMessage1(""msg.while.compiling.script"", message);
        return Context.reportRuntimeError(msg, scriptOrFn.getSourceName(),
            scriptOrFn.getLineno(), null, 0);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,transform,"    private void transform(ScriptOrFnNode tree)
    {
        initOptFunctions_r(tree);

        int optLevel = compilerEnv.getOptimizationLevel();

        Hashtable possibleDirectCalls = null;
        if (optLevel > 0) {
           /*
            * Collect all of the contained functions into a hashtable
            * so that the call optimizer can access the class name & parameter
            * count for any call it encounters
            */
            if (tree.getType() == Token.SCRIPT) {
                int functionCount = tree.getFunctionCount();
                for (int i = 0; i != functionCount; ++i) {
                    OptFunctionNode ofn = OptFunctionNode.get(tree, i);
                    if (ofn.fnode.getFunctionType()
                        == FunctionNode.FUNCTION_STATEMENT)
                    {
                        String name = ofn.fnode.getFunctionName();
                        if (name.length() != 0) {
                            if (possibleDirectCalls == null) {
                                possibleDirectCalls = new Hashtable();
                            }
                            possibleDirectCalls.put(name, ofn);
                        }
                    }
                }
            }
        }

        if (possibleDirectCalls != null) {
            directCallTargets = new ObjArray();
        }

        OptTransformer ot = new OptTransformer(possibleDirectCalls,
                                               directCallTargets);
        ot.transform(tree);

        if (optLevel > 0) {
            (new Optimizer()).optimize(tree);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,initOptFunctions_r,"    private static void initOptFunctions_r(ScriptOrFnNode scriptOrFn)
    {
        for (int i = 0, N = scriptOrFn.getFunctionCount(); i != N; ++i) {
            FunctionNode fn = scriptOrFn.getFunctionNode(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,initScriptOrFnNodesData,"    private void initScriptOrFnNodesData(ScriptOrFnNode scriptOrFn)
    {
        ObjArray x = new ObjArray();
        collectScriptOrFnNodes_r(scriptOrFn, x);

        int count = x.size();
        scriptOrFnNodes = new ScriptOrFnNode[count];
        x.toArray(scriptOrFnNodes);

        scriptOrFnIndexes = new ObjToIntMap(count);
        for (int i = 0; i != count; ++i) {
            scriptOrFnIndexes.put(scriptOrFnNodes[i], i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,collectScriptOrFnNodes_r,"    private static void collectScriptOrFnNodes_r(ScriptOrFnNode n,
                                                 ObjArray x)
    {
        x.add(n);
        int nestedCount = n.getFunctionCount();
        for (int i = 0; i != nestedCount; ++i) {
            collectScriptOrFnNodes_r(n.getFunctionNode(i), x);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateCode,"    private byte[] generateCode(String encodedSource)
    {
        boolean hasScript = (scriptOrFnNodes[0].getType() == Token.SCRIPT);
        boolean hasFunctions = (scriptOrFnNodes.length > 1 || !hasScript);

        String sourceFile = null;
        if (compilerEnv.isGenerateDebugInfo()) {
            sourceFile = scriptOrFnNodes[0].getSourceName();
        }

        ClassFileWriter cfw = new ClassFileWriter(mainClassName,
                                                  SUPER_CLASS_NAME,
                                                  sourceFile);
        cfw.addField(ID_FIELD_NAME, ""I"",
                     ClassFileWriter.ACC_PRIVATE);
        cfw.addField(DIRECT_CALL_PARENT_FIELD, mainClassSignature,
                     ClassFileWriter.ACC_PRIVATE);
        cfw.addField(REGEXP_ARRAY_FIELD_NAME, REGEXP_ARRAY_FIELD_TYPE,
                     ClassFileWriter.ACC_PRIVATE);

        if (hasFunctions) {
            generateFunctionConstructor(cfw);
        }

        if (hasScript) {
            cfw.addInterface(""org/mozilla/javascript/Script"");
            generateScriptCtor(cfw);
            generateMain(cfw);
            generateExecute(cfw);
        }

        generateCallMethod(cfw);
        generateResumeGenerator(cfw);

        generateNativeFunctionOverrides(cfw, encodedSource);

        int count = scriptOrFnNodes.length;
        for (int i = 0; i != count; ++i) {
            ScriptOrFnNode n = scriptOrFnNodes[i];

            BodyCodegen bodygen = new BodyCodegen();
            bodygen.cfw = cfw;
            bodygen.codegen = this;
            bodygen.compilerEnv = compilerEnv;
            bodygen.scriptOrFn = n;
            bodygen.scriptOrFnIndex = i;

            try {
                bodygen.generateBodyCode();
            } catch (ClassFileWriter.ClassFileFormatException e) {
                throw reportClassFileFormatException(n, e.getMessage());
            }

            if (n.getType() == Token.FUNCTION) {
                OptFunctionNode ofn = OptFunctionNode.get(n);
                generateFunctionInit(cfw, ofn);
                if (ofn.isTargetOfDirectCall()) {
                    emitDirectConstructor(cfw, ofn);
                }
            }
        }

        if (directCallTargets != null) {
            int N = directCallTargets.size();
            for (int j = 0; j != N; ++j) {
                cfw.addField(getDirectTargetFieldName(j),
                             mainClassSignature,
                             ClassFileWriter.ACC_PRIVATE);
            }
        }

        emitRegExpInit(cfw);
        emitConstantDudeInitializers(cfw);

        return cfw.toByteArray();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,emitDirectConstructor,"    private void emitDirectConstructor(ClassFileWriter cfw,
                                       OptFunctionNode ofn)
    {
/*
    we generate ..
        Scriptable directConstruct(<directCallArgs>) {
            Scriptable newInstance = createObject(cx, scope);
            Object val = <body-name>(cx, scope, newInstance, <directCallArgs>);
            if (val instanceof Scriptable) {
                return (Scriptable) val;
            }
            return newInstance;
        }
*/
        cfw.startMethod(getDirectCtorName(ofn.fnode),
                        getBodyMethodSignature(ofn.fnode),
                        (short)(ClassFileWriter.ACC_STATIC
                                | ClassFileWriter.ACC_PRIVATE));

        int argCount = ofn.fnode.getParamCount();
        int firstLocal = (4 + argCount * 3) + 1;

        cfw.addALoad(0); // this
        cfw.addALoad(1); // cx
        cfw.addALoad(2); // scope
        cfw.addInvoke(ByteCode.INVOKEVIRTUAL,
                      ""org/mozilla/javascript/BaseFunction"",
                      ""createObject"",
                      ""(Lorg/mozilla/javascript/Context;""
                      +""Lorg/mozilla/javascript/Scriptable;""
                      +"")Lorg/mozilla/javascript/Scriptable;"");
        cfw.addAStore(firstLocal);

        cfw.addALoad(0);
        cfw.addALoad(1);
        cfw.addALoad(2);
        cfw.addALoad(firstLocal);
        for (int i = 0; i < argCount; i++) {
            cfw.addALoad(4 + (i * 3));
            cfw.addDLoad(5 + (i * 3));
        }
        cfw.addALoad(4 + argCount * 3);
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      mainClassName,
                      getBodyMethodName(ofn.fnode),
                      getBodyMethodSignature(ofn.fnode));
        int exitLabel = cfw.acquireLabel();
        cfw.add(ByteCode.DUP); // make a copy of direct call result
        cfw.add(ByteCode.INSTANCEOF, ""org/mozilla/javascript/Scriptable"");
        cfw.add(ByteCode.IFEQ, exitLabel);
        // cast direct call result
        cfw.add(ByteCode.CHECKCAST, ""org/mozilla/javascript/Scriptable"");
        cfw.add(ByteCode.ARETURN);
        cfw.markLabel(exitLabel);

        cfw.addALoad(firstLocal);
        cfw.add(ByteCode.ARETURN);

        cfw.stopMethod((short)(firstLocal + 1));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,isGenerator,"    static boolean isGenerator(ScriptOrFnNode node)
    {
        return (node.getType() == Token.FUNCTION ) &&
                ((FunctionNode)node).isGenerator();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateResumeGenerator,"    private void generateResumeGenerator(ClassFileWriter cfw)
    {
        boolean hasGenerators = false;
        for (int i=0; i < scriptOrFnNodes.length; i++) {
            if (isGenerator(scriptOrFnNodes[i]))
            	hasGenerators = true;
        }

        // if there are no generators defined, we don't implement a
        // resumeGenerator(). The base class provides a default implementation. 
        if (!hasGenerators)
            return;

        cfw.startMethod(""resumeGenerator"",
                        ""(Lorg/mozilla/javascript/Context;"" +
                        ""Lorg/mozilla/javascript/Scriptable;"" +
                        ""ILjava/lang/Object;"" +
                        ""Ljava/lang/Object;)Ljava/lang/Object;"",
                        (short)(ClassFileWriter.ACC_PUBLIC
                                | ClassFileWriter.ACC_FINAL));

        // load arguments for dispatch to the corresponding *_gen method 
        cfw.addALoad(0);
        cfw.addALoad(1);
        cfw.addALoad(2);
        cfw.addALoad(4);
        cfw.addALoad(5);
        cfw.addILoad(3);

        cfw.addLoadThis();
        cfw.add(ByteCode.GETFIELD, cfw.getClassName(), ID_FIELD_NAME, ""I"");

        int startSwitch = cfw.addTableSwitch(0, scriptOrFnNodes.length - 1);
        cfw.markTableSwitchDefault(startSwitch);
        int endlabel = cfw.acquireLabel();

        for (int i = 0; i < scriptOrFnNodes.length; i++) {
            ScriptOrFnNode n = scriptOrFnNodes[i];
            cfw.markTableSwitchCase(startSwitch, i, (short)6);
            if (isGenerator(n)) {
                String type = ""("" +
                              mainClassSignature +
                              ""Lorg/mozilla/javascript/Context;"" +
                              ""Lorg/mozilla/javascript/Scriptable;"" +
                              ""Ljava/lang/Object;"" +
                              ""Ljava/lang/Object;I)Ljava/lang/Object;"";
                cfw.addInvoke(ByteCode.INVOKESTATIC,
                              mainClassName,
                              getBodyMethodName(n) + ""_gen"",
                              type);
                cfw.add(ByteCode.ARETURN);
            } else {
                cfw.add(ByteCode.GOTO, endlabel);
            }
        }

        cfw.markLabel(endlabel);
        pushUndefined(cfw);
        cfw.add(ByteCode.ARETURN);


        // this method uses as many locals as there are arguments (hence 6)
        cfw.stopMethod((short)6);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateCallMethod,"    private void generateCallMethod(ClassFileWriter cfw)
    {
        cfw.startMethod(""call"",
                        ""(Lorg/mozilla/javascript/Context;"" +
                        ""Lorg/mozilla/javascript/Scriptable;"" +
                        ""Lorg/mozilla/javascript/Scriptable;"" +
                        ""[Ljava/lang/Object;)Ljava/lang/Object;"",
                        (short)(ClassFileWriter.ACC_PUBLIC
                                | ClassFileWriter.ACC_FINAL));

        // Generate code for:
        // if (!ScriptRuntime.hasTopCall(cx)) {
        //     return ScriptRuntime.doTopCall(this, cx, scope, thisObj, args);
        // }

        int nonTopCallLabel = cfw.acquireLabel();
        cfw.addALoad(1); //cx
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/ScriptRuntime"",
                      ""hasTopCall"",
                      ""(Lorg/mozilla/javascript/Context;""
                      +"")Z"");
        cfw.add(ByteCode.IFNE, nonTopCallLabel);
        cfw.addALoad(0);
        cfw.addALoad(1);
        cfw.addALoad(2);
        cfw.addALoad(3);
        cfw.addALoad(4);
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/ScriptRuntime"",
                      ""doTopCall"",
                      ""(Lorg/mozilla/javascript/Callable;""
                      +""Lorg/mozilla/javascript/Context;""
                      +""Lorg/mozilla/javascript/Scriptable;""
                      +""Lorg/mozilla/javascript/Scriptable;""
                      +""[Ljava/lang/Object;""
                      +"")Ljava/lang/Object;"");
        cfw.add(ByteCode.ARETURN);
        cfw.markLabel(nonTopCallLabel);

        // Now generate switch to call the real methods
        cfw.addALoad(0);
        cfw.addALoad(1);
        cfw.addALoad(2);
        cfw.addALoad(3);
        cfw.addALoad(4);

        int end = scriptOrFnNodes.length;
        boolean generateSwitch = (2 <= end);

        int switchStart = 0;
        int switchStackTop = 0;
        if (generateSwitch) {
            cfw.addLoadThis();
            cfw.add(ByteCode.GETFIELD, cfw.getClassName(), ID_FIELD_NAME, ""I"");
            // do switch from (1,  end - 1) mapping 0 to
            // the default case
            switchStart = cfw.addTableSwitch(1, end - 1);
        }

        for (int i = 0; i != end; ++i) {
            ScriptOrFnNode n = scriptOrFnNodes[i];
            if (generateSwitch) {
                if (i == 0) {
                    cfw.markTableSwitchDefault(switchStart);
                    switchStackTop = cfw.getStackTop();
                } else {
                    cfw.markTableSwitchCase(switchStart, i - 1,
                                            switchStackTop);
                }
            }
            if (n.getType() == Token.FUNCTION) {
                OptFunctionNode ofn = OptFunctionNode.get(n);
                if (ofn.isTargetOfDirectCall()) {
                    int pcount = ofn.fnode.getParamCount();
                    if (pcount != 0) {
                        // loop invariant:
                        // stack top == arguments array from addALoad4()
                        for (int p = 0; p != pcount; ++p) {
                            cfw.add(ByteCode.ARRAYLENGTH);
                            cfw.addPush(p);
                            int undefArg = cfw.acquireLabel();
                            int beyond = cfw.acquireLabel();
                            cfw.add(ByteCode.IF_ICMPLE, undefArg);
                            // get array[p]
                            cfw.addALoad(4);
                            cfw.addPush(p);
                            cfw.add(ByteCode.AALOAD);
                            cfw.add(ByteCode.GOTO, beyond);
                            cfw.markLabel(undefArg);
                            pushUndefined(cfw);
                            cfw.markLabel(beyond);
                            // Only one push
                            cfw.adjustStackTop(-1);
                            cfw.addPush(0.0);
                            // restore invariant
                            cfw.addALoad(4);
                        }
                    }
                }
            }
            cfw.addInvoke(ByteCode.INVOKESTATIC,
                          mainClassName,
                          getBodyMethodName(n),
                          getBodyMethodSignature(n));
            cfw.add(ByteCode.ARETURN);
        }
        cfw.stopMethod((short)5);
        // 5: this, cx, scope, js this, args[]",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateMain,"    private void generateMain(ClassFileWriter cfw)
    {
        cfw.startMethod(""main"", ""([Ljava/lang/String;)V"",
                        (short)(ClassFileWriter.ACC_PUBLIC
                                | ClassFileWriter.ACC_STATIC));

        // load new ScriptImpl()
        cfw.add(ByteCode.NEW, cfw.getClassName());
        cfw.add(ByteCode.DUP);
        cfw.addInvoke(ByteCode.INVOKESPECIAL, cfw.getClassName(),
                      ""<init>"", ""()V"");
         // load 'args'
        cfw.add(ByteCode.ALOAD_0);
        // Call mainMethodClass.main(Script script, String[] args)
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      mainMethodClass,
                      ""main"",
                      ""(Lorg/mozilla/javascript/Script;[Ljava/lang/String;)V"");
        cfw.add(ByteCode.RETURN);
        // 1 = String[] args
        cfw.stopMethod((short)1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateExecute,"    private void generateExecute(ClassFileWriter cfw)
    {
        cfw.startMethod(""exec"",
                        ""(Lorg/mozilla/javascript/Context;""
                        +""Lorg/mozilla/javascript/Scriptable;""
                        +"")Ljava/lang/Object;"",
                        (short)(ClassFileWriter.ACC_PUBLIC
                                | ClassFileWriter.ACC_FINAL));

        final int CONTEXT_ARG = 1;
        final int SCOPE_ARG = 2;

        cfw.addLoadThis();
        cfw.addALoad(CONTEXT_ARG);
        cfw.addALoad(SCOPE_ARG);
        cfw.add(ByteCode.DUP);
        cfw.add(ByteCode.ACONST_NULL);
        cfw.addInvoke(ByteCode.INVOKEVIRTUAL,
                      cfw.getClassName(),
                      ""call"",
                      ""(Lorg/mozilla/javascript/Context;""
                      +""Lorg/mozilla/javascript/Scriptable;""
                      +""Lorg/mozilla/javascript/Scriptable;""
                      +""[Ljava/lang/Object;""
                      +"")Ljava/lang/Object;"");

        cfw.add(ByteCode.ARETURN);
        // 3 = this + context + scope
        cfw.stopMethod((short)3);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateScriptCtor,"    private void generateScriptCtor(ClassFileWriter cfw)
    {
        cfw.startMethod(""<init>"", ""()V"", ClassFileWriter.ACC_PUBLIC);

        cfw.addLoadThis();
        cfw.addInvoke(ByteCode.INVOKESPECIAL, SUPER_CLASS_NAME,
                      ""<init>"", ""()V"");
        // set id to 0
        cfw.addLoadThis();
        cfw.addPush(0);
        cfw.add(ByteCode.PUTFIELD, cfw.getClassName(), ID_FIELD_NAME, ""I"");

        cfw.add(ByteCode.RETURN);
        // 1 parameter = this
        cfw.stopMethod((short)1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateFunctionConstructor,"    private void generateFunctionConstructor(ClassFileWriter cfw)
    {
        final int SCOPE_ARG = 1;
        final int CONTEXT_ARG = 2;
        final int ID_ARG = 3;

        cfw.startMethod(""<init>"", FUNCTION_CONSTRUCTOR_SIGNATURE,
                        ClassFileWriter.ACC_PUBLIC);
        cfw.addALoad(0);
        cfw.addInvoke(ByteCode.INVOKESPECIAL, SUPER_CLASS_NAME,
                      ""<init>"", ""()V"");

        cfw.addLoadThis();
        cfw.addILoad(ID_ARG);
        cfw.add(ByteCode.PUTFIELD, cfw.getClassName(), ID_FIELD_NAME, ""I"");

        cfw.addLoadThis();
        cfw.addALoad(CONTEXT_ARG);
        cfw.addALoad(SCOPE_ARG);

        int start = (scriptOrFnNodes[0].getType() == Token.SCRIPT) ? 1 : 0;
        int end = scriptOrFnNodes.length;
        if (start == end) throw badTree();
        boolean generateSwitch = (2 <= end - start);

        int switchStart = 0;
        int switchStackTop = 0;
        if (generateSwitch) {
            cfw.addILoad(ID_ARG);
            // do switch from (start + 1,  end - 1) mapping start to
            // the default case
            switchStart = cfw.addTableSwitch(start + 1, end - 1);
        }

        for (int i = start; i != end; ++i) {
            if (generateSwitch) {
                if (i == start) {
                    cfw.markTableSwitchDefault(switchStart);
                    switchStackTop = cfw.getStackTop();
                } else {
                    cfw.markTableSwitchCase(switchStart, i - 1 - start,
                                            switchStackTop);
                }
            }
            OptFunctionNode ofn = OptFunctionNode.get(scriptOrFnNodes[i]);
            cfw.addInvoke(ByteCode.INVOKEVIRTUAL,
                          mainClassName,
                          getFunctionInitMethodName(ofn),
                          FUNCTION_INIT_SIGNATURE);
            cfw.add(ByteCode.RETURN);
        }

        // 4 = this + scope + context + id
        cfw.stopMethod((short)4);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateFunctionInit,"    private void generateFunctionInit(ClassFileWriter cfw,
                                      OptFunctionNode ofn)
    {
        final int CONTEXT_ARG = 1;
        final int SCOPE_ARG = 2;
        cfw.startMethod(getFunctionInitMethodName(ofn),
                        FUNCTION_INIT_SIGNATURE,
                        (short)(ClassFileWriter.ACC_PRIVATE
                                | ClassFileWriter.ACC_FINAL));

        // Call NativeFunction.initScriptFunction
        cfw.addLoadThis();
        cfw.addALoad(CONTEXT_ARG);
        cfw.addALoad(SCOPE_ARG);
        cfw.addInvoke(ByteCode.INVOKEVIRTUAL,
                      ""org/mozilla/javascript/NativeFunction"",
                      ""initScriptFunction"",
                      ""(Lorg/mozilla/javascript/Context;""
                      +""Lorg/mozilla/javascript/Scriptable;""
                      +"")V"");

        // precompile all regexp literals
        int regexpCount = ofn.fnode.getRegexpCount();
        if (regexpCount != 0) {
            cfw.addLoadThis();
            pushRegExpArray(cfw, ofn.fnode, CONTEXT_ARG, SCOPE_ARG);
            cfw.add(ByteCode.PUTFIELD, mainClassName,
                    REGEXP_ARRAY_FIELD_NAME, REGEXP_ARRAY_FIELD_TYPE);
        }

        cfw.add(ByteCode.RETURN);
        // 3 = (scriptThis/functionRef) + scope + context
        cfw.stopMethod((short)3);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateNativeFunctionOverrides,"    private void generateNativeFunctionOverrides(ClassFileWriter cfw,
                                                 String encodedSource)
    {
        // Override NativeFunction.getLanguageVersion() with
        // public int getLanguageVersion() { return <version-constant>; }

        cfw.startMethod(""getLanguageVersion"", ""()I"",
                        ClassFileWriter.ACC_PUBLIC);

        cfw.addPush(compilerEnv.getLanguageVersion());
        cfw.add(ByteCode.IRETURN);

        // 1: this and no argument or locals
        cfw.stopMethod((short)1);

        // The rest of NativeFunction overrides require specific code for each
        // script/function id

        final int Do_getFunctionName      = 0;
        final int Do_getParamCount        = 1;
        final int Do_getParamAndVarCount  = 2;
        final int Do_getParamOrVarName    = 3;
        final int Do_getEncodedSource     = 4;
        final int Do_getParamOrVarConst   = 5;
        final int SWITCH_COUNT            = 6;

        for (int methodIndex = 0; methodIndex != SWITCH_COUNT; ++methodIndex) {
            if (methodIndex == Do_getEncodedSource && encodedSource == null) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,emitRegExpInit,"    private void emitRegExpInit(ClassFileWriter cfw)
    {
        // precompile all regexp literals

        int totalRegCount = 0;
        for (int i = 0; i != scriptOrFnNodes.length; ++i) {
            totalRegCount += scriptOrFnNodes[i].getRegexpCount();
        }
        if (totalRegCount == 0) {
            return;
        }

        cfw.startMethod(REGEXP_INIT_METHOD_NAME, REGEXP_INIT_METHOD_SIGNATURE,
            (short)(ClassFileWriter.ACC_STATIC | ClassFileWriter.ACC_PRIVATE
                    | ClassFileWriter.ACC_SYNCHRONIZED));
        cfw.addField(""_reInitDone"", ""Z"",
                     (short)(ClassFileWriter.ACC_STATIC
                             | ClassFileWriter.ACC_PRIVATE));
        cfw.add(ByteCode.GETSTATIC, mainClassName, ""_reInitDone"", ""Z"");
        int doInit = cfw.acquireLabel();
        cfw.add(ByteCode.IFEQ, doInit);
        cfw.add(ByteCode.RETURN);
        cfw.markLabel(doInit);

        for (int i = 0; i != scriptOrFnNodes.length; ++i) {
            ScriptOrFnNode n = scriptOrFnNodes[i];
            int regCount = n.getRegexpCount();
            for (int j = 0; j != regCount; ++j) {
                String reFieldName = getCompiledRegexpName(n, j);
                String reFieldType = ""Ljava/lang/Object;"";
                String reString = n.getRegexpString(j);
                String reFlags = n.getRegexpFlags(j);
                cfw.addField(reFieldName, reFieldType,
                             (short)(ClassFileWriter.ACC_STATIC
                                     | ClassFileWriter.ACC_PRIVATE));
                cfw.addALoad(0); // proxy
                cfw.addALoad(1); // context
                cfw.addPush(reString);
                if (reFlags == null) {
                    cfw.add(ByteCode.ACONST_NULL);
                } else {
                    cfw.addPush(reFlags);
                }
		/*APPJET*/cfw.addLineNumberEntry((short)n.getRegexpLineno(j));
                cfw.addInvoke(ByteCode.INVOKEINTERFACE,
                              ""org/mozilla/javascript/RegExpProxy"",
                              ""compileRegExp"",
                              ""(Lorg/mozilla/javascript/Context;""
                              +""Ljava/lang/String;Ljava/lang/String;""
                              +"")Ljava/lang/Object;"");
                cfw.add(ByteCode.PUTSTATIC, mainClassName,
                        reFieldName, reFieldType);
            }
        }

        cfw.addPush(1);
        cfw.add(ByteCode.PUTSTATIC, mainClassName, ""_reInitDone"", ""Z"");
        cfw.add(ByteCode.RETURN);
        cfw.stopMethod((short)2);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,emitConstantDudeInitializers,"    private void emitConstantDudeInitializers(ClassFileWriter cfw)
    {
        int N = itsConstantListSize;
        if (N == 0)
            return;

        cfw.startMethod(""<clinit>"", ""()V"",
            (short)(ClassFileWriter.ACC_STATIC | ClassFileWriter.ACC_FINAL));

        double[] array = itsConstantList;
        for (int i = 0; i != N; ++i) {
            double num = array[i];
            String constantName = ""_k"" + i;
            String constantType = getStaticConstantWrapperType(num);
            cfw.addField(constantName, constantType,
                         (short)(ClassFileWriter.ACC_STATIC
                                 | ClassFileWriter.ACC_PRIVATE));
            int inum = (int)num;
            if (inum == num) {
                cfw.add(ByteCode.NEW, ""java/lang/Integer"");
                cfw.add(ByteCode.DUP);
                cfw.addPush(inum);
                cfw.addInvoke(ByteCode.INVOKESPECIAL, ""java/lang/Integer"",
                              ""<init>"", ""(I)V"");
            } else {
                cfw.addPush(num);
                addDoubleWrap(cfw);
            }
            cfw.add(ByteCode.PUTSTATIC, mainClassName,
                    constantName, constantType);
        }

        cfw.add(ByteCode.RETURN);
        cfw.stopMethod((short)0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,pushRegExpArray,"    void pushRegExpArray(ClassFileWriter cfw, ScriptOrFnNode n,
                         int contextArg, int scopeArg)
    {
        int regexpCount = n.getRegexpCount();
        if (regexpCount == 0) throw badTree();

        cfw.addPush(regexpCount);
        cfw.add(ByteCode.ANEWARRAY, ""java/lang/Object"");

        cfw.addALoad(contextArg);
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/ScriptRuntime"",
                      ""checkRegExpProxy"",
                      ""(Lorg/mozilla/javascript/Context;""
                      +"")Lorg/mozilla/javascript/RegExpProxy;"");
        // Stack: proxy, array
        cfw.add(ByteCode.DUP);
        cfw.addALoad(contextArg);
        cfw.addInvoke(ByteCode.INVOKESTATIC, mainClassName,
                      REGEXP_INIT_METHOD_NAME, REGEXP_INIT_METHOD_SIGNATURE);
        for (int i = 0; i != regexpCount; ++i) {
            // Stack: proxy, array
            cfw.add(ByteCode.DUP2);
            cfw.addALoad(contextArg);
            cfw.addALoad(scopeArg);
            cfw.add(ByteCode.GETSTATIC, mainClassName,
                    getCompiledRegexpName(n, i), ""Ljava/lang/Object;"");
            // Stack: compiledRegExp, scope, cx, proxy, array, proxy, array
            cfw.addInvoke(ByteCode.INVOKEINTERFACE,
                          ""org/mozilla/javascript/RegExpProxy"",
                          ""wrapRegExp"",
                          ""(Lorg/mozilla/javascript/Context;""
                          +""Lorg/mozilla/javascript/Scriptable;""
                          +""Ljava/lang/Object;""
                          +"")Lorg/mozilla/javascript/Scriptable;"");
            // Stack: wrappedRegExp, array, proxy, array
            cfw.addPush(i);
            cfw.add(ByteCode.SWAP);
            cfw.add(ByteCode.AASTORE);
            // Stack: proxy, array
        }
        // remove proxy
        cfw.add(ByteCode.POP);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,pushNumberAsObject,"    void pushNumberAsObject(ClassFileWriter cfw, double num)
    {
        if (num == 0.0) {
            if (1 / num > 0) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addDoubleWrap,"    private static void addDoubleWrap(ClassFileWriter cfw)
    {
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/optimizer/OptRuntime"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getStaticConstantWrapperType,"    private static String getStaticConstantWrapperType(double num)
    {
        int inum = (int)num;
        if (inum == num) {
            return ""Ljava/lang/Integer;"";",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,pushUndefined,"    static void pushUndefined(ClassFileWriter cfw)
    {
        cfw.add(ByteCode.GETSTATIC, ""org/mozilla/javascript/Undefined"",
                ""instance"", ""Ljava/lang/Object;"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getIndex,"    int getIndex(ScriptOrFnNode n)
    {
        return scriptOrFnIndexes.getExisting(n);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getDirectTargetFieldName,"    static String getDirectTargetFieldName(int i)
    {
        return ""_dt"" + i;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getDirectCtorName,"    String getDirectCtorName(ScriptOrFnNode n)
    {
        return ""_n""+getIndex(n);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getBodyMethodName,"    String getBodyMethodName(ScriptOrFnNode n)
    {
        return ""_c""+getIndex(n);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getBodyMethodSignature,"    String getBodyMethodSignature(ScriptOrFnNode n)
    {
        StringBuffer sb = new StringBuffer();
        sb.append('(');
        sb.append(mainClassSignature);
        sb.append(""Lorg/mozilla/javascript/Context;""
                  +""Lorg/mozilla/javascript/Scriptable;""
                  +""Lorg/mozilla/javascript/Scriptable;"");
        if (n.getType() == Token.FUNCTION) {
            OptFunctionNode ofn = OptFunctionNode.get(n);
            if (ofn.isTargetOfDirectCall()) {
                int pCount = ofn.fnode.getParamCount();
                for (int i = 0; i != pCount; i++) {
                    sb.append(""Ljava/lang/Object;D"");
                }
            }
        }
        sb.append(""[Ljava/lang/Object;)Ljava/lang/Object;"");
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getFunctionInitMethodName,"    String getFunctionInitMethodName(OptFunctionNode ofn)
    {
        return ""_i""+getIndex(ofn.fnode);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getCompiledRegexpName,"    String getCompiledRegexpName(ScriptOrFnNode n, int regexpIndex)
    {
        return ""_re""+getIndex(n)+""_""+regexpIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,badTree,"    static RuntimeException badTree()
    {
        throw new RuntimeException(""Bad tree in codegen"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,setMainMethodClass,"     void setMainMethodClass(String className)
     {
         mainMethodClass = className;
     }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateBodyCode,"    void generateBodyCode()
    {
        isGenerator = Codegen.isGenerator(scriptOrFn);
        
        // generate the body of the current function or script object
        initBodyGeneration();

        if (isGenerator) {

            // All functions in the generated bytecode have a unique name. Every
            // generator has a unique prefix followed by _gen
            String type = ""("" +
                          codegen.mainClassSignature +
                          ""Lorg/mozilla/javascript/Context;"" +
                          ""Lorg/mozilla/javascript/Scriptable;"" +
                          ""Ljava/lang/Object;"" +
                          ""Ljava/lang/Object;I)Ljava/lang/Object;""; 
            cfw.startMethod(codegen.getBodyMethodName(scriptOrFn) + ""_gen"",
                    type,
                    (short)(ClassFileWriter.ACC_STATIC
                            | ClassFileWriter.ACC_PRIVATE));
        } else {
            cfw.startMethod(codegen.getBodyMethodName(scriptOrFn),
                    codegen.getBodyMethodSignature(scriptOrFn),
                    (short)(ClassFileWriter.ACC_STATIC
                            | ClassFileWriter.ACC_PRIVATE));
        }

        generatePrologue();
        Node treeTop;
        if (fnCurrent != null) {
            treeTop = scriptOrFn.getLastChild();
        } else {
            treeTop = scriptOrFn;
        }
        generateStatement(treeTop);
        generateEpilogue();

        cfw.stopMethod((short)(localsMax + 1));

        if (isGenerator) {
            // generate the user visible method which when invoked will",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateGenerator,"    private void generateGenerator()
    {
        cfw.startMethod(codegen.getBodyMethodName(scriptOrFn),
                        codegen.getBodyMethodSignature(scriptOrFn),
                        (short)(ClassFileWriter.ACC_STATIC
                                | ClassFileWriter.ACC_PRIVATE));

        initBodyGeneration();
        argsLocal = firstFreeLocal++;
        localsMax = firstFreeLocal;

        // get top level scope
        if (fnCurrent != null && !inDirectCallFunction
            && (!compilerEnv.isUseDynamicScope()
                || fnCurrent.fnode.getIgnoreDynamicScope()))
        {
            // Unless we're either in a direct call or using dynamic scope,
            // use the enclosing scope of the function as our variable object.
            cfw.addALoad(funObjLocal);
            cfw.addInvoke(ByteCode.INVOKEINTERFACE,
                          ""org/mozilla/javascript/Scriptable"",
                          ""getParentScope"",
                          ""()Lorg/mozilla/javascript/Scriptable;"");
            cfw.addAStore(variableObjectLocal);
        }

        // generators are forced to have an activation record
        cfw.addALoad(funObjLocal);
        cfw.addALoad(variableObjectLocal);
        cfw.addALoad(argsLocal);
        addScriptRuntimeInvoke(""createFunctionActivation"",
                               ""(Lorg/mozilla/javascript/NativeFunction;""
                               +""Lorg/mozilla/javascript/Scriptable;""
                               +""[Ljava/lang/Object;""
                               +"")Lorg/mozilla/javascript/Scriptable;"");
        cfw.addAStore(variableObjectLocal);

        // create a function object
        cfw.add(ByteCode.NEW, codegen.mainClassName);
        // Call function constructor
        cfw.add(ByteCode.DUP);
        cfw.addALoad(variableObjectLocal);
        cfw.addALoad(contextLocal);           // load 'cx'
        cfw.addPush(scriptOrFnIndex);
        cfw.addInvoke(ByteCode.INVOKESPECIAL, codegen.mainClassName,
                      ""<init>"", Codegen.FUNCTION_CONSTRUCTOR_SIGNATURE);

        // Init mainScript field
        cfw.add(ByteCode.DUP);
        if (isTopLevel) Kit.codeBug();  // Only functions can be generators
        cfw.add(ByteCode.ALOAD_0);
        cfw.add(ByteCode.GETFIELD,
                codegen.mainClassName,
                Codegen.DIRECT_CALL_PARENT_FIELD,
                codegen.mainClassSignature);
        cfw.add(ByteCode.PUTFIELD,
                codegen.mainClassName,
                Codegen.DIRECT_CALL_PARENT_FIELD,
                codegen.mainClassSignature);

        generateNestedFunctionInits();
        
        // create the NativeGenerator object that we return
        cfw.addALoad(variableObjectLocal);
        cfw.addALoad(thisObjLocal);
        cfw.addLoadConstant(maxLocals);
        cfw.addLoadConstant(maxStack);
        addOptRuntimeInvoke(""createNativeGenerator"",
                               ""(Lorg/mozilla/javascript/NativeFunction;""
                               +""Lorg/mozilla/javascript/Scriptable;""
                               +""Lorg/mozilla/javascript/Scriptable;II""
                               +"")Lorg/mozilla/javascript/Scriptable;"");

        cfw.add(ByteCode.ARETURN);
        cfw.stopMethod((short)(localsMax + 1));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateNestedFunctionInits,"    private void generateNestedFunctionInits()
    {
        int functionCount = scriptOrFn.getFunctionCount();
        for (int i = 0; i != functionCount; i++) {
            OptFunctionNode ofn = OptFunctionNode.get(scriptOrFn, i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,initBodyGeneration,"    private void initBodyGeneration()
    {
        isTopLevel = (scriptOrFn == codegen.scriptOrFnNodes[0]);

        varRegisters = null;
        if (scriptOrFn.getType() == Token.FUNCTION) {
            fnCurrent = OptFunctionNode.get(scriptOrFn);
            hasVarsInRegs = !fnCurrent.fnode.requiresActivation();
            if (hasVarsInRegs) {
                int n = fnCurrent.fnode.getParamAndVarCount();
                if (n != 0) {
                    varRegisters = new short[n];
                }
            }
            inDirectCallFunction = fnCurrent.isTargetOfDirectCall();
            if (inDirectCallFunction && !hasVarsInRegs) Codegen.badTree();
        } else {
            fnCurrent = null;
            hasVarsInRegs = false;
            inDirectCallFunction = false;
        }

        locals = new int[MAX_LOCALS];

        funObjLocal = 0;
        contextLocal = 1;
        variableObjectLocal = 2;
        thisObjLocal = 3;
        localsMax = (short) 4;  // number of parms + ""this""
        firstFreeLocal = 4;

        popvLocal = -1;
        argsLocal = -1;
        itsZeroArgArray = -1;
        itsOneArgArray = -1;
        scriptRegexpLocal = -1;
        epilogueLabel = -1;
        enterAreaStartLabel = -1;
        generatorStateLocal = -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generatePrologue,"    private void generatePrologue()
    {
        if (inDirectCallFunction) {
            int directParameterCount = scriptOrFn.getParamCount();
            // 0 is reserved for function Object 'this'
            // 1 is reserved for context
            // 2 is reserved for parentScope
            // 3 is reserved for script 'this'
            if (firstFreeLocal != 4) Kit.codeBug();
            for (int i = 0; i != directParameterCount; ++i) {
                varRegisters[i] = firstFreeLocal;
                // 3 is 1 for Object parm and 2 for double parm
                firstFreeLocal += 3;
            }
            if (!fnCurrent.getParameterNumberContext()) {
                // make sure that all parameters are objects
                itsForcedObjectParameters = true;
                for (int i = 0; i != directParameterCount; ++i) {
                    short reg = varRegisters[i];
                    cfw.addALoad(reg);
                    cfw.add(ByteCode.GETSTATIC,
                            ""java/lang/Void"",
                            ""TYPE"",
                            ""Ljava/lang/Class;"");
                    int isObjectLabel = cfw.acquireLabel();
                    cfw.add(ByteCode.IF_ACMPNE, isObjectLabel);
                    cfw.addDLoad(reg + 1);
                    addDoubleWrap();
                    cfw.addAStore(reg);
                    cfw.markLabel(isObjectLabel);
                }
            }
        }

        if (fnCurrent != null && !inDirectCallFunction
            && (!compilerEnv.isUseDynamicScope()
                || fnCurrent.fnode.getIgnoreDynamicScope()))
        {
            // Unless we're either in a direct call or using dynamic scope,
            // use the enclosing scope of the function as our variable object.
            cfw.addALoad(funObjLocal);
            cfw.addInvoke(ByteCode.INVOKEINTERFACE,
                          ""org/mozilla/javascript/Scriptable"",
                          ""getParentScope"",
                          ""()Lorg/mozilla/javascript/Scriptable;"");
            cfw.addAStore(variableObjectLocal);
        }

        // reserve 'args[]'
        argsLocal = firstFreeLocal++;
        localsMax = firstFreeLocal;

        // Generate Generator specific prelude
        if (isGenerator) {

            // reserve 'args[]'
            operationLocal = firstFreeLocal++;
            localsMax = firstFreeLocal;

            // Local 3 is a reference to a GeneratorState object. The rest
            // of codegen expects local 3 to be a reference to the thisObj.
            // So move the value in local 3 to generatorStateLocal, and load
            // the saved thisObj from the GeneratorState object.
            cfw.addALoad(thisObjLocal);
            generatorStateLocal = firstFreeLocal++;
            localsMax = firstFreeLocal;
            cfw.add(ByteCode.CHECKCAST, OptRuntime.GeneratorState.CLASS_NAME);
            cfw.add(ByteCode.DUP);
            cfw.addAStore(generatorStateLocal);
            cfw.add(ByteCode.GETFIELD,
                    OptRuntime.GeneratorState.CLASS_NAME,
                    OptRuntime.GeneratorState.thisObj_NAME,
                    OptRuntime.GeneratorState.thisObj_TYPE);
            cfw.addAStore(thisObjLocal);
            
            if (epilogueLabel == -1) {
                epilogueLabel = cfw.acquireLabel();
            }

            ArrayList targets = ((FunctionNode)scriptOrFn).getResumptionPoints();
            if (targets != null) {
                // get resumption point
                generateGetGeneratorResumptionPoint();
  
                // generate dispatch table
                generatorSwitch = cfw.addTableSwitch(0,
                    targets.size() + GENERATOR_START);
                generateCheckForThrowOrClose(-1, false, GENERATOR_START);
            }
        }

        if (fnCurrent == null) {
            // See comments in case Token.REGEXP
            if (scriptOrFn.getRegexpCount() != 0) {
                scriptRegexpLocal = getNewWordLocal();
                codegen.pushRegExpArray(cfw, scriptOrFn, contextLocal,
                                        variableObjectLocal);
                cfw.addAStore(scriptRegexpLocal);
            }
        }

        if (compilerEnv.isGenerateObserverCount())
            saveCurrentCodeOffset();

        if (hasVarsInRegs) {
            // No need to create activation. Pad arguments if need be.
            int parmCount = scriptOrFn.getParamCount();
            if (parmCount > 0 && !inDirectCallFunction) {
                // Set up args array
                // check length of arguments, pad if need be
                cfw.addALoad(argsLocal);
                cfw.add(ByteCode.ARRAYLENGTH);
                cfw.addPush(parmCount);
                int label = cfw.acquireLabel();
                cfw.add(ByteCode.IF_ICMPGE, label);
                cfw.addALoad(argsLocal);
                cfw.addPush(parmCount);
                addScriptRuntimeInvoke(""padArguments"",
                                       ""([Ljava/lang/Object;I""
                                       +"")[Ljava/lang/Object;"");
                cfw.addAStore(argsLocal);
                cfw.markLabel(label);
            }

            int paramCount = fnCurrent.fnode.getParamCount();
            int varCount = fnCurrent.fnode.getParamAndVarCount();
            boolean [] constDeclarations = fnCurrent.fnode.getParamAndVarConst();

            // REMIND - only need to initialize the vars that don't get a value
            // before the next call and are used in the function
            short firstUndefVar = -1;
            for (int i = 0; i != varCount; ++i) {
                short reg = -1;
                if (i < paramCount) {
                    if (!inDirectCallFunction) {
                        reg = getNewWordLocal();
                        cfw.addALoad(argsLocal);
                        cfw.addPush(i);
                        cfw.add(ByteCode.AALOAD);
                        cfw.addAStore(reg);
                    }
                } else if (fnCurrent.isNumberVar(i)) {
                    reg = getNewWordPairLocal(constDeclarations[i]);
                    cfw.addPush(0.0);
                    cfw.addDStore(reg);
                } else {
                    reg = getNewWordLocal(constDeclarations[i]);
                    if (firstUndefVar == -1) {
                        Codegen.pushUndefined(cfw);
                        firstUndefVar = reg;
                    } else {
                        cfw.addALoad(firstUndefVar);
                    }
                    cfw.addAStore(reg);
                }
                if (reg >= 0) {
                    if (constDeclarations[i]) {
                        cfw.addPush(0);
                        cfw.addIStore(reg + (fnCurrent.isNumberVar(i) ? 2 : 1));
                    }
                    varRegisters[i] = reg;
                }

                // Add debug table entry if we're generating debug info
                if (compilerEnv.isGenerateDebugInfo()) {
                    String name = fnCurrent.fnode.getParamOrVarName(i);
                    String type = fnCurrent.isNumberVar(i)
                                      ? ""D"" : ""Ljava/lang/Object;"";
                    int startPC = cfw.getCurrentCodeOffset();
                    if (reg < 0) {
                        reg = varRegisters[i];
                    }
                    cfw.addVariableDescriptor(name, type, startPC, reg);
                }
            }

            // Skip creating activation object.
            return;
        }

        // skip creating activation object for the body of a generator. The
        // activation record required by a generator has already been created
        // in generateGenerator().
        if (isGenerator)
            return;


        String debugVariableName;
        if (fnCurrent != null) {
            debugVariableName = ""activation"";
            cfw.addALoad(funObjLocal);
            cfw.addALoad(variableObjectLocal);
            cfw.addALoad(argsLocal);
            addScriptRuntimeInvoke(""createFunctionActivation"",
                                   ""(Lorg/mozilla/javascript/NativeFunction;""
                                   +""Lorg/mozilla/javascript/Scriptable;""
                                   +""[Ljava/lang/Object;""
                                   +"")Lorg/mozilla/javascript/Scriptable;"");
            cfw.addAStore(variableObjectLocal);
            cfw.addALoad(contextLocal);
            cfw.addALoad(variableObjectLocal);
            addScriptRuntimeInvoke(""enterActivationFunction"",
                                   ""(Lorg/mozilla/javascript/Context;""
                                   +""Lorg/mozilla/javascript/Scriptable;""
                                   +"")V"");
        } else {
            debugVariableName = ""global"";
            cfw.addALoad(funObjLocal);
            cfw.addALoad(thisObjLocal);
            cfw.addALoad(contextLocal);
            cfw.addALoad(variableObjectLocal);
            cfw.addPush(0); // false to indicate it is not eval script
            addScriptRuntimeInvoke(""initScript"",
                                   ""(Lorg/mozilla/javascript/NativeFunction;""
                                   +""Lorg/mozilla/javascript/Scriptable;""
                                   +""Lorg/mozilla/javascript/Context;""
                                   +""Lorg/mozilla/javascript/Scriptable;""
                                   +""Z""
                                   +"")V"");
        }

        enterAreaStartLabel = cfw.acquireLabel();
        epilogueLabel = cfw.acquireLabel();
        cfw.markLabel(enterAreaStartLabel);

        generateNestedFunctionInits();

        // default is to generate debug info
        if (compilerEnv.isGenerateDebugInfo()) {
            cfw.addVariableDescriptor(debugVariableName,
                    ""Lorg/mozilla/javascript/Scriptable;"",
                    cfw.getCurrentCodeOffset(), variableObjectLocal);
        }

        if (fnCurrent == null) {
            // OPT: use dataflow to prove that this assignment is dead",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateGetGeneratorResumptionPoint,"    private void generateGetGeneratorResumptionPoint()
    {
        cfw.addALoad(generatorStateLocal);
        cfw.add(ByteCode.GETFIELD,
                OptRuntime.GeneratorState.CLASS_NAME,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateSetGeneratorResumptionPoint,"    private void generateSetGeneratorResumptionPoint(int nextState)
    {
        cfw.addALoad(generatorStateLocal);
        cfw.addLoadConstant(nextState);
        cfw.add(ByteCode.PUTFIELD,
                OptRuntime.GeneratorState.CLASS_NAME,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateGetGeneratorStackState,"    private void generateGetGeneratorStackState()
    {
        cfw.addALoad(generatorStateLocal);
        addOptRuntimeInvoke(""getGeneratorStackState"",
                    ""(Ljava/lang/Object;)[Ljava/lang/Object;"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateEpilogue,"    private void generateEpilogue()
    {
        if (compilerEnv.isGenerateObserverCount())
            addInstructionCount();        
        if (isGenerator) {
            // generate locals initialization
            HashMap liveLocals = ((FunctionNode)scriptOrFn).getLiveLocals();
            if (liveLocals != null) {
                ArrayList nodes = ((FunctionNode)scriptOrFn).getResumptionPoints();
                for (int i = 0; i < nodes.size(); i++) {
                    Node node = (Node) nodes.get(i);
                    int[] live = (int [])liveLocals.get(node);
                    if (live != null) {
                        cfw.markTableSwitchCase(generatorSwitch,
                            getNextGeneratorState(node));
                        generateGetGeneratorLocalsState();
                        for (int j = 0; j < live.length; j++) {
                                cfw.add(ByteCode.DUP);
                                cfw.addLoadConstant(j);
                                cfw.add(ByteCode.AALOAD);
                                cfw.addAStore(live[j]);
                        }
                        cfw.add(ByteCode.POP);
                        cfw.add(ByteCode.GOTO, getTargetLabel(node));
                    }
                }
            }

            // generate dispatch tables for finally
            if (finallys != null) {
                Enumeration en = finallys.keys();
                while(en.hasMoreElements()) {
                    Node n = (Node) en.nextElement();
                    if (n.getType() == Token.FINALLY) {
                        FinallyReturnPoint ret =
                                (FinallyReturnPoint)finallys.get(n);
                        // the finally will jump here
                        cfw.markLabel(ret.tableLabel, (short)1);

                        // start generating a dispatch table
                        int startSwitch = cfw.addTableSwitch(0,
                                            ret.jsrPoints.size() - 1);
                        int c = 0;
                        cfw.markTableSwitchDefault(startSwitch);
                        for (int i = 0; i < ret.jsrPoints.size(); i++) {
                            // generate gotos back to the JSR location
                            cfw.markTableSwitchCase(startSwitch, c);
                            cfw.add(ByteCode.GOTO,
                                    ((Integer)ret.jsrPoints.get(i)).intValue());
                            c++;
                        }
                    }
                }
            }
        }

        if (epilogueLabel != -1) {
            cfw.markLabel(epilogueLabel);
        }

        if (hasVarsInRegs) {
            cfw.add(ByteCode.ARETURN);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateGetGeneratorLocalsState,"    private void generateGetGeneratorLocalsState() {
        cfw.addALoad(generatorStateLocal);
        addOptRuntimeInvoke(""getGeneratorLocalsState"",
                                ""(Ljava/lang/Object;)[Ljava/lang/Object;"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateActivationExit,"    private void generateActivationExit()
    {
        if (fnCurrent == null || hasVarsInRegs) throw Kit.codeBug();
        cfw.addALoad(contextLocal);
        addScriptRuntimeInvoke(""exitActivationFunction"",
                               ""(Lorg/mozilla/javascript/Context;)V"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateStatement,"    private void generateStatement(Node node)
    {
        updateLineNumber(node);
        int type = node.getType();
        Node child = node.getFirstChild();
        switch (type) {
              case Token.LOOP:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateIntegerWrap,"    private void generateIntegerWrap()
    {
        cfw.addInvoke(ByteCode.INVOKESTATIC, ""java/lang/Integer"", ""valueOf"",
                ""(I)Ljava/lang/Integer;"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateIntegerUnwrap,"    private void generateIntegerUnwrap()
    {
        cfw.addInvoke(ByteCode.INVOKEVIRTUAL, ""java/lang/Integer"",
                ""intValue"", ""()I"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateThrowJavaScriptException,"    private void generateThrowJavaScriptException()
    {
        cfw.add(ByteCode.NEW,
                        ""org/mozilla/javascript/JavaScriptException"");
        cfw.add(ByteCode.DUP_X1);
        cfw.add(ByteCode.SWAP);
        cfw.addPush(scriptOrFn.getSourceName());
        cfw.addPush(itsLineNumber);
        cfw.addInvoke(
                    ByteCode.INVOKESPECIAL,
                    ""org/mozilla/javascript/JavaScriptException"",
                    ""<init>"",
                    ""(Ljava/lang/Object;Ljava/lang/String;I)V"");
        cfw.add(ByteCode.ATHROW);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getNextGeneratorState,"    private int getNextGeneratorState(Node node)
    {
        int nodeIndex = ((FunctionNode)scriptOrFn).getResumptionPoints()
                .indexOf(node);
        return nodeIndex + GENERATOR_YIELD_START;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateExpression,"    private void generateExpression(Node node, Node parent)
    {
        int type = node.getType();
        Node child = node.getFirstChild();
        switch (type) {
              case Token.USE_STACK:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateYieldPoint,"    private void generateYieldPoint(Node node, boolean exprContext) {
        // save stack state
        int top = cfw.getStackTop();
        maxStack = maxStack > top ? maxStack : top;
        if (cfw.getStackTop() != 0) {
            generateGetGeneratorStackState();
            for (int i = 0; i < top; i++) {
                cfw.add(ByteCode.DUP_X1);
                cfw.add(ByteCode.SWAP);
                cfw.addLoadConstant(i);
                cfw.add(ByteCode.SWAP);
                cfw.add(ByteCode.AASTORE);
            }
            // pop the array object
            cfw.add(ByteCode.POP);
        }

        // generate the yield argument
        Node child = node.getFirstChild();
        if (child != null)
            generateExpression(child, node);
        else
            Codegen.pushUndefined(cfw);

        // change the resumption state
        int nextState = getNextGeneratorState(node);
        generateSetGeneratorResumptionPoint(nextState);

        boolean hasLocals = generateSaveLocals(node);

        cfw.add(ByteCode.ARETURN);

        generateCheckForThrowOrClose(getTargetLabel(node),
                hasLocals, nextState);

        // reconstruct the stack
        if (top != 0) {
            generateGetGeneratorStackState();
            for (int i = 0; i < top; i++) {
                cfw.add(ByteCode.DUP);
                cfw.addLoadConstant(top - i - 1);
                cfw.add(ByteCode.AALOAD);
                cfw.add(ByteCode.SWAP);
            }
            cfw.add(ByteCode.POP);
        }

        // load return value from yield
        if (exprContext) {
            cfw.addALoad(argsLocal);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateCheckForThrowOrClose,"    private void generateCheckForThrowOrClose(int label,
                                              boolean hasLocals,
                                              int nextState) {
        int throwLabel = cfw.acquireLabel();
        int closeLabel = cfw.acquireLabel();

        // throw the user provided object, if the operation is .throw()
        cfw.markLabel(throwLabel);
        cfw.addALoad(argsLocal);
        generateThrowJavaScriptException();

        // throw our special internal exception if the generator is being closed
        cfw.markLabel(closeLabel);
        cfw.addALoad(argsLocal);
        cfw.add(ByteCode.CHECKCAST, ""java/lang/Throwable"");
        cfw.add(ByteCode.ATHROW);

        // mark the re-entry point
        // jump here after initializing the locals
        if (label != -1)
            cfw.markLabel(label);
        if (!hasLocals) {
            // jump here directly if there are no locals
            cfw.markTableSwitchCase(generatorSwitch, nextState);
        }

        // see if we need to dispatch for .close() or .throw()
        cfw.addILoad(operationLocal);
        cfw.addLoadConstant(NativeGenerator.GENERATOR_CLOSE);
        cfw.add(ByteCode.IF_ICMPEQ, closeLabel);
        cfw.addILoad(operationLocal);
        cfw.addLoadConstant(NativeGenerator.GENERATOR_THROW);
        cfw.add(ByteCode.IF_ICMPEQ, throwLabel);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateIfJump,"    private void generateIfJump(Node node, Node parent,
                                int trueLabel, int falseLabel)
    {
        // System.out.println(""gen code for "" + node.toString());

        int type = node.getType();
        Node child = node.getFirstChild();

        switch (type) {
          case Token.NOT:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitFunction,"    private void visitFunction(OptFunctionNode ofn, int functionType)
    {
        int fnIndex = codegen.getIndex(ofn.fnode);
        cfw.add(ByteCode.NEW, codegen.mainClassName);
        // Call function constructor
        cfw.add(ByteCode.DUP);
        cfw.addALoad(variableObjectLocal);
        cfw.addALoad(contextLocal);           // load 'cx'
        cfw.addPush(fnIndex);
        cfw.addInvoke(ByteCode.INVOKESPECIAL, codegen.mainClassName,
                      ""<init>"", Codegen.FUNCTION_CONSTRUCTOR_SIGNATURE);

        // Init mainScript field;
        cfw.add(ByteCode.DUP);
        if (isTopLevel) {
            cfw.add(ByteCode.ALOAD_0);
        } else {
            cfw.add(ByteCode.ALOAD_0);
            cfw.add(ByteCode.GETFIELD,
                    codegen.mainClassName,
                    Codegen.DIRECT_CALL_PARENT_FIELD,
                    codegen.mainClassSignature);
        }
        cfw.add(ByteCode.PUTFIELD,
                codegen.mainClassName,
                Codegen.DIRECT_CALL_PARENT_FIELD,
                codegen.mainClassSignature);

        int directTargetIndex = ofn.getDirectTargetIndex();
        if (directTargetIndex >= 0) {
            cfw.add(ByteCode.DUP);
            if (isTopLevel) {
                cfw.add(ByteCode.ALOAD_0);
            } else {
                cfw.add(ByteCode.ALOAD_0);
                cfw.add(ByteCode.GETFIELD,
                        codegen.mainClassName,
                        Codegen.DIRECT_CALL_PARENT_FIELD,
                        codegen.mainClassSignature);
            }
            cfw.add(ByteCode.SWAP);
            cfw.add(ByteCode.PUTFIELD,
                    codegen.mainClassName,
                    Codegen.getDirectTargetFieldName(directTargetIndex),
                    codegen.mainClassSignature);
        }

        if (functionType == FunctionNode.FUNCTION_EXPRESSION) {
            // Leave closure object on stack and do not pass it to
            // initFunction which suppose to connect statements to scope
            return;
        }
        cfw.addPush(functionType);
        cfw.addALoad(variableObjectLocal);
        cfw.addALoad(contextLocal);           // load 'cx'
        addOptRuntimeInvoke(""initFunction"",
                            ""(Lorg/mozilla/javascript/NativeFunction;""",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getTargetLabel,"    private int getTargetLabel(Node target)
    {
        int labelId = target.labelId();
        if (labelId == -1) {
            labelId = cfw.acquireLabel();
            target.labelId(labelId);
        }
        return labelId;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitGoto,"    private void visitGoto(Node.Jump node, int type, Node child)
    {
        Node target = node.target;
        if (type == Token.IFEQ || type == Token.IFNE) {
            if (child == null) throw Codegen.badTree();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addGotoWithReturn,"    private void addGotoWithReturn(Node target) {
        FinallyReturnPoint ret =
                (FinallyReturnPoint)finallys.get(target);
        cfw.addLoadConstant(ret.jsrPoints.size());
        addGoto(target, ByteCode.GOTO);
        int retLabel = cfw.acquireLabel();
        cfw.markLabel(retLabel);
        ret.jsrPoints.add(Integer.valueOf(retLabel));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitArrayLiteral,"    private void visitArrayLiteral(Node node, Node child)
    {
        int count = 0;
        for (Node cursor = child; cursor != null; cursor = cursor.getNext()) {
            ++count;
        }
        // load array to store array literal objects
        addNewObjectArray(count);
        for (int i = 0; i != count; ++i) {
            cfw.add(ByteCode.DUP);
            cfw.addPush(i);
            generateExpression(child, node);
            cfw.add(ByteCode.AASTORE);
            child = child.getNext();
        }
        int[] skipIndexes = (int[])node.getProp(Node.SKIP_INDEXES_PROP);
        if (skipIndexes == null) {
            cfw.add(ByteCode.ACONST_NULL);
            cfw.add(ByteCode.ICONST_0);
        } else {
            cfw.addPush(OptRuntime.encodeIntArray(skipIndexes));
            cfw.addPush(skipIndexes.length);
        }
        cfw.addALoad(contextLocal);
        cfw.addALoad(variableObjectLocal);
        addOptRuntimeInvoke(""newArrayLiteral"",
             ""([Ljava/lang/Object;""",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitObjectLiteral,"    private void visitObjectLiteral(Node node, Node child)
    {
        Object[] properties = (Object[])node.getProp(Node.OBJECT_IDS_PROP);
        int count = properties.length;

        // load array with property ids
        addNewObjectArray(count);
        for (int i = 0; i != count; ++i) {
            cfw.add(ByteCode.DUP);
            cfw.addPush(i);
            Object id = properties[i];
            if (id instanceof String) {
                cfw.addPush((String)id);
            } else {
                cfw.addPush(((Integer)id).intValue());
                addScriptRuntimeInvoke(""wrapInt"", ""(I)Ljava/lang/Integer;"");
            }
            cfw.add(ByteCode.AASTORE);
        }
        // load array with property values
        addNewObjectArray(count);
        Node child2 = child;
        for (int i = 0; i != count; ++i) {
            cfw.add(ByteCode.DUP);
            cfw.addPush(i);
            int childType = child.getType();
            if (childType == Token.GET) {
                generateExpression(child.getFirstChild(), node);
            } else if (childType == Token.SET) {
                generateExpression(child.getFirstChild(), node);
            } else {
                generateExpression(child, node);
            }
            cfw.add(ByteCode.AASTORE);
            child = child.getNext();
        }
        // load array with getterSetter values
        cfw.addPush(count);
        cfw.add(ByteCode.NEWARRAY, ByteCode.T_INT);
        for (int i = 0; i != count; ++i) {
            cfw.add(ByteCode.DUP);
            cfw.addPush(i);
            int childType = child2.getType();
            if (childType == Token.GET) {
                cfw.add(ByteCode.ICONST_M1);
            } else if (childType == Token.SET) {
                cfw.add(ByteCode.ICONST_1);
            } else {
                cfw.add(ByteCode.ICONST_0);
            }
            cfw.add(ByteCode.IASTORE);
            child2 = child2.getNext();
        }

        cfw.addALoad(contextLocal);
        cfw.addALoad(variableObjectLocal);
        addScriptRuntimeInvoke(""newObjectLiteral"",
             ""([Ljava/lang/Object;""",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitSpecialCall,"    private void visitSpecialCall(Node node, int type, int specialType,
                                  Node child)
    {
        cfw.addALoad(contextLocal);

        if (type == Token.NEW) {
            generateExpression(child, node);
            // stack: ... cx functionObj
        } else {
            generateFunctionAndThisObj(child, node);
            // stack: ... cx functionObj thisObj
        }
        child = child.getNext();

        generateCallArgArray(node, child, false);

        String methodName;
        String callSignature;

        if (type == Token.NEW) {
            methodName = ""newObjectSpecial"";
            callSignature = ""(Lorg/mozilla/javascript/Context;""
                            +""Ljava/lang/Object;""
                            +""[Ljava/lang/Object;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""I"" // call type
                            +"")Ljava/lang/Object;"";
            cfw.addALoad(variableObjectLocal);
            cfw.addALoad(thisObjLocal);
            cfw.addPush(specialType);
        } else {
            methodName = ""callSpecial"";
            callSignature = ""(Lorg/mozilla/javascript/Context;""
                            +""Lorg/mozilla/javascript/Callable;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""[Ljava/lang/Object;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""I"" // call type
                            +""Ljava/lang/String;I""  // filename, linenumber
                            +"")Ljava/lang/Object;"";
            cfw.addALoad(variableObjectLocal);
            cfw.addALoad(thisObjLocal);
            cfw.addPush(specialType);
            String sourceName = scriptOrFn.getSourceName();
            cfw.addPush(sourceName == null ? """" : sourceName);
            cfw.addPush(itsLineNumber);
        }

        addOptRuntimeInvoke(methodName, callSignature);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitStandardCall,"    private void visitStandardCall(Node node, Node child)
    {
        if (node.getType() != Token.CALL) throw Codegen.badTree();

        Node firstArgChild = child.getNext();
        int childType = child.getType();

        String methodName;
        String signature;

        if (firstArgChild == null) {
            if (childType == Token.NAME) {
                // name() call
                String name = child.getString();
                cfw.addPush(name);
                methodName = ""callName0"";
                signature = ""(Ljava/lang/String;""
                            +""Lorg/mozilla/javascript/Context;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +"")Ljava/lang/Object;"";
            } else if (childType == Token.GETPROP) {
                // x.name() call
                Node propTarget = child.getFirstChild();
                generateExpression(propTarget, node);
                Node id = propTarget.getNext();
                String property = id.getString();
                cfw.addPush(property);
                methodName = ""callProp0"";
                signature = ""(Ljava/lang/Object;""
                            +""Ljava/lang/String;""
                            +""Lorg/mozilla/javascript/Context;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +"")Ljava/lang/Object;"";
            } else if (childType == Token.GETPROPNOWARN) {
                throw Kit.codeBug();
            } else {
                generateFunctionAndThisObj(child, node);
                methodName = ""call0"";
                signature = ""(Lorg/mozilla/javascript/Callable;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""Lorg/mozilla/javascript/Context;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +"")Ljava/lang/Object;"";
            }

        } else if (childType == Token.NAME) {
            // XXX: this optimization is only possible if name
            // resolution
            // is not affected by arguments evaluation and currently
            // there are no checks for it
            String name = child.getString();
            generateCallArgArray(node, firstArgChild, false);
            cfw.addPush(name);
            methodName = ""callName"";
            signature = ""([Ljava/lang/Object;""
                        +""Ljava/lang/String;""
                        +""Lorg/mozilla/javascript/Context;""
                        +""Lorg/mozilla/javascript/Scriptable;""
                        +"")Ljava/lang/Object;"";
        } else {
            int argCount = 0;
            for (Node arg = firstArgChild; arg != null; arg = arg.getNext()) {
                ++argCount;
            }
            generateFunctionAndThisObj(child, node);
            // stack: ... functionObj thisObj
            if (argCount == 1) {
                generateExpression(firstArgChild, node);
                methodName = ""call1"";
                signature = ""(Lorg/mozilla/javascript/Callable;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""Ljava/lang/Object;""
                            +""Lorg/mozilla/javascript/Context;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +"")Ljava/lang/Object;"";
            } else if (argCount == 2) {
                generateExpression(firstArgChild, node);
                generateExpression(firstArgChild.getNext(), node);
                methodName = ""call2"";
                signature = ""(Lorg/mozilla/javascript/Callable;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""Ljava/lang/Object;""
                            +""Ljava/lang/Object;""
                            +""Lorg/mozilla/javascript/Context;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +"")Ljava/lang/Object;"";
            } else {
                generateCallArgArray(node, firstArgChild, false);
                methodName = ""callN"";
                signature = ""(Lorg/mozilla/javascript/Callable;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +""[Ljava/lang/Object;""
                            +""Lorg/mozilla/javascript/Context;""
                            +""Lorg/mozilla/javascript/Scriptable;""
                            +"")Ljava/lang/Object;"";
            }
        }

        cfw.addALoad(contextLocal);
        cfw.addALoad(variableObjectLocal);
        addOptRuntimeInvoke(methodName, signature);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitStandardNew,"    private void visitStandardNew(Node node, Node child)
    {
        if (node.getType() != Token.NEW) throw Codegen.badTree();

        Node firstArgChild = child.getNext();

        generateExpression(child, node);
        // stack: ... functionObj
        cfw.addALoad(contextLocal);
        cfw.addALoad(variableObjectLocal);
        // stack: ... functionObj cx scope
        generateCallArgArray(node, firstArgChild, false);
        addScriptRuntimeInvoke(
            ""newObject"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitOptimizedCall,"    private void visitOptimizedCall(Node node, OptFunctionNode target,
                                    int type, Node child)
    {
        Node firstArgChild = child.getNext();

        short thisObjLocal = 0;
        if (type == Token.NEW) {
            generateExpression(child, node);
        } else {
            generateFunctionAndThisObj(child, node);
            thisObjLocal = getNewWordLocal();
            cfw.addAStore(thisObjLocal);
        }
        // stack: ... functionObj

        int beyond = cfw.acquireLabel();

        int directTargetIndex = target.getDirectTargetIndex();
        if (isTopLevel) {
            cfw.add(ByteCode.ALOAD_0);
        } else {
            cfw.add(ByteCode.ALOAD_0);
            cfw.add(ByteCode.GETFIELD, codegen.mainClassName,
                    Codegen.DIRECT_CALL_PARENT_FIELD,
                    codegen.mainClassSignature);
        }
        cfw.add(ByteCode.GETFIELD, codegen.mainClassName,
                Codegen.getDirectTargetFieldName(directTargetIndex),
                codegen.mainClassSignature);

        cfw.add(ByteCode.DUP2);
        // stack: ... functionObj directFunct functionObj directFunct

        int regularCall = cfw.acquireLabel();
        cfw.add(ByteCode.IF_ACMPNE, regularCall);

        // stack: ... functionObj directFunct
        short stackHeight = cfw.getStackTop();
        cfw.add(ByteCode.SWAP);
        cfw.add(ByteCode.POP);
        // stack: ... directFunct
        if (compilerEnv.isUseDynamicScope()) {
            cfw.addALoad(contextLocal);
            cfw.addALoad(variableObjectLocal);
        } else {
            cfw.add(ByteCode.DUP);
            // stack: ... directFunct directFunct
            cfw.addInvoke(ByteCode.INVOKEINTERFACE,
                          ""org/mozilla/javascript/Scriptable"",
                          ""getParentScope"",
                          ""()Lorg/mozilla/javascript/Scriptable;"");
            // stack: ... directFunct scope
            cfw.addALoad(contextLocal);
            // stack: ... directFunct scope cx
            cfw.add(ByteCode.SWAP);
        }
        // stack: ... directFunc cx scope

        if (type == Token.NEW) {
            cfw.add(ByteCode.ACONST_NULL);
        } else {
            cfw.addALoad(thisObjLocal);
        }
        // stack: ... directFunc cx scope thisObj
/*
Remember that directCall parameters are paired in 1 aReg and 1 dReg
If the argument is an incoming arg, just pass the orginal pair thru.
Else, if the argument is known to be typed 'Number', pass Void.TYPE
in the aReg and the number is the dReg
Else pass the JS object in the aReg and 0.0 in the dReg.
*/
        Node argChild = firstArgChild;
        while (argChild != null) {
            int dcp_register = nodeIsDirectCallParameter(argChild);
            if (dcp_register >= 0) {
                cfw.addALoad(dcp_register);
                cfw.addDLoad(dcp_register + 1);
            } else if (argChild.getIntProp(Node.ISNUMBER_PROP, -1)
                       == Node.BOTH)
            {
                cfw.add(ByteCode.GETSTATIC,
                        ""java/lang/Void"",
                        ""TYPE"",
                        ""Ljava/lang/Class;"");
                generateExpression(argChild, node);
            } else {
                generateExpression(argChild, node);
                cfw.addPush(0.0);
            }
            argChild = argChild.getNext();
        }

        cfw.add(ByteCode.GETSTATIC,
                ""org/mozilla/javascript/ScriptRuntime"",
                ""emptyArgs"", ""[Ljava/lang/Object;"");
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      codegen.mainClassName,
                      (type == Token.NEW)
                          ? codegen.getDirectCtorName(target.fnode)
                          : codegen.getBodyMethodName(target.fnode),
                      codegen.getBodyMethodSignature(target.fnode));

        cfw.add(ByteCode.GOTO, beyond);

        cfw.markLabel(regularCall, stackHeight);
        // stack: ... functionObj directFunct
        cfw.add(ByteCode.POP);
        cfw.addALoad(contextLocal);
        cfw.addALoad(variableObjectLocal);
        // stack: ... functionObj cx scope
        if (type != Token.NEW) {
            cfw.addALoad(thisObjLocal);
            releaseWordLocal(thisObjLocal);
            // stack: ... functionObj cx scope thisObj
        }
        // XXX: this will generate code for the child array the second time,
        // so expression code generation better not to alter tree structure...
        generateCallArgArray(node, firstArgChild, true);

        if (type == Token.NEW) {
            addScriptRuntimeInvoke(
                ""newObject"",
                ""(Ljava/lang/Object;""
                +""Lorg/mozilla/javascript/Context;""
                +""Lorg/mozilla/javascript/Scriptable;""
                +""[Ljava/lang/Object;""
                +"")Lorg/mozilla/javascript/Scriptable;"");
        } else {
            cfw.addInvoke(ByteCode.INVOKEINTERFACE,
                ""org/mozilla/javascript/Callable"",
                ""call"",
                ""(Lorg/mozilla/javascript/Context;""
                +""Lorg/mozilla/javascript/Scriptable;""
                +""Lorg/mozilla/javascript/Scriptable;""
                +""[Ljava/lang/Object;""
                +"")Ljava/lang/Object;"");
        }

        cfw.markLabel(beyond);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateCallArgArray,"    private void generateCallArgArray(Node node, Node argChild, boolean directCall)
    {
        int argCount = 0;
        for (Node child = argChild; child != null; child = child.getNext()) {
            ++argCount;
        }
        // load array object to set arguments
        if (argCount == 1 && itsOneArgArray >= 0) {
            cfw.addALoad(itsOneArgArray);
        } else {
            addNewObjectArray(argCount);
        }
        // Copy arguments into it
        for (int i = 0; i != argCount; ++i) {
            // If we are compiling a generator an argument could be the result",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateFunctionAndThisObj,"    private void generateFunctionAndThisObj(Node node, Node parent)
    {
        // Place on stack (function object, function this) pair
        int type = node.getType();
        switch (node.getType()) {
          case Token.GETPROPNOWARN:
            throw Kit.codeBug();

          case Token.GETPROP:
          case Token.GETELEM: {
            Node target = node.getFirstChild();
            generateExpression(target, node);
            Node id = target.getNext();
            if (type == Token.GETPROP) {
                String property = id.getString();
                cfw.addPush(property);
                cfw.addALoad(contextLocal);
                addScriptRuntimeInvoke(
                    ""getPropFunctionAndThis"",
                    ""(Ljava/lang/Object;""
                    +""Ljava/lang/String;""
                    +""Lorg/mozilla/javascript/Context;""
                    +"")Lorg/mozilla/javascript/Callable;"");
            } else {
                // Optimizer do not optimize this case for now
                if (node.getIntProp(Node.ISNUMBER_PROP, -1) != -1)
                    throw Codegen.badTree();
                generateExpression(id, node);  // id
                cfw.addALoad(contextLocal);
                addScriptRuntimeInvoke(
                    ""getElemFunctionAndThis"",
                    ""(Ljava/lang/Object;""
                    +""Ljava/lang/Object;""
                    +""Lorg/mozilla/javascript/Context;""
                    +"")Lorg/mozilla/javascript/Callable;"");
            }
            break;
          }

          case Token.NAME: {
            String name = node.getString();
            cfw.addPush(name);
            cfw.addALoad(contextLocal);
            cfw.addALoad(variableObjectLocal);
            addScriptRuntimeInvoke(
                ""getNameFunctionAndThis"",
                ""(Ljava/lang/String;""
                +""Lorg/mozilla/javascript/Context;""
                +""Lorg/mozilla/javascript/Scriptable;""
                +"")Lorg/mozilla/javascript/Callable;"");
            break;
          }

          default: // including GETVAR
            generateExpression(node, parent);
            cfw.addALoad(contextLocal);
            addScriptRuntimeInvoke(
                ""getValueFunctionAndThis"",
                ""(Ljava/lang/Object;""
                +""Lorg/mozilla/javascript/Context;""
                +"")Lorg/mozilla/javascript/Callable;"");
            break;
        }
        // Get thisObj prepared by get(Name|Prop|Elem|Value)FunctionAndThis
        cfw.addALoad(contextLocal);
        addScriptRuntimeInvoke(
            ""lastStoredScriptable"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,updateLineNumber,"    private void updateLineNumber(Node node)
    {
        itsLineNumber = node.getLineno();
        if (itsLineNumber == -1)
            return;
        cfw.addLineNumberEntry((short)itsLineNumber);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitTryCatchFinally,"    private void visitTryCatchFinally(Node.Jump node, Node child)
    {
        /* Save the variable object, in case there are with statements
         * enclosed by the try block and we catch some exception.
         * We'll restore it for the catch block so that catch block
         * statements get the right scope.
         */

        // OPT we only need to do this if there are enclosed WITH
        // statements; could statically check and omit this if there aren't any.

        // XXX OPT Maybe instead do syntactic transforms to associate
        // each 'with' with a try/finally block that does the exitwith.

        short savedVariableObject = getNewWordLocal();
        cfw.addALoad(variableObjectLocal);
        cfw.addAStore(savedVariableObject);

        /*
         * Generate the code for the tree; most of the work is done in IRFactory
         * and NodeTransformer;  Codegen just adds the java handlers for the
         * javascript catch and finally clauses.  */

        int startLabel = cfw.acquireLabel();
        cfw.markLabel(startLabel, (short)0);

        Node catchTarget = node.target;
        Node finallyTarget = node.getFinally();

        // create a table for the equivalent of JSR returns
        if (isGenerator && finallyTarget != null) {
            FinallyReturnPoint ret = new FinallyReturnPoint();
            if (finallys == null) {
                finallys = new Hashtable();
            }
            // add the finally target to hashtable
            finallys.put(finallyTarget, ret);
            // add the finally node as well to the hash table
            finallys.put(finallyTarget.getNext(), ret);
        }

        while (child != null) {
            generateStatement(child);
            child = child.getNext();
        }

        // control flow skips the handlers
        int realEnd = cfw.acquireLabel();
        cfw.add(ByteCode.GOTO, realEnd);

        int exceptionLocal = getLocalBlockRegister(node);
        // javascript handler; unwrap exception and GOTO to javascript
        // catch area.
        if (catchTarget != null) {
            // get the label to goto
            int catchLabel = catchTarget.labelId();

            generateCatchBlock(JAVASCRIPT_EXCEPTION, savedVariableObject,
                               catchLabel, startLabel, exceptionLocal);
            /*
             * catch WrappedExceptions, see if they are wrapped
             * JavaScriptExceptions. Otherwise, rethrow.
             */
            generateCatchBlock(EVALUATOR_EXCEPTION, savedVariableObject,
                               catchLabel, startLabel, exceptionLocal);

            /*
                we also need to catch EcmaErrors and feed the
                associated error object to the handler
            */
            generateCatchBlock(ECMAERROR_EXCEPTION, savedVariableObject,
                               catchLabel, startLabel, exceptionLocal);

            Context cx = Context.getCurrentContext();
            if (cx != null &&
                cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS))
            {
                generateCatchBlock(THROWABLE_EXCEPTION, savedVariableObject,
                                   catchLabel, startLabel, exceptionLocal);
            }
        }

        // finally handler; catch all exceptions, store to a local; JSR to
        // the finally, then re-throw.
        if (finallyTarget != null) {
            int finallyHandler = cfw.acquireLabel();
            cfw.markHandler(finallyHandler);
            cfw.addAStore(exceptionLocal);

            // reset the variable object local
            cfw.addALoad(savedVariableObject);
            cfw.addAStore(variableObjectLocal);

            // get the label to JSR to
            int finallyLabel = finallyTarget.labelId();
            if (isGenerator)
                addGotoWithReturn(finallyTarget);
            else
                cfw.add(ByteCode.JSR, finallyLabel);

            // rethrow
            cfw.addALoad(exceptionLocal);
            if (isGenerator)
                cfw.add(ByteCode.CHECKCAST, ""java/lang/Throwable"");
            cfw.add(ByteCode.ATHROW);

            // mark the handler
            cfw.addExceptionHandler(startLabel, finallyLabel,
                                    finallyHandler, null); // catch any
        }
        releaseWordLocal(savedVariableObject);
        cfw.markLabel(realEnd);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateCatchBlock,"    private void generateCatchBlock(int exceptionType,
                                    short savedVariableObject,
                                    int catchLabel, int startLabel,
                                    int exceptionLocal)
    {
        int handler = cfw.acquireLabel();
        cfw.markHandler(handler);

        // MS JVM gets cranky if the exception object is left on the stack
        cfw.addAStore(exceptionLocal);

        // reset the variable object local
        cfw.addALoad(savedVariableObject);
        cfw.addAStore(variableObjectLocal);

        String exceptionName;
        if (exceptionType == JAVASCRIPT_EXCEPTION) {
            exceptionName = ""org/mozilla/javascript/JavaScriptException"";
        } else if (exceptionType == EVALUATOR_EXCEPTION) {
            exceptionName = ""org/mozilla/javascript/EvaluatorException"";
        } else if (exceptionType == ECMAERROR_EXCEPTION) {
            exceptionName = ""org/mozilla/javascript/EcmaError"";
        } else if (exceptionType == THROWABLE_EXCEPTION) {
            exceptionName = ""java/lang/Throwable"";
        } else {
            throw Kit.codeBug();
        }

        // mark the handler
        cfw.addExceptionHandler(startLabel, catchLabel, handler,
                                exceptionName);

        cfw.add(ByteCode.GOTO, catchLabel);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,generateSaveLocals,"    private boolean generateSaveLocals(Node node)
    {
        int count = 0;
        for (int i = 0; i < firstFreeLocal; i++) {
            if (locals[i] != 0)
                count++;
        }

        if (count == 0) {
            ((FunctionNode)scriptOrFn).addLiveLocals(node, null);
            return false;
        }

        // calculate the max locals
        maxLocals = maxLocals > count ? maxLocals : count;

        // create a locals list
        int[] ls = new int[count];
        int s = 0;
        for (int i = 0; i < firstFreeLocal; i++) {
            if (locals[i] != 0) {
                ls[s] = i;
                s++;
            }
        }

        // save the locals
        ((FunctionNode)scriptOrFn).addLiveLocals(node, ls);

        // save locals
        generateGetGeneratorLocalsState();
        for (int i = 0; i < count; i++) {
            cfw.add(ByteCode.DUP);
            cfw.addLoadConstant(i);
            cfw.addALoad(ls[i]);
            cfw.add(ByteCode.AASTORE);
        }
        // pop the array off the stack
        cfw.add(ByteCode.POP);

        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitSwitch,"    private void visitSwitch(Node.Jump switchNode, Node child)
    {
        // See comments in IRFactory.createSwitch() for description
        // of SWITCH node

        generateExpression(child, switchNode);
        // save selector value
        short selector = getNewWordLocal();
        cfw.addAStore(selector);

        for (Node.Jump caseNode = (Node.Jump)child.getNext();
             caseNode != null;
             caseNode = (Node.Jump)caseNode.getNext())
        {
            if (caseNode.getType() != Token.CASE)
                throw Codegen.badTree();
            Node test = caseNode.getFirstChild();
            generateExpression(test, caseNode);
            cfw.addALoad(selector);
            addScriptRuntimeInvoke(""shallowEq"",
                                   ""(Ljava/lang/Object;""
                                   +""Ljava/lang/Object;""
                                   +"")Z"");
            addGoto(caseNode.target, ByteCode.IFNE);
        }
        releaseWordLocal(selector);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitTypeofname,"    private void visitTypeofname(Node node)
    {
        if (hasVarsInRegs) {
            int varIndex = fnCurrent.fnode.getIndexForNameNode(node);
            if (varIndex >= 0) {
                if (fnCurrent.isNumberVar(varIndex)) {
                    cfw.addPush(""number"");
                } else if (varIsDirectCallParameter(varIndex)) {
                    int dcp_register = varRegisters[varIndex];
                    cfw.addALoad(dcp_register);
                    cfw.add(ByteCode.GETSTATIC, ""java/lang/Void"", ""TYPE"",
                            ""Ljava/lang/Class;"");
                    int isNumberLabel = cfw.acquireLabel();
                    cfw.add(ByteCode.IF_ACMPEQ, isNumberLabel);
                    short stack = cfw.getStackTop();
                    cfw.addALoad(dcp_register);
                    addScriptRuntimeInvoke(""typeof"",
                                           ""(Ljava/lang/Object;""
                                           +"")Ljava/lang/String;"");
                    int beyond = cfw.acquireLabel();
                    cfw.add(ByteCode.GOTO, beyond);
                    cfw.markLabel(isNumberLabel, stack);
                    cfw.addPush(""number"");
                    cfw.markLabel(beyond);
                } else {
                    cfw.addALoad(varRegisters[varIndex]);
                    addScriptRuntimeInvoke(""typeof"",
                                           ""(Ljava/lang/Object;""
                                           +"")Ljava/lang/String;"");
                }
                return;
            }
        }
        cfw.addALoad(variableObjectLocal);
        cfw.addPush(node.getString());
        addScriptRuntimeInvoke(""typeofName"",
                               ""(Lorg/mozilla/javascript/Scriptable;""",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,saveCurrentCodeOffset,"    private void saveCurrentCodeOffset() {
        savedCodeOffset = cfw.getCurrentCodeOffset();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addInstructionCount,"    private void addInstructionCount() {
        int count = cfw.getCurrentCodeOffset() - savedCodeOffset;
        if (count == 0)
            return;
        cfw.addALoad(contextLocal);
        cfw.addPush(count);
        addScriptRuntimeInvoke(""addInstructionCount"",
                ""(Lorg/mozilla/javascript/Context;""",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitIncDec,"    private void visitIncDec(Node node)
    {
        int incrDecrMask = node.getExistingIntProp(Node.INCRDECR_PROP);
        Node child = node.getFirstChild();
        switch (child.getType()) {
          case Token.GETVAR:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,isArithmeticNode,"    private static boolean isArithmeticNode(Node node)
    {
        int type = node.getType();
        return (type == Token.SUB)
                  || (type == Token.MOD)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitArithmetic,"    private void visitArithmetic(Node node, int opCode, Node child,
                                 Node parent)
    {
        int childNumberFlag = node.getIntProp(Node.ISNUMBER_PROP, -1);
        if (childNumberFlag != -1) {
            generateExpression(child, node);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitBitOp,"    private void visitBitOp(Node node, int type, Node child)
    {
        int childNumberFlag = node.getIntProp(Node.ISNUMBER_PROP, -1);
        generateExpression(child, node);

        // special-case URSH; work with the target arg as a long, so
        // that we can return a 32-bit unsigned value, and call
        // toUint32 instead of toInt32.
        if (type == Token.URSH) {
            addScriptRuntimeInvoke(""toUint32"", ""(Ljava/lang/Object;)J"");
            generateExpression(child.getNext(), node);
            addScriptRuntimeInvoke(""toInt32"", ""(Ljava/lang/Object;)I"");
            // Looks like we need to explicitly mask the shift to 5 bits -
            // LUSHR takes 6 bits.
            cfw.addPush(31);
            cfw.add(ByteCode.IAND);
            cfw.add(ByteCode.LUSHR);
            cfw.add(ByteCode.L2D);
            addDoubleWrap();
            return;
        }
        if (childNumberFlag == -1) {
            addScriptRuntimeInvoke(""toInt32"", ""(Ljava/lang/Object;)I"");
            generateExpression(child.getNext(), node);
            addScriptRuntimeInvoke(""toInt32"", ""(Ljava/lang/Object;)I"");
        }
        else {
            addScriptRuntimeInvoke(""toInt32"", ""(D)I"");
            generateExpression(child.getNext(), node);
            addScriptRuntimeInvoke(""toInt32"", ""(D)I"");
        }
        switch (type) {
          case Token.BITOR:
            cfw.add(ByteCode.IOR);
            break;
          case Token.BITXOR:
            cfw.add(ByteCode.IXOR);
            break;
          case Token.BITAND:
            cfw.add(ByteCode.IAND);
            break;
          case Token.RSH:
            cfw.add(ByteCode.ISHR);
            break;
          case Token.LSH:
            cfw.add(ByteCode.ISHL);
            break;
          default:
            throw Codegen.badTree();
        }
        cfw.add(ByteCode.I2D);
        if (childNumberFlag == -1) {
            addDoubleWrap();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,nodeIsDirectCallParameter,"    private int nodeIsDirectCallParameter(Node node)
    {
        if (node.getType() == Token.GETVAR
            && inDirectCallFunction && !itsForcedObjectParameters)
        {
            int varIndex = fnCurrent.getVarIndex(node);
            if (fnCurrent.isParameter(varIndex)) {
                return varRegisters[varIndex];
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,varIsDirectCallParameter,"    private boolean varIsDirectCallParameter(int varIndex)
    {
        return fnCurrent.isParameter(varIndex)
            && inDirectCallFunction && !itsForcedObjectParameters;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,genSimpleCompare,"    private void genSimpleCompare(int type, int trueGOTO, int falseGOTO)
    {
        if (trueGOTO == -1) throw Codegen.badTree();
        switch (type) {
            case Token.LE :
                cfw.add(ByteCode.DCMPG);
                cfw.add(ByteCode.IFLE, trueGOTO);
                break;
            case Token.GE :
                cfw.add(ByteCode.DCMPL);
                cfw.add(ByteCode.IFGE, trueGOTO);
                break;
            case Token.LT :
                cfw.add(ByteCode.DCMPG);
                cfw.add(ByteCode.IFLT, trueGOTO);
                break;
            case Token.GT :
                cfw.add(ByteCode.DCMPL);
                cfw.add(ByteCode.IFGT, trueGOTO);
                break;
            default :
                throw Codegen.badTree();

        }
        if (falseGOTO != -1)
            cfw.add(ByteCode.GOTO, falseGOTO);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitIfJumpRelOp,"    private void visitIfJumpRelOp(Node node, Node child,
                                  int trueGOTO, int falseGOTO)
    {
        if (trueGOTO == -1 || falseGOTO == -1) throw Codegen.badTree();
        int type = node.getType();
        Node rChild = child.getNext();
        if (type == Token.INSTANCEOF || type == Token.IN) {
            generateExpression(child, node);
            generateExpression(rChild, node);
            cfw.addALoad(contextLocal);
            addScriptRuntimeInvoke(
                (type == Token.INSTANCEOF) ? ""instanceOf"" : ""in"",
                ""(Ljava/lang/Object;""
                +""Ljava/lang/Object;""
                +""Lorg/mozilla/javascript/Context;""
                +"")Z"");
            cfw.add(ByteCode.IFNE, trueGOTO);
            cfw.add(ByteCode.GOTO, falseGOTO);
            return;
        }
        int childNumberFlag = node.getIntProp(Node.ISNUMBER_PROP, -1);
        int left_dcp_register = nodeIsDirectCallParameter(child);
        int right_dcp_register = nodeIsDirectCallParameter(rChild);
        if (childNumberFlag != -1) {
            // Force numeric context on both parameters and optimize",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitIfJumpEqOp,"    private void visitIfJumpEqOp(Node node, Node child,
                                 int trueGOTO, int falseGOTO)
    {
        if (trueGOTO == -1 || falseGOTO == -1) throw Codegen.badTree();

        short stackInitial = cfw.getStackTop();
        int type = node.getType();
        Node rChild = child.getNext();

        // Optimize if one of operands is null
        if (child.getType() == Token.NULL || rChild.getType() == Token.NULL) {
            // eq is symmetric in this case
            if (child.getType() == Token.NULL) {
                child = rChild;
            }
            generateExpression(child, node);
            if (type == Token.SHEQ || type == Token.SHNE) {
                int testCode = (type == Token.SHEQ)
                                ? ByteCode.IFNULL : ByteCode.IFNONNULL;
                cfw.add(testCode, trueGOTO);
            } else {
                if (type != Token.EQ) {
                    // swap false/true targets for !=
                    if (type != Token.NE) throw Codegen.badTree();
                    int tmp = trueGOTO;
                    trueGOTO = falseGOTO;
                    falseGOTO = tmp;
                }
                cfw.add(ByteCode.DUP);
                int undefCheckLabel = cfw.acquireLabel();
                cfw.add(ByteCode.IFNONNULL, undefCheckLabel);
                short stack = cfw.getStackTop();
                cfw.add(ByteCode.POP);
                cfw.add(ByteCode.GOTO, trueGOTO);
                cfw.markLabel(undefCheckLabel, stack);
                Codegen.pushUndefined(cfw);
                cfw.add(ByteCode.IF_ACMPEQ, trueGOTO);
            }
            cfw.add(ByteCode.GOTO, falseGOTO);
        } else {
            int child_dcp_register = nodeIsDirectCallParameter(child);
            if (child_dcp_register != -1
                && rChild.getType() == Token.TO_OBJECT)
            {
                Node convertChild = rChild.getFirstChild();
                if (convertChild.getType() == Token.NUMBER) {
                    cfw.addALoad(child_dcp_register);
                    cfw.add(ByteCode.GETSTATIC,
                            ""java/lang/Void"",
                            ""TYPE"",
                            ""Ljava/lang/Class;"");
                    int notNumbersLabel = cfw.acquireLabel();
                    cfw.add(ByteCode.IF_ACMPNE, notNumbersLabel);
                    cfw.addDLoad(child_dcp_register + 1);
                    cfw.addPush(convertChild.getDouble());
                    cfw.add(ByteCode.DCMPL);
                    if (type == Token.EQ)
                        cfw.add(ByteCode.IFEQ, trueGOTO);
                    else
                        cfw.add(ByteCode.IFNE, trueGOTO);
                    cfw.add(ByteCode.GOTO, falseGOTO);
                    cfw.markLabel(notNumbersLabel);
                    // fall thru into generic handling
                }
            }

            generateExpression(child, node);
            generateExpression(rChild, node);

            String name;
            int testCode;
            switch (type) {
              case Token.EQ:
                name = ""eq"";
                testCode = ByteCode.IFNE;
                break;
              case Token.NE:
                name = ""eq"";
                testCode = ByteCode.IFEQ;
                break;
              case Token.SHEQ:
                name = ""shallowEq"";
                testCode = ByteCode.IFNE;
                break;
              case Token.SHNE:
                name = ""shallowEq"";
                testCode = ByteCode.IFEQ;
                break;
              default:
                throw Codegen.badTree();
            }
            addScriptRuntimeInvoke(name,
                                   ""(Ljava/lang/Object;""
                                   +""Ljava/lang/Object;""
                                   +"")Z"");
            cfw.add(testCode, trueGOTO);
            cfw.add(ByteCode.GOTO, falseGOTO);
        }
        if (stackInitial != cfw.getStackTop()) throw Codegen.badTree();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitSetName,"    private void visitSetName(Node node, Node child)
    {
        String name = node.getFirstChild().getString();
        while (child != null) {
            generateExpression(child, node);
            child = child.getNext();
        }
        cfw.addALoad(contextLocal);
        cfw.addALoad(variableObjectLocal);
        cfw.addPush(name);
        addScriptRuntimeInvoke(
            ""setName"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitSetConst,"    private void visitSetConst(Node node, Node child)
    {
        String name = node.getFirstChild().getString();
        while (child != null) {
            generateExpression(child, node);
            child = child.getNext();
        }
        cfw.addALoad(contextLocal);
        cfw.addPush(name);
        addScriptRuntimeInvoke(
            ""setConst"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitGetVar,"    private void visitGetVar(Node node)
    {
        if (!hasVarsInRegs) Kit.codeBug();
        int varIndex = fnCurrent.getVarIndex(node);
        short reg = varRegisters[varIndex];
        if (varIsDirectCallParameter(varIndex)) {
            // Remember that here the isNumber flag means that we",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitSetVar,"    private void visitSetVar(Node node, Node child, boolean needValue)
    {
        if (!hasVarsInRegs) Kit.codeBug();
        int varIndex = fnCurrent.getVarIndex(node);
        generateExpression(child.getNext(), node);
        boolean isNumber = (node.getIntProp(Node.ISNUMBER_PROP, -1) != -1);
        short reg = varRegisters[varIndex];
        boolean [] constDeclarations = fnCurrent.fnode.getParamAndVarConst();
        if (constDeclarations[varIndex]) {
            if (!needValue) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitSetConstVar,"    private void visitSetConstVar(Node node, Node child, boolean needValue)
    {
        if (!hasVarsInRegs) Kit.codeBug();
        int varIndex = fnCurrent.getVarIndex(node);
        generateExpression(child.getNext(), node);
        boolean isNumber = (node.getIntProp(Node.ISNUMBER_PROP, -1) != -1);
        short reg = varRegisters[varIndex];
        int beyond = cfw.acquireLabel();
        int noAssign = cfw.acquireLabel();
        if (isNumber) {
            cfw.addILoad(reg + 2);
            cfw.add(ByteCode.IFNE, noAssign);
            short stack = cfw.getStackTop();
            cfw.addPush(1);
            cfw.addIStore(reg + 2);
            cfw.addDStore(reg);
            if (needValue) {
                cfw.addDLoad(reg);
                cfw.markLabel(noAssign, stack);
            } else {
                cfw.add(ByteCode.GOTO, beyond);
                cfw.markLabel(noAssign, stack);
                cfw.add(ByteCode.POP2);
            }
        }
        else {
            cfw.addILoad(reg + 1);
            cfw.add(ByteCode.IFNE, noAssign);
            short stack = cfw.getStackTop();
            cfw.addPush(1);
            cfw.addIStore(reg + 1);
            cfw.addAStore(reg);
            if (needValue) {
                cfw.addALoad(reg);
                cfw.markLabel(noAssign, stack);
            } else {
                cfw.add(ByteCode.GOTO, beyond);
                cfw.markLabel(noAssign, stack);
                cfw.add(ByteCode.POP);
            }
        }
        cfw.markLabel(beyond);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitGetProp,"    private void visitGetProp(Node node, Node child)
    {
        generateExpression(child, node); // object
        Node nameChild = child.getNext();
        generateExpression(nameChild, node);  // the name
        if (node.getType() == Token.GETPROPNOWARN) {
            cfw.addALoad(contextLocal);
            addScriptRuntimeInvoke(
                ""getObjectPropNoWarn"",
                ""(Ljava/lang/Object;""
                +""Ljava/lang/String;""
                +""Lorg/mozilla/javascript/Context;""
                +"")Ljava/lang/Object;"");
            return;
        }
        /*
            for 'this.foo' we call getObjectProp(Scriptable...) which can
            skip some casting overhead.
        */
        int childType = child.getType();
        if (childType == Token.THIS && nameChild.getType() == Token.STRING) {
            cfw.addALoad(contextLocal);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitSetProp,"    private void visitSetProp(int type, Node node, Node child)
    {
        Node objectChild = child;
        generateExpression(child, node);
        child = child.getNext();
        if (type == Token.SETPROP_OP) {
            cfw.add(ByteCode.DUP);
        }
        Node nameChild = child;
        generateExpression(child, node);
        child = child.getNext();
        if (type == Token.SETPROP_OP) {
            // stack: ... object object name -> ... object name object name
            cfw.add(ByteCode.DUP_X1);
            //for 'this.foo += ...' we call thisGet which can skip some
            //casting overhead.
            if (objectChild.getType() == Token.THIS
                && nameChild.getType() == Token.STRING)
            {
                cfw.addALoad(contextLocal);
                addScriptRuntimeInvoke(
                    ""getObjectProp"",
                    ""(Lorg/mozilla/javascript/Scriptable;""
                    +""Ljava/lang/String;""
                    +""Lorg/mozilla/javascript/Context;""
                    +"")Ljava/lang/Object;"");
            } else {
                cfw.addALoad(contextLocal);
                addScriptRuntimeInvoke(
                    ""getObjectProp"",
                    ""(Ljava/lang/Object;""
                    +""Ljava/lang/String;""
                    +""Lorg/mozilla/javascript/Context;""
                    +"")Ljava/lang/Object;"");
            }
        }
        generateExpression(child, node);
        cfw.addALoad(contextLocal);
        addScriptRuntimeInvoke(
            ""setObjectProp"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitSetElem,"    private void visitSetElem(int type, Node node, Node child)
    {
        generateExpression(child, node);
        child = child.getNext();
        if (type == Token.SETELEM_OP) {
            cfw.add(ByteCode.DUP);
        }
        generateExpression(child, node);
        child = child.getNext();
        boolean indexIsNumber = (node.getIntProp(Node.ISNUMBER_PROP, -1) != -1);
        if (type == Token.SETELEM_OP) {
            if (indexIsNumber) {
                // stack: ... object object number
                //        -> ... object number object number
                cfw.add(ByteCode.DUP2_X1);
                cfw.addALoad(contextLocal);
                addOptRuntimeInvoke(
                    ""getObjectIndex"",
                    ""(Ljava/lang/Object;D""
                    +""Lorg/mozilla/javascript/Context;""
                    +"")Ljava/lang/Object;"");
            } else {
                // stack: ... object object indexObject
                //        -> ... object indexObject object indexObject
                cfw.add(ByteCode.DUP_X1);
                cfw.addALoad(contextLocal);
                addScriptRuntimeInvoke(
                    ""getObjectElem"",
                    ""(Ljava/lang/Object;""
                    +""Ljava/lang/Object;""
                    +""Lorg/mozilla/javascript/Context;""
                    +"")Ljava/lang/Object;"");
            }
        }
        generateExpression(child, node);
        cfw.addALoad(contextLocal);
        if (indexIsNumber) {
            addScriptRuntimeInvoke(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,visitDotQuery,"    private void visitDotQuery(Node node, Node child)
    {
        updateLineNumber(node);
        generateExpression(child, node);
        cfw.addALoad(variableObjectLocal);
        addScriptRuntimeInvoke(""enterDotQuery"",
                               ""(Ljava/lang/Object;""
                               +""Lorg/mozilla/javascript/Scriptable;""
                               +"")Lorg/mozilla/javascript/Scriptable;"");
        cfw.addAStore(variableObjectLocal);

        // add push null/pop with label in between to simplify code for loop
        // continue when it is necessary to pop the null result from
        // updateDotQuery
        cfw.add(ByteCode.ACONST_NULL);
        int queryLoopStart = cfw.acquireLabel();
        cfw.markLabel(queryLoopStart); // loop continue jumps here
        cfw.add(ByteCode.POP);

        generateExpression(child.getNext(), node);
        addScriptRuntimeInvoke(""toBoolean"", ""(Ljava/lang/Object;)Z"");
        cfw.addALoad(variableObjectLocal);
        addScriptRuntimeInvoke(""updateDotQuery"",
                               ""(Z""
                               +""Lorg/mozilla/javascript/Scriptable;""
                               +"")Ljava/lang/Object;"");
        cfw.add(ByteCode.DUP);
        cfw.add(ByteCode.IFNULL, queryLoopStart);
        // stack: ... non_null_result_of_updateDotQuery
        cfw.addALoad(variableObjectLocal);
        addScriptRuntimeInvoke(""leaveDotQuery"",
                               ""(Lorg/mozilla/javascript/Scriptable;""
                               +"")Lorg/mozilla/javascript/Scriptable;"");
        cfw.addAStore(variableObjectLocal);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getLocalBlockRegister,"    private int getLocalBlockRegister(Node node)
    {
        Node localBlock = (Node)node.getProp(Node.LOCAL_BLOCK_PROP);
        int localSlot = localBlock.getExistingIntProp(Node.LOCAL_PROP);
        return localSlot;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,dcpLoadAsNumber,"    private void dcpLoadAsNumber(int dcp_register)
    {
        cfw.addALoad(dcp_register);
        cfw.add(ByteCode.GETSTATIC,
                ""java/lang/Void"",
                ""TYPE"",
                ""Ljava/lang/Class;"");
        int isNumberLabel = cfw.acquireLabel();
        cfw.add(ByteCode.IF_ACMPEQ, isNumberLabel);
        short stack = cfw.getStackTop();
        cfw.addALoad(dcp_register);
        addObjectToDouble();
        int beyond = cfw.acquireLabel();
        cfw.add(ByteCode.GOTO, beyond);
        cfw.markLabel(isNumberLabel, stack);
        cfw.addDLoad(dcp_register + 1);
        cfw.markLabel(beyond);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,dcpLoadAsObject,"    private void dcpLoadAsObject(int dcp_register)
    {
        cfw.addALoad(dcp_register);
        cfw.add(ByteCode.GETSTATIC,
                ""java/lang/Void"",
                ""TYPE"",
                ""Ljava/lang/Class;"");
        int isNumberLabel = cfw.acquireLabel();
        cfw.add(ByteCode.IF_ACMPEQ, isNumberLabel);
        short stack = cfw.getStackTop();
        cfw.addALoad(dcp_register);
        int beyond = cfw.acquireLabel();
        cfw.add(ByteCode.GOTO, beyond);
        cfw.markLabel(isNumberLabel, stack);
        cfw.addDLoad(dcp_register + 1);
        addDoubleWrap();
        cfw.markLabel(beyond);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addGoto,"    private void addGoto(Node target, int jumpcode)
    {
        int targetLabel = getTargetLabel(target);
        cfw.add(jumpcode, targetLabel);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addObjectToDouble,"    private void addObjectToDouble()
    {
        addScriptRuntimeInvoke(""toNumber"", ""(Ljava/lang/Object;)D"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addNewObjectArray,"    private void addNewObjectArray(int size)
    {
        if (size == 0) {
            if (itsZeroArgArray >= 0) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addScriptRuntimeInvoke,"    private void addScriptRuntimeInvoke(String methodName,
                                        String methodSignature)
    {
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org.mozilla.javascript.ScriptRuntime"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addOptRuntimeInvoke,"    private void addOptRuntimeInvoke(String methodName,
                                     String methodSignature)
    {
        cfw.addInvoke(ByteCode.INVOKESTATIC,
                      ""org/mozilla/javascript/optimizer/OptRuntime"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addJumpedBooleanWrap,"    private void addJumpedBooleanWrap(int trueLabel, int falseLabel)
    {
        cfw.markLabel(falseLabel);
        int skip = cfw.acquireLabel();
        cfw.add(ByteCode.GETSTATIC, ""java/lang/Boolean"",
                                ""FALSE"", ""Ljava/lang/Boolean;"");
        cfw.add(ByteCode.GOTO, skip);
        cfw.markLabel(trueLabel);
        cfw.add(ByteCode.GETSTATIC, ""java/lang/Boolean"",
                                ""TRUE"", ""Ljava/lang/Boolean;"");
        cfw.markLabel(skip);
        cfw.adjustStackTop(-1);   // only have 1 of true/false
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,addDoubleWrap,"    private void addDoubleWrap()
    {
        addOptRuntimeInvoke(""wrapDouble"", ""(D)Ljava/lang/Double;"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getNewWordPairLocal,"    private short getNewWordPairLocal(boolean isConst)
    {
        short result = getConsecutiveSlots(2, isConst);
        if (result < (MAX_LOCALS - 1)) {
            locals[result] = 1;
            locals[result + 1] = 1;
            if (isConst)
                locals[result + 2] = 1;
            if (result == firstFreeLocal) {
                for (int i = firstFreeLocal + 2; i < MAX_LOCALS; i++) {
                    if (locals[i] == 0) {
                        firstFreeLocal = (short) i;
                        if (localsMax < firstFreeLocal)
                            localsMax = firstFreeLocal;
                        return result;
                    }
                }
            }
            else {
                return result;
            }
        }
        throw Context.reportRuntimeError(""Program too complex "" +
                                         ""(out of locals)"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getNewWordLocal,"    private short getNewWordLocal(boolean isConst)
    {
        short result = getConsecutiveSlots(1, isConst);
        if (result < (MAX_LOCALS - 1)) {
            locals[result] = 1;
            if (isConst)
                locals[result + 1] = 1;
            if (result == firstFreeLocal) {
                for (int i = firstFreeLocal + 2; i < MAX_LOCALS; i++) {
                    if (locals[i] == 0) {
                        firstFreeLocal = (short) i;
                        if (localsMax < firstFreeLocal)
                            localsMax = firstFreeLocal;
                        return result;
                    }
                }
            }
            else {
                return result;
            }
        }
        throw Context.reportRuntimeError(""Program too complex "" +
                                         ""(out of locals)"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getNewWordLocal,"    private short getNewWordLocal()
    {
        short result = firstFreeLocal;
        locals[result] = 1;
        for (int i = firstFreeLocal + 1; i < MAX_LOCALS; i++) {
            if (locals[i] == 0) {
                firstFreeLocal = (short) i;
                if (localsMax < firstFreeLocal)
                    localsMax = firstFreeLocal;
                return result;
            }
        }
        throw Context.reportRuntimeError(""Program too complex "" +
                                         ""(out of locals)"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,getConsecutiveSlots,"    private short getConsecutiveSlots(int count, boolean isConst) {
        if (isConst)
            count++;
        short result = firstFreeLocal;
        while (true) {
            if (result >= (MAX_LOCALS - 1))
                break;
            int i;
            for (i = 0; i < count; i++)
                if (locals[result + i] != 0)
                    break;
            if (i >= count)
                break;
            result++;
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,incReferenceWordLocal,"    private void incReferenceWordLocal(short local)
    {
        locals[local]++;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,decReferenceWordLocal,"    private void decReferenceWordLocal(short local)
    {
        locals[local]--;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Codegen.java,releaseWordLocal,"    private void releaseWordLocal(short local)
    {
        if (local < firstFreeLocal)
            firstFreeLocal = local;
        locals[local] = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,set,"    void set(int n)
    {
        if (!(0 <= n && n < itsSize)) badIndex(n);
        itsBits[n >> 5] |= 1 << (n & 31);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,test,"    boolean test(int n)
    {
        if (!(0 <= n && n < itsSize)) badIndex(n);
        return ((itsBits[n >> 5] & (1 << (n & 31))) != 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,not,"    void not()
    {
        int bitsLength = itsBits.length;
        for (int i = 0; i < bitsLength; i++)
            itsBits[i] = ~itsBits[i];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,clear,"    void clear(int n)
    {
        if (!(0 <= n && n < itsSize)) badIndex(n);
        itsBits[n >> 5] &= ~(1 << (n & 31));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,clear,"    void clear()
    {
        int bitsLength = itsBits.length;
        for (int i = 0; i < bitsLength; i++)
            itsBits[i] = 0;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,or,"    void or(DataFlowBitSet b)
    {
        int bitsLength = itsBits.length;
        for (int i = 0; i < bitsLength; i++)
            itsBits[i] |= b.itsBits[i];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,toString,"    public String toString()
    {
        StringBuffer sb = new StringBuffer();
        sb.append(""DataFlowBitSet, size = "");
        sb.append(itsSize);
        sb.append('\n');
        int bitsLength = itsBits.length;
        for (int i = 0; i < bitsLength; i++) {
            sb.append(Integer.toHexString(itsBits[i]));
            sb.append(' ');
        }
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,df,"    boolean df(DataFlowBitSet in, DataFlowBitSet gen, DataFlowBitSet notKill)
    {
        int bitsLength = itsBits.length;
        boolean changed = false;
        for (int i = 0; i < bitsLength; i++) {
            int oldBits = itsBits[i];
            itsBits[i] = (in.itsBits[i] | gen.itsBits[i]) & notKill.itsBits[i];
            changed |= (oldBits != itsBits[i]);
        }
        return changed;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,df2,"    boolean df2(DataFlowBitSet in, DataFlowBitSet gen, DataFlowBitSet notKill)
    {
        int bitsLength = itsBits.length;
        boolean changed = false;
        for (int i = 0; i < bitsLength; i++) {
            int oldBits = itsBits[i];
            itsBits[i] = (in.itsBits[i] & notKill.itsBits[i]) | gen.itsBits[i];
            changed |= (oldBits != itsBits[i]);
        }
        return changed;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,DataFlowBitSet.java,badIndex,"    private void badIndex(int n)
    {
        throw new RuntimeException(""DataFlowBitSet bad index "" + n);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,get,"    static OptFunctionNode get(ScriptOrFnNode scriptOrFn, int i)
    {
        FunctionNode fnode = scriptOrFn.getFunctionNode(i);
        return (OptFunctionNode)fnode.getCompilerData();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,get,"    static OptFunctionNode get(ScriptOrFnNode scriptOrFn)
    {
        return (OptFunctionNode)scriptOrFn.getCompilerData();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,isTargetOfDirectCall,"    boolean isTargetOfDirectCall()
    {
        return directTargetIndex >= 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,getDirectTargetIndex,"    int getDirectTargetIndex()
    {
        return directTargetIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,setDirectTargetIndex,"    void setDirectTargetIndex(int directTargetIndex)
    {
        // One time action
        if (directTargetIndex < 0 || this.directTargetIndex >= 0)
            Kit.codeBug();
        this.directTargetIndex = directTargetIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,setParameterNumberContext,"    void setParameterNumberContext(boolean b)
    {
        itsParameterNumberContext = b;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,getParameterNumberContext,"    boolean getParameterNumberContext()
    {
        return itsParameterNumberContext;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,getVarCount,"    int getVarCount()
    {
        return fnode.getParamAndVarCount();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,isParameter,"    boolean isParameter(int varIndex)
    {
        return varIndex < fnode.getParamCount();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,isNumberVar,"    boolean isNumberVar(int varIndex)
    {
        varIndex -= fnode.getParamCount();
        if (varIndex >= 0 && numberVarFlags != null) {
            return numberVarFlags[varIndex];
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,setIsNumberVar,"    void setIsNumberVar(int varIndex)
    {
        varIndex -= fnode.getParamCount();
        // Can only be used with non-parameters
        if (varIndex < 0) Kit.codeBug();
        if (numberVarFlags == null) {
            int size = fnode.getParamAndVarCount() - fnode.getParamCount();
            numberVarFlags = new boolean[size];
        }
        numberVarFlags[varIndex] = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptFunctionNode.java,getVarIndex,"    int getVarIndex(Node n)
    {
        int index = n.getIntProp(Node.VARIABLE_PROP, -1);
        if (index == -1) {
            Node node;
            int type = n.getType();
            if (type == Token.GETVAR) {
                node = n;
            } else if (type == Token.SETVAR ||
                       type == Token.SETCONSTVAR) {
                node = n.getFirstChild();
            } else {
                throw Kit.codeBug();
            }
            index = fnode.getIndexForNameNode(node);
            if (index < 0) throw Kit.codeBug();
            n.putIntProp(Node.VARIABLE_PROP, index);
        }
        return index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,call0,"    public static Object call0(Callable fun, Scriptable thisObj,
                               Context cx, Scriptable scope)
    {
        return fun.call(cx, scope, thisObj, ScriptRuntime.emptyArgs);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,call1,"    public static Object call1(Callable fun, Scriptable thisObj, Object arg0,
                               Context cx, Scriptable scope)
    {
        return fun.call(cx, scope, thisObj, new Object[] { arg0 } );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,call2,"    public static Object call2(Callable fun, Scriptable thisObj,
                               Object arg0, Object arg1,
                               Context cx, Scriptable scope)
    {
        return fun.call(cx, scope, thisObj, new Object[] { arg0, arg1 });
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,callN,"    public static Object callN(Callable fun, Scriptable thisObj,
                               Object[] args,
                               Context cx, Scriptable scope)
    {
        return fun.call(cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,callName,"    public static Object callName(Object[] args, String name,
                                  Context cx, Scriptable scope)
    {
        Callable f = getNameFunctionAndThis(name, cx, scope);
        Scriptable thisObj = lastStoredScriptable(cx);
        return f.call(cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,callName0,"    public static Object callName0(String name,
                                   Context cx, Scriptable scope)
    {
        Callable f = getNameFunctionAndThis(name, cx, scope);
        Scriptable thisObj = lastStoredScriptable(cx);
        return f.call(cx, scope, thisObj, ScriptRuntime.emptyArgs);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,callProp0,"    public static Object callProp0(Object value, String property,
                                   Context cx, Scriptable scope)
    {
        Callable f = getPropFunctionAndThis(value, property, cx);
        Scriptable thisObj = lastStoredScriptable(cx);
        return f.call(cx, scope, thisObj, ScriptRuntime.emptyArgs);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,add,"    public static Object add(Object val1, double val2)
    {
        if (val1 instanceof Scriptable)
            val1 = ((Scriptable) val1).getDefaultValue(null);
        if (!(val1 instanceof String))
            return wrapDouble(toNumber(val1) + val2);
        return ((String)val1).concat(toString(val2));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,add,"    public static Object add(double val1, Object val2)
    {
        if (val2 instanceof Scriptable)
            val2 = ((Scriptable) val2).getDefaultValue(null);
        if (!(val2 instanceof String))
            return wrapDouble(toNumber(val2) + val1);
        return toString(val1).concat((String)val2);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,elemIncrDecr,"    public static Object elemIncrDecr(Object obj, double index,
                                      Context cx, int incrDecrMask)
    {
        return ScriptRuntime.elemIncrDecr(obj, new Double(index), cx,
                                          incrDecrMask);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,padStart,"    public static Object[] padStart(Object[] currentArgs, int count) {
        Object[] result = new Object[currentArgs.length + count];
        System.arraycopy(currentArgs, 0, result, count, currentArgs.length);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,initFunction,"    public static void initFunction(NativeFunction fn, int functionType,
                                    Scriptable scope, Context cx)
    {
        ScriptRuntime.initFunction(cx, scope, fn, functionType, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,callSpecial,"    public static Object callSpecial(Context cx, Callable fun,
                                     Scriptable thisObj, Object[] args,
                                     Scriptable scope,
                                     Scriptable callerThis, int callType,
                                     String fileName, int lineNumber)
    {
        return ScriptRuntime.callSpecial(cx, fun, thisObj, args, scope,
                                         callerThis, callType,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,newObjectSpecial,"    public static Object newObjectSpecial(Context cx, Object fun,
                                          Object[] args, Scriptable scope,
                                          Scriptable callerThis, int callType)
    {
        return ScriptRuntime.newSpecial(cx, fun, args, scope, callType);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,wrapDouble,"    public static Double wrapDouble(double num)
    {
        if (num == 0.0) {
            if (1 / num > 0) {
                // +0.0
                return zeroObj;
            }
        } else if (num == 1.0) {
            return oneObj;
        } else if (num == -1.0) {
            return minusOneObj;
        } else if (num != num) {
            return NaNobj;
        }
        return new Double(num);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,encodeIntArray,"    static String encodeIntArray(int[] array)
    {
        // XXX: this extremely inefficient for small integers
        if (array == null) { return null; }
        int n = array.length;
        char[] buffer = new char[1 + n * 2];
        buffer[0] = 1;
        for (int i = 0; i != n; ++i) {
            int value = array[i];
            int shift = 1 + i * 2;
            buffer[shift] = (char)(value >>> 16);
            buffer[shift + 1] = (char)value;
        }
        return new String(buffer);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,decodeIntArray,"    private static int[] decodeIntArray(String str, int arraySize)
    {
        // XXX: this extremely inefficient for small integers
        if (arraySize == 0) {
            if (str != null) throw new IllegalArgumentException();
            return null;
        }
        if (str.length() != 1 + arraySize * 2 && str.charAt(0) != 1) {
            throw new IllegalArgumentException();
        }
        int[] array = new int[arraySize];
        for (int i = 0; i != arraySize; ++i) {
            int shift = 1 + i * 2;
            array[i] = (str.charAt(shift) << 16) | str.charAt(shift + 1);
        }
        return array;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,newArrayLiteral,"    public static Scriptable newArrayLiteral(Object[] objects,
                                             String encodedInts,
                                             int skipCount,
                                             Context cx,
                                             Scriptable scope)
    {
        int[] skipIndexces = decodeIntArray(encodedInts, skipCount);
        return newArrayLiteral(objects, skipIndexces, cx, scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,main,"    public static void main(final Script script, final String[] args)
    {
        Context.call(new ContextAction() {
            public Object run(Context cx)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,run,"            public Object run(Context cx)
            {
                ScriptableObject global = getGlobal(cx);

                // get the command line arguments and define ""arguments""
                // array in the top-level object
                Object[] argsCopy = new Object[args.length];
                System.arraycopy(args, 0, argsCopy, 0, args.length);
                Scriptable argsObj = cx.newArray(global, argsCopy);
                global.defineProperty(""arguments"", argsObj,
                                      ScriptableObject.DONTENUM);
                script.exec(cx, global);
                return null;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,throwStopIteration,"    public static void throwStopIteration(Object obj) {
        throw new JavaScriptException(
            NativeIterator.getStopIterationObject((Scriptable)obj), """", 0);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,createNativeGenerator,"    public static Scriptable createNativeGenerator(NativeFunction funObj,
                                                   Scriptable scope,
                                                   Scriptable thisObj,
                                                   int maxLocals,
                                                   int maxStack)
    {
        return new NativeGenerator(scope, funObj,
                new GeneratorState(thisObj, maxLocals, maxStack));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,getGeneratorStackState,"    public static Object[] getGeneratorStackState(Object obj) {
        GeneratorState rgs = (GeneratorState) obj;
        if (rgs.stackState == null)
            rgs.stackState = new Object[rgs.maxStack];
        return rgs.stackState;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptRuntime.java,getGeneratorLocalsState,"    public static Object[] getGeneratorLocalsState(Object obj) {
        GeneratorState rgs = (GeneratorState) obj;
        if (rgs.localsState == null)
            rgs.localsState = new Object[rgs.maxLocals];
        return rgs.localsState;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptTransformer.java,visitNew,"    protected void visitNew(Node node, ScriptOrFnNode tree) {
        detectDirectCall(node, tree);
        super.visitNew(node, tree);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptTransformer.java,visitCall,"    protected void visitCall(Node node, ScriptOrFnNode tree) {
        detectDirectCall(node, tree);
        super.visitCall(node, tree);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,OptTransformer.java,detectDirectCall,"    private void detectDirectCall(Node node, ScriptOrFnNode tree)
    {
        if (tree.getType() == Token.FUNCTION) {
            Node left = node.getFirstChild();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Optimizer.java,optimize,"    void optimize(ScriptOrFnNode scriptOrFn)
    {
        //  run on one function at a time for now
        int functionCount = scriptOrFn.getFunctionCount();
        for (int i = 0; i != functionCount; ++i) {
            OptFunctionNode f = OptFunctionNode.get(scriptOrFn, i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Optimizer.java,optimizeFunction,"    private void optimizeFunction(OptFunctionNode theFunction)
    {
        if (theFunction.fnode.requiresActivation()) return;

        inDirectCallFunction = theFunction.isTargetOfDirectCall();
        this.theFunction = theFunction;

        ObjArray statementsArray = new ObjArray();
        buildStatementList_r(theFunction.fnode, statementsArray);
        Node[] theStatementNodes = new Node[statementsArray.size()];
        statementsArray.toArray(theStatementNodes);

        Block.runFlowAnalyzes(theFunction, theStatementNodes);

        if (!theFunction.fnode.requiresActivation()) {
            /*",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Optimizer.java,markDCPNumberContext,"    private void markDCPNumberContext(Node n)
    {
        if (inDirectCallFunction && n.getType() == Token.GETVAR) {
            int varIndex = theFunction.getVarIndex(n);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Optimizer.java,convertParameter,"    private boolean convertParameter(Node n)
    {
        if (inDirectCallFunction && n.getType() == Token.GETVAR) {
            int varIndex = theFunction.getVarIndex(n);
            if (theFunction.isParameter(varIndex)) {
                n.removeProp(Node.ISNUMBER_PROP);
                return true;
            }
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Optimizer.java,rewriteForNumberVariables,"    private int rewriteForNumberVariables(Node n)
    {
        switch (n.getType()) {
            case Token.EXPR_VOID : {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Optimizer.java,rewriteAsObjectChildren,"    private void rewriteAsObjectChildren(Node n, Node child)
    {
        // Force optimized children to be objects
        while (child != null) {
            Node nextChild = child.getNext();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Optimizer.java,buildStatementList_r,"    private static void buildStatementList_r(Node node, ObjArray statements)
    {
        int type = node.getType();
        if (type == Token.BLOCK
            || type == Token.LOCAL_BLOCK",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,init,"    public static void init(Context cx, Scriptable scope, boolean sealed)
    {

        NativeRegExp proto = new NativeRegExp();
        proto.re = (RECompiled)compileRE(cx, """", null, false);
        proto.activatePrototypeMap(MAX_PROTOTYPE_ID);
        proto.setParentScope(scope);
        proto.setPrototype(getObjectPrototype(scope));

        NativeRegExpCtor ctor = new NativeRegExpCtor();
        // Bug #324006: ECMA-262 15.10.6.1 says ""The initial value of
        // RegExp.prototype.constructor is the builtin RegExp constructor."" 
        proto.put(""constructor"", proto, ctor);

        ScriptRuntime.setFunctionProtoAndParent(ctor, scope);

        ctor.setImmunePrototypeProperty(proto);

        if (sealed) {
            proto.sealObject();
            ctor.sealObject();
        }

        defineProperty(scope, ""RegExp"", ctor, ScriptableObject.DONTENUM);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getClassName,"    public String getClassName()
    {
        return ""RegExp"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        return execSub(cx, scope, args, MATCH);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        return (Scriptable)execSub(cx, scope, args, MATCH);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,compile,"    Scriptable compile(Context cx, Scriptable scope, Object[] args)
    {
        if (args.length > 0 && args[0] instanceof NativeRegExp) {
            if (args.length > 1 && args[1] != Undefined.instance) {
                // report error
                throw ScriptRuntime.typeError0(""msg.bad.regexp.compile"");
            }
            NativeRegExp thatObj = (NativeRegExp) args[0];
            this.re = thatObj.re;
            this.lastIndex = thatObj.lastIndex;
            return this;
        }
        String s = args.length == 0 ? """" : ScriptRuntime.toString(args[0]);
        String global = args.length > 1 && args[1] != Undefined.instance
            ? ScriptRuntime.toString(args[1])
            : null;
        this.re = (RECompiled)compileRE(cx, s, global, false);
        this.lastIndex = 0;
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,toString,"    public String toString()
    {
        StringBuffer buf = new StringBuffer();
        buf.append('/');
        if (re.source.length != 0) {
            buf.append(re.source);
        } else {
            // See bugzilla 226045
            buf.append(""(?:)"");
        }
        buf.append('/');
        if ((re.flags & JSREG_GLOB) != 0)
            buf.append('g');
        if ((re.flags & JSREG_FOLD) != 0)
            buf.append('i');
        if ((re.flags & JSREG_MULTILINE) != 0)
            buf.append('m');
        return buf.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getImpl,"    private static RegExpImpl getImpl(Context cx)
    {
        return (RegExpImpl) ScriptRuntime.getRegExpProxy(cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,execSub,"    private Object execSub(Context cx, Scriptable scopeObj,
                           Object[] args, int matchType)
    {
        RegExpImpl reImpl = getImpl(cx);
        String str;
        if (args.length == 0) {
            str = reImpl.input;
            if (str == null) {
                reportError(""msg.no.re.input.for"", toString());
            }
        } else {
            str = ScriptRuntime.toString(args[0]);
        }
        double d = ((re.flags & JSREG_GLOB) != 0) ? lastIndex : 0;

        Object rval;
        if (d < 0 || str.length() < d) {
            lastIndex = 0;
            rval = null;
        }
        else {
            int indexp[] = { (int)d };
            rval = executeRegExp(cx, scopeObj, reImpl, str, indexp, matchType);
            if ((re.flags & JSREG_GLOB) != 0) {
                lastIndex = (rval == null || rval == Undefined.instance)
                            ? 0 : indexp[0];
            }
        }
        return rval;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,compileRE,"    static Object compileRE(Context cx, String str, String global, boolean flat)
    {
        RECompiled regexp = new RECompiled();
        regexp.source = str.toCharArray();
        int length = str.length();

        int flags = 0;
        if (global != null) {
            for (int i = 0; i < global.length(); i++) {
                char c = global.charAt(i);
                if (c == 'g') {
                    flags |= JSREG_GLOB;
                } else if (c == 'i') {
                    flags |= JSREG_FOLD;
                } else if (c == 'm') {
                    flags |= JSREG_MULTILINE;
                } else {
                    reportError(""msg.invalid.re.flag"", String.valueOf(c));
                }
            }
        }
        regexp.flags = flags;

        CompilerState state = new CompilerState(cx, regexp.source, length, flags);
        if (flat && length > 0) {
if (debug) {
System.out.println(""flat = \"""" + str + ""\"""");
}
            state.result = new RENode(REOP_FLAT);
            state.result.chr = state.cpbegin[0];
            state.result.length = length;
            state.result.flatIndex = 0;
            state.progLength += 5;
        }
        else
            if (!parseDisjunction(state))
                return null;

        regexp.program = new byte[state.progLength + 1];
        if (state.classCount != 0) {
            regexp.classList = new RECharSet[state.classCount];
            regexp.classCount = state.classCount;
        }
        int endPC = emitREBytecode(state, regexp, 0, state.result);
        regexp.program[endPC++] = REOP_END;

if (debug) {
System.out.println(""Prog. length = "" + endPC);
for (int i = 0; i < endPC; i++) {
    System.out.print(regexp.program[i]);
    if (i < (endPC - 1)) System.out.print("", "");
}
System.out.println();
}
        regexp.parenCount = state.parenCount;

        // If re starts with literal, init anchorCh accordingly
        switch (regexp.program[0]) {
        case REOP_UCFLAT1:
        case REOP_UCFLAT1i:
            regexp.anchorCh = (char)getIndex(regexp.program, 1);
            break;
        case REOP_FLAT1:
        case REOP_FLAT1i:
            regexp.anchorCh = (char)(regexp.program[1] & 0xFF);
            break;
        case REOP_FLAT:
        case REOP_FLATi:
            int k = getIndex(regexp.program, 1);
            regexp.anchorCh = regexp.source[k];
            break;
        }

if (debug) {
if (regexp.anchorCh >= 0) {
    System.out.println(""Anchor ch = '"" + (char)regexp.anchorCh + ""'"");
}
}
        return regexp;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,isDigit,"    static boolean isDigit(char c)
    {
        return '0' <= c && c <= '9';
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,isWord,"    private static boolean isWord(char c)
    {
        return Character.isLetter(c) || isDigit(c) || c == '_';
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,isLineTerm,"    private static boolean isLineTerm(char c)
    {
        return ScriptRuntime.isJSLineTerminator(c);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,isREWhiteSpace,"    private static boolean isREWhiteSpace(int c)
    {
        return (c == '\u0020' || c == '\u0009'
                || c == '\n' || c == '\r'",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,upcase,"    private static char upcase(char ch)
    {
        if (ch < 128) {
            if ('a' <= ch && ch <= 'z') {
                return (char)(ch + ('A' - 'a'));
            }
            return ch;
        }
        char cu = Character.toUpperCase(ch);
        if ((ch >= 128) && (cu < 128)) return ch;
        return cu;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,downcase,"    private static char downcase(char ch)
    {
        if (ch < 128) {
            if ('A' <= ch && ch <= 'Z') {
                return (char)(ch + ('a' - 'A'));
            }
            return ch;
        }
        char cl = Character.toLowerCase(ch);
        if ((ch >= 128) && (cl < 128)) return ch;
        return cl;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,toASCIIHexDigit,"    private static int toASCIIHexDigit(int c)
    {
        if (c < '0')
            return -1;
        if (c <= '9') {
            return c - '0';
        }
        c |= 0x20;
        if ('a' <= c && c <= 'f') {
            return c - 'a' + 10;
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,parseDisjunction,"    private static boolean parseDisjunction(CompilerState state)
    {
        if (!parseAlternative(state))
            return false;
        char[] source = state.cpbegin;
        int index = state.cp;
        if (index != source.length && source[index] == '|') {
            RENode altResult;
            ++state.cp;
            altResult = new RENode(REOP_ALT);
            altResult.kid = state.result;
            if (!parseDisjunction(state))
                return false;
            altResult.kid2 = state.result;
            state.result = altResult;
            /* ALT, <next>, ..., JUMP, <end> ... JUMP <end> */
            state.progLength += 9;
        }
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,parseAlternative,"    private static boolean parseAlternative(CompilerState state)
    {
        RENode headTerm = null;
        RENode tailTerm = null;
        char[] source = state.cpbegin;
        while (true) {
            if (state.cp == state.cpend || source[state.cp] == '|'",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,calculateBitmapSize,"    private static boolean
    calculateBitmapSize(CompilerState state, RENode target, char[] src,
                        int index, int end)
    {
        char rangeStart = 0;
        char c;
        int n;
        int nDigits;
        int i;
        int max = 0;
        boolean inRange = false;

        target.bmsize = 0;

        if (index == end)
            return true;

        if (src[index] == '^')
            ++index;

        while (index != end) {
            int localMax = 0;
            nDigits = 2;
            switch (src[index]) {
            case '\\':
                ++index;
                c = src[index++];
                switch (c) {
                case 'b':
                    localMax = 0x8;
                    break;
                case 'f':
                    localMax = 0xC;
                    break;
                case 'n':
                    localMax = 0xA;
                    break;
                case 'r':
                    localMax = 0xD;
                    break;
                case 't':
                    localMax = 0x9;
                    break;
                case 'v':
                    localMax = 0xB;
                    break;
                case 'c':
                    if (((index + 1) < end) && Character.isLetter(src[index + 1]))
                        localMax = (char)(src[index++] & 0x1F);
                    else
                        localMax = '\\';
                    break;
                case 'u':
                    nDigits += 2;
                    // fall thru...
                case 'x':
                    n = 0;
                    for (i = 0; (i < nDigits) && (index < end); i++) {
                        c = src[index++];
                        n = Kit.xDigitToInt(c, n);
                        if (n < 0) {
                            // Back off to accepting the original
                            // '\' as a literal
                            index -= (i + 1);
                            n = '\\';
                            break;
                        }
                    }
                    localMax = n;
                    break;
                case 'd':
                    if (inRange) {
                        reportError(""msg.bad.range"", """");
                        return false;
                    }
                    localMax = '9';
                    break;
                case 'D':
                case 's':
                case 'S':
                case 'w':
                case 'W':
                    if (inRange) {
                        reportError(""msg.bad.range"", """");
                        return false;
                    }
                    target.bmsize = 65535;
                    return true;
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                    /*
                     *  This is a non-ECMA extension - decimal escapes (in this
                     *  case, octal!) are supposed to be an error inside class
                     *  ranges, but supported here for backwards compatibility.
                     *
                     */
                    n = (c - '0');
                    c = src[index];
                    if ('0' <= c && c <= '7') {
                        index++;
                        n = 8 * n + (c - '0');
                        c = src[index];
                        if ('0' <= c && c <= '7') {
                            index++;
                            i = 8 * n + (c - '0');
                            if (i <= 0377)
                                n = i;
                            else
                                index--;
                        }
                    }
                    localMax = n;
                    break;

                default:
                    localMax = c;
                    break;
                }
                break;
            default:
                localMax = src[index++];
                break;
            }
            if (inRange) {
                if (rangeStart > localMax) {
                    reportError(""msg.bad.range"", """");
                    return false;
                }
                inRange = false;
            }
            else {
                if (index < (end - 1)) {
                    if (src[index] == '-') {
                        ++index;
                        inRange = true;
                        rangeStart = (char)localMax;
                        continue;
                    }
                }
            }
            if ((state.flags & JSREG_FOLD) != 0){
                char cu = upcase((char)localMax);
                char cd = downcase((char)localMax);
                localMax = (cu >= cd) ? cu : cd;
            }
            if (localMax > max)
                max = localMax;
        }
        target.bmsize = max;
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,doFlat,"    private static void doFlat(CompilerState state, char c)
    {
        state.result = new RENode(REOP_FLAT);
        state.result.chr = c;
        state.result.length = 1;
        state.result.flatIndex = -1;
        state.progLength += 3;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getDecimalValue,"    private static int
    getDecimalValue(char c, CompilerState state, int maxValue,
                    String overflowMessageId)
    {
        boolean overflow = false;
        int start = state.cp;
        char[] src = state.cpbegin;
        int value = c - '0';
        for (; state.cp != state.cpend; ++state.cp) {
            c = src[state.cp];
            if (!isDigit(c)) {
                break;
            }
            if (!overflow) {
                int digit = c - '0';
                if (value < (maxValue - digit) / 10) {
                    value = value * 10 + digit;
                } else {
                    overflow = true;
                    value = maxValue;
                }
            }
        }
        if (overflow) {
            reportError(overflowMessageId,
                        String.valueOf(src, start, state.cp - start));
        }
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,parseTerm,"    private static boolean
    parseTerm(CompilerState state)
    {
        char[] src = state.cpbegin;
        char c = src[state.cp++];
        int nDigits = 2;
        int parenBaseCount = state.parenCount;
        int num, tmp;
        RENode term;
        int termStart;

        switch (c) {
        /* assertions and atoms */
        case '^':
            state.result = new RENode(REOP_BOL);
            state.progLength++;
            return true;
        case '$':
            state.result = new RENode(REOP_EOL);
            state.progLength++;
            return true;
        case '\\':
            if (state.cp < state.cpend) {
                c = src[state.cp++];
                switch (c) {
                /* assertion escapes */
                case 'b' :
                    state.result = new RENode(REOP_WBDRY);
                    state.progLength++;
                    return true;
                case 'B':
                    state.result = new RENode(REOP_WNONBDRY);
                    state.progLength++;
                    return true;
                /* Decimal escape */
                case '0':
/*
 * Under 'strict' ECMA 3, we interpret \0 as NUL and don't accept octal.
 * However, (XXX and since Rhino doesn't have a 'strict' mode) we'll just
 * behave the old way for compatibility reasons.
 * (see http://bugzilla.mozilla.org/show_bug.cgi?id=141078)
 *
 */
                    reportWarning(state.cx, ""msg.bad.backref"", """");
                    /* octal escape */
                    num = 0;
                    while (state.cp < state.cpend) {
                        c = src[state.cp];
                        if ((c >= '0') && (c <= '7')) {
                            state.cp++;
                            tmp = 8 * num + (c - '0');
                            if (tmp > 0377)
                                break;
                            num = tmp;
                        }
                        else
                            break;
                    }
                    c = (char)(num);
                    doFlat(state, c);
                    break;
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    termStart = state.cp - 1;
                    num = getDecimalValue(c, state, 0xFFFF,
                                          ""msg.overlarge.backref"");
                    if (num > state.parenCount)
                        reportWarning(state.cx, ""msg.bad.backref"", """");
                    /*
                     * n > 9 or > count of parentheses,
                     * then treat as octal instead.
                     */
                    if ((num > 9) && (num > state.parenCount)) {
                        state.cp = termStart;
                        num = 0;
                        while (state.cp < state.cpend) {
                            c = src[state.cp];
                            if ((c >= '0') && (c <= '7')) {
                                state.cp++;
                                tmp = 8 * num + (c - '0');
                                if (tmp > 0377)
                                    break;
                                num = tmp;
                            }
                            else
                                break;
                        }
                        c = (char)(num);
                        doFlat(state, c);
                        break;
                    }
                    /* otherwise, it's a back-reference */
                    state.result = new RENode(REOP_BACKREF);
                    state.result.parenIndex = num - 1;
                    state.progLength += 3;
                    break;
                /* Control escape */
                case 'f':
                    c = 0xC;
                    doFlat(state, c);
                    break;
                case 'n':
                    c = 0xA;
                    doFlat(state, c);
                    break;
                case 'r':
                    c = 0xD;
                    doFlat(state, c);
                    break;
                case 't':
                    c = 0x9;
                    doFlat(state, c);
                    break;
                case 'v':
                    c = 0xB;
                    doFlat(state, c);
                    break;
                /* Control letter */
                case 'c':
                    if (((state.cp + 1) < state.cpend) &&
                                        Character.isLetter(src[state.cp + 1]))
                        c = (char)(src[state.cp++] & 0x1F);
                    else {
                        /* back off to accepting the original '\' as a literal */
                        --state.cp;
                        c = '\\';
                    }
                    doFlat(state, c);
                    break;
                /* UnicodeEscapeSequence */
                case 'u':
                    nDigits += 2;
                    // fall thru...
                /* HexEscapeSequence */
                case 'x':
                    {
                        int n = 0;
                        int i;
                        for (i = 0; (i < nDigits)
                                && (state.cp < state.cpend); i++) {
                            c = src[state.cp++];
                            n = Kit.xDigitToInt(c, n);
                            if (n < 0) {
                                // Back off to accepting the original
                                // 'u' or 'x' as a literal
                                state.cp -= (i + 2);
                                n = src[state.cp++];
                                break;
                            }
                        }
                        c = (char)(n);
                    }
                    doFlat(state, c);
                    break;
                /* Character class escapes */
                case 'd':
                    state.result = new RENode(REOP_DIGIT);
                    state.progLength++;
                    break;
                case 'D':
                    state.result = new RENode(REOP_NONDIGIT);
                    state.progLength++;
                    break;
                case 's':
                    state.result = new RENode(REOP_SPACE);
                    state.progLength++;
                    break;
                case 'S':
                    state.result = new RENode(REOP_NONSPACE);
                    state.progLength++;
                    break;
                case 'w':
                    state.result = new RENode(REOP_ALNUM);
                    state.progLength++;
                    break;
                case 'W':
                    state.result = new RENode(REOP_NONALNUM);
                    state.progLength++;
                    break;
                /* IdentityEscape */
                default:
                    state.result = new RENode(REOP_FLAT);
                    state.result.chr = c;
                    state.result.length = 1;
                    state.result.flatIndex = state.cp - 1;
                    state.progLength += 3;
                    break;
                }
                break;
            }
            else {
                /* a trailing '\' is an error */
                reportError(""msg.trail.backslash"", """");
                return false;
            }
        case '(': {
            RENode result = null;
            termStart = state.cp;
            if (state.cp + 1 < state.cpend && src[state.cp] == '?'
                && ((c = src[state.cp + 1]) == '=' || c == '!' || c == ':'))
            {
                state.cp += 2;
                if (c == '=') {
                    result = new RENode(REOP_ASSERT);
                    /* ASSERT, <next>, ... ASSERTTEST */
                    state.progLength += 4;
                } else if (c == '!') {
                    result = new RENode(REOP_ASSERT_NOT);
                    /* ASSERTNOT, <next>, ... ASSERTNOTTEST */
                    state.progLength += 4;
                }
            } else {
                result = new RENode(REOP_LPAREN);
                /* LPAREN, <index>, ... RPAREN, <index> */
                state.progLength += 6;
                result.parenIndex = state.parenCount++;
            }
            ++state.parenNesting;
            if (!parseDisjunction(state))
                return false;
            if (state.cp == state.cpend || src[state.cp] != ')') {
                reportError(""msg.unterm.paren"", ""in regular expression""/*APPJET*/);
                return false;
            }
            ++state.cp;
            --state.parenNesting;
            if (result != null) {
                result.kid = state.result;
                state.result = result;
            }
            break;
        }
        case ')':
          reportError(""msg.re.unmatched.right.paren"", """");
          return false;
        case '[':
            state.result = new RENode(REOP_CLASS);
            termStart = state.cp;
            state.result.startIndex = termStart;
            while (true) {
                if (state.cp == state.cpend) {
                    reportError(""msg.unterm.class"", """");
                    return false;
                }
                if (src[state.cp] == '\\')
                    state.cp++;
                else {
                    if (src[state.cp] == ']') {
                        state.result.kidlen = state.cp - termStart;
                        break;
                    }
                }
                state.cp++;
            }
            state.result.index = state.classCount++;
            /*
             * Call calculateBitmapSize now as we want any errors it finds
             * to be reported during the parse phase, not at execution.
             */
            if (!calculateBitmapSize(state, state.result, src, termStart, state.cp++))
                return false;
            state.progLength += 3; /* CLASS, <index> */
            break;

        case '.':
            state.result = new RENode(REOP_DOT);
            state.progLength++;
            break;
        case '*':
        case '+':
        case '?':
            reportError(""msg.bad.quant"", String.valueOf(src[state.cp - 1]));
            return false;
        default:
            state.result = new RENode(REOP_FLAT);
            state.result.chr = c;
            state.result.length = 1;
            state.result.flatIndex = state.cp - 1;
            state.progLength += 3;
            break;
        }

        term = state.result;
        if (state.cp == state.cpend) {
            return true;
        }
        boolean hasQ = false;
        switch (src[state.cp]) {
            case '+':
                state.result = new RENode(REOP_QUANT);
                state.result.min = 1;
                state.result.max = -1;
                /* <PLUS>, <parencount>, <parenindex>, <next> ... <ENDCHILD> */
                state.progLength += 8;
                hasQ = true;
                break;
            case '*':
                state.result = new RENode(REOP_QUANT);
                state.result.min = 0;
                state.result.max = -1;
                /* <STAR>, <parencount>, <parenindex>, <next> ... <ENDCHILD> */
                state.progLength += 8;
                hasQ = true;
                break;
            case '?':
                state.result = new RENode(REOP_QUANT);
                state.result.min = 0;
                state.result.max = 1;
                /* <OPT>, <parencount>, <parenindex>, <next> ... <ENDCHILD> */
                state.progLength += 8;
                hasQ = true;
                break;
            case '{':  /* balance '}' */
            {
                int min = 0;
                int max = -1;
                int leftCurl = state.cp;

               /* For Perl etc. compatibility, if quntifier does not match
                * \{\d+(,\d*)?\} exactly back off from it
                * being a quantifier, and chew it up as a literal
                * atom next time instead.
                */

                c = src[++state.cp];
                if (isDigit(c)) {
                    ++state.cp;
                    min = getDecimalValue(c, state, 0xFFFF,
                                          ""msg.overlarge.min"");
                    c = src[state.cp];
                    if (c == ',') {
                        c = src[++state.cp];
                        if (isDigit(c)) {
                            ++state.cp;
                            max = getDecimalValue(c, state, 0xFFFF,
                                                  ""msg.overlarge.max"");
                            c = src[state.cp];
                            if (min > max) {
                                reportError(""msg.max.lt.min"",
                                            String.valueOf(src[state.cp]));
                                return false;
                            }
                        }
                    } else {
                        max = min;
                    }
                    /* balance '{' */
                    if (c == '}') {
                        state.result = new RENode(REOP_QUANT);
                        state.result.min = min;
                        state.result.max = max;
                        // QUANT, <min>, <max>, <parencount>,
                        // <parenindex>, <next> ... <ENDCHILD>
                        state.progLength += 12;
                        hasQ = true;
                    }
                }
                if (!hasQ) {
                    state.cp = leftCurl;
                }
                break;
            }
        }
        if (!hasQ)
            return true;

        ++state.cp;
        state.result.kid = term;
        state.result.parenIndex = parenBaseCount;
        state.result.parenCount = state.parenCount - parenBaseCount;
        if ((state.cp < state.cpend) && (src[state.cp] == '?')) {
            ++state.cp;
            state.result.greedy = false;
        }
        else
            state.result.greedy = true;
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,resolveForwardJump,"    private static void resolveForwardJump(byte[] array, int from, int pc)
    {
        if (from > pc) throw Kit.codeBug();
        addIndex(array, from, pc - from);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getOffset,"    private static int getOffset(byte[] array, int pc)
    {
        return getIndex(array, pc);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,addIndex,"    private static int addIndex(byte[] array, int pc, int index)
    {
        if (index < 0) throw Kit.codeBug();
        if (index > 0xFFFF)
            throw Context.reportRuntimeError(""Too complex regexp"");
        array[pc] = (byte)(index >> 8);
        array[pc + 1] = (byte)(index);
        return pc + 2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getIndex,"    private static int getIndex(byte[] array, int pc)
    {
        return ((array[pc] & 0xFF) << 8) | (array[pc + 1] & 0xFF);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,emitREBytecode,"    private static int
    emitREBytecode(CompilerState state, RECompiled re, int pc, RENode t)
    {
        RENode nextAlt;
        int nextAltFixup, nextTermFixup;
        byte[] program = re.program;

        while (t != null) {
            program[pc++] = t.op;
            switch (t.op) {
            case REOP_EMPTY:
                --pc;
                break;
            case REOP_ALT:
                nextAlt = t.kid2;
                nextAltFixup = pc;    /* address of next alternate */
                pc += OFFSET_LEN;
                pc = emitREBytecode(state, re, pc, t.kid);
                program[pc++] = REOP_JUMP;
                nextTermFixup = pc;    /* address of following term */
                pc += OFFSET_LEN;
                resolveForwardJump(program, nextAltFixup, pc);
                pc = emitREBytecode(state, re, pc, nextAlt);

                program[pc++] = REOP_JUMP;
                nextAltFixup = pc;
                pc += OFFSET_LEN;

                resolveForwardJump(program, nextTermFixup, pc);
                resolveForwardJump(program, nextAltFixup, pc);
                break;
            case REOP_FLAT:
                /*
                 * Consecutize FLAT's if possible.
                 */
                if (t.flatIndex != -1) {
                    while ((t.next != null) && (t.next.op == REOP_FLAT)
                            && ((t.flatIndex + t.length)
                                            == t.next.flatIndex)) {
                        t.length += t.next.length;
                        t.next = t.next.next;
                    }
                }
                if ((t.flatIndex != -1) && (t.length > 1)) {
                    if ((state.flags & JSREG_FOLD) != 0)
                        program[pc - 1] = REOP_FLATi;
                    else
                        program[pc - 1] = REOP_FLAT;
                    pc = addIndex(program, pc, t.flatIndex);
                    pc = addIndex(program, pc, t.length);
                }
                else {
                    if (t.chr < 256) {
                        if ((state.flags & JSREG_FOLD) != 0)
                            program[pc - 1] = REOP_FLAT1i;
                        else
                            program[pc - 1] = REOP_FLAT1;
                        program[pc++] = (byte)(t.chr);
                    }
                    else {
                        if ((state.flags & JSREG_FOLD) != 0)
                            program[pc - 1] = REOP_UCFLAT1i;
                        else
                            program[pc - 1] = REOP_UCFLAT1;
                        pc = addIndex(program, pc, t.chr);
                    }
                }
                break;
            case REOP_LPAREN:
                pc = addIndex(program, pc, t.parenIndex);
                pc = emitREBytecode(state, re, pc, t.kid);
                program[pc++] = REOP_RPAREN;
                pc = addIndex(program, pc, t.parenIndex);
                break;
            case REOP_BACKREF:
                pc = addIndex(program, pc, t.parenIndex);
                break;
            case REOP_ASSERT:
                nextTermFixup = pc;
                pc += OFFSET_LEN;
                pc = emitREBytecode(state, re, pc, t.kid);
                program[pc++] = REOP_ASSERTTEST;
                resolveForwardJump(program, nextTermFixup, pc);
                break;
            case REOP_ASSERT_NOT:
                nextTermFixup = pc;
                pc += OFFSET_LEN;
                pc = emitREBytecode(state, re, pc, t.kid);
                program[pc++] = REOP_ASSERTNOTTEST;
                resolveForwardJump(program, nextTermFixup, pc);
                break;
            case REOP_QUANT:
                if ((t.min == 0) && (t.max == -1))
                    program[pc - 1] = (t.greedy) ? REOP_STAR : REOP_MINIMALSTAR;
                else
                if ((t.min == 0) && (t.max == 1))
                    program[pc - 1] = (t.greedy) ? REOP_OPT : REOP_MINIMALOPT;
                else
                if ((t.min == 1) && (t.max == -1))
                    program[pc - 1] = (t.greedy) ? REOP_PLUS : REOP_MINIMALPLUS;
                else {
                    if (!t.greedy) program[pc - 1] = REOP_MINIMALQUANT;
                    pc = addIndex(program, pc, t.min);
                    // max can be -1 which addIndex does not accept
                    pc = addIndex(program, pc, t.max + 1);
                }
                pc = addIndex(program, pc, t.parenCount);
                pc = addIndex(program, pc, t.parenIndex);
                nextTermFixup = pc;
                pc += OFFSET_LEN;
                pc = emitREBytecode(state, re, pc, t.kid);
                program[pc++] = REOP_ENDCHILD;
                resolveForwardJump(program, nextTermFixup, pc);
                break;
            case REOP_CLASS:
                pc = addIndex(program, pc, t.index);
                re.classList[t.index] = new RECharSet(t.bmsize, t.startIndex,
                                                      t.kidlen);
                break;
            default:
                break;
            }
            t = t.next;
        }
        return pc;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,pushProgState,"    private static void
    pushProgState(REGlobalData gData, int min, int max,
                  REBackTrackData backTrackLastToSave,
                  int continuation_pc, int continuation_op)
    {
        gData.stateStackTop = new REProgState(gData.stateStackTop, min, max,
                                              gData.cp, backTrackLastToSave,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,popProgState,"    private static REProgState
    popProgState(REGlobalData gData)
    {
        REProgState state = gData.stateStackTop;
        gData.stateStackTop = state.previous;
        return state;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,pushBackTrackState,"    private static void
    pushBackTrackState(REGlobalData gData, byte op, int target)
    {
        gData.backTrackStackTop = new REBackTrackData(gData, op, target);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,flatNMatcher,"    private static boolean
    flatNMatcher(REGlobalData gData, int matchChars,
                 int length, char[] chars, int end)
    {
        if ((gData.cp + length) > end)
            return false;
        for (int i = 0; i < length; i++) {
            if (gData.regexp.source[matchChars + i] != chars[gData.cp + i]) {
                return false;
            }
        }
        gData.cp += length;
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,flatNIMatcher,"    private static boolean
    flatNIMatcher(REGlobalData gData, int matchChars,
                  int length, char[] chars, int end)
    {
        if ((gData.cp + length) > end)
            return false;
        for (int i = 0; i < length; i++) {
            if (upcase(gData.regexp.source[matchChars + i])
                != upcase(chars[gData.cp + i]))
            {
                return false;
            }
        }
        gData.cp += length;
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,backrefMatcher,"    private static boolean
    backrefMatcher(REGlobalData gData, int parenIndex,
                   char[] chars, int end)
    {
        int len;
        int i;
        int parenContent = gData.parens_index(parenIndex);
        if (parenContent == -1)
            return true;

        len = gData.parens_length(parenIndex);
        if ((gData.cp + len) > end)
            return false;

        if ((gData.regexp.flags & JSREG_FOLD) != 0) {
            for (i = 0; i < len; i++) {
                if (upcase(chars[parenContent + i]) != upcase(chars[gData.cp + i]))
                    return false;
            }
        }
        else {
            for (i = 0; i < len; i++) {
                if (chars[parenContent + i] != chars[gData.cp + i])
                    return false;
            }
        }
        gData.cp += len;
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,addCharacterToCharSet,"    private static void
    addCharacterToCharSet(RECharSet cs, char c)
    {
        int byteIndex = (c / 8);
        if (c > cs.length)
            throw new RuntimeException();
        cs.bits[byteIndex] |= 1 << (c & 0x7);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,addCharacterRangeToCharSet,"    private static void
    addCharacterRangeToCharSet(RECharSet cs, char c1, char c2)
    {
        int i;

        int byteIndex1 = (c1 / 8);
        int byteIndex2 = (c2 / 8);

        if ((c2 > cs.length) || (c1 > c2))
            throw new RuntimeException();

        c1 &= 0x7;
        c2 &= 0x7;

        if (byteIndex1 == byteIndex2) {
            cs.bits[byteIndex1] |= ((0xFF) >> (7 - (c2 - c1))) << c1;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,processCharSet,"    private static void
    processCharSet(REGlobalData gData, RECharSet charSet)
    {
        synchronized (charSet) {
            if (!charSet.converted) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,processCharSetImpl,"    private static void
    processCharSetImpl(REGlobalData gData, RECharSet charSet)
    {
        int src = charSet.startIndex;
        int end = src + charSet.strlength;

        char rangeStart = 0, thisCh;
        int byteLength;
        char c;
        int n;
        int nDigits;
        int i;
        boolean inRange = false;

        charSet.sense = true;
        byteLength = (charSet.length / 8) + 1;
        charSet.bits = new byte[byteLength];

        if (src == end)
            return;

        if (gData.regexp.source[src] == '^') {
            charSet.sense = false;
            ++src;
        }

        while (src != end) {
            nDigits = 2;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,classMatcher,"    private static boolean
    classMatcher(REGlobalData gData, RECharSet charSet, char ch)
    {
        if (!charSet.converted) {
            processCharSet(gData, charSet);
        }

        int byteIndex = ch / 8;
        if (charSet.sense) {
            if ((charSet.length == 0) ||
                 ( (ch > charSet.length)
                    || ((charSet.bits[byteIndex] & (1 << (ch & 0x7))) == 0) ))
                return false;
        } else {
            if (! ((charSet.length == 0) ||
                     ( (ch > charSet.length)
                        || ((charSet.bits[byteIndex] & (1 << (ch & 0x7))) == 0) )))
                return false;
        }
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,executeREBytecode,"    private static boolean
    executeREBytecode(REGlobalData gData, char[] chars, int end)
    {
        int pc = 0;
        byte program[] = gData.regexp.program;
        int currentContinuation_op;
        int currentContinuation_pc;
        boolean result = false;

        currentContinuation_pc = 0;
        currentContinuation_op = REOP_END;
if (debug) {
System.out.println(""Input = \"""" + new String(chars) + ""\"", start at "" + gData.cp);
}
        int op = program[pc++];
        for (;;) {
if (debug) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,matchRegExp,"    private static boolean
    matchRegExp(REGlobalData gData, RECompiled re,
                char[] chars, int start, int end, boolean multiline)
    {
        if (re.parenCount != 0) {
            gData.parens = new long[re.parenCount];
        } else {
            gData.parens = null;
        }

        gData.backTrackStackTop = null;

        gData.stateStackTop = null;

        gData.multiline = multiline;
        gData.regexp = re;
        gData.lastParen = 0;

        int anchorCh = gData.regexp.anchorCh;
        //
        // have to include the position beyond the last character
        //  in order to detect end-of-input/line condition
        //
        for (int i = start; i <= end; ++i) {
            //
            // If the first node is a literal match, step the index into
            // the string until that match is made, or fail if it can't be
            // found at all.
            //
            if (anchorCh >= 0) {
                for (;;) {
                    if (i == end) {
                        return false;
                    }
                    char matchCh = chars[i];
                    if (matchCh == anchorCh ||
                            ((gData.regexp.flags & JSREG_FOLD) != 0
                             && upcase(matchCh) == upcase((char)anchorCh)))
                    {
                        break;
                    }
                    ++i;
                }
            }
            gData.cp = i;
            for (int j = 0; j < re.parenCount; j++) {
                gData.set_parens(j, -1, 0);
            }
            boolean result = executeREBytecode(gData, chars, end);

            gData.backTrackStackTop = null;
            gData.stateStackTop = null;
            if (result) {
                gData.skipped = i - start;
                return true;
            }
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,executeRegExp,"    Object executeRegExp(Context cx, Scriptable scopeObj, RegExpImpl res,
                         String str, int indexp[], int matchType)
    {
        REGlobalData gData = new REGlobalData();

        int start = indexp[0];
        char[] charArray = str.toCharArray();
        int end = charArray.length;
        if (start > end)
            start = end;
        //
        // Call the recursive matcher to do the real work.
        //
        boolean matches = matchRegExp(gData, re, charArray, start, end,
                                      res.multiline);
        if (!matches) {
            if (matchType != PREFIX) return null;
            return Undefined.instance;
        }
        int index = gData.cp;
        int i = index;
        indexp[0] = i;
        int matchlen = i - (start + gData.skipped);
        int ep = index;
        index -= matchlen;
        Object result;
        Scriptable obj;

        if (matchType == TEST) {
            /*
             * Testing for a match and updating cx.regExpImpl: don't allocate
             * an array object, do return true.
             */
            result = Boolean.TRUE;
            obj = null;
        }
        else {
            /*
             * The array returned on match has element 0 bound to the matched
             * string, elements 1 through re.parenCount bound to the paren
             * matches, an index property telling the length of the left context,
             * and an input property referring to the input string.
             */
            Scriptable scope = getTopLevelScope(scopeObj);
            result = ScriptRuntime.newObject(cx, scope, ""Array"", null);
            obj = (Scriptable) result;

            String matchstr = new String(charArray, index, matchlen);
            obj.put(0, obj, matchstr);
        }

        if (re.parenCount == 0) {
            res.parens = null;
            res.lastParen = SubString.emptySubString;
        } else {
            SubString parsub = null;
            int num;
            res.parens = new SubString[re.parenCount];
            for (num = 0; num < re.parenCount; num++) {
                int cap_index = gData.parens_index(num);
                String parstr;
                if (cap_index != -1) {
                    int cap_length = gData.parens_length(num);
                    parsub = new SubString(charArray, cap_index, cap_length);
                    res.parens[num] = parsub;
                    if (matchType == TEST) continue;
                    parstr = parsub.toString();
                    obj.put(num+1, obj, parstr);
                }
                else {
                    if (matchType != TEST)
                        obj.put(num+1, obj, Undefined.instance);
                }
            }
            res.lastParen = parsub;
        }

        if (! (matchType == TEST)) {
            /*
             * Define the index and input properties last for better for/in loop
             * order (so they come after the elements).
             */
            obj.put(""index"", obj, new Integer(start + gData.skipped));
            obj.put(""input"", obj, str);
        }

        if (res.lastMatch == null) {
            res.lastMatch = new SubString();
            res.leftContext = new SubString();
            res.rightContext = new SubString();
        }
        res.lastMatch.charArray = charArray;
        res.lastMatch.index = index;
        res.lastMatch.length = matchlen;

        res.leftContext.charArray = charArray;
        if (cx.getLanguageVersion() == Context.VERSION_1_2) {
            /*
             * JS1.2 emulated Perl4.0.1.8 (patch level 36) for global regexps used
             * in scalar contexts, and unintentionally for the string.match ""list""
             * psuedo-context.  On ""hi there bye"", the following would result:
             *
             * Language     while(/ /g){print(""$`"");}   s/ /$`/g
             * perl4.036    ""hi"", ""there""               ""hihitherehi therebye""
             * perl5        ""hi"", ""hi there""            ""hihitherehi therebye""
             * js1.2        ""hi"", ""there""               ""hihitheretherebye""
             *
             * Insofar as JS1.2 always defined $` as ""left context from the last
             * match"" for global regexps, it was more consistent than perl4.
             */
            res.leftContext.index = start;
            res.leftContext.length = gData.skipped;
        } else {
            /*
             * For JS1.3 and ECMAv2, emulate Perl5 exactly:
             *
             * js1.3        ""hi"", ""hi there""            ""hihitherehi therebye""
             */
            res.leftContext.index = 0;
            res.leftContext.length = start + gData.skipped;
        }

        res.rightContext.charArray = charArray;
        res.rightContext.index = ep;
        res.rightContext.length = end - ep;

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getFlags,"    int getFlags()
    {
        return re.flags;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,reportWarning,"    private static void reportWarning(Context cx, String messageId, String arg)
    {
        if (cx.hasFeature(Context.FEATURE_STRICT_MODE)) {
            String msg = ScriptRuntime.getMessage1(messageId, arg);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,reportError,"    private static void reportError(String messageId, String arg)
    {
        String msg = ScriptRuntime.getMessage1(messageId, arg);
        throw ScriptRuntime.constructError(""SyntaxError"", msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:16:24 EDT
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==6) {
                c=s.charAt(0);
                if (c=='g') { X=""global"";id=Id_global; }
                else if (c=='s') { X=""source"";id=Id_source; }
            }
            else if (s_length==9) {
                c=s.charAt(0);
                if (c=='l') { X=""lastIndex"";id=Id_lastIndex; }
                else if (c=='m') { X=""multiline"";id=Id_multiline; }
            }
            else if (s_length==10) { X=""ignoreCase"";id=Id_ignoreCase; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
// #/string_id_map#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_lastIndex:
            attr = PERMANENT | DONTENUM;
            break;
          case Id_source:
          case Id_global:
          case Id_ignoreCase:
          case Id_multiline:
            attr = PERMANENT | READONLY | DONTENUM;
            break;
          default:
            throw new IllegalStateException();
        }
        return instanceIdInfo(attr, id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id) {
            case Id_lastIndex:  return ""lastIndex"";
            case Id_source:     return ""source"";
            case Id_global:     return ""global"";
            case Id_ignoreCase: return ""ignoreCase"";
            case Id_multiline:  return ""multiline"";
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id) {
          case Id_lastIndex:
            return ScriptRuntime.wrapNumber(lastIndex);
          case Id_source:
            return new String(re.source);
          case Id_global:
            return ScriptRuntime.wrapBoolean((re.flags & JSREG_GLOB) != 0);
          case Id_ignoreCase:
            return ScriptRuntime.wrapBoolean((re.flags & JSREG_FOLD) != 0);
          case Id_multiline:
            return ScriptRuntime.wrapBoolean((re.flags & JSREG_MULTILINE) != 0);
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,setInstanceIdValue,"    protected void setInstanceIdValue(int id, Object value)
    {
        if (id == Id_lastIndex) {
            lastIndex = ScriptRuntime.toNumber(value);
            return;
        }
        super.setInstanceIdValue(id, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_compile:  arity=1; s=""compile"";  break;
          case Id_toString: arity=0; s=""toString""; break;
          case Id_toSource: arity=0; s=""toSource""; break;
          case Id_exec:     arity=1; s=""exec"";     break;
          case Id_test:     arity=1; s=""test"";     break;
          case Id_prefix:   arity=1; s=""prefix"";   break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(REGEXP_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(REGEXP_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_compile:
            return realThis(thisObj, f).compile(cx, scope, args);

          case Id_toString:
          case Id_toSource:
            return realThis(thisObj, f).toString();

          case Id_exec:
            return realThis(thisObj, f).execSub(cx, scope, args, MATCH);

          case Id_test: {
            Object x = realThis(thisObj, f).execSub(cx, scope, args, TEST);
            return Boolean.TRUE.equals(x) ? Boolean.TRUE : Boolean.FALSE;
          }

          case Id_prefix:
            return realThis(thisObj, f).execSub(cx, scope, args, PREFIX);
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,realThis,"    private static NativeRegExp realThis(Scriptable thisObj, IdFunctionObject f)
    {
        if (!(thisObj instanceof NativeRegExp))
            throw incompatibleCallError(f);
        return (NativeRegExp)thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-05-09 08:16:24 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 4: c=s.charAt(0);
                if (c=='e') { X=""exec"";id=Id_exec; }
                else if (c=='t') { X=""test"";id=Id_test; }
                break L;
            case 6: X=""prefix"";id=Id_prefix; break L;
            case 7: X=""compile"";id=Id_compile; break L;
            case 8: c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
                break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,parens_index,"    int parens_index(int i)
    {
        return (int)(parens[i]);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,parens_length,"    int parens_length(int i)
    {
        return (int)(parens[i] >>> 32);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExp.java,set_parens,"    void set_parens(int i, int index, int length)
    {
        parens[i] = (index & 0xffffffffL) | ((long)length << 32);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,getFunctionName,"    public String getFunctionName()
    {
        return ""RegExp"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                       Object[] args)
    {
        if (args.length > 0 && args[0] instanceof NativeRegExp &&
            (args.length == 1 || args[1] == Undefined.instance))
        {
            return args[0];
        }
        return construct(cx, scope, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args)
    {
        NativeRegExp re = new NativeRegExp();
        re.compile(cx, scope, args);
        ScriptRuntime.setObjectProtoAndParent(re, scope);
        return re;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,getImpl,"    private static RegExpImpl getImpl()
    {
        Context cx = Context.getCurrentContext();
        return (RegExpImpl) ScriptRuntime.getRegExpProxy(cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return super.getMaxInstanceId() + MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s) {
        int id;
// #generated# Last update: 2001-05-24 16:09:31 GMT+02:00
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 2: switch (s.charAt(1)) {
                case '&': if (s.charAt(0)=='$') {id=Id_AMPERSAND; break L0;} break L;
                case '\'': if (s.charAt(0)=='$') {id=Id_QUOTE; break L0;} break L;
                case '*': if (s.charAt(0)=='$') {id=Id_STAR; break L0;} break L;
                case '+': if (s.charAt(0)=='$') {id=Id_PLUS; break L0;} break L;
                case '1': if (s.charAt(0)=='$') {id=Id_DOLLAR_1; break L0;} break L;
                case '2': if (s.charAt(0)=='$') {id=Id_DOLLAR_2; break L0;} break L;
                case '3': if (s.charAt(0)=='$') {id=Id_DOLLAR_3; break L0;} break L;
                case '4': if (s.charAt(0)=='$') {id=Id_DOLLAR_4; break L0;} break L;
                case '5': if (s.charAt(0)=='$') {id=Id_DOLLAR_5; break L0;} break L;
                case '6': if (s.charAt(0)=='$') {id=Id_DOLLAR_6; break L0;} break L;
                case '7': if (s.charAt(0)=='$') {id=Id_DOLLAR_7; break L0;} break L;
                case '8': if (s.charAt(0)=='$') {id=Id_DOLLAR_8; break L0;} break L;
                case '9': if (s.charAt(0)=='$') {id=Id_DOLLAR_9; break L0;} break L;
                case '_': if (s.charAt(0)=='$') {id=Id_UNDERSCORE; break L0;} break L;
                case '`': if (s.charAt(0)=='$') {id=Id_BACK_QUOTE; break L0;} break L;
                } break L;
            case 5: X=""input"";id=Id_input; break L;
            case 9: c=s.charAt(4);
                if (c=='M') { X=""lastMatch"";id=Id_lastMatch; }
                else if (c=='P') { X=""lastParen"";id=Id_lastParen; }
                else if (c=='i') { X=""multiline"";id=Id_multiline; }
                break L;
            case 11: X=""leftContext"";id=Id_leftContext; break L;
            case 12: X=""rightContext"";id=Id_rightContext; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_multiline:
          case Id_STAR:
          case Id_input:
          case Id_UNDERSCORE:
            attr = PERMANENT;
            break;
          default:
            attr = PERMANENT | READONLY;
            break;
        }

        return instanceIdInfo(attr, super.getMaxInstanceId() + id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        int shifted = id - super.getMaxInstanceId();
        if (1 <= shifted && shifted <= MAX_INSTANCE_ID) {
            switch (shifted) {
                case Id_multiline:    return ""multiline"";
                case Id_STAR:         return ""$*"";

                case Id_input:        return ""input"";
                case Id_UNDERSCORE:   return ""$_"";

                case Id_lastMatch:    return ""lastMatch"";
                case Id_AMPERSAND:    return ""$&"";

                case Id_lastParen:    return ""lastParen"";
                case Id_PLUS:         return ""$+"";

                case Id_leftContext:  return ""leftContext"";
                case Id_BACK_QUOTE:   return ""$`"";

                case Id_rightContext: return ""rightContext"";
                case Id_QUOTE:        return ""$'"";
            }
            // Must be one of $1..$9, convert to 0..8
            int substring_number = shifted - DOLLAR_ID_BASE - 1;
            char[] buf = { '$', (char)('1' + substring_number) };
            return new String(buf);
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        int shifted = id - super.getMaxInstanceId();
        if (1 <= shifted && shifted <= MAX_INSTANCE_ID) {
            RegExpImpl impl = getImpl();
            Object stringResult;
            switch (shifted) {
              case Id_multiline:
              case Id_STAR:
                return ScriptRuntime.wrapBoolean(impl.multiline);

              case Id_input:
              case Id_UNDERSCORE:
                stringResult = impl.input;
                break;

              case Id_lastMatch:
              case Id_AMPERSAND:
                stringResult = impl.lastMatch;
                break;

              case Id_lastParen:
              case Id_PLUS:
                stringResult = impl.lastParen;
                break;

              case Id_leftContext:
              case Id_BACK_QUOTE:
                stringResult = impl.leftContext;
                break;

              case Id_rightContext:
              case Id_QUOTE:
                stringResult = impl.rightContext;
                break;

              default:
                {
                    // Must be one of $1..$9, convert to 0..8
                    int substring_number = shifted - DOLLAR_ID_BASE - 1;
                    stringResult = impl.getParenSubString(substring_number);
                    break;
                }
            }
            return (stringResult == null) ? """" : stringResult.toString();
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,NativeRegExpCtor.java,setInstanceIdValue,"    protected void setInstanceIdValue(int id, Object value)
    {
        int shifted = id - super.getMaxInstanceId();
        switch (shifted) {
            case Id_multiline:
            case Id_STAR:
                getImpl().multiline = ScriptRuntime.toBoolean(value);
                return;

            case Id_input:
            case Id_UNDERSCORE:
                getImpl().input = ScriptRuntime.toString(value);
                return;
        }
        super.setInstanceIdValue(id, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,isRegExp,"    public boolean isRegExp(Scriptable obj) {
        return obj instanceof NativeRegExp;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,compileRegExp,"    public Object compileRegExp(Context cx, String source, String flags)
    {
        return NativeRegExp.compileRE(cx, source, flags, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,wrapRegExp,"    public Scriptable wrapRegExp(Context cx, Scriptable scope,
                                 Object compiled)
    {
        return new NativeRegExp(scope, compiled);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,action,"    public Object action(Context cx, Scriptable scope,
                         Scriptable thisObj, Object[] args,
                         int actionType)
    {
        GlobData data = new GlobData();
        data.mode = actionType;

        switch (actionType) {
          case RA_MATCH:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,matchOrReplace,"    private static Object matchOrReplace(Context cx, Scriptable scope,
                                         Scriptable thisObj, Object[] args,
                                         RegExpImpl reImpl,
                                         GlobData data, boolean forceFlat)
    {
        NativeRegExp re;

        String str = ScriptRuntime.toString(thisObj);
        data.str = str;
        Scriptable topScope = ScriptableObject.getTopLevelScope(scope);

        if (args.length == 0) {
            Object compiled = NativeRegExp.compileRE(cx, """", """", false);
            re = new NativeRegExp(topScope, compiled);
        } else if (args[0] instanceof NativeRegExp) {
            re = (NativeRegExp) args[0];
        } else {
            String src = ScriptRuntime.toString(args[0]);
            String opt;
            if (data.optarg < args.length) {
                args[0] = src;
                opt = ScriptRuntime.toString(args[data.optarg]);
            } else {
                opt = null;
            }
            Object compiled = NativeRegExp.compileRE(cx, src, opt, forceFlat);
            re = new NativeRegExp(topScope, compiled);
        }
        data.regexp = re;

        data.global = (re.getFlags() & NativeRegExp.JSREG_GLOB) != 0;
        int[] indexp = { 0 };
        Object result = null;
        if (data.mode == RA_SEARCH) {
            result = re.executeRegExp(cx, scope, reImpl,
                                      str, indexp, NativeRegExp.TEST);
            if (result != null && result.equals(Boolean.TRUE))
                result = new Integer(reImpl.leftContext.length);
            else
                result = new Integer(-1);
        } else if (data.global) {
            re.lastIndex = 0;
            for (int count = 0; indexp[0] <= str.length(); count++) {
                result = re.executeRegExp(cx, scope, reImpl,
                                          str, indexp, NativeRegExp.TEST);
                if (result == null || !result.equals(Boolean.TRUE))
                    break;
                if (data.mode == RA_MATCH) {
                    match_glob(data, cx, scope, count, reImpl);
                } else {
                    if (data.mode != RA_REPLACE) Kit.codeBug();
                    SubString lastMatch = reImpl.lastMatch;
                    int leftIndex = data.leftIndex;
                    int leftlen = lastMatch.index - leftIndex;
                    data.leftIndex = lastMatch.index + lastMatch.length;
                    replace_glob(data, cx, scope, reImpl, leftIndex, leftlen);
                }
                if (reImpl.lastMatch.length == 0) {
                    if (indexp[0] == str.length())
                        break;
                    indexp[0]++;
                }
            }
        } else {
            result = re.executeRegExp(cx, scope, reImpl, str, indexp,
                                      ((data.mode == RA_REPLACE)
                                       ? NativeRegExp.TEST
                                       : NativeRegExp.MATCH));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,find_split,"    public int find_split(Context cx, Scriptable scope, String target,
                          String separator, Scriptable reObj,
                          int[] ip, int[] matchlen,
                          boolean[] matched, String[][] parensp)
    {
        int i = ip[0];
        int length = target.length();
        int result;

        int version = cx.getLanguageVersion();
        NativeRegExp re = (NativeRegExp) reObj;
        again:
        while (true) {  // imitating C label
            /* JS1.2 deviated from Perl by never matching at end of string. */
            int ipsave = ip[0]; // reuse ip to save object creation
            ip[0] = i;
            Object ret = re.executeRegExp(cx, scope, this, target, ip,
                                          NativeRegExp.TEST);
            if (ret != Boolean.TRUE) {
                // Mismatch: ensure our caller advances i past end of string.
                ip[0] = ipsave;
                matchlen[0] = 1;
                matched[0] = false;
                return length;
            }
            i = ip[0];
            ip[0] = ipsave;
            matched[0] = true;

            SubString sep = this.lastMatch;
            matchlen[0] = sep.length;
            if (matchlen[0] == 0) {
                /*
                 * Empty string match: never split on an empty
                 * match at the start of a find_split cycle.  Same
                 * rule as for an empty global match in
                 * match_or_replace.
                 */
                if (i == ip[0]) {
                    /*
                     * ""Bump-along"" to avoid sticking at an empty
                     * match, but don't bump past end of string --
                     * our caller must do that by adding
                     * sep->length to our return value.
                     */
                    if (i == length) {
                        if (version == Context.VERSION_1_2) {
                            matchlen[0] = 1;
                            result = i;
                        }
                        else
                            result = -1;
                        break;
                    }
                    i++;
                    continue again; // imitating C goto
                }
            }
            // PR_ASSERT((size_t)i >= sep->length);
            result = i - matchlen[0];
            break;
        }
        int size = (parens == null) ? 0 : parens.length;
        parensp[0] = new String[size];
        for (int num = 0; num < size; num++) {
            SubString parsub = getParenSubString(num);
            parensp[0][num] = parsub.toString();
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,getParenSubString,"    SubString getParenSubString(int i)
    {
        if (parens != null && i < parens.length) {
            SubString parsub = parens[i];
            if (parsub != null) {
                return parsub;
            }
        }
        return SubString.emptySubString;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,match_glob,"    private static void match_glob(GlobData mdata, Context cx,
                                   Scriptable scope, int count,
                                   RegExpImpl reImpl)
    {
        if (mdata.arrayobj == null) {
            Scriptable s = ScriptableObject.getTopLevelScope(scope);
            mdata.arrayobj = ScriptRuntime.newObject(cx, s, ""Array"", null);
        }
        SubString matchsub = reImpl.lastMatch;
        String matchstr = matchsub.toString();
        mdata.arrayobj.put(count, mdata.arrayobj, matchstr);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,replace_glob,"    private static void replace_glob(GlobData rdata, Context cx,
                                     Scriptable scope, RegExpImpl reImpl,
                                     int leftIndex, int leftlen)
    {
        int replen;
        String lambdaStr;
        if (rdata.lambda != null) {
            // invoke lambda function with args lastMatch, $1, $2, ... $n,
            // leftContext.length, whole string.
            SubString[] parens = reImpl.parens;
            int parenCount = (parens == null) ? 0 : parens.length;
            Object[] args = new Object[parenCount + 3];
            args[0] = reImpl.lastMatch.toString();
            for (int i=0; i < parenCount; i++) {
                SubString sub = parens[i];
                if (sub != null) {
                    args[i+1] = sub.toString();
                } else {
                    args[i+1] = Undefined.instance;
                }
            }
            args[parenCount+1] = new Integer(reImpl.leftContext.length);
            args[parenCount+2] = rdata.str;
            // This is a hack to prevent expose of reImpl data to
            // JS function which can run new regexps modifing
            // regexp that are used later by the engine.
            // TODO: redesign is necessary
            if (reImpl != ScriptRuntime.getRegExpProxy(cx)) Kit.codeBug();
            RegExpImpl re2 = new RegExpImpl();
            re2.multiline = reImpl.multiline;
            re2.input = reImpl.input;
            ScriptRuntime.setRegExpProxy(cx, re2);
            try {
                Scriptable parent = ScriptableObject.getTopLevelScope(scope);
                Object result = rdata.lambda.call(cx, parent, parent, args);
                lambdaStr = ScriptRuntime.toString(result);
            } finally {
                ScriptRuntime.setRegExpProxy(cx, reImpl);
            }
            replen = lambdaStr.length();
        } else {
            lambdaStr = null;
            replen = rdata.repstr.length();
            if (rdata.dollar >= 0) {
                int[] skip = new int[1];
                int dp = rdata.dollar;
                do {
                    SubString sub = interpretDollar(cx, reImpl, rdata.repstr,
                                                    dp, skip);
                    if (sub != null) {
                        replen += sub.length - skip[0];
                        dp += skip[0];
                    } else {
                        ++dp;
                    }
                    dp = rdata.repstr.indexOf('$', dp);
                } while (dp >= 0);
            }
        }

        int growth = leftlen + replen + reImpl.rightContext.length;
        StringBuffer charBuf = rdata.charBuf;
        if (charBuf == null) {
            charBuf = new StringBuffer(growth);
            rdata.charBuf = charBuf;
        } else {
            charBuf.ensureCapacity(rdata.charBuf.length() + growth);
        }

        charBuf.append(reImpl.leftContext.charArray, leftIndex, leftlen);
        if (rdata.lambda != null) {
            charBuf.append(lambdaStr);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,interpretDollar,"    private static SubString interpretDollar(Context cx, RegExpImpl res,
                                             String da, int dp, int[] skip)
    {
        char dc;
        int num, tmp;

        if (da.charAt(dp) != '$') Kit.codeBug();

        /* Allow a real backslash (literal ""\\"") to escape ""$1"" etc. */
        int version = cx.getLanguageVersion();
        if (version != Context.VERSION_DEFAULT
            && version <= Context.VERSION_1_4)
        {
            if (dp > 0 && da.charAt(dp - 1) == '\\')
                return null;
        }
        int daL = da.length();
        if (dp + 1 >= daL)
            return null;
        /* Interpret all Perl match-induced dollar variables. */
        dc = da.charAt(dp + 1);
        if (NativeRegExp.isDigit(dc)) {
            int cp;
            if (version != Context.VERSION_DEFAULT
                && version <= Context.VERSION_1_4)
            {
                if (dc == '0')
                    return null;
                /* Check for overflow to avoid gobbling arbitrary decimal digits. */
                num = 0;
                cp = dp;
                while (++cp < daL && NativeRegExp.isDigit(dc = da.charAt(cp)))
                {
                    tmp = 10 * num + (dc - '0');
                    if (tmp < num)
                        break;
                    num = tmp;
                }
            }
            else {  /* ECMA 3, 1-9 or 01-99 */
                int parenCount = (res.parens == null) ? 0 : res.parens.length;
                num = dc - '0';
                if (num > parenCount)
                    return null;
                cp = dp + 2;
                if ((dp + 2) < daL) {
                    dc = da.charAt(dp + 2);
                    if (NativeRegExp.isDigit(dc)) {
                        tmp = 10 * num + (dc - '0');
                        if (tmp <= parenCount) {
                            cp++;
                            num = tmp;
                        }
                    }
                }
                if (num == 0) return null;  /* $0 or $00 is not valid */
            }
            /* Adjust num from 1 $n-origin to 0 array-index-origin. */
            num--;
            skip[0] = cp - dp;
            return res.getParenSubString(num);
        }

        skip[0] = 2;
        switch (dc) {
          case '$':
            return new SubString(""$"");
          case '&':
            return res.lastMatch;
          case '+':
            return res.lastParen;
          case '`':
            if (version == Context.VERSION_1_2) {
                /*
                 * JS1.2 imitated the Perl4 bug where left context at each step
                 * in an iterative use of a global regexp started from last match,
                 * not from the start of the target string.  But Perl4 does start
                 * $` at the beginning of the target string when it is used in a
                 * substitution, so we emulate that special case here.
                 */
                res.leftContext.index = 0;
                res.leftContext.length = res.lastMatch.index;
            }
            return res.leftContext;
          case '\'':
            return res.rightContext;
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,RegExpImpl.java,do_replace,"    private static void do_replace(GlobData rdata, Context cx,
                                   RegExpImpl regExpImpl)
    {
        StringBuffer charBuf = rdata.charBuf;
        int cp = 0;
        String da = rdata.repstr;
        int dp = rdata.dollar;
        if (dp != -1) {
            int[] skip = new int[1];
            do {
                int len = dp - cp;
                charBuf.append(da.substring(cp, dp));
                cp = dp;
                SubString sub = interpretDollar(cx, regExpImpl, da,
                                                dp, skip);
                if (sub != null) {
                    len = sub.length;
                    if (len > 0) {
                        charBuf.append(sub.charArray, sub.index, len);
                    }
                    cp += skip[0];
                    dp += skip[0];
                } else {
                    ++dp;
                }
                dp = da.indexOf('$', dp);
            } while (dp >= 0);
        }
        int daL = da.length();
        if (daL > cp) {
            charBuf.append(da.substring(cp, daL));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SubString.java,toString,"    public String toString() {
        return charArray == null
               ? """"",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableInputStream.java,resolveClass,"    protected Class resolveClass(ObjectStreamClass desc)
        throws IOException, ClassNotFoundException
    {
        String name = desc.getName();
        if (classLoader != null) {
            try {
                return classLoader.loadClass(name);
            } catch (ClassNotFoundException ex) {
                // fall through to default loading
            }
        }
        return super.resolveClass(desc);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableInputStream.java,resolveObject,"    protected Object resolveObject(Object obj)
        throws IOException
    {
        if (obj instanceof ScriptableOutputStream.PendingLookup) {
            String name = ((ScriptableOutputStream.PendingLookup)obj).getName();
            obj = ScriptableOutputStream.lookupQualifiedName(scope, name);
            if (obj == Scriptable.NOT_FOUND) {
                throw new IOException(""Object "" + name + "" not found upon "" +
                                      ""deserialization."");
            }
        }else if (obj instanceof UniqueTag) {
            obj = ((UniqueTag)obj).readResolve();
        }else if (obj instanceof Undefined) {
            obj = ((Undefined)obj).readResolve();
        }
        return obj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableOutputStream.java,addOptionalExcludedName,"    public void addOptionalExcludedName(String name) {
        Object obj = lookupQualifiedName(scope, name);
        if(obj != null && obj != UniqueTag.NOT_FOUND) {
            if (!(obj instanceof Scriptable)) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableOutputStream.java,addExcludedName,"    public void addExcludedName(String name) {
        Object obj = lookupQualifiedName(scope, name);
        if (!(obj instanceof Scriptable)) {
            throw new IllegalArgumentException(""Object for excluded name "" +
                                               name + "" not found."");
        }
        table.put(obj, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableOutputStream.java,hasExcludedName,"    public boolean hasExcludedName(String name) {
        return table.get(name) != null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableOutputStream.java,removeExcludedName,"    public void removeExcludedName(String name) {
        table.remove(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableOutputStream.java,excludeStandardObjectNames,"    public void excludeStandardObjectNames() {
        String[] names = { ""Object"", ""Object.prototype"",
                           ""Function"", ""Function.prototype"",
                           ""String"", ""String.prototype"",
                           ""Math"",  // no Math.prototype
                           ""Array"", ""Array.prototype"",
                           ""Error"", ""Error.prototype"",
                           ""Number"", ""Number.prototype"",
                           ""Date"", ""Date.prototype"",
                           ""RegExp"", ""RegExp.prototype"",
                           ""Script"", ""Script.prototype"",
                           ""Continuation"", ""Continuation.prototype"",
                         };
        for (int i=0; i < names.length; i++) {
            addExcludedName(names[i]);
        }
        
        String[] optionalNames = { 
                ""XML"", ""XML.prototype"",
                ""XMLList"", ""XMLList.prototype"",
        };
        for (int i=0; i < optionalNames.length; i++) {
            addOptionalExcludedName(optionalNames[i]);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableOutputStream.java,lookupQualifiedName,"    static Object lookupQualifiedName(Scriptable scope,
                                      String qualifiedName)
    {
        StringTokenizer st = new StringTokenizer(qualifiedName, ""."");
        Object result = scope;
        while (st.hasMoreTokens()) {
            String s = st.nextToken();
            result = ScriptableObject.getProperty((Scriptable)result, s);
            if (result == null || !(result instanceof Scriptable))
                break;
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableOutputStream.java,getName,"        String getName() { return name; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptableOutputStream.java,replaceObject,"    protected Object replaceObject(Object obj) throws IOException
    {
        String name = (String) table.get(obj);
        if (name == null)
            return obj;
        return new PendingLookup(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLib.java,create,"		public static Factory create(final String className) {
			return new Factory() {
				public String getImplementationClassName() {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLib.java,getImplementationClassName,"				public String getImplementationClassName() {
					return className;
				}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLib.java,extractFromScopeOrNull,"    public static XMLLib extractFromScopeOrNull(Scriptable scope)
    {
        ScriptableObject so = ScriptRuntime.getLibraryScopeOrNull(scope);
        if (so == null) {
            // If library is not yet initialized, return null
            return null;
        }

        // Ensure lazily initialization of real XML library instance
        // which is done on first access to XML property
        ScriptableObject.getProperty(so, ""XML"");

        return (XMLLib)so.getAssociatedValue(XML_LIB_KEY);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLib.java,extractFromScope,"    public static XMLLib extractFromScope(Scriptable scope)
    {
        XMLLib lib = extractFromScopeOrNull(scope);
        if (lib != null) {
            return lib;
        }
        String msg = ScriptRuntime.getMessage0(""msg.XML.not.available"");
        throw Context.reportRuntimeError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLib.java,bindToScope,"    protected final XMLLib bindToScope(Scriptable scope)
    {
        ScriptableObject so = ScriptRuntime.getLibraryScopeOrNull(scope);
        if (so == null) {
            // standard library should be initialized at this point
            throw new IllegalStateException();
        }
        return (XMLLib)so.associateValue(XML_LIB_KEY, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObject.java,addValues,"    public Object addValues(Context cx, boolean thisIsLeft, Object value)
    {
        return Scriptable.NOT_FOUND;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,join,"    private static String join(String[] list) {
        String rv = """";
        for (int i=0; i<list.length; i++) {
            rv += list[i];
            if (i+1 != list.length) {
                rv += "","";
            }
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getTestList,"        private String[] getTestList(String[] tests) {
          ArrayList list = new ArrayList();
          for (int i=0; i < tests.length; i++) {
            if (tests[i].startsWith(""@""))
              addTestsFromFile(tests[i].substring(1), list);
            else
              list.add(tests[i]);
          }
          return (String[])list.toArray(new String[0]);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,addTestsFromFile,"        private void addTestsFromFile(String filename, ArrayList list) {
            try {
                Properties props = new Properties();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,matches,"        private boolean matches(String[] patterns, String path) {
            for (int i=0; i<patterns.length; i++) {
                if (path.startsWith(patterns[i])) {
                    return true;
                }
            }
            return false;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,matches,"        private boolean matches(String path) {
            if (list.length == 0) return true;
            return matches(list, path);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,excluded,"        private boolean excluded(String path) {
            if (skip.length == 0) return false;
            return matches(skip, path);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,addFiles,"        private void addFiles(List rv, String prefix, File directory) {
            File[] files = directory.listFiles();
            if (files == null) throw new RuntimeException(""files null for "" + directory);
            for (int i=0; i<files.length; i++) {
                String path = prefix + files[i].getName();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getPath,"            String getPath() {
                return path;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getFile,"            File getFile() {
                return file;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getFiles,"        Script[] getFiles() {
            ArrayList rv = new ArrayList();
            addFiles(rv, """", testDirectory);
            return (Script[])rv.toArray(new Script[0]);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,running,"        void running(File jsFile) {
            try {
                console.println(""Running: "" + jsFile.getCanonicalPath());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,failed,"        void failed(String s) {
            console.println(""Failed: "" + jsFile + "": "" + s);
            failed = true;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,threw,"        void threw(Throwable t) {
            console.println(""Failed: "" + jsFile + "" with exception."");
            console.println(ShellTest.getStackTrace(t));
            failed = true;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,timedOut,"        void timedOut() {
            console.println(""Failed: "" + jsFile + "": timed out."");
            failed = true;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,exitCodesWere,"        void exitCodesWere(int expected, int actual) {
            if (expected != actual) {
                console.println(""Failed: "" + jsFile + "" expected "" + expected + "" actual "" + actual);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,outputWas,"        void outputWas(String s) {
            if (!failed) {
                console.println(""Passed: "" + jsFile);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,setContent,"    private static boolean setContent(Element node, String id, String content) {
        if (node.getAttribute(""id"").equals(id)) {
            node.setTextContent(node.getTextContent() + ""\n"" + content);
            return true;
        } else {
            NodeList children = node.getChildNodes();
            for (int i=0; i<children.getLength(); i++) {
                if (children.item(i) instanceof Element) {
                    Element e = (Element)children.item(i);
                    boolean rv = setContent( e, id, content );
                    if (rv) {
                        return true;
                    }
                }
            }
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getElementById,"    private static Element getElementById(Element node, String id) {
        if (node.getAttribute(""id"").equals(id)) {
            return node;
        } else {
            NodeList children = node.getChildNodes();
            for (int i=0; i<children.getLength(); i++) {
                if (children.item(i) instanceof Element) {
                    Element rv = getElementById( (Element)children.item(i), id );
                    if (rv != null) {
                        return rv;
                    }
                }
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,newlineLineEndings,"	private static String newlineLineEndings(String s) {
		StringBuffer rv = new StringBuffer();
		for (int i=0; i<s.length(); i++) {
			if (s.charAt(i) == '\r') {
				if (i+1<s.length() && s.charAt(i+1) == '\n') {
					//    just skip \r
				} else {
					//    Macintosh, substitute \n
					rv.append('\n');
				}
			} else {
				rv.append(s.charAt(i));
			}
		}
		return rv.toString();
	}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,failed,"        void failed(String s) {
            failed = true;
            setContent(failureHtml, ""failureDetails.reason"", ""Failure reason: \n"" + s);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,exitCodesWere,"        void exitCodesWere(int expected, int actual) {
            if (expected != actual) {
                failed = true;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,threw,"        void threw(Throwable e) {
            failed = true;
            setContent(failureHtml, ""failureDetails.reason"", ""Threw Java exception:\n"" + newlineLineEndings(ShellTest.getStackTrace(e)));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,timedOut,"        void timedOut() {
            failed = true;
            setContent(failureHtml, ""failureDetails.reason"", ""Timed out."");
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,outputWas,"        void outputWas(String s) {
            this.output = s;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getLinesStartingWith,"        private String getLinesStartingWith(String prefix) {
            BufferedReader r = new BufferedReader(new StringReader(output));
            String line = null;
            String rv = """";
            try {
                while( (line = r.readLine()) != null ) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,failed,"        boolean failed() {
            return failed;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,finish,"        void finish() {
            if (failed) {
                getElementById(failureHtml, ""failureDetails.status"").setTextContent(getLinesStartingWith(""STATUS:""));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,running,"		void running(File file) {
			this.start = new Date();
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,createElement,"		private Element createElement(Element parent, String name) {
			Element rv = parent.getOwnerDocument().createElement(name);
			parent.appendChild(rv);
			return rv;
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,finish,"		private void finish() {
			Date end = new Date();
			long elapsed = end.getTime() - start.getTime();
			this.target.setAttribute(""elapsed"", String.valueOf(elapsed));
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,setTextContent,"		private void setTextContent(Element e, String content) {
			e.setTextContent( newlineLineEndings(content) );
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,exitCodesWere,"		void exitCodesWere(int expected, int actual) {
			finish();
			Element exit = createElement(target, ""exit"");
			exit.setAttribute(""expected"", String.valueOf(expected));
			exit.setAttribute(""actual"", String.valueOf(actual));
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,timedOut,"		void timedOut() {
			finish();
			createElement(target, ""timedOut"");
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,failed,"		void failed(String s) {
			finish();
			Element failed = createElement(target, ""failed"");
			setTextContent(failed, s);
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,outputWas,"		void outputWas(String message) {
			finish();
			Element output = createElement(target, ""output"");
			setTextContent(output, message);
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,threw,"		void threw(Throwable t) {
			finish();
			Element threw = createElement(target, ""threw"");
			setTextContent(threw, ShellTest.getStackTrace(t));
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,parse,"        private Document parse(InputStream in) {
            try {
                javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getTemplate,"        private Document getTemplate() {
            return parse(getClass().getResourceAsStream(""results.html""));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,write,"        private void write(Document template, boolean xml) {
            try {
				File output = this.output;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,start,"		void start() {
            this.html = getTemplate();
            this.failureHtml = getElementById(html.getDocumentElement(), ""failureDetails.prototype"");
            if (this.failureHtml == null) {
                try {
                    javax.xml.transform.TransformerFactory.newInstance().newTransformer().transform(
                        new javax.xml.transform.dom.DOMSource(html),
                        new javax.xml.transform.stream.StreamResult(System.err)
                    );
                } catch (Throwable t) {
                    throw new RuntimeException(t);
                }
                throw new RuntimeException(""No"");
            }
            this.failureHtml.getParentNode().removeChild(this.failureHtml);
			
			try {
				this.xml = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder()
					.getDOMImplementation().createDocument(null, ""results"", null)
				;
				xml.getDocumentElement().setAttribute(""timestamp"", String.valueOf(new Date().getTime()));
				xml.getDocumentElement().setAttribute(""optimization"", String.valueOf(arguments.getOptimizationLevel()));
                xml.getDocumentElement().setAttribute(""strict"", String.valueOf(arguments.isStrict()));
                xml.getDocumentElement().setAttribute(""timeout"", String.valueOf(arguments.getTimeout()));
			} catch (javax.xml.parsers.ParserConfigurationException e) {
				throw new RuntimeException(e);
			}
			
			this.start = new Date();
		}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,run,"        void run(Tests.Script script, ShellTest.Parameters parameters) {
			String path = script.getPath();
			File test = script.getFile();
            ConsoleStatus cStatus = new ConsoleStatus(arguments.getConsole(), trace);
            HtmlStatus hStatus = new HtmlStatus(arguments.getLxrUrl(), arguments.getBugUrl(), path, html, (Element)failureHtml.cloneNode(true));
			XmlStatus xStatus = new XmlStatus(path, this.xml.getDocumentElement());
            ShellTest.Status status = ShellTest.Status.compose(new ShellTest.Status[] { cStatus, hStatus, xStatus });
            try {
                ShellTest.run(factory, test, parameters, status);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            tests++;
            if (hStatus.failed()) {
                failures++;
            }
            hStatus.finish();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,set,"        private void set(Document document, String id, String value) {
            getElementById(document.getDocumentElement(), id).setTextContent(value);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,finish,"        void finish() {
			Date end = new Date();
            long elapsedMs = end.getTime() - start.getTime();
            set(html, ""results.testlist"", join(arguments.getTestList()));
            set(html, ""results.skiplist"", join(arguments.getSkipList()));
            String pct = new java.text.DecimalFormat(""##0.00"").format( (double)failures / (double)tests * 100.0 );
            set(html, ""results.results"", ""Tests attempted: "" + tests + "" Failures: "" + failures + "" ("" + pct + ""%)"");
            set(html, ""results.platform"", ""java.home="" + System.getProperty(""java.home"")
                + ""\n"" + ""java.version="" + System.getProperty(""java.version"")
                + ""\n"" + ""os.name="" + System.getProperty(""os.name"")
            );
            set(html, ""results.classpath"", System.getProperty(""java.class.path"").replace(File.pathSeparatorChar, ' '));
            int elapsedSeconds = (int)(elapsedMs / 1000);
            int elapsedMinutes = elapsedSeconds / 60;
            elapsedSeconds = elapsedSeconds % 60;
            String elapsed = """" + elapsedMinutes + "" minutes, "" + elapsedSeconds + "" seconds"";
            set(html, ""results.elapsed"", elapsed);
            set(html, ""results.time"", new java.text.SimpleDateFormat(""MMMM d yyyy h:mm:ss aa"").format(new java.util.Date()));
            write(html, false);
			write(xml, true);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getTimeoutMilliseconds,"        int getTimeoutMilliseconds() {
            return timeout;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,run,"    void run(Arguments arguments) throws Throwable {
        if (arguments.help()) {
            System.out.println(""See mozilla/js/tests/README-jsDriver.html; note that some options are not supported."");
            System.out.println(""Consult the Java source code at testsrc/org/mozilla/javascript/JsDriver.java for details."");
            System.exit(0);
        }

        ShellContextFactory factory = new ShellContextFactory();
        factory.setOptimizationLevel(arguments.getOptimizationLevel());
        factory.setStrictMode(arguments.isStrict());

        File path = arguments.getTestsPath();
        if (path == null) {
            path = new File(""../tests"");
        }
        if (!path.exists()) {
            throw new RuntimeException(""JavaScript tests not found at "" + path.getCanonicalPath());
        }
        Tests tests = new Tests(path, arguments.getTestList(), arguments.getSkipList());
        Tests.Script[] all = tests.getFiles();
        arguments.getConsole().println(""Running "" + all.length + "" tests."");

        Results results = new Results(factory, arguments, arguments.trace());
		
		results.start();
        for (int i=0; i<all.length; i++) {
            results.run(all[i], new ShellTestParameters(arguments.getTimeout()));
        }
		results.finish();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,main,"    public static void main(Arguments arguments) throws Throwable {
        JsDriver driver = new JsDriver();
        driver.run(arguments);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,print,"          public void print(String message) {
            System.out.print(message);
          }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,println,"          public void println(String message) {
            System.out.println(message);
          }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,ignored,"            Option ignored() {
                this.ignored = true;
                return this;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getInt,"            int getInt() {
                return Integer.parseInt( getValue() );
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getValue,"            String getValue() {
                return (String)values.get(0);
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getSwitch,"            boolean getSwitch() {
                return values.size() > 0;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getFile,"            File getFile() {
                if (getValue() == null) return null;
                return new File(getValue());
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getValues,"            String[] getValues() {
                return (String[])values.toArray(new String[0]);
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,process,"            void process(List arguments) {
                String option = (String)arguments.get(0);
                String dashLetter = (letterOption == null) ? (String)null : ""-"" + letterOption;
                if (option.equals(dashLetter) || option.equals(""--"" + wordOption)) {
                    arguments.remove(0);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getBugUrl,"        public String getBugUrl() {
            return bugUrl.getValue();
        }       ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getOptimizationLevel,"        public int getOptimizationLevel() {
            return optimizationLevel.getInt();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,isStrict,"        public boolean isStrict() {
          return strict.getSwitch();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getOutputFile,"        public File getOutputFile() {
            return outputFile.getFile();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,help,"        public boolean help() {
            return help.getSwitch();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,logFailuresToConsole,"        public boolean logFailuresToConsole() {
            return logFailuresToConsole.getSwitch();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getTestList,"        public String[] getTestList() {
            return testList.getValues();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getSkipList,"        public String[] getSkipList() {
            return skipList.getValues();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getTestsPath,"        public File getTestsPath() {
            return testsPath.getFile();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,trace,"        public boolean trace() {
            return trace.getSwitch();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getLxrUrl,"        public String getLxrUrl() {
            return lxrUrl.getValue();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getTimeout,"        public int getTimeout() {
            return timeout.getInt();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,getConsole,"        public Console getConsole() {
            return console;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,process,"        void process(List arguments) {
            while(arguments.size() > 0) {
                String option = (String)arguments.get(0);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JsDriver.java,main,"    public static void main(String[] args) throws Throwable {
        ArrayList arguments = new ArrayList();
        arguments.addAll(Arrays.asList(args));
        Arguments clArguments = new Arguments();
        clArguments.process(arguments);
        main(clArguments);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,accept,"        public boolean accept(File pathname)
        {
            return pathname.isDirectory() && !pathname.getName().equals(""CVS"");
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,accept,"        public boolean accept(File pathname)
        {
            return pathname.getName().endsWith("".js"") && !pathname.getName().equals(""shell.js"") && !pathname.getName().equals(""browser.js"") && !pathname.getName().equals(""template.js"");
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,getStackTrace,"    static String getStackTrace(Throwable t) {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        t.printStackTrace(new PrintStream(bytes));
        return new String(bytes.toByteArray());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,runFileIfExists,"    private static void runFileIfExists(Context cx, Scriptable global, File f)
    {
        if(f.isFile())
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,setNegative,"        final void setNegative() {
            this.negative = true;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,isNegative,"        final boolean isNegative() {
            return this.negative;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,hadErrors,"        final void hadErrors(JsError[] errors) {
            if (!negative && errors.length > 0) {
                failed(""JavaScript errors:\n"" + JsError.toString(errors));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,compose,"        static Status compose(final Status[] array) {
            return new Status() {
                void running(File file) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,running,"                void running(File file) {
					for (int i=0; i<array.length; i++) {
						array[i].running(file);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,threw,"                void threw(Throwable t) {
					for (int i=0; i<array.length; i++) {
						array[i].threw(t);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,failed,"                void failed(String s) {
					for (int i=0; i<array.length; i++) {
						array[i].failed(s);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,exitCodesWere,"                void exitCodesWere(int expected, int actual) {
					for (int i=0; i<array.length; i++) {
						array[i].exitCodesWere(expected, actual);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,outputWas,"                void outputWas(String s) {
					for (int i=0; i<array.length; i++) {
						array[i].outputWas(s);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,timedOut,"                void timedOut() {
					for (int i=0; i<array.length; i++) {
						array[i].timedOut();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,toString,"            static String toString(JsError[] e) {
                String rv = """";
                for (int i=0; i<e.length; i++) {
                    rv += e[i].toString();
                    if (i+1 != e.length) {
                        rv += ""\n"";
                    }
                }
                return rv;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,toString,"            public String toString() {
                String locationLine = sourceName + "":"" + line + "": "" + message;
                String sourceLine = this.lineSource;
                String errCaret = null;
                if (lineSource != null) {
                    errCaret = """";
                    for (int i=0; i<lineSource.length(); i++) {
                        char c = lineSource.charAt(i);
                        if (i < lineOffset-1) {
                            if (c == '\t') {
                                errCaret += ""\t"";
                            } else {
                                errCaret += "" "";
                            }
                        } else if (i == lineOffset-1) {
                            errCaret += ""^"";
                        }
                    }
                }
                String rv = locationLine;
                if (sourceLine != null) {
                    rv += ""\n"" + sourceLine;
                }
                if (errCaret != null) {
                    rv += ""\n"" + errCaret;
                }
                return rv;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,getMessage,"            String getMessage() {
                return message;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,getSourceName,"            String getSourceName() {
                return sourceName;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,getLine,"            int getLine() {
                return line;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,getLineSource,"            String getLineSource() {
                return lineSource;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,getLineOffset,"            int getLineOffset() {
                return lineOffset;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,addError,"        private void addError(String string, String string0, int i, String string1, int i0) {
            errors.add( new Status.JsError(string, string0, i, string1, i0) );
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,warning,"        public void warning(String string, String string0, int i, String string1, int i0) {
            original.warning(string, string0, i, string1, i0);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,runtimeError,"        public EvaluatorException runtimeError(String string, String string0, int i, String string1, int i0) {
            return original.runtimeError(string, string0, i, string1, i0);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,error,"        public void error(String string, String string0, int i, String string1, int i0) {
            addError(string, string0, i, string1, i0);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,run,"    static void run(final ShellContextFactory shellContextFactory, final File jsFile, final Parameters parameters, final Status status) throws Exception {
        final Global global = new Global();
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final PrintStream p = new PrintStream(out);
        global.setOut(p);
        global.setErr(p);
        final TestState testState = new TestState();
        if (jsFile.getName().endsWith(""-n.js"")) {
            status.setNegative();
        }
        Thread t = new Thread(new Runnable()
        {
            public void run()
            {
                try
                {
                    shellContextFactory.call(new ContextAction()
                    {
                        public Object run(Context cx)
                        {
                            System.out.println(""Running "" + jsFile);
                            status.running(jsFile);
                            testState.errors = new ErrorReporterWrapper(cx.getErrorReporter());
                            cx.setErrorReporter( testState.errors );
                            global.init(cx);
                            try {
                                runFileIfExists(cx, global, new File(jsFile.getParentFile().getParentFile().getParentFile(), ""shell.js""));
                                runFileIfExists(cx, global, new File(jsFile.getParentFile().getParentFile(), ""shell.js""));
                                runFileIfExists(cx, global, new File(jsFile.getParentFile(), ""shell.js""));
                                runFileIfExists(cx, global, jsFile);
                                //    Emulate SpiderMonkey enum value from mozilla/js/src/js.c
                                for (int i=0; i<testState.errors.errors.size(); i++) {
                                    Status.JsError thisOne = (Status.JsError)testState.errors.errors.get(i);
                                    if (thisOne.getMessage().indexOf(""java.lang.OutOfMemoryError"") != -1) {
                                        testState.exitCode = 5;
                                        testState.errors.errors.remove(thisOne);
                                    }
                                }
                                status.hadErrors( (Status.JsError[])testState.errors.errors.toArray(new Status.JsError[0]) );
                            } catch (ThreadDeath e) {
                            } catch (Throwable t) {
                                status.threw(t);
                            }
                            return null;
                        }
                    });
                } finally {
                    synchronized(testState)
                    {
                        testState.finished = true;
                    }
                }
            }
        }, jsFile.getPath());
        t.setDaemon(true);
        t.start();
        t.join(parameters.getTimeoutMilliseconds());
        synchronized(testState)
        {
            if(!testState.finished)
            {
                t.stop();
                status.timedOut();
            }
        }
        int expectedExitCode = 0;
        p.flush();
        status.outputWas(new String(out.toByteArray()));
        BufferedReader r = new BufferedReader(new InputStreamReader(
                new ByteArrayInputStream(out.toByteArray())));
        String failures = """";
        for(;;)
        {
            String s = r.readLine();
            if(s == null)
            {
                break;
            }
            if(s.indexOf(""FAILED!"") != -1)
            {
                failures += s + '\n';
            }
            int expex = s.indexOf(""EXPECT EXIT CODE "");
            if(expex != -1)
            {
                expectedExitCode = s.charAt(expex + ""EXPECT EXIT CODE "".length()) - '0';
            }
        }
        status.exitCodesWere(expectedExitCode, testState.exitCode);
        if(failures != """")
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,run,"            public void run()
            {
                try
                {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellTest.java,run,"                        public Object run(Context cx)
                        {
                            System.out.println(""Running "" + jsFile);
                            status.running(jsFile);
                            testState.errors = new ErrorReporterWrapper(cx.getErrorReporter());
                            cx.setErrorReporter( testState.errors );
                            global.init(cx);
                            try {
                                runFileIfExists(cx, global, new File(jsFile.getParentFile().getParentFile().getParentFile(), ""shell.js""));
                                runFileIfExists(cx, global, new File(jsFile.getParentFile().getParentFile(), ""shell.js""));
                                runFileIfExists(cx, global, new File(jsFile.getParentFile(), ""shell.js""));
                                runFileIfExists(cx, global, jsFile);
                                //    Emulate SpiderMonkey enum value from mozilla/js/src/js.c
                                for (int i=0; i<testState.errors.errors.size(); i++) {
                                    Status.JsError thisOne = (Status.JsError)testState.errors.errors.get(i);
                                    if (thisOne.getMessage().indexOf(""java.lang.OutOfMemoryError"") != -1) {
                                        testState.exitCode = 5;
                                        testState.errors.errors.remove(thisOne);
                                    }
                                }
                                status.hadErrors( (Status.JsError[])testState.errors.errors.toArray(new Status.JsError[0]) );
                            } catch (ThreadDeath e) {
                            } catch (Throwable t) {
                                status.threw(t);
                            }
                            return null;
                        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,suite,"    public static TestSuite suite() throws Exception
    {
        TestSuite suite = new TestSuite(""Standard JavaScript tests"");

        File testDir = null;
        if (System.getProperty(""mozilla.js.tests"") != null) {
            testDir = new File(System.getProperty(""mozilla.js.tests""));
        } else {
            URL url = StandardTests.class.getResource(""."");
            String path = url.getFile();
            int jsIndex = path.lastIndexOf(""/js"");
            if(jsIndex == -1)
            {
                throw new IllegalStateException(""You aren't running the tests from within the standard mozilla/js directory structure"");
            }
            path = path.substring(0, jsIndex + 3).replace('/', File.separatorChar);
            testDir = new File(path, ""tests"");
        }
        if(!testDir.isDirectory())
        {
            throw new FileNotFoundException(testDir + "" is not a directory"");
        }
        Properties excludes = new Properties();
        loadExcludes(excludes, ""/base.skip"");
        Properties opt1Excludes = new Properties();
        loadExcludes(opt1Excludes, ""/opt1.skip"");
        opt1Excludes.putAll(excludes);
        for(int i = -1; i < 2; ++i)
        {
            TestSuite optimizationLevelSuite = new TestSuite(""Optimization level "" + i);
            addSuites(optimizationLevelSuite, testDir, i == -1 ? excludes : opt1Excludes, i);
            suite.addTest(optimizationLevelSuite);
        }
        return suite;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,loadExcludes,"    private static void loadExcludes(Properties excludes, String excludeFileName) throws IOException
    {
        InputStream in = StandardTests.class.getResourceAsStream(excludeFileName);
        try
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,addSuites,"    private static void addSuites(TestSuite topLevel, File testDir, Properties excludes, int optimizationLevel)
    {
        File[] subdirs = testDir.listFiles(ShellTest.DIRECTORY_FILTER);
        Arrays.sort(subdirs);
        for (int i = 0; i < subdirs.length; i++)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,addCategories,"    private static void addCategories(TestSuite suite, File suiteDir, String prefix, Properties excludes, int optimizationLevel)
    {
        File[] subdirs = suiteDir.listFiles(ShellTest.DIRECTORY_FILTER);
        Arrays.sort(subdirs);
        for (int i = 0; i < subdirs.length; i++)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,addTests,"    private static void addTests(TestSuite suite, File suiteDir, String prefix, Properties excludes, int optimizationLevel)
    {
        File[] jsFiles = suiteDir.listFiles(ShellTest.TEST_FILTER);
        Arrays.sort(jsFiles);
        for (int i = 0; i < jsFiles.length; i++)
        {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,failed,"        final void failed(String s) {
            Assert.fail(s);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,exitCodesWere,"        final void exitCodesWere(int expected, int actual) {
            Assert.assertEquals(""Unexpected exit code"", expected, actual);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,outputWas,"        final void outputWas(String s) {
            System.out.print(s);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,threw,"        final void threw(Throwable t) {
            Assert.fail(ShellTest.getStackTrace(t));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,timedOut,"        final void timedOut() {
            failed(""Timed out."");
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,countTestCases,"        public int countTestCases()
        {
            return 1;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,getTimeoutMilliseconds,"            int getTimeoutMilliseconds() {
                if (System.getProperty(""mozilla.js.tests.timeout"") != null) {
                    return Integer.parseInt(System.getProperty(""mozilla.js.tests.timeout""));
                }
                return 60000;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,StandardTests.java,runBare,"        public void runBare() throws Exception
        {
            final ShellContextFactory shellContextFactory = new ShellContextFactory();
            shellContextFactory.setOptimizationLevel(optimizationLevel);
            ShellTest.run(shellContextFactory, jsFile, new ShellTestParameters(), new JunitStatus());
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Bug409702Test.java,testAdapter,"  public void testAdapter() {
      final int value = 12;
      String source = 
          ""var instance = "" +
          ""  new JavaAdapter("" + getClass().getName() + "".Test.Subclass,"" +
          ""{ b: function () { return "" + value + ""; } });"" +
          ""instance.b();"";

      Context cx = ContextFactory.getGlobal().enterContext();
      try {
          Scriptable scope = cx.initStandardObjects();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAcessibilityTest.java,hasFeature,"    protected boolean hasFeature(Context cx, int featureIndex) {
      if (featureIndex == Context.FEATURE_ENHANCED_JAVA_ACCESS)
            return true; 
      return super.hasFeature(cx, featureIndex);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAcessibilityTest.java,testAccessingFields,"  public void testAccessingFields() {
    Object result = runScript(importClass + ""PrivateAccessClass.staticPackagePrivateInt"");
    assertEquals(new Integer(0), result);
    
    result = runScript(importClass + ""PrivateAccessClass.staticPrivateInt"");
    assertEquals(new Integer(1), result);
    
    result = runScript(importClass + ""PrivateAccessClass.staticProtectedInt"");
    assertEquals(new Integer(2), result);
    
    result = runScript(importClass + ""new PrivateAccessClass().packagePrivateString"");
    assertEquals(""package private"", ((NativeJavaObject) result).unwrap());
    
    result = runScript(importClass + ""new PrivateAccessClass().privateString"");
    assertEquals(""private"", ((NativeJavaObject) result).unwrap());
    
    result = runScript(importClass + ""new PrivateAccessClass().protectedString"");
    assertEquals(""protected"", ((NativeJavaObject) result).unwrap());

    result = runScript(importClass + ""new PrivateAccessClass.PrivateNestedClass().packagePrivateInt"");
    assertEquals(new Integer(0), result);
    
    result = runScript(importClass + ""new PrivateAccessClass.PrivateNestedClass().privateInt"");
    assertEquals(new Integer(1), result);

    result = runScript(importClass + ""new PrivateAccessClass.PrivateNestedClass().protectedInt"");
    assertEquals(new Integer(2), result);
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAcessibilityTest.java,testAccessingMethods,"  public void testAccessingMethods() {  
    Object result = runScript(importClass + ""PrivateAccessClass.staticPackagePrivateMethod()"");
    assertEquals(new Integer(0), result);
    
    result = runScript(importClass + ""PrivateAccessClass.staticPrivateMethod()"");
    assertEquals(new Integer(1), result);    
    
    result = runScript(importClass + ""PrivateAccessClass.staticProtectedMethod()"");
    assertEquals(new Integer(2), result);

    result = runScript(importClass + ""new PrivateAccessClass().packagePrivateMethod()"");
    assertEquals(new Integer(3), result);
    
    result = runScript(importClass + ""new PrivateAccessClass().privateMethod()"");
    assertEquals(new Integer(4), result);    
    
    result = runScript(importClass + ""new PrivateAccessClass().protectedMethod()"");
    assertEquals(new Integer(5), result);
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAcessibilityTest.java,testAccessingConstructors,"  public void testAccessingConstructors() {
    runScript(importClass + ""new PrivateAccessClass(\""foo\"")"");
    runScript(importClass + ""new PrivateAccessClass(5)"");
    runScript(importClass + ""new PrivateAccessClass(5, \""foo\"")"");
  }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAcessibilityTest.java,runScript,"  private Object runScript(final String scriptSourceText) {
    return this.contextFactory.call(new ContextAction() {
      public Object run(Context context) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaAcessibilityTest.java,run,"      public Object run(Context context) {
        Script script = context.compileString(scriptSourceText, """", 1, null);
        return script.exec(context, global);
      }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PrivateAccessClass.java,staticPackagePrivateMethod,"  static int staticPackagePrivateMethod() { return 0; }
  static private int staticPrivateMethod() { return 1; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PrivateAccessClass.java,staticPrivateMethod,"  static private int staticPrivateMethod() { return 1; }
  static protected int staticProtectedMethod() { return 2; } ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PrivateAccessClass.java,staticProtectedMethod,"  static protected int staticProtectedMethod() { return 2; } 
  ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PrivateAccessClass.java,packagePrivateMethod,"  int packagePrivateMethod() { return 3; }
  private int privateMethod() { return 4; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PrivateAccessClass.java,privateMethod,"  private int privateMethod() { return 4; }
  protected int protectedMethod() { return 5; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PrivateAccessClass.java,protectedMethod,"  protected int protectedMethod() { return 5; }
  ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,PrivateAccessClass.java,referenceToPrivateMembers,"  public int referenceToPrivateMembers() {
    PrivateAccessClass pac = new PrivateAccessClass();
    PrivateAccessClass pac2 = new PrivateAccessClass(2);
    PrivateNestedClass pnc = new PrivateNestedClass();
    System.out.println(privateString);
    return pnc.privateInt + staticPrivateInt + staticPrivateMethod() +
           pac.privateMethod();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,getMessage,"    public static String getMessage(String messageId) {
        return getMessage(messageId, (Object []) null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,getMessage,"    public static String getMessage(String messageId, String argument) {
        Object[] args = { argument };
        return getMessage(messageId, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,getMessage,"    public static String getMessage(String messageId, Object arg1, Object arg2)
    {
        Object[] args = { arg1, arg2 };
        return getMessage(messageId, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,getMessage,"    public static String getMessage(String messageId, Object[] args) {
        Context cx = Context.getCurrentContext();
        Locale locale = cx == null ? Locale.getDefault() : cx.getLocale();

        // ResourceBundle does cacheing.
        ResourceBundle rb = ResourceBundle.getBundle
            (""org.mozilla.javascript.tools.resources.Messages"", locale);

        String formatString;
        try {
            formatString = rb.getString(messageId);
        } catch (java.util.MissingResourceException mre) {
            throw new RuntimeException(""no message resource found for message property ""
                                       + messageId);
        }

        if (args == null) {
            return formatString;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,getExceptionMessage,"    private static String getExceptionMessage(RhinoException ex)
    {
        String msg;
        if (ex instanceof JavaScriptException) {
            msg = getMessage(""msg.uncaughtJSException"", ex.details());
        } else if (ex instanceof EcmaError) {
            msg = getMessage(""msg.uncaughtEcmaError"", ex.details());
        } else if (ex instanceof EvaluatorException) {
            msg = ex.details();
        } else {
            msg = ex.toString();
        }
        return msg;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,warning,"    public void warning(String message, String sourceName, int line,
                        String lineSource, int lineOffset)
    {
        if (!reportWarnings)
            return;
        reportErrorMessage(message, sourceName, line, lineSource, lineOffset,
                           true);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,error,"    public void error(String message, String sourceName, int line,
                      String lineSource, int lineOffset)
    {
        hasReportedErrorFlag = true;
        reportErrorMessage(message, sourceName, line, lineSource, lineOffset,
                           false);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,runtimeError,"    public EvaluatorException runtimeError(String message, String sourceName,
                                           int line, String lineSource,
                                           int lineOffset)
    {
        return new EvaluatorException(message, sourceName, line,
                                      lineSource, lineOffset);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,hasReportedError,"    public boolean hasReportedError() {
        return hasReportedErrorFlag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,isReportingWarnings,"    public boolean isReportingWarnings() {
        return this.reportWarnings;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,setIsReportingWarnings,"    public void setIsReportingWarnings(boolean reportWarnings) {
        this.reportWarnings = reportWarnings;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,reportException,"    public static void reportException(ErrorReporter er, RhinoException ex)
    {
        if (er instanceof ToolErrorReporter) {
            ((ToolErrorReporter)er).reportException(ex);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,reportException,"    public void reportException(RhinoException ex)
    {
        if (ex instanceof WrappedException) {
            WrappedException we = (WrappedException)ex;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,reportErrorMessage,"    private void reportErrorMessage(String message, String sourceName, int line,
                                    String lineSource, int lineOffset,
                                    boolean justWarning)
    {
        if (line > 0) {
            String lineStr = String.valueOf(line);
            if (sourceName != null) {
                Object[] args = { sourceName, lineStr, message };
                message = getMessage(""msg.format3"", args);
            } else {
                Object[] args = { lineStr, message };
                message = getMessage(""msg.format2"", args);
            }
        } else {
            Object[] args = { message };
            message = getMessage(""msg.format1"", args);
        }
        if (justWarning) {
            message = getMessage(""msg.warning"", message);
        }
        err.println(messagePrefix + message);
        if (null != lineSource) {
            err.println(messagePrefix + lineSource);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ToolErrorReporter.java,buildIndicator,"    private String buildIndicator(int offset){
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < offset-1; i++)
            sb.append(""."");
        sb.append(""^"");
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,setGuiCallback,"    public void setGuiCallback(GuiCallback callback) {
        this.callback = callback;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,setBreak,"    public void setBreak() {
        this.breakFlag = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,setScopeProvider,"    public void setScopeProvider(ScopeProvider scopeProvider) {
        this.scopeProvider = scopeProvider;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,contextSwitch,"    public void contextSwitch(int frameIndex) {
        this.frameIndex = frameIndex;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,setBreakOnExceptions,"    public void setBreakOnExceptions(boolean breakOnExceptions) {
        this.breakOnExceptions = breakOnExceptions;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,setBreakOnEnter,"    public void setBreakOnEnter(boolean breakOnEnter) {
        this.breakOnEnter = breakOnEnter;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,setBreakOnReturn,"    public void setBreakOnReturn(boolean breakOnReturn) {
        this.breakOnReturn = breakOnReturn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,attachTo,"    public void attachTo(ContextFactory factory) {
        detach();
        this.contextFactory = factory;
        this.listener = new DimIProxy(this, IPROXY_LISTEN);
        factory.addListener(this.listener);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,detach,"    public void detach() {
        if (listener != null) {
            contextFactory.removeListener(listener);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,dispose,"    public void dispose() {
        detach();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getFunctionSource,"    private FunctionSource getFunctionSource(DebuggableScript fnOrScript) {
        FunctionSource fsource = functionSource(fnOrScript);
        if (fsource == null) {
            String url = getNormalizedUrl(fnOrScript);
            SourceInfo si = sourceInfo(url);
            if (si == null) {
                if (!fnOrScript.isGeneratedScript()) {
                    // Not eval or Function, try to load it from URL
                    String source = loadSource(url);
                    if (source != null) {
                        DebuggableScript top = fnOrScript;
                        for (;;) {
                            DebuggableScript parent = top.getParent();
                            if (parent == null) {
                                break;
                            }
                            top = parent;
                        }
                        registerTopScript(top, source);
                        fsource = functionSource(fnOrScript);
                    }
                }
            }
        }
        return fsource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,loadSource,"    private String loadSource(String sourceUrl) {
        String source = null;
        int hash = sourceUrl.indexOf('#');
        if (hash >= 0) {
            sourceUrl = sourceUrl.substring(0, hash);
        }
        try {
            InputStream is;
          openStream:
            {
                if (sourceUrl.indexOf(':') < 0) {
                    // Can be a file name
                    try {
                        if (sourceUrl.startsWith(""~/"")) {
                            String home = SecurityUtilities.getSystemProperty(""user.home"");
                            if (home != null) {
                                String pathFromHome = sourceUrl.substring(2);
                                File f = new File(new File(home), pathFromHome);
                                if (f.exists()) {
                                    is = new FileInputStream(f);
                                    break openStream;
                                }
                            }
                        }
                        File f = new File(sourceUrl);
                        if (f.exists()) {
                            is = new FileInputStream(f);
                            break openStream;
                        }
                    } catch (SecurityException ex) { }
                    // No existing file, assume missed http://
                    if (sourceUrl.startsWith(""//"")) {
                        sourceUrl = ""http:"" + sourceUrl;
                    } else if (sourceUrl.startsWith(""/"")) {
                        sourceUrl = ""http://127.0.0.1"" + sourceUrl;
                    } else {
                        sourceUrl = ""http://"" + sourceUrl;
                    }
                }

                is = (new URL(sourceUrl)).openStream();
            }

            try {
                source = Kit.readReader(new InputStreamReader(is));
            } finally {
                is.close();
            }
        } catch (IOException ex) {
            System.err.println
                (""Failed to load source from ""+sourceUrl+"": ""+ ex);
        }
        return source;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,registerTopScript,"    private void registerTopScript(DebuggableScript topScript, String source) {
        if (!topScript.isTopLevel()) {
            throw new IllegalArgumentException();
        }
        String url = getNormalizedUrl(topScript);
        DebuggableScript[] functions = getAllFunctions(topScript);
        final SourceInfo sourceInfo = new SourceInfo(source, functions, url);

        synchronized (urlToSourceInfo) {
            SourceInfo old = (SourceInfo)urlToSourceInfo.get(url);
            if (old != null) {
                sourceInfo.copyBreakpointsFrom(old);
            }
            urlToSourceInfo.put(url, sourceInfo);
            for (int i = 0; i != sourceInfo.functionSourcesTop(); ++i) {
                FunctionSource fsource = sourceInfo.functionSource(i);
                String name = fsource.name();
                if (name.length() != 0) {
                    functionNames.put(name, fsource);
                }
            }
        }

        synchronized (functionToSource) {
            for (int i = 0; i != functions.length; ++i) {
                FunctionSource fsource = sourceInfo.functionSource(i);
                functionToSource.put(functions[i], fsource);
            }
        }

        callback.updateSourceText(sourceInfo);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,functionSource,"    private FunctionSource functionSource(DebuggableScript fnOrScript) {
        return (FunctionSource)functionToSource.get(fnOrScript);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,functionNames,"    public String[] functionNames() {
        String[] a;
        synchronized (urlToSourceInfo) {
            Enumeration e = functionNames.keys();
            a = new String[functionNames.size()];
            int i = 0;
            while (e.hasMoreElements()) {
                a[i++] = (String)e.nextElement();
            }
        }
        return a;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,functionSourceByName,"    public FunctionSource functionSourceByName(String functionName) {
        return (FunctionSource)functionNames.get(functionName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,sourceInfo,"    public SourceInfo sourceInfo(String url) {
        return (SourceInfo)urlToSourceInfo.get(url);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getNormalizedUrl,"    private String getNormalizedUrl(DebuggableScript fnOrScript) {
        String url = fnOrScript.getSourceName();
        if (url == null) { url = ""<stdin>""; }
        else {
            // Not to produce window for eval from different lines,
            // strip line numbers, i.e. replace all #[0-9]+\(eval\) by
            // (eval)
            // Option: similar teatment for Function?
            char evalSeparator = '#';
            StringBuffer sb = null;
            int urlLength = url.length();
            int cursor = 0;
            for (;;) {
                int searchStart = url.indexOf(evalSeparator, cursor);
                if (searchStart < 0) {
                    break;
                }
                String replace = null;
                int i = searchStart + 1;
                while (i != urlLength) {
                    int c = url.charAt(i);
                    if (!('0' <= c && c <= '9')) {
                        break;
                    }
                    ++i;
                }
                if (i != searchStart + 1) {
                    // i points after #[0-9]+
                    if (""(eval)"".regionMatches(0, url, i, 6)) {
                        cursor = i + 6;
                        replace = ""(eval)"";
                    }
                }
                if (replace == null) {
                    break;
                }
                if (sb == null) {
                    sb = new StringBuffer();
                    sb.append(url.substring(0, searchStart));
                }
                sb.append(replace);
            }
            if (sb != null) {
                if (cursor != urlLength) {
                    sb.append(url.substring(cursor));
                }
                url = sb.toString();
            }
        }
        return url;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getAllFunctions,"    private static DebuggableScript[] getAllFunctions
            (DebuggableScript function) {
        ObjArray functions = new ObjArray();
        collectFunctions_r(function, functions);
        DebuggableScript[] result = new DebuggableScript[functions.size()];
        functions.toArray(result);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,collectFunctions_r,"    private static void collectFunctions_r(DebuggableScript function,
                                             ObjArray array) {
        array.add(function);
        for (int i = 0; i != function.getFunctionCount(); ++i) {
            collectFunctions_r(function.getFunction(i), array);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,clearAllBreakpoints,"    public void clearAllBreakpoints() {
        Enumeration e = urlToSourceInfo.elements();
        while (e.hasMoreElements()) {
            SourceInfo si = (SourceInfo)e.nextElement();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,handleBreakpointHit,"    private void handleBreakpointHit(StackFrame frame, Context cx) {
        breakFlag = false;
        interrupted(cx, frame, null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,handleExceptionThrown,"    private void handleExceptionThrown(Context cx, Throwable ex,
                                         StackFrame frame) {
        if (breakOnExceptions) {
            ContextData cd = frame.contextData();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,currentContextData,"    public ContextData currentContextData() {
        return interruptedContextData;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,setReturnValue,"    public void setReturnValue(int returnValue) {
        synchronized (monitor) {
            this.returnValue = returnValue;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,go,"    public void go() {
        synchronized (monitor) {
            this.returnValue = GO;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,eval,"    public String eval(String expr) {
        String result = ""undefined"";
        if (expr == null) {
            return result;
        }
        ContextData contextData = currentContextData();
        if (contextData == null || frameIndex >= contextData.frameCount()) {
            return result;
        }
        StackFrame frame = contextData.getFrame(frameIndex);
        if (contextData.eventThreadFlag) {
            Context cx = Context.getCurrentContext();
            result = do_eval(cx, frame, expr);
        } else {
            synchronized (monitor) {
                if (insideInterruptLoop) {
                    evalRequest = expr;
                    evalFrame = frame;
                    monitor.notify();
                    do {
                        try {
                            monitor.wait();
                        } catch (InterruptedException exc) {
                            Thread.currentThread().interrupt();
                            break;
                        }
                    } while (evalRequest != null);
                    result = evalResult;
                }
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,compileScript,"    public void compileScript(String url, String text) {
        DimIProxy action = new DimIProxy(this, IPROXY_COMPILE_SCRIPT);
        action.url = url;
        action.text = text;
        action.withContext();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,evalScript,"    public void evalScript(final String url, final String text) {
        DimIProxy action = new DimIProxy(this, IPROXY_EVAL_SCRIPT);
        action.url = url;
        action.text = text;
        action.withContext();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,objectToString,"    public String objectToString(Object object) {
        DimIProxy action = new DimIProxy(this, IPROXY_OBJECT_TO_STRING);
        action.object = object;
        action.withContext();
        return action.stringResult;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,stringIsCompilableUnit,"    public boolean stringIsCompilableUnit(String str) {
        DimIProxy action = new DimIProxy(this, IPROXY_STRING_IS_COMPILABLE);
        action.text = str;
        action.withContext();
        return action.booleanResult;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getObjectProperty,"    public Object getObjectProperty(Object object, Object id) {
        DimIProxy action = new DimIProxy(this, IPROXY_OBJECT_PROPERTY);
        action.object = object;
        action.id = id;
        action.withContext();
        return action.objectResult;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getObjectIds,"    public Object[] getObjectIds(Object object) {
        DimIProxy action = new DimIProxy(this, IPROXY_OBJECT_IDS);
        action.object = object;
        action.withContext();
        return action.objectArrayResult;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getObjectPropertyImpl,"    private Object getObjectPropertyImpl(Context cx, Object object,
                                           Object id) {
        Scriptable scriptable = (Scriptable)object;
        Object result;
        if (id instanceof String) {
            String name = (String)id;
            if (name.equals(""this"")) {
                result = scriptable;
            } else if (name.equals(""__proto__"")) {
                result = scriptable.getPrototype();
            } else if (name.equals(""__parent__"")) {
                result = scriptable.getParentScope();
            } else {
                result = ScriptableObject.getProperty(scriptable, name);
                if (result == ScriptableObject.NOT_FOUND) {
                    result = Undefined.instance;
                }
            }
        } else {
            int index = ((Integer)id).intValue();
            result = ScriptableObject.getProperty(scriptable, index);
            if (result == ScriptableObject.NOT_FOUND) {
                result = Undefined.instance;
            }
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getObjectIdsImpl,"    private Object[] getObjectIdsImpl(Context cx, Object object) {
        if (!(object instanceof Scriptable) || object == Undefined.instance) {
            return Context.emptyArgs;
        }

        Object[] ids;
        Scriptable scriptable = (Scriptable)object;
        if (scriptable instanceof DebuggableObject) {
            ids = ((DebuggableObject)scriptable).getAllIds();
        } else {
            ids = scriptable.getIds();
        }

        Scriptable proto = scriptable.getPrototype();
        Scriptable parent = scriptable.getParentScope();
        int extra = 0;
        if (proto != null) {
            ++extra;
        }
        if (parent != null) {
            ++extra;
        }
        if (extra != 0) {
            Object[] tmp = new Object[extra + ids.length];
            System.arraycopy(ids, 0, tmp, extra, ids.length);
            ids = tmp;
            extra = 0;
            if (proto != null) {
                ids[extra++] = ""__proto__"";
            }
            if (parent != null) {
                ids[extra++] = ""__parent__"";
            }
        }

        return ids;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,interrupted,"    private void interrupted(Context cx, final StackFrame frame,
                               Throwable scriptException) {
        ContextData contextData = frame.contextData();
        boolean eventThreadFlag = callback.isGuiEventThread();
        contextData.eventThreadFlag = eventThreadFlag;

        boolean recursiveEventThreadCall = false;

interruptedCheck:
        synchronized (eventThreadMonitor) {
            if (eventThreadFlag) {
                if (interruptedContextData != null) {
                    recursiveEventThreadCall = true;
                    break interruptedCheck;
                }
            } else {
                while (interruptedContextData != null) {
                    try {
                        eventThreadMonitor.wait();
                    } catch (InterruptedException exc) {
                        return;
                    }
                }
            }
            interruptedContextData = contextData;
        }

        if (recursiveEventThreadCall) {
            // XXX: For now the following is commented out as on Linux
            // too deep recursion of dispatchNextGuiEvent causes GUI lockout.
            // Note: it can make GUI unresponsive if long-running script
            // will be called on GUI thread while processing another interrupt
            if (false) {
               // Run event dispatch until gui sets a flag to exit the initial
               // call to interrupted.
                while (this.returnValue == -1) {
                    try {
                        callback.dispatchNextGuiEvent();
                    } catch (InterruptedException exc) {
                    }
                }
            }
            return;
        }

        if (interruptedContextData == null) Kit.codeBug();

        try {
            do {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,do_eval,"    private static String do_eval(Context cx, StackFrame frame, String expr) {
        String resultString;
        Debugger saved_debugger = cx.getDebugger();
        Object saved_data = cx.getDebuggerContextData();
        int saved_level = cx.getOptimizationLevel();

        cx.setDebugger(null, null);
        cx.setOptimizationLevel(-1);
        cx.setGeneratingDebug(false);
        try {
            Callable script = (Callable)cx.compileString(expr, """", 0, null);
            Object result = script.call(cx, frame.scope, frame.thisObj,
                                        ScriptRuntime.emptyArgs);
            if (result == Undefined.instance) {
                resultString = """";
            } else {
                resultString = ScriptRuntime.toString(result);
            }
        } catch (Exception exc) {
            resultString = exc.getMessage();
        } finally {
            cx.setGeneratingDebug(true);
            cx.setOptimizationLevel(saved_level);
            cx.setDebugger(saved_debugger, saved_data);
        }
        if (resultString == null) {
            resultString = ""null"";
        }
        return resultString;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,run,"        public Object run(Context cx) {
            switch (type) {
              case IPROXY_COMPILE_SCRIPT:
                cx.compileString(text, url, 1, null);
                break;

              case IPROXY_EVAL_SCRIPT:
                {
                    Scriptable scope = null;
                    if (dim.scopeProvider != null) {
                        scope = dim.scopeProvider.getScope();
                    }
                    if (scope == null) {
                        scope = new ImporterTopLevel(cx);
                    }
                    cx.evaluateString(scope, text, url, 1, null);
                }
                break;

              case IPROXY_STRING_IS_COMPILABLE:
                booleanResult = cx.stringIsCompilableUnit(text);
                break;

              case IPROXY_OBJECT_TO_STRING:
                if (object == Undefined.instance) {
                    stringResult = ""undefined"";
                } else if (object == null) {
                    stringResult = ""null"";
                } else if (object instanceof NativeCall) {
                    stringResult = ""[object Call]"";
                } else {
                    stringResult = Context.toString(object);
                }
                break;

              case IPROXY_OBJECT_PROPERTY:
                objectResult = dim.getObjectPropertyImpl(cx, object, id);
                break;

              case IPROXY_OBJECT_IDS:
                objectArrayResult = dim.getObjectIdsImpl(cx, object);
                break;

              default:
                throw Kit.codeBug();
            }
            return null;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,withContext,"        private void withContext() {
            dim.contextFactory.call(this);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,contextCreated,"        public void contextCreated(Context cx) {
            if (type != IPROXY_LISTEN) Kit.codeBug();
            ContextData contextData = new ContextData();
            Debugger debugger = new DimIProxy(dim, IPROXY_DEBUG);
            cx.setDebugger(debugger, contextData);
            cx.setGeneratingDebug(true);
            cx.setOptimizationLevel(-1);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,contextReleased,"        public void contextReleased(Context cx) {
            if (type != IPROXY_LISTEN) Kit.codeBug();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getFrame,"        public DebugFrame getFrame(Context cx, DebuggableScript fnOrScript) {
            if (type != IPROXY_DEBUG) Kit.codeBug();

            FunctionSource item = dim.getFunctionSource(fnOrScript);
            if (item == null) {
                // Can not debug if source is not available
                return null;
            }
            return new StackFrame(cx, dim, item);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,handleCompilationDone,"        public void handleCompilationDone(Context cx,
                                          DebuggableScript fnOrScript,
                                          String source) {
            if (type != IPROXY_DEBUG) Kit.codeBug();

            if (!fnOrScript.isTopLevel()) {
                return;
            }
            dim.registerTopScript(fnOrScript, source);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,get,"        public static ContextData get(Context cx) {
            return (ContextData) cx.getDebuggerContextData();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,frameCount,"        public int frameCount() {
            return frameStack.size();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getFrame,"        public StackFrame getFrame(int frameNumber) {
            int num = frameStack.size() - frameNumber - 1;
            return (StackFrame) frameStack.get(num);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,pushFrame,"        private void pushFrame(StackFrame frame) {
            frameStack.push(frame);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,popFrame,"        private void popFrame() {
            frameStack.pop();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,onEnter,"        public void onEnter(Context cx, Scriptable scope,
                            Scriptable thisObj, Object[] args) {
            contextData.pushFrame(this);
            this.scope = scope;
            this.thisObj = thisObj;
            if (dim.breakOnEnter) {
                dim.handleBreakpointHit(this, cx);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,onLineChange,"        public void onLineChange(Context cx, int lineno) {
            this.lineNumber = lineno;

            if (!breakpoints[lineno] && !dim.breakFlag) {
                boolean lineBreak = contextData.breakNextLine;
                if (lineBreak && contextData.stopAtFrameDepth >= 0) {
                    lineBreak = (contextData.frameCount()
                                 <= contextData.stopAtFrameDepth);
                }
                if (!lineBreak) {
                    return;
                }
                contextData.stopAtFrameDepth = -1;
                contextData.breakNextLine = false;
            }

            dim.handleBreakpointHit(this, cx);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,onExceptionThrown,"        public void onExceptionThrown(Context cx, Throwable exception) {
            dim.handleExceptionThrown(cx, exception, this);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,onExit,"        public void onExit(Context cx, boolean byThrow,
                           Object resultOrException) {
            if (dim.breakOnReturn && !byThrow) {
                dim.handleBreakpointHit(this, cx);
            }
            contextData.popFrame();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,onDebuggerStatement,"        public void onDebuggerStatement(Context cx) {
            dim.handleBreakpointHit(this, cx);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,sourceInfo,"        public SourceInfo sourceInfo() {
            return fsource.sourceInfo();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,contextData,"        public ContextData contextData() {
            return contextData;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,scope,"        public Object scope() {
            return scope;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,thisObj,"        public Object thisObj() {
            return thisObj;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getUrl,"        public String getUrl() {
            return fsource.sourceInfo().url();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,getLineNumber,"        public int getLineNumber() {
            return lineNumber;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,sourceInfo,"        public SourceInfo sourceInfo() {
            return sourceInfo;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,firstLine,"        public int firstLine() {
            return firstLine;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,name,"        public String name() {
            return name;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,source,"        public String source() {
            return this.source;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,url,"        public String url() {
            return this.url;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,functionSourcesTop,"        public int functionSourcesTop() {
            return functionSources.length;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,functionSource,"        public FunctionSource functionSource(int i) {
            return functionSources[i];
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,copyBreakpointsFrom,"        private void copyBreakpointsFrom(SourceInfo old) {
            int end = old.breakpoints.length;
            if (end > this.breakpoints.length) {
                end = this.breakpoints.length;
            }
            for (int line = 0; line != end; ++line) {
                if (old.breakpoints[line]) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,breakableLine,"        public boolean breakableLine(int line) {
            return (line < this.breakableLines.length)
                   && this.breakableLines[line];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,breakpoint,"        public boolean breakpoint(int line) {
            if (!breakableLine(line)) {
                throw new IllegalArgumentException(String.valueOf(line));
            }
            return line < this.breakpoints.length && this.breakpoints[line];
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,breakpoint,"        public boolean breakpoint(int line, boolean value) {
            if (!breakableLine(line)) {
                throw new IllegalArgumentException(String.valueOf(line));
            }
            boolean changed;
            synchronized (breakpoints) {
                if (breakpoints[line] != value) {
                    breakpoints[line] = value;
                    changed = true;
                } else {
                    changed = false;
                }
            }
            return changed;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Dim.java,removeAllBreakpoints,"        public void removeAllBreakpoints() {
            synchronized (breakpoints) {
                for (int line = 0; line != breakpoints.length; ++line) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getDebugFrame,"    public JFrame getDebugFrame() {
        return debugGui;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,doBreak,"    public void doBreak() {
        dim.setBreak();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setBreakOnExceptions,"    public void setBreakOnExceptions(boolean value) {
        dim.setBreakOnExceptions(value);
        debugGui.getMenubar().getBreakOnExceptions().setSelected(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setBreakOnEnter,"    public void setBreakOnEnter(boolean value) {
        dim.setBreakOnEnter(value);
        debugGui.getMenubar().getBreakOnEnter().setSelected(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setBreakOnReturn,"    public void setBreakOnReturn(boolean value) {
        dim.setBreakOnReturn(value);
        debugGui.getMenubar().getBreakOnReturn().setSelected(value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,clearAllBreakpoints,"    public void clearAllBreakpoints() {
        dim.clearAllBreakpoints();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,go,"    public void go() {
        dim.go();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setScope,"    public void setScope(Scriptable scope) {
        setScopeProvider(IProxy.newScopeProvider(scope));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setScopeProvider,"    public void setScopeProvider(ScopeProvider p) {
        dim.setScopeProvider(p);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setExitAction,"    public void setExitAction(Runnable r) {
        debugGui.setExitAction(r);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getIn,"    public InputStream getIn() {
        return debugGui.getConsole().getIn();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getOut,"    public PrintStream getOut() {
        return debugGui.getConsole().getOut();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getErr,"    public PrintStream getErr() {
        return debugGui.getConsole().getErr();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,pack,"    public void pack() {
        debugGui.pack();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setSize,"    public void setSize(int w, int h) {
        debugGui.setSize(w, h);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setVisible,"    public void setVisible(boolean flag) {
        debugGui.setVisible(flag);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,isVisible,"    public boolean isVisible() {
        return debugGui.isVisible();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,dispose,"    public void dispose() {
        clearAllBreakpoints();
        dim.go();
        debugGui.dispose();
        dim = null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,attachTo,"    public void attachTo(ContextFactory factory) {
        dim.attachTo(factory);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,detach,"    public void detach() {
        dim.detach();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,main,"    public static void main(String[] args) {
        Main main = new Main(""Rhino JavaScript Debugger"");
        main.doBreak();
        main.setExitAction(new IProxy(IProxy.EXIT_ACTION));

        System.setIn(main.getIn());
        System.setOut(main.getOut());
        System.setErr(main.getErr());

        Global global = org.mozilla.javascript.tools.shell.Main.getGlobal();
        global.setIn(main.getIn());
        global.setOut(main.getOut());
        global.setErr(main.getErr());

        main.attachTo(
            org.mozilla.javascript.tools.shell.Main.shellContextFactory);

        main.setScope(global);

        main.pack();
        main.setSize(600, 460);
        main.setVisible(true);

        org.mozilla.javascript.tools.shell.Main.exec(args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,mainEmbedded,"    public static void mainEmbedded(String title) {
        ContextFactory factory = ContextFactory.getGlobal();
        Global global = new Global();
        global.init(factory);
        mainEmbedded(factory, global, title);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,mainEmbedded,"    public static void mainEmbedded(ContextFactory factory,
                                    Scriptable scope,
                                    String title) {
        mainEmbeddedImpl(factory, scope, title);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,mainEmbedded,"    public static void mainEmbedded(ContextFactory factory,
                                    ScopeProvider scopeProvider,
                                    String title) {
        mainEmbeddedImpl(factory, scopeProvider, title);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,mainEmbeddedImpl,"    private static void mainEmbeddedImpl(ContextFactory factory,
                                         Object scopeProvider,
                                         String title) {
        if (title == null) {
            title = ""Rhino JavaScript Debugger (embedded usage)"";
        }
        Main main = new Main(title);
        main.doBreak();
        main.setExitAction(new IProxy(IProxy.EXIT_ACTION));

        main.attachTo(factory);
        if (scopeProvider instanceof ScopeProvider) {
            main.setScopeProvider((ScopeProvider)scopeProvider);
        } else {
            Scriptable scope = (Scriptable)scopeProvider;
            if (scope instanceof Global) {
                Global global = (Global)scope;
                global.setIn(main.getIn());
                global.setOut(main.getOut());
                global.setErr(main.getErr());
            }
            main.setScope(scope);
        }

        main.pack();
        main.setSize(600, 460);
        main.setVisible(true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setSize,"    public void setSize(java.awt.Dimension dimension) {
        debugGui.setSize(dimension.width, dimension.height);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,contextEntered,"    public void contextEntered(Context cx) {
        throw new IllegalStateException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,contextExited,"    public void contextExited(Context cx) {
        throw new IllegalStateException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,contextCreated,"    public void contextCreated(Context cx) {
        throw new IllegalStateException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,contextReleased,"    public void contextReleased(Context cx)
    {
        throw new IllegalStateException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,newScopeProvider,"        public static ScopeProvider newScopeProvider(Scriptable scope) {
            IProxy scopeProvider = new IProxy(SCOPE_PROVIDER);
            scopeProvider.scope = scope;
            return scopeProvider;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,run,"        public void run() {
            if (type != EXIT_ACTION) Kit.codeBug();
            System.exit(0);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getScope,"        public Scriptable getScope() {
            if (type != SCOPE_PROVIDER) Kit.codeBug();
            if (scope == null) Kit.codeBug();
            return scope;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getMenubar,"    public Menubar getMenubar() {
        return menubar;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,setExitAction,"    public void setExitAction(Runnable r) {
        exitAction = r;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getConsole,"    public JSInternalConsole getConsole() {
        return console;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,setVisible,"    public void setVisible(boolean b) {
        super.setVisible(b);
        if (b) {
            // this needs to be done after the window is visible",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,addTopLevel,"    void addTopLevel(String key, JFrame frame) {
        if (frame != this) {
            toplevels.put(key, frame);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,init,"    private void init() {
        menubar = new Menubar(this);
        setJMenuBar(menubar);
        toolBar = new JToolBar();
        JButton button;
        JButton breakButton, goButton, stepIntoButton,
            stepOverButton, stepOutButton;
        String [] toolTips = {""Break (Pause)"",
                              ""Go (F5)"",
                              ""Step Into (F11)"",
                              ""Step Over (F7)"",
                              ""Step Out (F8)""};
        int count = 0;
        button = breakButton = new JButton(""Break"");
        button.setToolTipText(""Break"");
        button.setActionCommand(""Break"");
        button.addActionListener(menubar);
        button.setEnabled(true);
        button.setToolTipText(toolTips[count++]);

        button = goButton = new JButton(""Go"");
        button.setToolTipText(""Go"");
        button.setActionCommand(""Go"");
        button.addActionListener(menubar);
        button.setEnabled(false);
        button.setToolTipText(toolTips[count++]);

        button = stepIntoButton = new JButton(""Step Into"");
        button.setToolTipText(""Step Into"");
        button.setActionCommand(""Step Into"");
        button.addActionListener(menubar);
        button.setEnabled(false);
        button.setToolTipText(toolTips[count++]);

        button = stepOverButton = new JButton(""Step Over"");
        button.setToolTipText(""Step Over"");
        button.setActionCommand(""Step Over"");
        button.setEnabled(false);
        button.addActionListener(menubar);
        button.setToolTipText(toolTips[count++]);

        button = stepOutButton = new JButton(""Step Out"");
        button.setToolTipText(""Step Out"");
        button.setActionCommand(""Step Out"");
        button.setEnabled(false);
        button.addActionListener(menubar);
        button.setToolTipText(toolTips[count++]);

        Dimension dim = stepOverButton.getPreferredSize();
        breakButton.setPreferredSize(dim);
        breakButton.setMinimumSize(dim);
        breakButton.setMaximumSize(dim);
        breakButton.setSize(dim);
        goButton.setPreferredSize(dim);
        goButton.setMinimumSize(dim);
        goButton.setMaximumSize(dim);
        stepIntoButton.setPreferredSize(dim);
        stepIntoButton.setMinimumSize(dim);
        stepIntoButton.setMaximumSize(dim);
        stepOverButton.setPreferredSize(dim);
        stepOverButton.setMinimumSize(dim);
        stepOverButton.setMaximumSize(dim);
        stepOutButton.setPreferredSize(dim);
        stepOutButton.setMinimumSize(dim);
        stepOutButton.setMaximumSize(dim);
        toolBar.add(breakButton);
        toolBar.add(goButton);
        toolBar.add(stepIntoButton);
        toolBar.add(stepOverButton);
        toolBar.add(stepOutButton);

        JPanel contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout());
        getContentPane().add(toolBar, BorderLayout.NORTH);
        getContentPane().add(contentPane, BorderLayout.CENTER);
        desk = new JDesktopPane();
        desk.setPreferredSize(new Dimension(600, 300));
        desk.setMinimumSize(new Dimension(150, 50));
        desk.add(console = new JSInternalConsole(""JavaScript Console""));
        context = new ContextWindow(this);
        context.setPreferredSize(new Dimension(600, 120));
        context.setMinimumSize(new Dimension(50, 50));

        split1 = new JSplitPane(JSplitPane.VERTICAL_SPLIT, desk,
                                          context);
        split1.setOneTouchExpandable(true);
        SwingGui.setResizeWeight(split1, 0.66);
        contentPane.add(split1, BorderLayout.CENTER);
        statusBar = new JLabel();
        statusBar.setText(""Thread: "");
        contentPane.add(statusBar, BorderLayout.SOUTH);
        dlg = new JFileChooser();

        javax.swing.filechooser.FileFilter filter =
            new javax.swing.filechooser.FileFilter() {
                    public boolean accept(File f) {
                        if (f.isDirectory()) {
                            return true;
                        }
                        String n = f.getName();
                        int i = n.lastIndexOf('.');
                        if (i > 0 && i < n.length() -1) {
                            String ext = n.substring(i + 1).toLowerCase();
                            if (ext.equals(""js"")) {
                                return true;
                            }
                        }
                        return false;
                    }

                    public String getDescription() {
                        return ""JavaScript Files (*.js)"";
                    }
                };
        dlg.addChoosableFileFilter(filter);
        addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent e) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,accept,"                    public boolean accept(File f) {
                        if (f.isDirectory()) {
                            return true;
                        }
                        String n = f.getName();
                        int i = n.lastIndexOf('.');
                        if (i > 0 && i < n.length() -1) {
                            String ext = n.substring(i + 1).toLowerCase();
                            if (ext.equals(""js"")) {
                                return true;
                            }
                        }
                        return false;
                    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getDescription,"                    public String getDescription() {
                        return ""JavaScript Files (*.js)"";
                    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,windowClosing,"                public void windowClosing(WindowEvent e) {
                    exit();
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,exit,"    private void exit() {
        if (exitAction != null) {
            SwingUtilities.invokeLater(exitAction);
        }
        dim.setReturnValue(Dim.EXIT);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getFileWindow,"    FileWindow getFileWindow(String url) {
        if (url == null || url.equals(""<stdin>"")) {
            return null;
        }
        return (FileWindow)fileWindows.get(url);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getShortName,"    static String getShortName(String url) {
        int lastSlash = url.lastIndexOf('/');
        if (lastSlash < 0) {
            lastSlash = url.lastIndexOf('\\');
        }
        String shortName = url;
        if (lastSlash >= 0 && lastSlash + 1 < url.length()) {
            shortName = url.substring(lastSlash + 1);
        }
        return shortName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,removeWindow,"    void removeWindow(FileWindow w) {
        fileWindows.remove(w.getUrl());
        JMenu windowMenu = getWindowMenu();
        int count = windowMenu.getItemCount();
        JMenuItem lastItem = windowMenu.getItem(count -1);
        String name = getShortName(w.getUrl());
        for (int i = 5; i < count; i++) {
            JMenuItem item = windowMenu.getItem(i);
            if (item == null) continue; // separator
            String text = item.getText();
            //1 D:\foo.js
            //2 D:\bar.js
            int pos = text.indexOf(' ');
            if (text.substring(pos + 1).equals(name)) {
                windowMenu.remove(item);
                // Cascade    [0]
                // Tile       [1]
                // -------    [2]
                // Console    [3]
                // -------    [4]
                if (count == 6) {
                    // remove the final separator
                    windowMenu.remove(4);
                } else {
                    int j = i - 4;
                    for (;i < count -1; i++) {
                        JMenuItem thisItem = windowMenu.getItem(i);
                        if (thisItem != null) {
                            //1 D:\foo.js
                            //2 D:\bar.js
                            text = thisItem.getText();
                            if (text.equals(""More Windows..."")) {
                                break;
                            } else {
                                pos = text.indexOf(' ');
                                thisItem.setText((char)('0' + j) + "" "" +
                                                 text.substring(pos + 1));
                                thisItem.setMnemonic('0' + j);
                                j++;
                            }
                        }
                    }
                    if (count - 6 == 0 && lastItem != item) {
                        if (lastItem.getText().equals(""More Windows..."")) {
                            windowMenu.remove(lastItem);
                        }
                    }
                }
                break;
            }
        }
        windowMenu.revalidate();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,showStopLine,"    void showStopLine(Dim.StackFrame frame) {
        String sourceName = frame.getUrl();
        if (sourceName == null || sourceName.equals(""<stdin>"")) {
            if (console.isVisible()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,showFileWindow,"    protected void showFileWindow(String sourceUrl, int lineNumber) {
        FileWindow w = getFileWindow(sourceUrl);
        if (w == null) {
            Dim.SourceInfo si = dim.sourceInfo(sourceUrl);
            createFileWindow(si, -1);
            w = getFileWindow(sourceUrl);
        }
        if (lineNumber > -1) {
            int start = w.getPosition(lineNumber-1);
            int end = w.getPosition(lineNumber)-1;
            w.textArea.select(start);
            w.textArea.setCaretPosition(start);
            w.textArea.moveCaretPosition(end);
        }
        try {
            if (w.isIcon()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,createFileWindow,"    protected void createFileWindow(Dim.SourceInfo sourceInfo, int line) {
        boolean activate = true;

        String url = sourceInfo.url();
        FileWindow w = new FileWindow(this, sourceInfo);
        fileWindows.put(url, w);
        if (line != -1) {
            if (currentWindow != null) {
                currentWindow.setPosition(-1);
            }
            try {
                w.setPosition(w.textArea.getLineStartOffset(line-1));
            } catch (BadLocationException exc) {
                try {
                    w.setPosition(w.textArea.getLineStartOffset(0));
                } catch (BadLocationException ee) {
                    w.setPosition(-1);
                }
            }
        }
        desk.add(w);
        if (line != -1) {
            currentWindow = w;
        }
        menubar.addFile(url);
        w.setVisible(true);

        if (activate) {
            try {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,updateFileWindow,"    protected boolean updateFileWindow(Dim.SourceInfo sourceInfo) {
        String fileName = sourceInfo.url();
        FileWindow w = getFileWindow(fileName);
        if (w != null) {
            w.updateText(sourceInfo);
            w.show();
            return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,setFilePosition,"    private void setFilePosition(FileWindow w, int line) {
        boolean activate = true;
        JTextArea ta = w.textArea;
        try {
            if (line == -1) {
                w.setPosition(-1);
                if (currentWindow == w) {
                    currentWindow = null;
                }
            } else {
                int loc = ta.getLineStartOffset(line-1);
                if (currentWindow != null && currentWindow != w) {
                    currentWindow.setPosition(-1);
                }
                w.setPosition(loc);
                currentWindow = w;
            }
        } catch (BadLocationException exc) {
            // fix me
        }
        if (activate) {
            if (w.isIcon()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,enterInterruptImpl,"    void enterInterruptImpl(Dim.StackFrame lastFrame,
                            String threadTitle, String alertMessage) {
        statusBar.setText(""Thread: "" + threadTitle);

        showStopLine(lastFrame);

        if (alertMessage != null) {
            MessageDialogWrapper.showMessageDialog(this,
                                                   alertMessage,
                                                   ""Exception in Script"",
                                                   JOptionPane.ERROR_MESSAGE);
        }

        updateEnabled(true);

        Dim.ContextData contextData = lastFrame.contextData();

        JComboBox ctx = context.context;
        Vector toolTips = context.toolTips;
        context.disableUpdate();
        int frameCount = contextData.frameCount();
        ctx.removeAllItems();
        // workaround for JDK 1.4 bug that caches selected value even after
        // removeAllItems() is called
        ctx.setSelectedItem(null);
        toolTips.removeAllElements();
        for (int i = 0; i < frameCount; i++) {
            Dim.StackFrame frame = contextData.getFrame(i);
            String url = frame.getUrl();
            int lineNumber = frame.getLineNumber();
            String shortName = url;
            if (url.length() > 20) {
                shortName = ""..."" + url.substring(url.length() - 17);
            }
            String location = ""\"""" + shortName + ""\"", line "" + lineNumber;
            ctx.insertItemAt(location, i);
            location = ""\"""" + url + ""\"", line "" + lineNumber;
            toolTips.addElement(location);
        }
        context.enableUpdate();
        ctx.setSelectedIndex(0);
        ctx.setMinimumSize(new Dimension(50, ctx.getMinimumSize().height));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getWindowMenu,"    private JMenu getWindowMenu() {
        return menubar.getMenu(3);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,chooseFile,"    private String chooseFile(String title) {
        dlg.setDialogTitle(title);
        File CWD = null;
        String dir = SecurityUtilities.getSystemProperty(""user.dir"");
        if (dir != null) {
            CWD = new File(dir);
        }
        if (CWD != null) {
            dlg.setCurrentDirectory(CWD);
        }
        int returnVal = dlg.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String result = dlg.getSelectedFile().getCanonicalPath();
                CWD = dlg.getSelectedFile().getParentFile();
                Properties props = System.getProperties();
                props.put(""user.dir"", CWD.getPath());
                System.setProperties(props);
                return result;
            } catch (IOException ignored) {
            } catch (SecurityException ignored) {
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getSelectedFrame,"    private JInternalFrame getSelectedFrame() {
       JInternalFrame[] frames = desk.getAllFrames();
       for (int i = 0; i < frames.length; i++) {
           if (frames[i].isShowing()) {
               return frames[i];
           }
       }
       return frames[frames.length - 1];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,updateEnabled,"    private void updateEnabled(boolean interrupted) {
        ((Menubar)getJMenuBar()).updateEnabled(interrupted);
        for (int ci = 0, cc = toolBar.getComponentCount(); ci < cc; ci++) {
            boolean enableButton;
            if (ci == 0) {
                // Break
                enableButton = !interrupted;
            } else {
                enableButton = interrupted;
            }
            toolBar.getComponent(ci).setEnabled(enableButton);
        }
        if (interrupted) {
            toolBar.setEnabled(true);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,setResizeWeight,"    static void setResizeWeight(JSplitPane pane, double weight) {
        try {
            Method m = JSplitPane.class.getMethod(""setResizeWeight"",",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,readFile,"    private String readFile(String fileName) {
        String text;
        try {
            Reader r = new FileReader(fileName);
            try {
                text = Kit.readReader(r);
            } finally {
                r.close();
            }
        } catch (IOException ex) {
            MessageDialogWrapper.showMessageDialog(this,
                                                   ex.getMessage(),
                                                   ""Error reading ""+fileName,
                                                   JOptionPane.ERROR_MESSAGE);
            text = null;
        }
        return text;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,updateSourceText,"    public void updateSourceText(Dim.SourceInfo sourceInfo) {
        RunProxy proxy = new RunProxy(this, RunProxy.UPDATE_SOURCE_TEXT);
        proxy.sourceInfo = sourceInfo;
        SwingUtilities.invokeLater(proxy);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,enterInterrupt,"    public void enterInterrupt(Dim.StackFrame lastFrame,
                               String threadTitle,
                               String alertMessage) {
        if (SwingUtilities.isEventDispatchThread()) {
            enterInterruptImpl(lastFrame, threadTitle, alertMessage);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,isGuiEventThread,"    public boolean isGuiEventThread() {
        return SwingUtilities.isEventDispatchThread();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,dispatchNextGuiEvent,"    public void dispatchNextGuiEvent() throws InterruptedException {
        EventQueue queue = awtEventQueue;
        if (queue == null) {
            queue = Toolkit.getDefaultToolkit().getSystemEventQueue();
            awtEventQueue = queue;
        }
        AWTEvent event = queue.getNextEvent();
        if (event instanceof ActiveEvent) {
            ((ActiveEvent)event).dispatch();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        int returnValue = -1;
        if (cmd.equals(""Cut"") || cmd.equals(""Copy"") || cmd.equals(""Paste"")) {
            JInternalFrame f = getSelectedFrame();
            if (f != null && f instanceof ActionListener) {
                ((ActionListener)f).actionPerformed(e);
            }
        } else if (cmd.equals(""Step Over"")) {
            returnValue = Dim.STEP_OVER;
        } else if (cmd.equals(""Step Into"")) {
            returnValue = Dim.STEP_INTO;
        } else if (cmd.equals(""Step Out"")) {
            returnValue = Dim.STEP_OUT;
        } else if (cmd.equals(""Go"")) {
            returnValue = Dim.GO;
        } else if (cmd.equals(""Break"")) {
            dim.setBreak();
        } else if (cmd.equals(""Exit"")) {
            exit();
        } else if (cmd.equals(""Open"")) {
            String fileName = chooseFile(""Select a file to compile"");
            if (fileName != null) {
                String text = readFile(fileName);
                if (text != null) {
                    RunProxy proxy = new RunProxy(this, RunProxy.OPEN_FILE);
                    proxy.fileName = fileName;
                    proxy.text = text;
                    new Thread(proxy).start();
                }
            }
        } else if (cmd.equals(""Load"")) {
            String fileName = chooseFile(""Select a file to execute"");
            if (fileName != null) {
                String text = readFile(fileName);
                if (text != null) {
                    RunProxy proxy = new RunProxy(this, RunProxy.LOAD_FILE);
                    proxy.fileName = fileName;
                    proxy.text = text;
                    new Thread(proxy).start();
                }
            }
        } else if (cmd.equals(""More Windows..."")) {
            MoreWindows dlg = new MoreWindows(this, fileWindows,
                                              ""Window"", ""Files"");
            dlg.showDialog(this);
        } else if (cmd.equals(""Console"")) {
            if (console.isIcon()) {
                desk.getDesktopManager().deiconifyFrame(console);
            }
            console.show();
            desk.getDesktopManager().activateFrame(console);
            console.consoleTextArea.requestFocus();
        } else if (cmd.equals(""Cut"")) {
        } else if (cmd.equals(""Copy"")) {
        } else if (cmd.equals(""Paste"")) {
        } else if (cmd.equals(""Go to function..."")) {
            FindFunction dlg = new FindFunction(this, ""Go to function"",
                                                ""Function"");
            dlg.showDialog(this);
        } else if (cmd.equals(""Tile"")) {
            JInternalFrame[] frames = desk.getAllFrames();
            int count = frames.length;
            int rows, cols;
            rows = cols = (int)Math.sqrt(count);
            if (rows*cols < count) {
                cols++;
                if (rows * cols < count) {
                    rows++;
                }
            }
            Dimension size = desk.getSize();
            int w = size.width/cols;
            int h = size.height/rows;
            int x = 0;
            int y = 0;
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    int index = (i*cols) + j;
                    if (index >= frames.length) {
                        break;
                    }
                    JInternalFrame f = frames[index];
                    try {
                        f.setIcon(false);
                        f.setMaximum(false);
                    } catch (Exception exc) {
                    }
                    desk.getDesktopManager().setBoundsForFrame(f, x, y,
                                                               w, h);
                    x += w;
                }
                y += h;
                x = 0;
            }
        } else if (cmd.equals(""Cascade"")) {
            JInternalFrame[] frames = desk.getAllFrames();
            int count = frames.length;
            int x, y, w, h;
            x = y = 0;
            h = desk.getHeight();
            int d = h / count;
            if (d > 30) d = 30;
            for (int i = count -1; i >= 0; i--, x += d, y += d) {
                JInternalFrame f = frames[i];
                try {
                    f.setIcon(false);
                    f.setMaximum(false);
                } catch (Exception exc) {
                }
                Dimension dimen = f.getPreferredSize();
                w = dimen.width;
                h = dimen.height;
                desk.getDesktopManager().setBoundsForFrame(f, x, y, w, h);
            }
        } else {
            Object obj = getFileWindow(cmd);
            if (obj != null) {
                FileWindow w = (FileWindow)obj;
                try {
                    if (w.isIcon()) {
                        w.setIcon(false);
                    }
                    w.setVisible(true);
                    w.moveToFront();
                    w.setSelected(true);
                } catch (Exception exc) {
                }
            }
        }
        if (returnValue != -1) {
            updateEnabled(false);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,showMessageDialog,"    public static void showMessageDialog(Component parent, String msg,
                                         String title, int flags) {
        if (msg.length() > 60) {
            StringBuffer buf = new StringBuffer();
            int len = msg.length();
            int j = 0;
            int i;
            for (i = 0; i < len; i++, j++) {
                char c = msg.charAt(i);
                buf.append(c);
                if (Character.isWhitespace(c)) {
                    int k;
                    for (k = i + 1; k < len; k++) {
                        if (Character.isWhitespace(msg.charAt(k))) {
                            break;
                        }
                    }
                    if (k < len) {
                        int nextWordLen = k - i;
                        if (j + nextWordLen > 60) {
                            buf.append('\n');
                            j = 0;
                        }
                    }
                }
            }
            msg = buf.toString();
        }
        JOptionPane.showMessageDialog(parent, msg, title, flags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,select,"    public void select(int start, int end) {
        //requestFocus();
        super.select(start, end);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,returnPressed,"    private synchronized void returnPressed() {
        Document doc = getDocument();
        int len = doc.getLength();
        Segment segment = new Segment();
        try {
            doc.getText(outputMark, len - outputMark, segment);
        } catch (javax.swing.text.BadLocationException ignored) {
            ignored.printStackTrace();
        }
        String text = segment.toString();
        if (debugGui.dim.stringIsCompilableUnit(text)) {
            if (text.trim().length() > 0) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,write,"    public synchronized void write(String str) {
        insert(str, outputMark);
        int len = str.length();
        outputMark += len;
        select(outputMark, outputMark);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,keyPressed,"    public void keyPressed(KeyEvent e) {
        int code = e.getKeyCode();
        if (code == KeyEvent.VK_BACK_SPACE || code == KeyEvent.VK_LEFT) {
            if (outputMark == getCaretPosition()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,keyTyped,"    public void keyTyped(KeyEvent e) {
        int keyChar = e.getKeyChar();
        if (keyChar == 0x8 /* KeyEvent.VK_BACK_SPACE */) {
            if (outputMark == getCaretPosition()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,insertUpdate,"    public synchronized void insertUpdate(DocumentEvent e) {
        int len = e.getLength();
        int off = e.getOffset();
        if (outputMark > off) {
            outputMark += len;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,removeUpdate,"    public synchronized void removeUpdate(DocumentEvent e) {
        int len = e.getLength();
        int off = e.getOffset();
        if (outputMark > off) {
            if (outputMark >= off + len) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,postUpdateUI,"    public synchronized void postUpdateUI() {
        //requestFocus();
        setCaret(getCaret());
        select(outputMark, outputMark);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,setEnabled,"    public void setEnabled(boolean b) {
        super.setEnabled(b);
        evalTextArea.setEnabled(b);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        if (cmd.equals(""Cut"")) {
            evalTextArea.cut();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,internalFrameActivated,"                public void internalFrameActivated(InternalFrameEvent e) {
                    // hack
                    if (consoleTextArea.hasFocus()) {
                        consoleTextArea.getCaret().setVisible(false);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getIn,"    public InputStream getIn() {
        return consoleTextArea.getIn();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getOut,"    public PrintStream getOut() {
        return consoleTextArea.getOut();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getErr,"    public PrintStream getErr() {
        return consoleTextArea.getErr();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        if (cmd.equals(""Cut"")) {
            consoleTextArea.cut();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,show,"    public void show(JComponent comp, int x, int y) {
        this.x = x;
        this.y = y;
        super.show(comp, x, y);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,select,"    public void select(int pos) {
        if (pos >= 0) {
            try {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,checkPopup,"    private void checkPopup(MouseEvent e) {
        if (e.isPopupTrigger()) {
            popup.show(this, e.getX(), e.getY());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,mousePressed,"    public void mousePressed(MouseEvent e) {
        checkPopup(e);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,mouseClicked,"    public void mouseClicked(MouseEvent e) {
        checkPopup(e);
        requestFocus();
        getCaret().setVisible(true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,mouseReleased,"    public void mouseReleased(MouseEvent e) {
        checkPopup(e);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        int pos = viewToModel(new Point(popup.x, popup.y));
        popup.setVisible(false);
        String cmd = e.getActionCommand();
        int line = -1;
        try {
            line = getLineOfOffset(pos);
        } catch (Exception exc) {
        }
        if (cmd.equals(""Set Breakpoint"")) {
            w.setBreakPoint(line + 1);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,keyPressed,"    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
        case KeyEvent.VK_BACK_SPACE:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,keyTyped,"    public void keyTyped(KeyEvent e) {
        e.consume();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,keyReleased,"    public void keyReleased(KeyEvent e) {
        e.consume();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,keyPressed,"                public void keyPressed(KeyEvent ke) {
                    int code = ke.getKeyCode();
                    if (code == KeyEvent.VK_ESCAPE) {
                        ke.consume();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,showDialog,"    public String showDialog(Component comp) {
        value = null;
        setLocationRelativeTo(comp);
        setVisible(true);
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        if (cmd.equals(""Cancel"")) {
            setVisible(false);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,mouseClicked,"        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {
                setButton.doClick();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,keyPressed,"                public void keyPressed(KeyEvent ke) {
                    int code = ke.getKeyCode();
                    if (code == KeyEvent.VK_ESCAPE) {
                        ke.consume();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,showDialog,"    public String showDialog(Component comp) {
        value = null;
        setLocationRelativeTo(comp);
        setVisible(true);
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        if (cmd.equals(""Cancel"")) {
            setVisible(false);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,mouseClicked,"        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {
                setButton.doClick();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,update,"    public void update() {
        FileTextArea textArea = fileWindow.textArea;
        Font font = textArea.getFont();
        setFont(font);
        FontMetrics metrics = getFontMetrics(font);
        int h = metrics.getHeight();
        int lineCount = textArea.getLineCount() + 1;
        String dummy = Integer.toString(lineCount);
        if (dummy.length() < 2) {
            dummy = ""99"";
        }
        Dimension d = new Dimension();
        d.width = metrics.stringWidth(dummy) + 16;
        d.height = lineCount * h + 100;
        setPreferredSize(d);
        setSize(d);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,paint,"    public void paint(Graphics g) {
        super.paint(g);
        FileTextArea textArea = fileWindow.textArea;
        Font font = textArea.getFont();
        g.setFont(font);
        FontMetrics metrics = getFontMetrics(font);
        Rectangle clip = g.getClipBounds();
        g.setColor(getBackground());
        g.fillRect(clip.x, clip.y, clip.width, clip.height);
        int ascent = metrics.getMaxAscent();
        int h = metrics.getHeight();
        int lineCount = textArea.getLineCount() + 1;
        String dummy = Integer.toString(lineCount);
        if (dummy.length() < 2) {
            dummy = ""99"";
        }
        int startLine = clip.y / h;
        int endLine = (clip.y + clip.height) / h + 1;
        int width = getWidth();
        if (endLine > lineCount) endLine = lineCount;
        for (int i = startLine; i < endLine; i++) {
            String text;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,mousePressed,"    public void mousePressed(MouseEvent e) {
        Font font = fileWindow.textArea.getFont();
        FontMetrics metrics = getFontMetrics(font);
        int h = metrics.getHeight();
        pressLine = e.getY() / h;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,mouseReleased,"    public void mouseReleased(MouseEvent e) {
        if (e.getComponent() == this
                && (e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,load,"    void load() {
        String url = getUrl();
        if (url != null) {
            RunProxy proxy = new RunProxy(debugGui, RunProxy.LOAD_FILE);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getPosition,"    public int getPosition(int line) {
        int result = -1;
        try {
            result = textArea.getLineStartOffset(line);
        } catch (javax.swing.text.BadLocationException exc) {
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,isBreakPoint,"    public boolean isBreakPoint(int line) {
        return sourceInfo.breakableLine(line) && sourceInfo.breakpoint(line);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,toggleBreakPoint,"    public void toggleBreakPoint(int line) {
        if (!isBreakPoint(line)) {
            setBreakPoint(line);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,setBreakPoint,"    public void setBreakPoint(int line) {
        if (sourceInfo.breakableLine(line)) {
            boolean changed = sourceInfo.breakpoint(line, true);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,clearBreakPoint,"    public void clearBreakPoint(int line) {
        if (sourceInfo.breakableLine(line)) {
            boolean changed = sourceInfo.breakpoint(line, false);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,updateToolTip,"    private void updateToolTip() {
        // Try to set tool tip on frame. On Mac OS X 10.5,
        // the number of components is different, so try to be safe.
        int n = getComponentCount() - 1;
        if (n > 1) {
            n = 1;
        } else if (n < 0) {
            return;
        }
        Component c = getComponent(n);
        // this will work at least for Metal L&F
        if (c != null && c instanceof JComponent) {
            ((JComponent)c).setToolTipText(getUrl());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getUrl,"    public String getUrl() {
        return sourceInfo.url();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,updateText,"    public void updateText(Dim.SourceInfo sourceInfo) {
        this.sourceInfo = sourceInfo;
        String newText = sourceInfo.source();
        if (!textArea.getText().equals(newText)) {
            textArea.setText(newText);
            int pos = 0;
            if (currentPos != -1) {
                pos = currentPos;
            }
            textArea.select(pos);
        }
        fileHeader.update();
        fileHeader.repaint();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,setPosition,"    public void setPosition(int pos) {
        textArea.select(pos);
        currentPos = pos;
        fileHeader.repaint();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,select,"    public void select(int start, int end) {
        int docEnd = textArea.getDocument().getLength();
        textArea.select(docEnd, docEnd);
        textArea.select(start, end);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,dispose,"    public void dispose() {
        debugGui.removeWindow(this);
        super.dispose();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        if (cmd.equals(""Cut"")) {
            // textArea.cut();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getColumnCount,"    public int getColumnCount() {
        return 2;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getRowCount,"    public int getRowCount() {
        return expressions.size();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getColumnName,"    public String getColumnName(int column) {
        switch (column) {
        case 0:
            return ""Expression"";
        case 1:
            return ""Value"";
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,isCellEditable,"    public boolean isCellEditable(int row, int column) {
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getValueAt,"    public Object getValueAt(int row, int column) {
        switch (column) {
        case 0:
            return expressions.elementAt(row);
        case 1:
            return values.elementAt(row);
        }
        return """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,setValueAt,"    public void setValueAt(Object value, int row, int column) {
        switch (column) {
        case 0:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,updateModel,"    void updateModel() {
        for (int i = 0; i < expressions.size(); ++i) {
            Object value = expressions.elementAt(i);
            String expr = value.toString();
            String result = """";
            if (expr.length() > 0) {
                result = debugGui.dim.eval(expr);
                if (result == null) result = """";
            } else {
                result = """";
            }
            result = result.replace('\n', ' ');
            values.setElementAt(result, i);
        }
        fireTableDataChanged();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getRoot,"    public Object getRoot() {
        if (debugger == null) {
            return null;
        }
        return root;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getChildCount,"    public int getChildCount(Object nodeObj) {
        if (debugger == null) {
            return 0;
        }
        VariableNode node = (VariableNode) nodeObj;
        return children(node).length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getChild,"    public Object getChild(Object nodeObj, int i) {
        if (debugger == null) {
            return null;
        }
        VariableNode node = (VariableNode) nodeObj;
        return children(node)[i];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,isLeaf,"    public boolean isLeaf(Object nodeObj) {
        if (debugger == null) {
            return true;
        }
        VariableNode node = (VariableNode) nodeObj;
        return children(node).length == 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getIndexOfChild,"    public int getIndexOfChild(Object parentObj, Object childObj) {
        if (debugger == null) {
            return -1;
        }
        VariableNode parent = (VariableNode) parentObj;
        VariableNode child = (VariableNode) childObj;
        VariableNode[] children = children(parent);
        for (int i = 0; i != children.length; i++) {
            if (children[i] == child) {
                return i;
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,isCellEditable,"    public boolean isCellEditable(Object node, int column) {
        return column == 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getColumnCount,"    public int getColumnCount() {
        return cNames.length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getColumnName,"    public String getColumnName(int column) {
        return cNames[column];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getColumnClass,"    public Class getColumnClass(int column) {
        return cTypes[column];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getValueAt,"    public Object getValueAt(Object nodeObj, int column) {
        if (debugger == null) { return null; }
        VariableNode node = (VariableNode)nodeObj;
        switch (column) {
        case 0: // Name
            return node.toString();
        case 1: // Value
            String result;
            try {
                result = debugger.objectToString(getValue(node));
            } catch (RuntimeException exc) {
                result = exc.getMessage();
            }
            StringBuffer buf = new StringBuffer();
            int len = result.length();
            for (int i = 0; i < len; i++) {
                char ch = result.charAt(i);
                if (Character.isISOControl(ch)) {
                    ch = ' ';
                }
                buf.append(ch);
            }
            return buf.toString();
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,children,"    private VariableNode[] children(VariableNode node) {
        if (node.children != null) {
            return node.children;
        }

        VariableNode[] children;

        Object value = getValue(node);
        Object[] ids = debugger.getObjectIds(value);
        if (ids == null || ids.length == 0) {
            children = CHILDLESS;
        } else {
            Arrays.sort(ids, new Comparator() {
                    public int compare(Object l, Object r)
                    {
                        if (l instanceof String) {
                            if (r instanceof Integer) {
                                return -1;
                            }
                            return ((String)l).compareToIgnoreCase((String)r);
                        } else {
                            if (r instanceof String) {
                                return 1;
                            }
                            int lint = ((Integer)l).intValue();
                            int rint = ((Integer)r).intValue();
                            return lint - rint;
                        }
                    }
            });
            children = new VariableNode[ids.length];
            for (int i = 0; i != ids.length; ++i) {
                children[i] = new VariableNode(value, ids[i]);
            }
        }
        node.children = children;
        return children;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,compare,"                    public int compare(Object l, Object r)
                    {
                        if (l instanceof String) {
                            if (r instanceof Integer) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getValue,"    public Object getValue(VariableNode node) {
        try {
            return debugger.getObjectProperty(node.object, node.id);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,toString,"        public String toString() {
            return id instanceof String
                ? (String) id : ""["" + ((Integer) id).intValue() + ""]"";",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,resetTree,"    public JTree resetTree(TreeTableModel treeTableModel) {
        tree = new TreeTableCellRenderer(treeTableModel);

        // Install a tableModel representing the visible rows in the tree.
        super.setModel(new TreeTableModelAdapter(treeTableModel, tree));

        // Force the JTable and JTree to share their row selection models.
        ListToTreeSelectionModelWrapper selectionWrapper = new
            ListToTreeSelectionModelWrapper();
        tree.setSelectionModel(selectionWrapper);
        setSelectionModel(selectionWrapper.getListSelectionModel());

        // Make the tree and table row heights the same.
        if (tree.getRowHeight() < 1) {
            // Metal looks better like this.
            setRowHeight(18);
        }

        // Install the tree editor renderer and editor.
        setDefaultRenderer(TreeTableModel.class, tree);
        setDefaultEditor(TreeTableModel.class, new TreeTableCellEditor());
        setShowGrid(true);
        setIntercellSpacing(new Dimension(1,1));
        tree.setRootVisible(false);
        tree.setShowsRootHandles(true);
        DefaultTreeCellRenderer r = (DefaultTreeCellRenderer)tree.getCellRenderer();
        r.setOpenIcon(null);
        r.setClosedIcon(null);
        r.setLeafIcon(null);
        return tree;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,isCellEditable,"    public boolean isCellEditable(EventObject e) {
        if (e instanceof MouseEvent) {
            MouseEvent me = (MouseEvent)e;
            // If the modifiers are not 0 (or the left mouse button),
            // tree may try and toggle the selection, and table
            // will then try and toggle, resulting in the
            // selection remaining the same. To avoid this, we
            // only dispatch when the modifiers are 0 (or the left mouse
            // button).
            if (me.getModifiers() == 0 ||
                ((me.getModifiers() & (InputEvent.BUTTON1_MASK|1024)) != 0 &&
                 (me.getModifiers() &
                  (InputEvent.SHIFT_MASK |
                   InputEvent.CTRL_MASK |
                   InputEvent.ALT_MASK |
                   InputEvent.BUTTON2_MASK |
                   InputEvent.BUTTON3_MASK |
                   64   | //SHIFT_DOWN_MASK
                   128  | //CTRL_DOWN_MASK
                   512  | // ALT_DOWN_MASK
                   2048 | //BUTTON2_DOWN_MASK
                   4096   //BUTTON3_DOWN_MASK
                   )) == 0)) {
                int row = rowAtPoint(me.getPoint());
                for (int counter = getColumnCount() - 1; counter >= 0;
                     counter--) {
                    if (TreeTableModel.class == getColumnClass(counter)) {
                        MouseEvent newME = new MouseEvent
                            (MyTreeTable.this.tree, me.getID(),
                             me.getWhen(), me.getModifiers(),
                             me.getX() - getCellRect(row, counter, true).x,
                             me.getY(), me.getClickCount(),
                             me.isPopupTrigger());
                        MyTreeTable.this.tree.dispatchEvent(newME);
                        break;
                    }
                }
            }
            if (me.getClickCount() >= 3) {
                return true;
            }
            return false;
        }
        if (e == null) {
            return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,check,"                void check(Component comp) {
                    Component thisParent = finalThis.getParent();
                    if (thisParent == null) {
                        return;
                    }
                    Component parent = finalT1.getParent();
                    boolean leftDocked = true;
                    boolean rightDocked = true;
                    boolean adjustVerticalSplit = false;
                    if (parent != null) {
                        if (parent != finalP1) {
                            while (!(parent instanceof JFrame)) {
                                parent = parent.getParent();
                            }
                            JFrame frame = (JFrame)parent;
                            debugGui.addTopLevel(""Variables"", frame);

                            // We need the following hacks because:
                            // - We want an undocked toolbar to be
                            //   resizable.
                            // - We are using JToolbar as a container of a
                            //   JComboBox. Without this JComboBox's popup
                            //   can get left floating when the toolbar is
                            //   re-docked.
                            //
                            // We make the frame resizable and then
                            // remove JToolbar's window listener
                            // and insert one of our own that first ensures
                            // the JComboBox's popup window is closed
                            // and then calls JToolbar's window listener.
                            if (!frame.isResizable()) {
                                frame.setResizable(true);
                                frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
                                final EventListener[] l =
                                    frame.getListeners(WindowListener.class);
                                frame.removeWindowListener((WindowListener)l[0]);
                                frame.addWindowListener(new WindowAdapter() {
                                        public void windowClosing(WindowEvent e) {
                                            context.hidePopup();
                                            ((WindowListener)l[0]).windowClosing(e);
                                        }
                                    });
                                //adjustVerticalSplit = true;
                            }
                            leftDocked = false;
                        } else {
                            leftDocked = true;
                        }
                    }
                    parent = finalT2.getParent();
                    if (parent != null) {
                        if (parent != finalP2) {
                            while (!(parent instanceof JFrame)) {
                                parent = parent.getParent();
                            }
                            JFrame frame = (JFrame)parent;
                            debugGui.addTopLevel(""Evaluate"", frame);
                            frame.setResizable(true);
                            rightDocked = false;
                        } else {
                            rightDocked = true;
                        }
                    }
                    if (leftDocked && t2Docked && rightDocked && t2Docked) {
                        // no change
                        return;
                    }
                    t2Docked = rightDocked;
                    JSplitPane split = (JSplitPane)thisParent;
                    if (leftDocked) {
                        if (rightDocked) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,windowClosing,"                                        public void windowClosing(WindowEvent e) {
                                            context.hidePopup();
                                            ((WindowListener)l[0]).windowClosing(e);
                                        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,componentHidden,"                public void componentHidden(ComponentEvent e) {
                    check(e.getComponent());
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,componentMoved,"                public void componentMoved(ComponentEvent e) {
                    check(e.getComponent());
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,componentResized,"                public void componentResized(ComponentEvent e) {
                    check(e.getComponent());
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,componentShown,"                public void componentShown(ComponentEvent e) {
                    check(e.getComponent());
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,componentAdded,"            public void componentAdded(ContainerEvent e) {
                Component thisParent = finalThis.getParent();
                JSplitPane split = (JSplitPane)thisParent;
                if (e.getChild() == finalT1) {
                    if (finalT2.getParent() == finalP2) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,componentRemoved,"            public void componentRemoved(ContainerEvent e) {
                Component thisParent = finalThis.getParent();
                JSplitPane split = (JSplitPane)thisParent;
                if (e.getChild() == finalT1) {
                    if (finalT2.getParent() == finalP2) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,disable,"    public void disable() {
        context.setEnabled(false);
        thisTable.setEnabled(false);
        localsTable.setEnabled(false);
        evaluator.setEnabled(false);
        cmdLine.setEnabled(false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,enable,"    public void enable() {
        context.setEnabled(true);
        thisTable.setEnabled(true);
        localsTable.setEnabled(true);
        evaluator.setEnabled(true);
        cmdLine.setEnabled(true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,disableUpdate,"    public void disableUpdate() {
        enabled = false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,enableUpdate,"    public void enableUpdate() {
        enabled = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        if (!enabled) return;
        if (e.getActionCommand().equals(""ContextSwitch"")) {
            Dim.ContextData contextData = debugGui.dim.currentContextData();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getBreakOnExceptions,"    public JCheckBoxMenuItem getBreakOnExceptions() {
        return breakOnExceptions;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getBreakOnEnter,"    public JCheckBoxMenuItem getBreakOnEnter() {
        return breakOnEnter;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getBreakOnReturn,"    public JCheckBoxMenuItem getBreakOnReturn() {
        return breakOnReturn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,getDebugMenu,"    public JMenu getDebugMenu() {
        return getMenu(2);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        String plaf_name = null;
        if (cmd.equals(""Metal"")) {
            plaf_name = ""javax.swing.plaf.metal.MetalLookAndFeel"";
        } else if (cmd.equals(""Windows"")) {
            plaf_name = ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"";
        } else if (cmd.equals(""Motif"")) {
            plaf_name = ""com.sun.java.swing.plaf.motif.MotifLookAndFeel"";
        } else {
            Object source = e.getSource();
            if (source == breakOnExceptions) {
                debugGui.dim.setBreakOnExceptions(breakOnExceptions.isSelected());
            } else if (source == breakOnEnter) {
                debugGui.dim.setBreakOnEnter(breakOnEnter.isSelected());
            } else if (source == breakOnReturn) {
                debugGui.dim.setBreakOnReturn(breakOnReturn.isSelected());
            } else {
                debugGui.actionPerformed(e);
            }
            return;
        }
        try {
            UIManager.setLookAndFeel(plaf_name);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,addFile,"    public void addFile(String url) {
        int count = windowMenu.getItemCount();
        JMenuItem item;
        if (count == 4) {
            windowMenu.addSeparator();
            count++;
        }
        JMenuItem lastItem = windowMenu.getItem(count -1);
        boolean hasMoreWin = false;
        int maxWin = 5;
        if (lastItem != null &&
           lastItem.getText().equals(""More Windows..."")) {
            hasMoreWin = true;
            maxWin++;
        }
        if (!hasMoreWin && count - 4 == 5) {
            windowMenu.add(item = new JMenuItem(""More Windows..."", 'M'));
            item.setActionCommand(""More Windows..."");
            item.addActionListener(this);
            return;
        } else if (count - 4 <= maxWin) {
            if (hasMoreWin) {
                count--;
                windowMenu.remove(lastItem);
            }
            String shortName = SwingGui.getShortName(url);

            windowMenu.add(item = new JMenuItem((char)('0' + (count-4)) + "" "" + shortName, '0' + (count - 4)));
            if (hasMoreWin) {
                windowMenu.add(lastItem);
            }
        } else {
            return;
        }
        item.setActionCommand(url);
        item.addActionListener(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,updateEnabled,"    public void updateEnabled(boolean interrupted) {
        for (int i = 0; i != interruptOnlyItems.size(); ++i) {
            JMenuItem item = (JMenuItem)interruptOnlyItems.elementAt(i);
            item.setEnabled(interrupted);
        }

        for (int i = 0; i != runOnlyItems.size(); ++i) {
            JMenuItem item = (JMenuItem)runOnlyItems.elementAt(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwingGui.java,run,"    public void run() {
        switch (type) {
          case OPEN_FILE:",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,getLineTerminator,"    public String getLineTerminator() { return lineTerminator; }
    public void setLineTerminator(String value) { lineTerminator = value; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,setLineTerminator,"    public void setLineTerminator(String value) { lineTerminator = value; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,getIndentStep,"    public int getIndentStep() { return indentStep; }
    public void setIndentStep(int char_count) { indentStep = char_count; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,setIndentStep,"    public void setIndentStep(int char_count) { indentStep = char_count; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,getIndentTabSize,"    public int getIndentTabSize() {    return indentTabSize; }
    public void setIndentTabSize(int tab_size) { indentTabSize = tab_size; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,setIndentTabSize,"    public void setIndentTabSize(int tab_size) { indentTabSize = tab_size; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,clear,"    public void clear() {
        offset = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,ensure_area,"    private int ensure_area(int area_size) {
        int begin = offset;
        int end = begin + area_size;
        if (end > buffer.length) {
            int new_capacity = buffer.length * 2;
            if (end > new_capacity) { new_capacity = end; }
            char[] tmp = new char[new_capacity];
            System.arraycopy(buffer, 0, tmp, 0, begin);
            buffer = tmp;
        }
        return begin;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,add_area,"    private int add_area(int area_size) {
        int pos = ensure_area(area_size);
        offset = pos + area_size;
        return pos;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,getOffset,"    public int getOffset() {
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,getLastChar,"    public int getLastChar() {
        return offset == 0 ? -1 : buffer[offset - 1];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,p,"    public void p(char c) {
        int pos = add_area(1);
        buffer[pos] = c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,p,"    public void p(String s) {
        int l = s.length();
        int pos = add_area(l);
        s.getChars(0, l, buffer, pos);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,p,"    public final void p(char[] array) {
        p(array, 0, array.length);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,p,"    public void p(char[] array, int begin, int end) {
        int l = end - begin;
        int pos = add_area(l);
        System.arraycopy(array, begin, buffer, pos, l);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,p,"    public void p(int i) {
        p(Integer.toString(i));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,qchar,"    public void qchar(int c) {
        int pos = ensure_area(2 + LITERAL_CHAR_MAX_SIZE);
        buffer[pos] = '\'';
        pos = put_string_literal_char(pos + 1, c, false);
        buffer[pos] = '\'';
        offset = pos + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,qstring,"    public void qstring(String s) {
        int l = s.length();
        int pos = ensure_area(2 + LITERAL_CHAR_MAX_SIZE * l);
        buffer[pos] = '""';
        ++pos;
        for (int i = 0; i != l; ++i) {
            pos = put_string_literal_char(pos, s.charAt(i), true);
        }
        buffer[pos] = '""';
        offset = pos + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,put_string_literal_char,"    private int put_string_literal_char(int pos, int c, boolean in_string) {
        boolean backslash_symbol = true;
        switch (c) {
            case '\b': c = 'b'; break;
            case '\t': c = 't'; break;
            case '\n': c = 'n'; break;
            case '\f': c = 'f'; break;
            case '\r': c = 'r'; break;
            case '\'': backslash_symbol = !in_string; break;
            case '""': backslash_symbol = in_string; break;
            default: backslash_symbol = false;
        }

        if (backslash_symbol) {
            buffer[pos] = '\\';
            buffer[pos + 1] = (char)c;
            pos += 2;
        }
        else if (' ' <= c && c <= 126) {
            buffer[pos] = (char)c;
            ++pos;
        }
        else {
            buffer[pos] = '\\';
            buffer[pos + 1] = 'u';
            buffer[pos + 2] = digit_to_hex_letter(0xF & (c >> 12));
            buffer[pos + 3] = digit_to_hex_letter(0xF & (c >> 8));
            buffer[pos + 4] = digit_to_hex_letter(0xF & (c >> 4));
            buffer[pos + 5] = digit_to_hex_letter(0xF & c);
            pos += 6;
        }
        return pos;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,digit_to_hex_letter,"    private static char digit_to_hex_letter(int d) {
        return (char)((d < 10) ? '0' + d : 'A' - 10 + d);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,indent,"    public void indent(int level) {
        int visible_size = indentStep * level;
        int indent_size, tab_count;
        if (indentTabSize <= 0) {
            tab_count = 0; indent_size = visible_size;
        }
        else {
            tab_count = visible_size / indentTabSize;
            indent_size = tab_count + visible_size % indentTabSize;
        }
        int pos = add_area(indent_size);
        int tab_end = pos + tab_count;
        int indent_end = pos + indent_size;
        for (; pos != tab_end; ++pos) {    buffer[pos] = '\t'; }
        for (; pos != indent_end; ++pos) {    buffer[pos] = ' '; }
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,nl,"    public void nl() {
        p('\n');
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,line,"    public void line(int indent_level, String s) {
        indent(indent_level); p(s); nl();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,erase,"    public void erase(int begin, int end) {
        System.arraycopy(buffer, end, buffer, begin, offset - end);
        offset -= end - begin;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CodePrinter.java,toString,"    public String toString() {
        return new String(buffer, 0, offset);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,getBuffer,"    public char[] getBuffer() { return buffer; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,readData,"    public void readData(Reader r) throws IOException {
        int capacity = buffer.length;
        int offset = 0;
        for (;;) {
            int n_read = r.read(buffer, offset, capacity - offset);
            if (n_read < 0) { break; }
            offset += n_read;
            if (capacity == offset) {
                capacity *= 2;
                char[] tmp = new char[capacity];
                System.arraycopy(buffer, 0, tmp, 0, offset);
                buffer = tmp;
            }
        }
        bufferEnd = offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,writeInitialData,"    public void writeInitialData(Writer w) throws IOException {
        w.write(buffer, 0, bufferEnd);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,writeData,"    public void writeData(Writer w) throws IOException {
        int offset = 0;
        for (ReplaceItem x = firstReplace; x != null; x = x.next) {
            int before_replace = x.begin - offset;
            if (before_replace > 0) {
                w.write(buffer, offset, before_replace);
            }
            w.write(x.replacement);
            offset = x.end;
        }
        int tail = bufferEnd - offset;
        if (tail != 0) {
            w.write(buffer, offset, tail);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,wasModified,"    public boolean wasModified() { return firstReplace != null; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,setReplacement,"    public boolean setReplacement(int begin, int end, String text) {
        if (equals(text, buffer, begin, end)) { return false; }

        ReplaceItem item = new ReplaceItem(begin, end, text);
        if (firstReplace == null) {
            firstReplace = lastReplace = item;
        }
        else if (begin < firstReplace.begin) {
            item.next = firstReplace;
            firstReplace = item;
        }
        else {
            ReplaceItem cursor = firstReplace;
            ReplaceItem next = cursor.next;
            while (next != null) {
                if (begin < next.begin) {
                    item.next = next;
                    cursor.next = item;
                    break;
                }
                cursor = next;
                next = next.next;
            }
            if (next == null) {
                lastReplace.next = item;
            }
        }

        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,getLineNumber,"    public int getLineNumber() { return lineNumber; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,getLineBegin,"    public int getLineBegin() { return lineBegin; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,getLineEnd,"    public int getLineEnd() { return lineEnd; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,startLineLoop,"    public void startLineLoop() {
        lineNumber = 0;
        lineBegin = lineEnd = nextLineStart = 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,nextLine,"    public boolean nextLine() {
        if (nextLineStart == bufferEnd) {
            lineNumber = 0; return false;
        }
        int i; int c = 0;
        for (i = nextLineStart; i != bufferEnd; ++i) {
            c = buffer[i];
            if (c == '\n' || c == '\r') { break; }
        }
        lineBegin = nextLineStart;
        lineEnd = i;
        if (i == bufferEnd) {
            nextLineStart = i;
        }
        else if (c == '\r' && i + 1 != bufferEnd && buffer[i + 1] == '\n') {
            nextLineStart = i + 2;
        }
        else {
            nextLineStart = i + 1;
        }
        ++lineNumber;
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,FileBody.java,equals,"    private static boolean equals(String str, char[] array, int begin, int end)
    {
        if (str.length() == end - begin) {
            for (int i = begin, j = 0; i != end; ++i, ++j) {
                if (array[i] != str.charAt(j)) { return false; }
            }
            return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdValuePair.java,getLineNumber,"    public int getLineNumber() { return lineNumber; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,IdValuePair.java,setLineNumber,"    public void setLineNumber(int value) { lineNumber = value; }
}",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,is_value_type,"    private static boolean is_value_type(int id) {
        if (id == STRING_TAG) { return true; }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,tag_name,"    private static String tag_name(int id) {
        switch (id) {
            case SWITCH_TAG: return SWITCH_TAG_STR;
            case -SWITCH_TAG: return ""/"" + SWITCH_TAG_STR;
            case GENERATED_TAG: return GENERATED_TAG_STR;
            case -GENERATED_TAG: return ""/"" + GENERATED_TAG_STR;
        }
        return """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,process_file,"    void process_file(String file_path) throws IOException {
        source_file = file_path;

        body = new FileBody();

        InputStream is;
        if (file_path.equals(""-"")) {
            is = System.in;
        }
        else {
            is = new FileInputStream(file_path);
        }
        try {
            Reader r = new InputStreamReader(is, ""ASCII"");
            body.readData(r);
        }
        finally { is.close(); }

        process_file();

        if (body.wasModified()) {
            OutputStream os;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,process_file,"    private void process_file() {
        int cur_state = 0;
        char[] buffer = body.getBuffer();

        int generated_begin = -1, generated_end = -1;
        int time_stamp_begin = -1, time_stamp_end = -1;

        body.startLineLoop();
        while (body.nextLine()) {
            int begin = body.getLineBegin();
            int end = body.getLineEnd();

            int tag_id = extract_line_tag_id(buffer, begin, end);
            boolean bad_tag = false;
            switch (cur_state) {
                case NORMAL_LINE:
                    if (tag_id == SWITCH_TAG) {
                        cur_state = SWITCH_TAG;
                        all_pairs.removeAllElements();
                        generated_begin = -1;
                    }
                    else if (tag_id == -SWITCH_TAG) {
                        bad_tag = true;
                    }
                    break;
                case SWITCH_TAG:
                    if (tag_id == 0) {
                        look_for_id_definitions(buffer, begin, end, false);
                    }
                    else if (tag_id == STRING_TAG) {
                        look_for_id_definitions(buffer, begin, end, true);
                    }
                    else if (tag_id == GENERATED_TAG) {
                        if (generated_begin >= 0) { bad_tag = true; }
                        else {
                            cur_state = GENERATED_TAG;
                            time_stamp_begin = tag_definition_end;
                            time_stamp_end = end;
                        }
                    }
                    else if (tag_id == -SWITCH_TAG) {
                        cur_state = 0;
                        if (generated_begin >= 0 && !all_pairs.isEmpty()) {
                            generate_java_code();
                            String code = P.toString();
                            boolean different = body.setReplacement
                                (generated_begin, generated_end, code);
                            if (different) {
                                String stamp = get_time_stamp();
                                body.setReplacement
                                    (time_stamp_begin, time_stamp_end, stamp);
                            }
                        }

                        break;
                    }
                    else {
                        bad_tag = true;
                    }
                    break;
                case GENERATED_TAG:
                    if (tag_id == 0) {
                        if (generated_begin < 0) { generated_begin = begin; }
                    }
                    else if (tag_id == -GENERATED_TAG) {
                        if (generated_begin < 0) { generated_begin = begin; }
                        cur_state = SWITCH_TAG;
                        generated_end = begin;
                    }
                    else {
                        bad_tag = true;
                    }
                    break;
            }
            if (bad_tag) {
                String text = ToolErrorReporter.getMessage(
                    ""msg.idswitch.bad_tag_order"", tag_name(tag_id));
                throw R.runtimeError
                    (text, source_file, body.getLineNumber(), null, 0);
            }
        }

        if (cur_state != 0) {
            String text = ToolErrorReporter.getMessage(",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,get_time_stamp,"    private String get_time_stamp() {
        SimpleDateFormat f = new SimpleDateFormat
            ("" 'Last update:' yyyy-MM-dd HH:mm:ss z"");
        return f.format(new Date());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,generate_java_code,"    private void generate_java_code() {

        P.clear();

        IdValuePair[] pairs = new IdValuePair[all_pairs.size()];
        all_pairs.copyInto(pairs);

        SwitchGenerator g = new SwitchGenerator();
        g.char_tail_test_threshold = 2;
        g.setReporter(R);
        g.setCodePrinter(P);

        g.generateSwitch(pairs, ""0"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,extract_line_tag_id,"    private int extract_line_tag_id(char[] array, int cursor, int end) {
        int id = 0;
        cursor = skip_white_space(array, cursor, end);
        int after_leading_white_space = cursor;
        cursor = look_for_slash_slash(array, cursor, end);
        if (cursor != end) {
            boolean at_line_start = (after_leading_white_space + 2 == cursor);
            cursor = skip_white_space(array, cursor, end);
            if (cursor != end && array[cursor] == '#') {
                ++cursor;

                boolean end_tag = false;
                if (cursor != end && array[cursor] == '/') {
                    ++cursor; end_tag = true;
                }

                int tag_start = cursor;

                for (; cursor != end; ++cursor) {
                    int c = array[cursor];
                    if (c == '#' || c == '=' ||is_white_space(c)) { break; }
                }

                if (cursor != end) {
                    int tag_end = cursor;
                    cursor = skip_white_space(array, cursor, end);
                    if (cursor != end) {
                        int c = array[cursor];
                        if (c == '=' || c == '#') {
                            id = get_tag_id
                                (array, tag_start, tag_end, at_line_start);
                            if (id != 0) {
                                String bad = null;
                                if (c == '#') {
                                    if (end_tag) {
                                        id = -id;
                                        if (is_value_type(id)) {
                                            bad = ""msg.idswitch.no_end_usage"";
                                        }
                                    }
                                    tag_definition_end = cursor + 1;
                                }
                                else  {
                                    if (end_tag) {
                                        bad = ""msg.idswitch.no_end_with_value"";
                                    }
                                    else if (!is_value_type(id)) {
                                        bad = ""msg.idswitch.no_value_allowed"";
                                    }
                                    id = extract_tag_value
                                        (array, cursor + 1, end, id);
                                }
                                if (bad != null) {
                                    String s = ToolErrorReporter.getMessage(
                                        bad, tag_name(id));
                                    throw R.runtimeError
                                        (s, source_file, body.getLineNumber(),
                                         null, 0);
                                }
                            }
                        }
                    }
                }
            }
        }
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,look_for_slash_slash,"    private int look_for_slash_slash(char[] array, int cursor, int end) {
        while (cursor + 2 <= end) {
            int c = array[cursor++];
            if (c == '/') {
                c = array[cursor++];
                if (c == '/') {
                    return cursor;
                }
            }
        }
        return end;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,extract_tag_value,"    private int extract_tag_value(char[] array, int cursor, int end, int id) {
        // cursor points after #[^#=]+=
        // ALERT: implement support for quoted strings
        boolean found = false;
        cursor = skip_white_space(array, cursor, end);
        if (cursor != end) {
            int value_start = cursor;
            int value_end = cursor;
            while (cursor != end) {
                int c = array[cursor];
                if (is_white_space(c)) {
                    int after_space = skip_white_space(array, cursor + 1, end);
                    if (after_space != end && array[after_space] == '#') {
                        value_end = cursor;
                        cursor = after_space;
                        break;
                    }
                    cursor = after_space + 1;
                }
                else if (c == '#') {
                    value_end = cursor;
                    break;
                }
                else {
                    ++cursor;
                }
            }
            if (cursor != end) {
                // array[cursor] is '#' here
                found = true;
                tag_value_start = value_start;
                tag_value_end = value_end;
                tag_definition_end = cursor + 1;
            }
        }
        return (found) ? id : 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,get_tag_id,"    private int get_tag_id
        (char[] array, int begin, int end, boolean at_line_start)
    {
        if (at_line_start) {
            if (equals(SWITCH_TAG_STR, array, begin, end)) {
                return SWITCH_TAG;
            }
            if (equals(GENERATED_TAG_STR, array, begin, end)) {
                return GENERATED_TAG;
            }
        }
        if (equals(STRING_TAG_STR, array, begin, end)) {
            return STRING_TAG;
        }
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,look_for_id_definitions,"    private void look_for_id_definitions
        (char[] array, int begin, int end, boolean use_tag_value_as_string)
    {
    // Look for the pattern
    // '^[ \t]+Id_([a-zA-Z0-9_]+)[ \t]*=.*$'
    // where \1 gives field or method name
        int cursor = begin;
        // Skip tab and spaces at the beginning
        cursor = skip_white_space(array, cursor, end);
        int id_start = cursor;
        int name_start = skip_matched_prefix(""Id_"", array, cursor, end);
        if (name_start >= 0) {
            // Found Id_ prefix",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,add_id,"    private void add_id
        (char[] array, int id_start, int id_end, int name_start, int name_end)
    {
        String name = new String(array, name_start, name_end - name_start);
        String value = new String(array, id_start, id_end - id_start);

        IdValuePair pair = new IdValuePair(name, value);

        pair.setLineNumber(body.getLineNumber());

        all_pairs.addElement(pair);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,is_white_space,"    private static boolean is_white_space(int c) {
        return c == ' ' || c == '\t';
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,skip_white_space,"    private static int skip_white_space(char[] array, int begin, int end) {
        int cursor = begin;
        for (; cursor != end; ++cursor) {
            int c = array[cursor];
            if (!is_white_space(c)) { break; }
        }
        return cursor;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,skip_matched_prefix,"    private static int skip_matched_prefix
        (String prefix, char[] array, int begin, int end)
    {
        int cursor = -1;
        int prefix_length = prefix.length();
        if (prefix_length <= end - begin) {
            cursor = begin;
            for (int i = 0; i != prefix_length; ++i, ++cursor) {
                if (prefix.charAt(i) != array[cursor]) {
                    cursor = -1; break;
                }
            }
        }
        return cursor;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,equals,"    private static boolean equals(String str, char[] array, int begin, int end)
    {
        if (str.length() == end - begin) {
            for (int i = begin, j = 0; i != end; ++i, ++j) {
                if (array[i] != str.charAt(j)) { return false; }
            }
            return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,skip_name_char,"    private static int skip_name_char(char[] array, int begin, int end) {
        int cursor = begin;
        for (; cursor != end; ++cursor) {
            int c = array[cursor];
            if (!('a' <= c && c <= 'z') && !('A' <= c && c <= 'Z')) {
                if (!('0' <= c && c <= '9')) {
                    if (c != '_') {
                        break;
                    }
                }
            }
        }
        return cursor;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,main,"    public static void main(String[] args) {
        Main self = new Main();
        int status = self.exec(args);
        System.exit(status);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,exec,"    private int exec(String[] args) {
        R = new ToolErrorReporter(true, System.err);

        int arg_count = process_options(args);

        if (arg_count == 0) {
            option_error(ToolErrorReporter.getMessage(
                             ""msg.idswitch.no_file_argument""));
            return -1;
        }
        if (arg_count > 1) {
            option_error(ToolErrorReporter.getMessage(
                             ""msg.idswitch.too_many_arguments""));
            return -1;
        }

        P = new CodePrinter();
        P.setIndentStep(4);
        P.setIndentTabSize(0);

        try {
            process_file(args[0]);
        }
        catch (IOException ex) {
            print_error(ToolErrorReporter.getMessage(
                            ""msg.idswitch.io_error"", ex.toString()));
            return -1;
        }
        catch (EvaluatorException ex) {
            return -1;
        }
        return 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,process_options,"    private int process_options(String[] args) {

        int status = 1;

        boolean show_usage = false;
        boolean show_version = false;

        int N = args.length;
        L: for (int i = 0; i != N; ++i) {
            String arg = args[i];
            int arg_length = arg.length();
            if (arg_length >= 2) {
                if (arg.charAt(0) == '-') {
                    if (arg.charAt(1) == '-') {
                        if (arg_length == 2) {
                            args[i] = null; break;
                        }
                        if (arg.equals(""--help"")) {
                            show_usage = true;
                        }
                        else if (arg.equals(""--version"")) {
                            show_version = true;
                        }
                        else {
                            option_error(ToolErrorReporter.getMessage(
                                             ""msg.idswitch.bad_option"", arg));
                            status = -1; break L;
                        }
                    }
                    else {
                        for (int j = 1; j != arg_length; ++j) {
                            char c = arg.charAt(j);
                            switch (c) {
                                case 'h': show_usage = true; break;
                                default:
                                    option_error(
                                        ToolErrorReporter.getMessage(
                                            ""msg.idswitch.bad_option_char"",
                                            String.valueOf(c)));
                                    status = -1;
                                    break L;
                            }

                        }
                    }
                    args[i] = null;
                }
            }
        }

        if (status == 1) {
            if (show_usage) { show_usage(); status = 0; }
            if (show_version) { show_version(); status = 0; }
        }

        if (status != 1) { System.exit(status); }

        return remove_nulls(args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,show_usage,"    private void show_usage() {
        System.out.println(
            ToolErrorReporter.getMessage(""msg.idswitch.usage""));
        System.out.println();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,show_version,"    private void show_version() {
        System.out.println(
            ToolErrorReporter.getMessage(""msg.idswitch.version""));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,option_error,"    private void option_error(String str) {
        print_error(
            ToolErrorReporter.getMessage(""msg.idswitch.bad_invocation"", str));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,print_error,"    private void print_error(String text) {
        System.err.println(text);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,remove_nulls,"    private int remove_nulls(String[] array) {
        int N = array.length;
        int cursor = 0;
        for (; cursor != N; ++cursor) {
            if (array[cursor] == null) { break; }
        }
        int destination = cursor;
        if (cursor != N) {
            ++cursor;
            for (; cursor != N; ++cursor) {
                String elem = array[cursor];
                if (elem != null) {
                    array[destination] = elem; ++destination;
                }
            }
        }
        return destination;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,getCodePrinter,"    public CodePrinter getCodePrinter() { return P; }
    public void setCodePrinter(CodePrinter value) { P = value; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,setCodePrinter,"    public void setCodePrinter(CodePrinter value) { P = value; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,getReporter,"    public ToolErrorReporter getReporter() { return R; }
    public void setReporter(ToolErrorReporter value) { R = value; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,setReporter,"    public void setReporter(ToolErrorReporter value) { R = value; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,getSourceFileName,"    public String getSourceFileName() { return source_file; }
    public void setSourceFileName(String value) { source_file = value; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,setSourceFileName,"    public void setSourceFileName(String value) { source_file = value; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,generateSwitch,"    public void generateSwitch(String[] pairs, String default_value) {
        int N = pairs.length / 2;
        IdValuePair[] id_pairs = new IdValuePair[N];
        for (int i = 0; i != N; ++i) {
            id_pairs[i] = new IdValuePair(pairs[2 * i], pairs[2 * i + 1]);
        }
        generateSwitch(id_pairs, default_value);
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,generateSwitch,"    public void generateSwitch(IdValuePair[] pairs, String default_value) {
        int begin = 0;
        int end = pairs.length;
        if (begin == end) { return; }
        this.pairs = pairs;
        this.default_value = default_value;

        generate_body(begin, end, 2);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,generate_body,"    private void generate_body(int begin, int end, int indent_level) {
        P.indent(indent_level);
        P.p(v_switch_label); P.p("": { "");
        P.p(v_id); P.p("" = ""); P.p(default_value);
        P.p(""; String ""); P.p(v_guess); P.p("" = null;"");

        c_was_defined = false;
        int c_def_begin = P.getOffset();
        P.p("" int ""); P.p(v_c); P.p(';');
        int c_def_end = P.getOffset();
        P.nl();

        generate_length_switch(begin, end, indent_level + 1);

        if (!c_was_defined) {
            P.erase(c_def_begin, c_def_end);
        }

        P.indent(indent_level + 1);
        P.p(""if (""); P.p(v_guess); P.p(""!=null && "");
        P.p(v_guess); P.p(""!=""); P.p(v_s);
        P.p("" && !""); P.p(v_guess); P.p("".equals(""); P.p(v_s); P.p("")) "");
        P.p(v_id); P.p("" = ""); P.p(default_value); P.p("";""); P.nl();
        
        // Add break at end of block to suppress warning for unused label
        P.indent(indent_level + 1);
        P.p(""break ""); P.p(v_switch_label); P.p("";""); P.nl();
        
        P.line(indent_level, ""}"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,generate_length_switch,"    private void generate_length_switch(int begin, int end, int indent_level) {

        sort_pairs(begin, end, -1);

        check_all_is_different(begin, end);

        int lengths_count = count_different_lengths(begin, end);

        columns = new int[pairs[end  - 1].idLength];

        boolean use_if;
        if (lengths_count <= use_if_threshold) {
            use_if = true;
            if (lengths_count != 1) {
                P.indent(indent_level);
                P.p(""int ""); P.p(v_s); P.p(v_length_suffix);
                P.p("" = ""); P.p(v_s); P.p("".length();"");
                P.nl();
            }
        }
        else {
            use_if = false;
            P.indent(indent_level);
            P.p(v_label); P.p("": switch ("");
            P.p(v_s); P.p("".length()) {"");
            P.nl();
        }

        int same_length_begin = begin;
        int cur_l = pairs[begin].idLength, l = 0;
        for (int i = begin;;) {
            ++i;
            if (i == end || (l = pairs[i].idLength) != cur_l) {
                int next_indent;
                if (use_if) {
                    P.indent(indent_level);
                    if (same_length_begin != begin) { P.p(""else ""); }
                    P.p(""if ("");
                    if (lengths_count == 1) {
                        P.p(v_s); P.p("".length()=="");
                    }
                    else {
                        P.p(v_s); P.p(v_length_suffix); P.p(""=="");
                    }
                    P.p(cur_l);
                    P.p("") {"");
                    next_indent = indent_level + 1;
                }
                else {
                    P.indent(indent_level);
                    P.p(""case ""); P.p(cur_l); P.p("":"");
                    next_indent = indent_level + 1;
                }
                generate_letter_switch
                    (same_length_begin, i, next_indent, !use_if, use_if);
                if (use_if) {
                    P.p(""}""); P.nl();
                }
                else {
                    P.p(""break ""); P.p(v_label); P.p("";""); P.nl();
                }

                if (i == end) { break; }
                same_length_begin = i;
                cur_l = l;
            }
        }

        if (!use_if) {
            P.indent(indent_level); P.p(""}""); P.nl();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,generate_letter_switch,"    private void generate_letter_switch
        (int begin, int end,
         int indent_level, boolean label_was_defined, boolean inside_if)
    {
        int L = pairs[begin].idLength;

        for (int i = 0; i != L; ++i) {
            columns[i] = i;
        }

        generate_letter_switch_r
            (begin, end, L, indent_level, label_was_defined, inside_if);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,generate_letter_switch_r,"    private boolean generate_letter_switch_r
        (int begin, int end, int L,
         int indent_level, boolean label_was_defined, boolean inside_if)
    {
        boolean next_is_unreachable = false;
        if (begin + 1 == end) {
            P.p(' ');
            IdValuePair pair = pairs[begin];
            if (L > char_tail_test_threshold) {
                P.p(v_guess); P.p(""=""); P.qstring(pair.id); P.p("";"");
                P.p(v_id); P.p(""=""); P.p(pair.value); P.p("";"");
            }
            else {
                if (L == 0) {
                    next_is_unreachable = true;
                    P.p(v_id); P.p(""=""); P.p(pair.value);
                    P.p(""; break ""); P.p(v_switch_label); P.p("";"");
                }
                else {
                    P.p(""if ("");
                    int column = columns[0];
                    P.p(v_s); P.p("".charAt(""); P.p(column); P.p("")=="");
                    P.qchar(pair.id.charAt(column));
                    for (int i = 1; i != L; ++i) {
                        P.p("" && "");
                        column = columns[i];
                        P.p(v_s); P.p("".charAt(""); P.p(column); P.p("")=="");
                        P.qchar(pair.id.charAt(column));
                    }
                    P.p("") {"");
                    P.p(v_id); P.p(""=""); P.p(pair.value);
                    P.p(""; break ""); P.p(v_switch_label); P.p("";}"");
                }
            }
            P.p(' ');
            return next_is_unreachable;
        }

        int max_column_index = find_max_different_column(begin, end, L);
        int max_column = columns[max_column_index];
        int count = count_different_chars(begin, end, max_column);

        columns[max_column_index] = columns[L - 1];

        if (inside_if) { P.nl(); P.indent(indent_level); }
        else { P.p(' '); }

        boolean use_if;
        if (count <= use_if_threshold) {
            use_if = true;
            c_was_defined = true;
            P.p(v_c); P.p(""=""); P.p(v_s);
            P.p("".charAt(""); P.p(max_column); P.p("");"");
        }
        else {
            use_if = false;
            if (!label_was_defined) {
                label_was_defined = true;
                P.p(v_label); P.p("": "");
            }
            P.p(""switch (""); P.p(v_s);
            P.p("".charAt(""); P.p(max_column); P.p("")) {"");
        }

        int same_char_begin = begin;
        int cur_ch = pairs[begin].id.charAt(max_column), ch = 0;
        for (int i = begin;;) {
            ++i;
            if (i == end || (ch = pairs[i].id.charAt(max_column)) != cur_ch) {
                int next_indent;
                if (use_if) {
                    P.nl(); P.indent(indent_level);
                    if (same_char_begin != begin) { P.p(""else ""); }
                    P.p(""if (""); P.p(v_c); P.p(""=="");
                    P.qchar(cur_ch); P.p("") {"");
                    next_indent = indent_level + 1;
                }
                else {
                    P.nl(); P.indent(indent_level);
                    P.p(""case ""); P.qchar(cur_ch); P.p("":"");
                    next_indent = indent_level + 1;
                }
                boolean after_unreachable = generate_letter_switch_r
                    (same_char_begin, i, L - 1,
                     next_indent, label_was_defined, use_if);
                if (use_if) {
                    P.p(""}"");
                }
                else {
                    if (!after_unreachable) {
                        P.p(""break ""); P.p(v_label); P.p("";"");
                    }
                }
                if (i == end) { break; }
                same_char_begin = i;
                cur_ch = ch;
            }
        }

        if (use_if) {
            P.nl();
            if (inside_if) { P.indent(indent_level - 1); }
            else { P.indent(indent_level); }
        }
        else {
            P.nl(); P.indent(indent_level); P.p(""}"");
            if (inside_if) { P.nl(); P.indent(indent_level - 1);}
            else { P.p(' '); }
        }

        columns[max_column_index] = max_column;

        return next_is_unreachable;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,count_different_lengths,"    private int count_different_lengths(int begin, int end) {
        int lengths_count = 0;
        int cur_l = -1;
        for (; begin != end; ++begin) {
            int l = pairs[begin].idLength;
            if (cur_l != l) {
                ++lengths_count; cur_l = l;
            }
        }
        return lengths_count;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,find_max_different_column,"    private int find_max_different_column(int begin, int end, int L) {
        int max_count = 0;
        int max_index = 0;

        for (int i = 0; i != L; ++i) {
            int column = columns[i];
            sort_pairs(begin, end, column);
            int count = count_different_chars(begin, end, column);
            if (count == end - begin) { return i; }
            if (max_count < count) {
                max_count = count;
                max_index = i;
            }
        }

        if (max_index != L - 1) {
            sort_pairs(begin, end, columns[max_index]);
        }

        return max_index;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,count_different_chars,"    private int count_different_chars(int begin, int end, int column) {
        int chars_count = 0;
        int cur_ch = -1;
        for (; begin != end; ++begin) {
            int ch = pairs[begin].id.charAt(column);
            if (ch != cur_ch) {
                ++chars_count; cur_ch = ch;
            }
        }
        return chars_count;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,check_all_is_different,"    private void check_all_is_different(int begin, int end) {
        if (begin != end) {
            IdValuePair prev = pairs[begin];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,on_same_pair_fail,"    private EvaluatorException on_same_pair_fail(IdValuePair a, IdValuePair b) {
        int line1 = a.getLineNumber(), line2 = b.getLineNumber();
        if (line2 > line1) { int tmp = line1; line1 = line2; line2 = tmp; }
        String error_text = ToolErrorReporter.getMessage(
            ""msg.idswitch.same_string"", a.id, new Integer(line2));
        return R.runtimeError(error_text, source_file, line1, null, 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,sort_pairs,"    private void sort_pairs(int begin, int end, int comparator) {
        heap4Sort(pairs, begin, end - begin, comparator);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,bigger,"    private static boolean bigger
        (IdValuePair a, IdValuePair b, int comparator)
    {
        if (comparator < 0) {
        // For length selection switch it is enough to compare just length,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,heap4Sort,"    private static void heap4Sort
        (IdValuePair[] array, int offset, int size, int comparator)
    {
        if (size <= 1) { return; }
        makeHeap4(array, offset, size, comparator);
        while (size > 1) {
            --size;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,makeHeap4,"    private static void makeHeap4
        (IdValuePair[] array, int offset, int size, int comparator)
    {
        for (int i = ((size + 2) >> 2); i != 0;) {
            --i;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,SwitchGenerator.java,heapify4,"    private static void heapify4
        (IdValuePair[] array, int offset, int size, int i, int comparator)
    {
        int new_i1, new_i2, new_i3;
        IdValuePair i_val = array[offset + i];
        for (;;) {
            int base = (i << 2);
            new_i1 = base | 1;
            new_i2 = base | 2;
            new_i3 = base | 3;
            int new_i4 = base + 4;
            if (new_i4 >= size) { break; }
            IdValuePair val1 = array[offset + new_i1];
            IdValuePair val2 = array[offset + new_i2];
            IdValuePair val3 = array[offset + new_i3];
            IdValuePair val4 = array[offset + new_i4];
            if (bigger(val2, val1, comparator)) {
                val1 = val2; new_i1 = new_i2;
            }
            if (bigger(val4, val3, comparator)) {
                val3 = val4; new_i3 = new_i4;
            }
            if (bigger(val3, val1, comparator)) {
                val1 = val3; new_i1 = new_i3;
            }
            if (bigger(i_val, val1, comparator)) { return; }
            array[offset + i] = val1;
            array[offset + new_i1] = i_val;
            i = new_i1;
        }
        if (new_i1 < size) {
            IdValuePair val1 = array[offset + new_i1];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,main,"    public static void main(String args[])
    {
        Main main = new Main();
        args = main.processOptions(args);
        if (args == null) {
            if (main.printHelp) {
                System.out.println(ToolErrorReporter.getMessage(
                    ""msg.jsc.usage"", Main.class.getName()));
                System.exit(0);
            }
            System.exit(1);
        }
        if (!main.reporter.hasReportedError()) {
            main.processSource(args);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,processOptions,"    public String[] processOptions(String args[])
    {
        targetPackage = """";        // default to no package
        compilerEnv.setGenerateDebugInfo(false);   // default to no symbols
        for (int i=0; i < args.length; i++) {
            String arg = args[i];
            if (!arg.startsWith(""-"")) {
                int tail = args.length - i;
                if (targetName != null && tail > 1) {
                    addError(""msg.multiple.js.to.file"", targetName);
                    return null;
                }
                String[] result = new String[tail];
                for (int j = 0; j != tail; ++j) {
                    result[j] = args[i + j];
                }
                return result;
            }
            if (arg.equals(""-help"") || arg.equals(""-h"")
                || arg.equals(""--help""))
            {
                printHelp = true;
                return null;
            }

            try {
                if (arg.equals(""-version"") && ++i < args.length) {
                    int version = Integer.parseInt(args[i]);
                    compilerEnv.setLanguageVersion(version);
                    continue;
                }
                if ((arg.equals(""-opt"") || arg.equals(""-O""))  &&
                    ++i < args.length)
                {
                    int optLevel = Integer.parseInt(args[i]);
                    compilerEnv.setOptimizationLevel(optLevel);
                    continue;
                }
            }
            catch (NumberFormatException e) {
                badUsage(args[i]);
                return null;
            }
            if (arg.equals(""-nosource"")) {
                compilerEnv.setGeneratingSource(false);
                continue;
            }
            if (arg.equals(""-debug"") || arg.equals(""-g"")) {
                compilerEnv.setGenerateDebugInfo(true);
                continue;
            }
            if (arg.equals(""-main-method-class"") && ++i < args.length) {
                compiler.setMainMethodClass(args[i]);
                continue;
            }
            if (arg.equals(""-o"") && ++i < args.length) {
                String name = args[i];
                int end = name.length();
                if (end == 0
                    || !Character.isJavaIdentifierStart(name.charAt(0)))
                {
                    addError(""msg.invalid.classfile.name"", name);
                    continue;
                }
                for (int j = 1; j < end; j++) {
                    char c = name.charAt(j);
                    if (!Character.isJavaIdentifierPart(c)) {
                        if (c == '.') {
                            // check if it is the dot in .class
                            if (j == end - 6 && name.endsWith("".class"")) {
                                name = name.substring(0, j);
                                break;
                            }
                        }
                        addError(""msg.invalid.classfile.name"", name);
                        break;
                    }
                }
                targetName = name;
                continue;
            }
            if (arg.equals(""-observe-instruction-count"")) {
                compilerEnv.setGenerateObserverCount(true);
            }
            if (arg.equals(""-package"") && ++i < args.length) {
                String pkg = args[i];
                int end = pkg.length();
                for (int j = 0; j != end; ++j) {
                    char c = pkg.charAt(j);
                    if (Character.isJavaIdentifierStart(c)) {
                        for (++j; j != end; ++j) {
                            c = pkg.charAt(j);
                            if (!Character.isJavaIdentifierPart(c)) {
                                break;
                            }
                        }
                        if (j == end) {
                            break;
                        }
                        if (c == '.' && j != end - 1) {
                            continue;
                        }
                    }
                    addError(""msg.package.name"", targetPackage);
                    return null;
                }
                targetPackage = pkg;
                continue;
            }
            if (arg.equals(""-extends"") && ++i < args.length) {
                String targetExtends = args[i];
                Class superClass;
                try {
                    superClass = Class.forName(targetExtends);
                } catch (ClassNotFoundException e) {
                    throw new Error(e.toString()); // TODO: better error
                }
                compiler.setTargetExtends(superClass);
                continue;
            }
            if (arg.equals(""-implements"") && ++i < args.length) {
                // TODO: allow for multiple comma-separated interfaces.
                String targetImplements = args[i];
                StringTokenizer st = new StringTokenizer(targetImplements,
                                                         "","");
                Vector v = new Vector();
                while (st.hasMoreTokens()) {
                    String className = st.nextToken();
                    try {
                        v.addElement(Class.forName(className));
                    } catch (ClassNotFoundException e) {
                        throw new Error(e.toString()); // TODO: better error
                    }
                }
                Class[] implementsClasses = new Class[v.size()];
                v.copyInto(implementsClasses);
                compiler.setTargetImplements(implementsClasses);
                continue;
            }
            if (arg.equals(""-d"") && ++i < args.length) {
                destinationDir = args[i];
                continue;
            }
            badUsage(arg);
            return null;
        }
        // no file name
        p(ToolErrorReporter.getMessage(""msg.no.file""));
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,badUsage,"    private static void badUsage(String s) {
        System.err.println(ToolErrorReporter.getMessage(
            ""msg.jsc.bad.usage"", Main.class.getName(), s));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,processSource,"    public void processSource(String[] filenames)
    {
        for (int i = 0; i != filenames.length; ++i) {
            String filename = filenames[i];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,readSource,"    private String readSource(File f)
    {
        if (!f.exists()) {
            addError(""msg.jsfile.not.found"", f.getAbsolutePath());
            return null;
        }
        try {
            Reader in = new FileReader(f);
            try {
                return Kit.readReader(in);
            } finally {
                in.close();
            }
        } catch (FileNotFoundException ex) {
            addError(""msg.couldnt.open"", f.getAbsolutePath());
        } catch (IOException ioe) {
            addFormatedError(ioe.toString());
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getOutputFile,"    private File getOutputFile(File parentDir, String className)
    {
        String path = className.replace('.', File.separatorChar);
        path = path.concat("".class"");
        File f = new File(parentDir, path);
        String dirPath = f.getParent();
        if (dirPath != null) {
            File dir = new File(dirPath);
            if (!dir.exists()) {
                dir.mkdirs();
            }
        }
        return f;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getClassName,"    String getClassName(String name) {
        char[] s = new char[name.length()+1];
        char c;
        int j = 0;

        if (!Character.isJavaIdentifierStart(name.charAt(0))) {
            s[j++] = '_';
        }
        for (int i=0; i < name.length(); i++, j++) {
            c = name.charAt(i);
            if ( Character.isJavaIdentifierPart(c) ) {
                s[j] = c;
            } else {
                s[j] = '_';
            }
        }
        return (new String(s)).trim();
     }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,p,"    private static void p(String s) {
        System.out.println(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,addError,"    private void addError(String messageId, String arg)
    {
        String msg;
        if (arg == null) {
            msg = ToolErrorReporter.getMessage(messageId);
        } else {
            msg = ToolErrorReporter.getMessage(messageId, arg);
        }
        addFormatedError(msg);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,addFormatedError,"    private void addFormatedError(String message)
    {
        reporter.error(message, null, -1, null, -1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,run,"    public void run() {
        textArea.write(str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,write,"    public synchronized void write(int ch) {
        buffer.append((char)ch);
        if(ch == '\n') {
            flushBuffer();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,write,"    public synchronized void write (char[] data, int off, int len) {
        for(int i = off; i < len; i++) {
            buffer.append(data[i]);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,flush,"    public synchronized void flush() {
        if (buffer.length() > 0) {
            flushBuffer();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,close,"    public void close () {
        flush();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,flushBuffer,"    private void flushBuffer() {
        String str = buffer.toString();
        buffer.setLength(0);
        SwingUtilities.invokeLater(new ConsoleWrite(textArea, str));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,select,"    public void select(int start, int end) {
        requestFocus();
        super.select(start, end);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,returnPressed,"    synchronized void returnPressed() {
        Document doc = getDocument();
        int len = doc.getLength();
        Segment segment = new Segment();
        try {
            doc.getText(outputMark, len - outputMark, segment);
        } catch(javax.swing.text.BadLocationException ignored) {
            ignored.printStackTrace();
        }
        if(segment.count > 0) {
            history.addElement(segment.toString());
        }
        historyIndex = history.size();
        inPipe.write(segment.array, segment.offset, segment.count);
        append(""\n"");
        outputMark = doc.getLength();
        inPipe.write(""\n"");
        inPipe.flush();
        console1.flush();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,eval,"    public void eval(String str) {
        inPipe.write(str);
        inPipe.write(""\n"");
        inPipe.flush();
        console1.flush();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,keyPressed,"    public void keyPressed(KeyEvent e) {
        int code = e.getKeyCode();
        if(code == KeyEvent.VK_BACK_SPACE || code == KeyEvent.VK_LEFT) {
            if(outputMark == getCaretPosition()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,keyTyped,"    public void keyTyped(KeyEvent e) {
        int keyChar = e.getKeyChar();
        if(keyChar == 0x8 /* KeyEvent.VK_BACK_SPACE */) {
            if(outputMark == getCaretPosition()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,write,"    public synchronized void write(String str) {
        insert(str, outputMark);
        int len = str.length();
        outputMark += len;
        select(outputMark, outputMark);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,insertUpdate,"    public synchronized void insertUpdate(DocumentEvent e) {
        int len = e.getLength();
        int off = e.getOffset();
        if(outputMark > off) {
            outputMark += len;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,removeUpdate,"    public synchronized void removeUpdate(DocumentEvent e) {
        int len = e.getLength();
        int off = e.getOffset();
        if(outputMark > off) {
            if(outputMark >= off + len) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,postUpdateUI,"    public synchronized void postUpdateUI() {
        // this attempts to cleanup the damage done by updateComponentTreeUI
        requestFocus();
        setCaret(getCaret());
        select(outputMark, outputMark);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,getIn,"    public InputStream getIn() {
        return in;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,getOut,"    public PrintStream getOut() {
        return out;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ConsoleTextArea.java,getErr,"    public PrintStream getErr() {
        return err;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Environment.java,defineClass,"    public static void defineClass(ScriptableObject scope) {
        try {
            ScriptableObject.defineClass(scope, Environment.class);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Environment.java,getClassName,"    public String getClassName() {
        return ""Environment"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Environment.java,has,"    public boolean has(String name, Scriptable start) {
        if (this == thePrototypeInstance)
            return super.has(name, start);

        return (System.getProperty(name) != null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Environment.java,get,"    public Object get(String name, Scriptable start) {
        if (this == thePrototypeInstance)
            return super.get(name, start);

        String result = System.getProperty(name);
        if (result != null)
            return ScriptRuntime.toObject(getParentScope(), result);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Environment.java,put,"    public void put(String name, Scriptable start, Object value) {
        if (this == thePrototypeInstance)
            super.put(name, start, value);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Environment.java,collectIds,"    private Object[] collectIds() {
        Properties props = System.getProperties();
        Enumeration names = props.propertyNames();
        Vector keys = new Vector();
        while (names.hasMoreElements())
            keys.addElement(names.nextElement());
        Object[] ids = new Object[keys.size()];
        keys.copyInto(ids);
        return ids;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Environment.java,getIds,"    public Object[] getIds() {
        if (this == thePrototypeInstance)
            return super.getIds();
        return collectIds();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Environment.java,getAllIds,"    public Object[] getAllIds() {
        if (this == thePrototypeInstance)
            return super.getAllIds();
        return collectIds();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,isInitialized,"    public boolean isInitialized() {
        return initialized;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,initQuitAction,"    public void initQuitAction(QuitAction quitAction)
    {
        if (quitAction == null)
            throw new IllegalArgumentException(""quitAction is null"");
        if (this.quitAction != null)
            throw new IllegalArgumentException(""The method is once-call."");

        this.quitAction = quitAction;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,init,"    public void init(ContextFactory factory)
    {
        factory.call(new ContextAction() {
                public Object run(Context cx)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,run,"                public Object run(Context cx)
                {
                    init(cx);
                    return null;
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,init,"    public void init(Context cx)
    {
        // Define some global functions particular to the shell. Note
        // that these functions are not part of ECMA.
        initStandardObjects(cx, sealedStdLib);
        String[] names = {
            ""defineClass"",
            ""deserialize"",
            ""gc"",
            ""help"",
            ""load"",
            ""loadClass"",
            ""print"",
            ""quit"",
            ""readFile"",
            ""readUrl"",
            ""runCommand"",
            ""seal"",
            ""serialize"",
            ""spawn"",
            ""sync"",
            ""toint32"",
            ""version"",
        };
        defineFunctionProperties(names, Global.class,
                                 ScriptableObject.DONTENUM);

        // Set up ""environment"" in the global scope to provide access to the
        // System environment variables.
        Environment.defineClass(this);
        Environment environment = new Environment(this);
        defineProperty(""environment"", environment,
                       ScriptableObject.DONTENUM);

        history = (NativeArray) cx.newArray(this, 0);
        defineProperty(""history"", history, ScriptableObject.DONTENUM);
        initialized = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,help,"    public static void help(Context cx, Scriptable thisObj,
                            Object[] args, Function funObj)
    {
        PrintStream out = getInstance(funObj).getOut();
        out.println(ToolErrorReporter.getMessage(""msg.help""));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,gc,"    public static void gc(Context cx, Scriptable thisObj,
            Object[] args, Function funObj)
    {
        System.gc();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,print,"    public static Object print(Context cx, Scriptable thisObj,
                               Object[] args, Function funObj)
    {
        PrintStream out = getInstance(funObj).getOut();
        for (int i=0; i < args.length; i++) {
            if (i > 0)
                out.print("" "");

            // Convert the arbitrary JavaScript value into a string form.
            String s = Context.toString(args[i]);

            out.print(s);
        }
        out.println();
        return Context.getUndefinedValue();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,quit,"    public static void quit(Context cx, Scriptable thisObj,
                            Object[] args, Function funObj)
    {
        Global global = getInstance(funObj);
        if (global.quitAction != null) {
            int exitCode = (args.length == 0 ? 0",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,version,"    public static double version(Context cx, Scriptable thisObj,
                                 Object[] args, Function funObj)
    {
        double result = cx.getLanguageVersion();
        if (args.length > 0) {
            double d = Context.toNumber(args[0]);
            cx.setLanguageVersion((int) d);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,load,"    public static void load(Context cx, Scriptable thisObj,
                            Object[] args, Function funObj)
    {
        for (int i = 0; i < args.length; i++) {
            Main.processFile(cx, thisObj, Context.toString(args[i]));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,defineClass,"    public static void defineClass(Context cx, Scriptable thisObj,
                                   Object[] args, Function funObj)
        throws IllegalAccessException, InstantiationException,
               InvocationTargetException
    {
        Class clazz = getClass(args);
        ScriptableObject.defineClass(thisObj, clazz);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,loadClass,"    public static void loadClass(Context cx, Scriptable thisObj,
                                 Object[] args, Function funObj)
        throws IllegalAccessException, InstantiationException
    {
        Class clazz = getClass(args);
        if (!Script.class.isAssignableFrom(clazz)) {
            throw reportRuntimeError(""msg.must.implement.Script"");
        }
        Script script = (Script) clazz.newInstance();
        script.exec(cx, thisObj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,getClass,"    private static Class getClass(Object[] args) {
        if (args.length == 0) {
            throw reportRuntimeError(""msg.expected.string.arg"");
        }
        Object arg0 = args[0];
        if (arg0 instanceof Wrapper) {
            Object wrapped = ((Wrapper)arg0).unwrap();
            if (wrapped instanceof Class)
                return (Class)wrapped;
        }
        String className = Context.toString(args[0]);
        try {
            return Class.forName(className);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,serialize,"    public static void serialize(Context cx, Scriptable thisObj,
                                 Object[] args, Function funObj)
        throws IOException
    {
        if (args.length < 2) {
            throw Context.reportRuntimeError(
                ""Expected an object to serialize and a filename to write "" +
                ""the serialization to"");
        }
        Object obj = args[0];
        String filename = Context.toString(args[1]);
        FileOutputStream fos = new FileOutputStream(filename);
        Scriptable scope = ScriptableObject.getTopLevelScope(thisObj);
        ScriptableOutputStream out = new ScriptableOutputStream(fos, scope);
        out.writeObject(obj);
        out.close();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,deserialize,"    public static Object deserialize(Context cx, Scriptable thisObj,
                                     Object[] args, Function funObj)
        throws IOException, ClassNotFoundException
    {
        if (args.length < 1) {
            throw Context.reportRuntimeError(
                ""Expected a filename to read the serialization from"");
        }
        String filename = Context.toString(args[0]);
        FileInputStream fis = new FileInputStream(filename);
        Scriptable scope = ScriptableObject.getTopLevelScope(thisObj);
        ObjectInputStream in = new ScriptableInputStream(fis, scope);
        Object deserialized = in.readObject();
        in.close();
        return Context.toObject(deserialized, scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,getPrompts,"    public String[] getPrompts(Context cx) {
        if (ScriptableObject.hasProperty(this, ""prompts"")) {
            Object promptsJS = ScriptableObject.getProperty(this,
                                                            ""prompts"");
            if (promptsJS instanceof Scriptable) {
                Scriptable s = (Scriptable) promptsJS;
                if (ScriptableObject.hasProperty(s, 0) &&
                    ScriptableObject.hasProperty(s, 1))
                {
                    Object elem0 = ScriptableObject.getProperty(s, 0);
                    if (elem0 instanceof Function) {
                        elem0 = ((Function) elem0).call(cx, this, s,
                                new Object[0]);
                    }
                    prompts[0] = Context.toString(elem0);
                    Object elem1 = ScriptableObject.getProperty(s, 1);
                    if (elem1 instanceof Function) {
                        elem1 = ((Function) elem1).call(cx, this, s,
                                new Object[0]);
                    }
                    prompts[1] = Context.toString(elem1);
                }
            }
        }
        return prompts;
    }    ",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,spawn,"    public static Object spawn(Context cx, Scriptable thisObj, Object[] args,
                               Function funObj)
    {
        Scriptable scope = funObj.getParentScope();
        Runner runner;
        if (args.length != 0 && args[0] instanceof Function) {
            Object[] newArgs = null;
            if (args.length > 1 && args[1] instanceof Scriptable) {
                newArgs = cx.getElements((Scriptable) args[1]);
            }
            if (newArgs == null) { newArgs = ScriptRuntime.emptyArgs; }
            runner = new Runner(scope, (Function) args[0], newArgs);
        } else if (args.length != 0 && args[0] instanceof Script) {
            runner = new Runner(scope, (Script) args[0]);
        } else {
            throw reportRuntimeError(""msg.spawn.args"");
        }
        runner.factory = cx.getFactory();
        Thread thread = new Thread(runner);
        thread.start();
        return thread;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,sync,"    public static Object sync(Context cx, Scriptable thisObj, Object[] args,
                              Function funObj)
    {
        if (args.length == 1 && args[0] instanceof Function) {
            return new Synchronizer((Function)args[0]);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,runCommand,"    public static Object runCommand(Context cx, Scriptable thisObj,
                                    Object[] args, Function funObj)
        throws IOException
    {
        int L = args.length;
        if (L == 0 || (L == 1 && args[0] instanceof Scriptable)) {
            throw reportRuntimeError(""msg.runCommand.bad.args"");
        }

        InputStream in = null;
        OutputStream out = null, err = null;
        ByteArrayOutputStream outBytes = null, errBytes = null;
        Object outObj = null, errObj = null;
        String[] environment = null;
        Scriptable params = null;
        Object[] addArgs = null;
        if (args[L - 1] instanceof Scriptable) {
            params = (Scriptable)args[L - 1];
            --L;
            Object envObj = ScriptableObject.getProperty(params, ""env"");
            if (envObj != Scriptable.NOT_FOUND) {
                if (envObj == null) {
                    environment = new String[0];
                } else {
                    if (!(envObj instanceof Scriptable)) {
                        throw reportRuntimeError(""msg.runCommand.bad.env"");
                    }
                    Scriptable envHash = (Scriptable)envObj;
                    Object[] ids = ScriptableObject.getPropertyIds(envHash);
                    environment = new String[ids.length];
                    for (int i = 0; i != ids.length; ++i) {
                        Object keyObj = ids[i], val;
                        String key;
                        if (keyObj instanceof String) {
                            key = (String)keyObj;
                            val = ScriptableObject.getProperty(envHash, key);
                        } else {
                            int ikey = ((Number)keyObj).intValue();
                            key = Integer.toString(ikey);
                            val = ScriptableObject.getProperty(envHash, ikey);
                        }
                        if (val == ScriptableObject.NOT_FOUND) {
                            val = Undefined.instance;
                        }
                        environment[i] = key+'='+ScriptRuntime.toString(val);
                    }
                }
            }
            Object inObj = ScriptableObject.getProperty(params, ""input"");
            if (inObj != Scriptable.NOT_FOUND) {
                in = toInputStream(inObj);
            }
            outObj = ScriptableObject.getProperty(params, ""output"");
            if (outObj != Scriptable.NOT_FOUND) {
                out = toOutputStream(outObj);
                if (out == null) {
                    outBytes = new ByteArrayOutputStream();
                    out = outBytes;
                }
            }
            errObj = ScriptableObject.getProperty(params, ""err"");
            if (errObj != Scriptable.NOT_FOUND) {
                err = toOutputStream(errObj);
                if (err == null) {
                    errBytes = new ByteArrayOutputStream();
                    err = errBytes;
                }
            }
            Object addArgsObj = ScriptableObject.getProperty(params, ""args"");
            if (addArgsObj != Scriptable.NOT_FOUND) {
                Scriptable s = Context.toObject(addArgsObj,
                                                getTopLevelScope(thisObj));
                addArgs = cx.getElements(s);
            }
        }
        Global global = getInstance(funObj);
        if (out == null) {
            out = (global != null) ? global.getOut() : System.out;
        }
        if (err == null) {
            err = (global != null) ? global.getErr() : System.err;
        }
        // If no explicit input stream, do not send any input to process,
        // in particular, do not use System.in to avoid deadlocks
        // when waiting for user input to send to process which is already
        // terminated as it is not always possible to interrupt read method.

        String[] cmd = new String[(addArgs == null) ? L : L + addArgs.length];
        for (int i = 0; i != L; ++i) {
            cmd[i] = ScriptRuntime.toString(args[i]);
        }
        if (addArgs != null) {
            for (int i = 0; i != addArgs.length; ++i) {
                cmd[L + i] = ScriptRuntime.toString(addArgs[i]);
            }
        }

        int exitCode = runProcess(cmd, environment, in, out, err);
        if (outBytes != null) {
            String s = ScriptRuntime.toString(outObj) + outBytes.toString();
            ScriptableObject.putProperty(params, ""output"", s);
        }
        if (errBytes != null) {
            String s = ScriptRuntime.toString(errObj) + errBytes.toString();
            ScriptableObject.putProperty(params, ""err"", s);
        }

        return new Integer(exitCode);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,seal,"    public static void seal(Context cx, Scriptable thisObj, Object[] args,
                            Function funObj)
    {
        for (int i = 0; i != args.length; ++i) {
            Object arg = args[i];
            if (!(arg instanceof ScriptableObject) || arg == Undefined.instance)
            {
                if (!(arg instanceof Scriptable) || arg == Undefined.instance)
                {
                    throw reportRuntimeError(""msg.shell.seal.not.object"");
                } else {
                    throw reportRuntimeError(""msg.shell.seal.not.scriptable"");
                }
            }
        }

        for (int i = 0; i != args.length; ++i) {
            Object arg = args[i];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,readFile,"    public static Object readFile(Context cx, Scriptable thisObj, Object[] args,
                                  Function funObj)
        throws IOException
    {
        if (args.length == 0) {
            throw reportRuntimeError(""msg.shell.readFile.bad.args"");
        }
        String path = ScriptRuntime.toString(args[0]);
        String charCoding = null;
        if (args.length >= 2) {
            charCoding = ScriptRuntime.toString(args[1]);
        }

        return readUrl(path, charCoding, true);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,readUrl,"    public static Object readUrl(Context cx, Scriptable thisObj, Object[] args,
                                 Function funObj)
        throws IOException
    {
        if (args.length == 0) {
            throw reportRuntimeError(""msg.shell.readUrl.bad.args"");
        }
        String url = ScriptRuntime.toString(args[0]);
        String charCoding = null;
        if (args.length >= 2) {
            charCoding = ScriptRuntime.toString(args[1]);
        }

        return readUrl(url, charCoding, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,toint32,"    public static Object toint32(Context cx, Scriptable thisObj, Object[] args,
                                 Function funObj)
    {
        Object arg = (args.length != 0 ? args[0] : Undefined.instance);
        if (arg instanceof Integer)
            return arg;
        return ScriptRuntime.wrapInt(ScriptRuntime.toInt32(arg));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,getIn,"    public InputStream getIn() {
        return inStream == null ? System.in : inStream;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,setIn,"    public void setIn(InputStream in) {
        inStream = in;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,getOut,"    public PrintStream getOut() {
        return outStream == null ? System.out : outStream;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,setOut,"    public void setOut(PrintStream out) {
        outStream = out;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,getErr,"    public PrintStream getErr() {
        return errStream == null ? System.err : errStream;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,setErr,"    public void setErr(PrintStream err) {
        errStream = err;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,setSealedStdLib,"    public void setSealedStdLib(boolean value)
    {
        sealedStdLib = value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,getInstance,"    private static Global getInstance(Function function)
    {
        Scriptable scope = function.getParentScope();
        if (!(scope instanceof Global))
            throw reportRuntimeError(""msg.bad.shell.function.scope"",
                                     String.valueOf(scope));
        return (Global)scope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,runProcess,"    private static int runProcess(String[] cmd, String[] environment,
                                  InputStream in, OutputStream out,
                                  OutputStream err)
        throws IOException
    {
        Process p;
        if (environment == null) {
            p = Runtime.getRuntime().exec(cmd);
        } else {
            p = Runtime.getRuntime().exec(cmd, environment);
        }

        try {
            PipeThread inThread = null;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,pipe,"    static void pipe(boolean fromProcess, InputStream from, OutputStream to)
        throws IOException
    {
        try {
            final int SIZE = 4096;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,toInputStream,"    private static InputStream toInputStream(Object value)
        throws IOException
    {
        InputStream is = null;
        String s = null;
        if (value instanceof Wrapper) {
            Object unwrapped = ((Wrapper)value).unwrap();
            if (unwrapped instanceof InputStream) {
                is = (InputStream)unwrapped;
            } else if (unwrapped instanceof byte[]) {
                is = new ByteArrayInputStream((byte[])unwrapped);
            } else if (unwrapped instanceof Reader) {
                s = readReader((Reader)unwrapped);
            } else if (unwrapped instanceof char[]) {
                s = new String((char[])unwrapped);
            }
        }
        if (is == null) {
            if (s == null) { s = ScriptRuntime.toString(value); }
            is = new ByteArrayInputStream(s.getBytes());
        }
        return is;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,toOutputStream,"    private static OutputStream toOutputStream(Object value) {
        OutputStream os = null;
        if (value instanceof Wrapper) {
            Object unwrapped = ((Wrapper)value).unwrap();
            if (unwrapped instanceof OutputStream) {
                os = (OutputStream)unwrapped;
            }
        }
        return os;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,readUrl,"    private static String readUrl(String filePath, String charCoding,
                                  boolean urlIsFile)
        throws IOException
    {
        int chunkLength;
        InputStream is = null;
        try {
            if (!urlIsFile) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,getCharCodingFromType,"    private static String getCharCodingFromType(String type)
    {
        int i = type.indexOf(';');
        if (i >= 0) {
            int end = type.length();
            ++i;
            while (i != end && type.charAt(i) <= ' ') {
                ++i;
            }
            String charset = ""charset"";
            if (charset.regionMatches(true, 0, type, i, charset.length()))
            {
                i += charset.length();
                while (i != end && type.charAt(i) <= ' ') {
                    ++i;
                }
                if (i != end && type.charAt(i) == '=') {
                    ++i;
                    while (i != end && type.charAt(i) <= ' ') {
                        ++i;
                    }
                    if (i != end) {
                        // i is at the start of non-empty
                        // charCoding spec
                        while (type.charAt(end -1) <= ' ') {
                            --end;
                        }
                        return type.substring(i, end);
                    }
                }
            }
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,readReader,"    private static String readReader(Reader reader)
        throws IOException
    {
        return readReader(reader, 4096);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,readReader,"    private static String readReader(Reader reader, int initialBufferSize)
        throws IOException
    {
        char[] buffer = new char[initialBufferSize];
        int offset = 0;
        for (;;) {
            int n = reader.read(buffer, offset, buffer.length - offset);
            if (n < 0) { break;    }
            offset += n;
            if (offset == buffer.length) {
                char[] tmp = new char[buffer.length * 2];
                System.arraycopy(buffer, 0, tmp, 0, offset);
                buffer = tmp;
            }
        }
        return new String(buffer, 0, offset);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,reportRuntimeError,"    static RuntimeException reportRuntimeError(String msgId) {
        String message = ToolErrorReporter.getMessage(msgId);
        return Context.reportRuntimeError(message);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,reportRuntimeError,"    static RuntimeException reportRuntimeError(String msgId, String msgArg)
    {
        String message = ToolErrorReporter.getMessage(msgId, msgArg);
        return Context.reportRuntimeError(message);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,run,"    public void run()
    {
        factory.call(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,run,"    public Object run(Context cx)
    {
        if (f != null)
            return f.call(cx, scope, scope, args);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Global.java,run,"    public void run() {
        try {
            Global.pipe(fromProcess, from, to);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JSConsole.java,chooseFile,"    public String chooseFile() {
        if(CWD == null) {
            String dir = SecurityUtilities.getSystemProperty(""user.dir"");
            if(dir != null) {
                CWD = new File(dir);
            }
        }
        if(CWD != null) {
            dlg.setCurrentDirectory(CWD);
        }
        dlg.setDialogTitle(""Select a file to load"");
        int returnVal = dlg.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            String result = dlg.getSelectedFile().getPath();
            CWD = new File(dlg.getSelectedFile().getParent());
            return result;
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JSConsole.java,main,"    public static void main(String args[]) {
        new JSConsole(args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JSConsole.java,createFileChooser,"    public void createFileChooser() {
        dlg = new JFileChooser();
        javax.swing.filechooser.FileFilter filter =
            new javax.swing.filechooser.FileFilter() {
                    public boolean accept(File f) {
                        if(f.isDirectory()) {
                            return true;
                        }
                        String name = f.getName();
                        int i = name.lastIndexOf('.');
                        if(i > 0 && i < name.length() -1) {
                            String ext = name.substring(i + 1).toLowerCase();
                            if(ext.equals(""js"")) {
                                return true;
                            }
                        }
                        return false;
                    }

                    public String getDescription() {
                        return ""JavaScript Files (*.js)"";
                    }
                };
        dlg.addChoosableFileFilter(filter);
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JSConsole.java,accept,"                    public boolean accept(File f) {
                        if(f.isDirectory()) {
                            return true;
                        }
                        String name = f.getName();
                        int i = name.lastIndexOf('.');
                        if(i > 0 && i < name.length() -1) {
                            String ext = name.substring(i + 1).toLowerCase();
                            if(ext.equals(""js"")) {
                                return true;
                            }
                        }
                        return false;
                    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JSConsole.java,getDescription,"                    public String getDescription() {
                        return ""JavaScript Files (*.js)"";
                    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JSConsole.java,windowClosing,"                public void windowClosing(WindowEvent e) {
                    System.exit(0);
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JSConsole.java,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        String plaf_name = null;
        if(cmd.equals(""Load"")) {
            String f = chooseFile();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,getStaticSecurityDomainClassInternal,"    public Class getStaticSecurityDomainClassInternal() {
        return ProtectionDomain.class;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,defineClass,"        public Class defineClass(String name, byte[] data) {
            return super.defineClass(name, data, 0, data.length, domain);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,linkClass,"        public void linkClass(Class cl) {
            resolveClass(cl);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,add,"        public void add(Permission permission) {
            throw new RuntimeException(""NOT IMPLEMENTED"");
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,implies,"        public boolean implies(Permission permission) {
            if (_statisPermissions != null) {
                if (!_statisPermissions.implies(permission)) {
                    return false;
                }
            }
            try {
                _context.checkPermission(permission);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,elements,"        public Enumeration elements()
        {
            return new Enumeration() {
                public boolean hasMoreElements() { return false; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,hasMoreElements,"                public boolean hasMoreElements() { return false; }
                public Object nextElement() { return null; }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,nextElement,"                public Object nextElement() { return null; }
            };",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,toString,"        public String toString() {
            StringBuffer sb = new StringBuffer();
            sb.append(getClass().getName());
            sb.append('@');
            sb.append(Integer.toHexString(System.identityHashCode(this)));
            sb.append("" (context="");
            sb.append(_context);
            sb.append("", static_permitions="");
            sb.append(_statisPermissions);
            sb.append(')');
            return sb.toString();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,callProcessFileSecure,"    protected void callProcessFileSecure(final Context cx,
                                         final Scriptable scope,
                                         final String filename)
    {
        AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,run,"            public Object run() {
                URL url = getUrlObj(filename);
                ProtectionDomain staticDomain = getUrlDomain(url);
                Main.processFileSecure(cx, scope, url.toExternalForm(),
                                       staticDomain);
                return null;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,getUrlObj,"    private URL getUrlObj(String url)
    {
        URL urlObj;
        try {
            urlObj = new URL(url);
        } catch (MalformedURLException ex) {
            // Assume as Main.processFileSecure it is file, need to build its
            // URL
            String curDir = System.getProperty(""user.dir"");
            curDir = curDir.replace('\\', '/');
            if (!curDir.endsWith(""/"")) {
                curDir = curDir+'/';
            }
            try {
                URL curDirURL = new URL(""file:""+curDir);
                urlObj = new URL(curDirURL, url);
            } catch (MalformedURLException ex2) {
                throw new RuntimeException
                    (""Can not construct file URL for '""+url+""':""
                     +ex2.getMessage());
            }
        }
        return urlObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,getUrlDomain,"    private ProtectionDomain getUrlDomain(URL url)
    {
        CodeSource cs;
        cs = new CodeSource(url, (java.security.cert.Certificate[])null);
        PermissionCollection pc = Policy.getPolicy().getPermissions(cs);
        return new ProtectionDomain(cs, pc);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,createClassLoader,"    public GeneratedClassLoader
    createClassLoader(ClassLoader parentLoader, Object securityDomain)
    {
        ProtectionDomain domain = (ProtectionDomain)securityDomain;
        return new Loader(parentLoader, domain);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,getDynamicSecurityDomain,"    public Object getDynamicSecurityDomain(Object securityDomain)
    {
        ProtectionDomain staticDomain = (ProtectionDomain)securityDomain;
        return getDynamicDomain(staticDomain);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,getDynamicDomain,"    private ProtectionDomain getDynamicDomain(ProtectionDomain staticDomain) {
        ContextPermissions p = new ContextPermissions(staticDomain);
        ProtectionDomain contextDomain = new ProtectionDomain(null, p);
        return contextDomain;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,callWithDomain,"    public Object callWithDomain(Object securityDomain,
                                 final Context cx,
                                 final Callable callable,
                                 final Scriptable scope,
                                 final Scriptable thisObj,
                                 final Object[] args)
    {
        ProtectionDomain staticDomain = (ProtectionDomain)securityDomain;
        // There is no direct way in Java to intersect permitions according
        // stack context with additional domain.
        // The following implementation first constructs ProtectionDomain
        // that allows actions only allowed by both staticDomain and current
        // stack context, and then constructs AccessController for this dynamic
        // domain.
        // If this is too slow, alternative solution would be to generate
        // class per domain with a proxy method to call to infect
        // java stack.
        // Another optimization in case of scripts coming from ""world"" domain,
        // that is having minimal default privileges is to construct
        // one AccessControlContext based on ProtectionDomain
        // with least possible privileges and simply call
        // AccessController.doPrivileged with this untrusted context

        ProtectionDomain dynamicDomain = getDynamicDomain(staticDomain);
        ProtectionDomain[] tmp = { dynamicDomain };
        AccessControlContext restricted = new AccessControlContext(tmp);

        PrivilegedAction action = new PrivilegedAction() {
            public Object run() {
                return callable.call(cx, scope, thisObj, args);
            }
        };

        return AccessController.doPrivileged(action, restricted);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaPolicySecurity.java,run,"            public Object run() {
                return callable.call(cx, scope, thisObj, args);
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,run,"        public Object run(Context cx)
        {
            if (type == PROCESS_FILES) {
                processFiles(cx, args);
            } else if (type == EVAL_INLINE_SCRIPT) {
                Script script = loadScriptFromSource(cx, scriptText,
                                                     ""<command>"", 1, null);
                if (script != null) {
                    evaluateScript(script, cx, getGlobal());
                }
            } else {
                throw Kit.codeBug();
            }
            return null;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,quit,"        public void quit(Context cx, int exitCode)
        {
            if (type == SYSTEM_EXIT) {
                System.exit(exitCode);
                return;
            }
            throw Kit.codeBug();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,main,"    public static void main(String args[]) {
        try {
            if (Boolean.getBoolean(""rhino.use_java_policy_security"")) {
                initJavaPolicySecuritySupport();
            }
        } catch (SecurityException ex) {
            ex.printStackTrace(System.err);
        }

        int result = exec(args);
        if (result != 0) {
            System.exit(result);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,exec,"    public static int exec(String origArgs[])
    {
        errorReporter = new ToolErrorReporter(false, global.getErr());
        shellContextFactory.setErrorReporter(errorReporter);
        String[] args = processOptions(origArgs);
        if (processStdin)
            fileList.addElement(null);

        if (!global.initialized) {
            global.init(shellContextFactory);
        }
        IProxy iproxy = new IProxy(IProxy.PROCESS_FILES);
        iproxy.args = args;
        shellContextFactory.call(iproxy);

        return exitCode;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,processFiles,"    static void processFiles(Context cx, String[] args)
    {
        // define ""arguments"" array in the top-level object:
        // need to allocate new array since newArray requires instances
        // of exactly Object[], not ObjectSubclass[]
        Object[] array = new Object[args.length];
        System.arraycopy(args, 0, array, 0, args.length);
        Scriptable argsObj = cx.newArray(global, array);
        global.defineProperty(""arguments"", argsObj,
                              ScriptableObject.DONTENUM);

        for (int i=0; i < fileList.size(); i++) {
            processSource(cx, (String) fileList.elementAt(i));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getGlobal,"    public static Global getGlobal()
    {
        return global;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,processOptions,"    public static String[] processOptions(String args[])
    {
        String usageError;
        goodUsage: for (int i = 0; ; ++i) {
            if (i == args.length) {
                return new String[0];
            }
            String arg = args[i];
            if (!arg.startsWith(""-"")) {
                processStdin = false;
                fileList.addElement(arg);
                String[] result = new String[args.length - i - 1];
                System.arraycopy(args, i+1, result, 0, args.length - i - 1);
                return result;
            }
            if (arg.equals(""-version"")) {
                if (++i == args.length) {
                    usageError = arg;
                    break goodUsage;
                }
                int version;
                try {
                    version = Integer.parseInt(args[i]);
                } catch (NumberFormatException ex) {
                    usageError = args[i];
                    break goodUsage;
                }
                if (!Context.isValidLanguageVersion(version)) {
                    usageError = args[i];
                    break goodUsage;
                }
                shellContextFactory.setLanguageVersion(version);
                continue;
            }
            if (arg.equals(""-opt"") || arg.equals(""-O"")) {
                if (++i == args.length) {
                    usageError = arg;
                    break goodUsage;
                }
                int opt;
                try {
                    opt = Integer.parseInt(args[i]);
                } catch (NumberFormatException ex) {
                    usageError = args[i];
                    break goodUsage;
                }
                if (opt == -2) {
                    // Compatibility with Cocoon Rhino fork
                    opt = -1;
                } else if (!Context.isValidOptimizationLevel(opt)) {
                    usageError = args[i];
                    break goodUsage;
                }
                shellContextFactory.setOptimizationLevel(opt);
                continue;
            }
            if (arg.equals(""-strict"")) {
                shellContextFactory.setStrictMode(true);
                errorReporter.setIsReportingWarnings(true);
                continue;
            }
            if (arg.equals(""-fatal-warnings"")) {
                shellContextFactory.setWarningAsError(true);
                continue;
            }
            if (arg.equals(""-e"")) {
                processStdin = false;
                if (++i == args.length) {
                    usageError = arg;
                    break goodUsage;
                }
                if (!global.initialized) {
                    global.init(shellContextFactory);
                }
                IProxy iproxy = new IProxy(IProxy.EVAL_INLINE_SCRIPT);
                iproxy.scriptText = args[i];
                shellContextFactory.call(iproxy);
                continue;
            }
            if (arg.equals(""-w"")) {
                errorReporter.setIsReportingWarnings(true);
                continue;
            }
            if (arg.equals(""-f"")) {
                processStdin = false;
                if (++i == args.length) {
                    usageError = arg;
                    break goodUsage;
                }
                fileList.addElement(args[i].equals(""-"") ? null : args[i]);
                continue;
            }
            if (arg.equals(""-sealedlib"")) {
                global.setSealedStdLib(true);
                continue;
            }
            if (arg.equals(""-debug"")) {
                shellContextFactory.setGeneratingDebug(true);
                continue;
            }
            if (arg.equals(""-?"") ||
                arg.equals(""-help"")) {
                // print usage message
                global.getOut().println(
                    ToolErrorReporter.getMessage(""msg.shell.usage"", Main.class.getName()));
                System.exit(1);
            }
            usageError = arg;
            break goodUsage;
        }
        // print error and usage message
        global.getOut().println(
            ToolErrorReporter.getMessage(""msg.shell.invalid"", usageError));
        global.getOut().println(
            ToolErrorReporter.getMessage(""msg.shell.usage"", Main.class.getName()));
        System.exit(1);
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,initJavaPolicySecuritySupport,"    private static void initJavaPolicySecuritySupport()
    {
        Throwable exObj;
        try {
            Class cl = Class.forName
                (""org.mozilla.javascript.tools.shell.JavaPolicySecurity"");
            securityImpl = (SecurityProxy)cl.newInstance();
            SecurityController.initGlobal(securityImpl);
            return;
        } catch (ClassNotFoundException ex) {
            exObj = ex;
        } catch (IllegalAccessException ex) {
            exObj = ex;
        } catch (InstantiationException ex) {
            exObj = ex;
        } catch (LinkageError ex) {
            exObj = ex;
        }
        throw Kit.initCause(new IllegalStateException(
            ""Can not load security support: ""+exObj), exObj);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,processSource,"    public static void processSource(Context cx, String filename)
    {
        if (filename == null || filename.equals(""-"")) {
            PrintStream ps = global.getErr();
            if (filename == null) {
                // print implementation version
                ps.println(cx.getImplementationVersion());
            }

            // Use the interpreter for interactive input
            cx.setOptimizationLevel(-1);

            BufferedReader in = new BufferedReader
                (new InputStreamReader(global.getIn()));
            int lineno = 1;
            boolean hitEOF = false;
            while (!hitEOF) {
            	String[] prompts = global.getPrompts(cx);
                if (filename == null)
                    ps.print(prompts[0]);
                ps.flush();
                String source = """";

                // Collect lines of source to compile.
                while (true) {
                    String newline;
                    try {
                        newline = in.readLine();
                    }
                    catch (IOException ioe) {
                        ps.println(ioe.toString());
                        break;
                    }
                    if (newline == null) {
                        hitEOF = true;
                        break;
                    }
                    source = source + newline + ""\n"";
                    lineno++;
                    if (cx.stringIsCompilableUnit(source))
                        break;
                    ps.print(prompts[1]);
                }
                Script script = loadScriptFromSource(cx, source, ""<stdin>"",
                                                     lineno, null);
                if (script != null) {
                    Object result = evaluateScript(script, cx, global);
                    // Avoid printing out undefined or function definitions.
                    if (result != Context.getUndefinedValue() &&
                        !(result instanceof Function &&
                          source.trim().startsWith(""function"")))
                    {
                        try {
                            ps.println(Context.toString(result));
                        } catch (RhinoException rex) {
                            ToolErrorReporter.reportException(
                                cx.getErrorReporter(), rex);
                        }
                    }
                    NativeArray h = global.history;
                    h.put((int)h.getLength(), h, source);
                }
            }
            ps.println();
        } else {
            processFile(cx, global, filename);
        }
        System.gc();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,processFile,"    public static void processFile(Context cx, Scriptable scope,
                                   String filename)
    {
        if (securityImpl == null) {
            processFileSecure(cx, scope, filename, null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,processFileSecure,"    static void processFileSecure(Context cx, Scriptable scope,
                                  String path, Object securityDomain)
    {
        Script script;
        if (path.endsWith("".class"")) {
            script = loadCompiledScript(cx, path, securityDomain);
        } else {
            String source = (String)readFileOrUrl(path, true);
            if (source == null) {
                exitCode = EXITCODE_FILE_NOT_FOUND;
                return;
            }

            // Support the executable script #! syntax:  If
            // the first line begins with a '#', treat the whole
            // line as a comment.
            if (source.length() > 0 && source.charAt(0) == '#') {
                for (int i = 1; i != source.length(); ++i) {
                    int c = source.charAt(i);
                    if (c == '\n' || c == '\r') {
                        source = source.substring(i);
                        break;
                    }
                }
            }
            script = loadScriptFromSource(cx, source, path, 1, securityDomain);
        }
        if (script != null) {
            evaluateScript(script, cx, scope);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,loadScriptFromSource,"    public static Script loadScriptFromSource(Context cx, String scriptSource,
                                              String path, int lineno,
                                              Object securityDomain)
    {
        try {
            return cx.compileString(scriptSource, path, lineno,
                                    securityDomain);
        } catch (EvaluatorException ee) {
            // Already printed message.
            exitCode = EXITCODE_RUNTIME_ERROR;
        } catch (RhinoException rex) {
            ToolErrorReporter.reportException(
                cx.getErrorReporter(), rex);
            exitCode = EXITCODE_RUNTIME_ERROR;
        } catch (VirtualMachineError ex) {
            // Treat StackOverflow and OutOfMemory as runtime errors
            ex.printStackTrace();
            String msg = ToolErrorReporter.getMessage(
                ""msg.uncaughtJSException"", ex.toString());
            exitCode = EXITCODE_RUNTIME_ERROR;
            Context.reportError(msg);
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,loadCompiledScript,"    private static Script loadCompiledScript(Context cx, String path,
                                             Object securityDomain)
    {
        byte[] data = (byte[])readFileOrUrl(path, false);
        if (data == null) {
            exitCode = EXITCODE_FILE_NOT_FOUND;
            return null;
        }
        // XXX: For now extract class name of compiled Script from path
        // instead of parsing class bytes
        int nameStart = path.lastIndexOf('/');
        if (nameStart < 0) {
            nameStart = 0;
        } else {
            ++nameStart;
        }
        int nameEnd = path.lastIndexOf('.');
        if (nameEnd < nameStart) {
            // '.' does not exist in path (nameEnd < 0)
            // or it comes before nameStart
            nameEnd = path.length();
        }
        String name = path.substring(nameStart, nameEnd);
        try {
            GeneratedClassLoader loader = SecurityController.createLoader(cx.getApplicationClassLoader(), securityDomain);
            Class clazz = loader.defineClass(name, data);
            loader.linkClass(clazz);
            if (!Script.class.isAssignableFrom(clazz)) {
                throw Context.reportRuntimeError(""msg.must.implement.Script"");
            }
            return (Script) clazz.newInstance();
         } catch (RhinoException rex) {
            ToolErrorReporter.reportException(
                cx.getErrorReporter(), rex);
            exitCode = EXITCODE_RUNTIME_ERROR;
        } catch (IllegalAccessException iaex) {
            exitCode = EXITCODE_RUNTIME_ERROR;
            Context.reportError(iaex.toString());
        } catch (InstantiationException inex) {
            exitCode = EXITCODE_RUNTIME_ERROR;
            Context.reportError(inex.toString());
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,evaluateScript,"    public static Object evaluateScript(Script script, Context cx,
                                        Scriptable scope)
    {
        try {
            return script.exec(cx, scope);
        } catch (RhinoException rex) {
            ToolErrorReporter.reportException(
                cx.getErrorReporter(), rex);
            exitCode = EXITCODE_RUNTIME_ERROR;
        } catch (VirtualMachineError ex) {
            // Treat StackOverflow and OutOfMemory as runtime errors
            ex.printStackTrace();
            String msg = ToolErrorReporter.getMessage(
                ""msg.uncaughtJSException"", ex.toString());
            exitCode = EXITCODE_RUNTIME_ERROR;
            Context.reportError(msg);
        }
        return Context.getUndefinedValue();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getIn,"    public static InputStream getIn() {
        return getGlobal().getIn();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setIn,"    public static void setIn(InputStream in) {
        getGlobal().setIn(in);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getOut,"    public static PrintStream getOut() {
        return getGlobal().getOut();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setOut,"    public static void setOut(PrintStream out) {
        getGlobal().setOut(out);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,getErr,"    public static PrintStream getErr() {
        return getGlobal().getErr();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,setErr,"    public static void setErr(PrintStream err) {
        getGlobal().setErr(err);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Main.java,readFileOrUrl,"    private static Object readFileOrUrl(String path, boolean convertToString)
    {
        URL url = null;
        // Assume path is URL if it contains dot and there are at least
        // 2 characters in the protocol part. The later allows under Windows
        // to interpret paths with driver letter as file, not URL.
        if (path.indexOf(':') >= 2) {
            try {
                url = new URL(path);
            } catch (MalformedURLException ex) {
            }
        }

        InputStream is = null;
        int capacityHint = 0;
        if (url == null) {
            File file = new File(path);
            capacityHint = (int)file.length();
            try {
                is = new FileInputStream(file);
            } catch (IOException ex) {
                Context.reportError(ToolErrorReporter.getMessage(
                    ""msg.couldnt.open"", path));
                return null;
            }
        } else {
            try {
                URLConnection uc = url.openConnection();
                is = uc.getInputStream();
                capacityHint = uc.getContentLength();
                // Ignore insane values for Content-Length
                if (capacityHint > (1 << 20)) {
                    capacityHint = -1;
                }
            } catch (IOException ex) {
                Context.reportError(ToolErrorReporter.getMessage(
                    ""msg.couldnt.open.url"", url.toString(), ex.toString()));
                return null;
            }
        }
        if (capacityHint <= 0) {
            capacityHint = 4096;
        }

        byte[] data;
        try {
            try {
                data = Kit.readStream(is, capacityHint);
            } finally {
                is.close();
            }
        } catch (IOException ex) {
            Context.reportError(ex.toString());
            return null;
        }

        Object result;
        if (!convertToString) {
            result = data;
        } else {
            // Convert to String using the default encoding
            // XXX: Use 'charset=' argument of Content-Type if URL?
            result = new String(data);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellContextFactory.java,hasFeature,"    protected boolean hasFeature(Context cx, int featureIndex)
    {
        switch (featureIndex) {
          case Context.FEATURE_STRICT_VARS:
          case Context.FEATURE_STRICT_EVAL:
          case Context.FEATURE_STRICT_MODE:
            return strictMode;

          case Context.FEATURE_WARNING_AS_ERROR:
            return warningAsError;
        }
        return super.hasFeature(cx, featureIndex);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellContextFactory.java,onContextCreated,"    protected void onContextCreated(Context cx)
    {
        cx.setLanguageVersion(languageVersion);
        cx.setOptimizationLevel(optimizationLevel);
        if (errorReporter != null) {
            cx.setErrorReporter(errorReporter);
        }
        cx.setGeneratingDebug(generatingDebug);
        super.onContextCreated(cx);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellContextFactory.java,setStrictMode,"    public void setStrictMode(boolean flag)
    {
        checkNotSealed();
        this.strictMode = flag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellContextFactory.java,setWarningAsError,"    public void setWarningAsError(boolean flag)
    {
        checkNotSealed();
        this.warningAsError = flag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellContextFactory.java,setLanguageVersion,"    public void setLanguageVersion(int version)
    {
        Context.checkLanguageVersion(version);
        checkNotSealed();
        this.languageVersion = version;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellContextFactory.java,setOptimizationLevel,"    public void setOptimizationLevel(int optimizationLevel)
    {
        Context.checkOptimizationLevel(optimizationLevel);
        checkNotSealed();
        this.optimizationLevel = optimizationLevel;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellContextFactory.java,setErrorReporter,"    public void setErrorReporter(ErrorReporter errorReporter)
    {
        if (errorReporter == null) throw new IllegalArgumentException();
        this.errorReporter = errorReporter;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ShellContextFactory.java,setGeneratingDebug,"    public void setGeneratingDebug(boolean generatingDebug)
    {
        this.generatingDebug = generatingDebug;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,create,"    static Namespace create(Scriptable scope, Namespace prototype, XmlNode.Namespace namespace) {
        Namespace rv = new Namespace();
        rv.setParentScope(scope);
        rv.prototype = prototype;
        rv.setPrototype(prototype);
        rv.ns = namespace;
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getDelegate,"    final XmlNode.Namespace getDelegate() {
        return ns;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,exportAsJSClass,"    public void exportAsJSClass(boolean sealed) {
        exportAsJSClass(MAX_PROTOTYPE_ID, this.getParentScope(), sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,uri,"    public String uri() {
        return ns.getUri();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,prefix,"    public String prefix() {
        return ns.getPrefix();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,toString,"    public String toString() {
        return uri();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,toLocaleString,"    public String toLocaleString() {
        return toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,equals,"    private boolean equals(Namespace n) {
        return uri().equals(n.uri());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,equals,"    public boolean equals(Object obj) {
        if (!(obj instanceof Namespace)) return false;
        return equals((Namespace)obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,equivalentValues,"    protected Object equivalentValues(Object value) {
        if (!(value instanceof Namespace)) return Scriptable.NOT_FOUND;
        boolean result = equals((Namespace)value);
        return result ? Boolean.TRUE : Boolean.FALSE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getClassName,"    public String getClassName() {
        return ""Namespace"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getDefaultValue,"    public Object getDefaultValue(Class hint) {
        return uri();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return super.getMaxInstanceId() + MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        int id;
// #generated# Last update: 2007-08-20 08:23:22 EDT
        L0: { id = 0; String X = null;
            int s_length = s.length();
            if (s_length==3) { X=""uri"";id=Id_uri; }
            else if (s_length==6) { X=""prefix"";id=Id_prefix; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_prefix:
          case Id_uri:
            attr = PERMANENT | READONLY;
            break;
          default: throw new IllegalStateException();
        }
        return instanceIdInfo(attr, super.getMaxInstanceId() + id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_prefix: return ""prefix"";
          case Id_uri: return ""uri"";
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_prefix:
            if (ns.getPrefix() == null) return Undefined.instance;
            return ns.getPrefix();
          case Id_uri:
            return ns.getUri();
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-08-20 08:23:22 EDT
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==8) {
                c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
            }
            else if (s_length==11) { X=""constructor"";id=Id_constructor; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=2; s=""constructor""; break;
          case Id_toString:    arity=0; s=""toString"";    break;
          case Id_toSource:    arity=0; s=""toSource"";    break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(NAMESPACE_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,execIdCall,"    public Object execIdCall(IdFunctionObject f,
                             Context cx,
                             Scriptable scope,
                             Scriptable thisObj,
                             Object[] args)
    {
        if (!f.hasTag(NAMESPACE_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor:
            return jsConstructor(cx, (thisObj == null), args);
          case Id_toString:
            return realThis(thisObj, f).toString();
          case Id_toSource:
            return realThis(thisObj, f).js_toSource();
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,realThis,"    private Namespace realThis(Scriptable thisObj, IdFunctionObject f) {
        if(!(thisObj instanceof Namespace))
            throw incompatibleCallError(f);
        return (Namespace)thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,newNamespace,"    Namespace newNamespace(String uri) {
        Namespace prototype = (this.prototype == null) ? this : this.prototype;
        return create( this.getParentScope(), prototype, XmlNode.Namespace.create(uri) );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,newNamespace,"    Namespace newNamespace(String prefix, String uri) {
        if (prefix == null) return newNamespace(uri);
        Namespace prototype = (this.prototype == null) ? this : this.prototype;
        return create( this.getParentScope(), prototype, XmlNode.Namespace.create(prefix, uri) );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,constructNamespace,"    Namespace constructNamespace(Object uriValue) {
        String prefix;
        String uri;

        if (uriValue instanceof Namespace) {
            Namespace ns = (Namespace)uriValue;
            prefix = ns.prefix();
            uri = ns.uri();
        } else if (uriValue instanceof QName) {
            QName qname = (QName)uriValue;
            uri = qname.uri();
            if (uri != null) {
                //    TODO    Is there a way to push this back into QName so that we can make prefix() private?
                prefix = qname.prefix();
            } else {
                uri = qname.toString();
                prefix = null;
            }
        } else {
            uri = ScriptRuntime.toString(uriValue);
            prefix = (uri.length() == 0) ? """" : null;
        }

        return newNamespace(prefix, uri);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,castToNamespace,"    Namespace castToNamespace(Object namespaceObj) {
        if (namespaceObj instanceof Namespace) {
            return (Namespace)namespaceObj;
        }
        return constructNamespace(namespaceObj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,constructNamespace,"    private Namespace constructNamespace(Object prefixValue, Object uriValue) {
        String prefix;
        String uri;

        if (uriValue instanceof QName) {
            QName qname = (QName)uriValue;
            uri = qname.uri();
            if (uri == null) {
                uri = qname.toString();
            }
        } else {
            uri = ScriptRuntime.toString(uriValue);
        }

        if (uri.length() == 0) {
            if (prefixValue == Undefined.instance) {
                prefix = """";
            } else {
                prefix = ScriptRuntime.toString(prefixValue);
                if (prefix.length() != 0) {
                    throw ScriptRuntime.typeError(
                        ""Illegal prefix '""+prefix+""' for 'no namespace'."");
                }
            }
        } else if (prefixValue == Undefined.instance) {
            prefix = """";
        } else if (!XMLName.accept(prefixValue)) {
            prefix = """";
        } else {
            prefix = ScriptRuntime.toString(prefixValue);
        }

        return newNamespace(prefix, uri);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,constructNamespace,"    private Namespace constructNamespace() {
        return newNamespace("""", """");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,jsConstructor,"    private Object jsConstructor(Context cx, boolean inNewExpr, Object[] args)
    {
        if (!inNewExpr && args.length == 1) {
            return castToNamespace(args[0]);
        }

        if (args.length == 0) {
            return constructNamespace();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,js_toSource,"    private String js_toSource()
    {
        StringBuffer sb = new StringBuffer();
        sb.append('(');
        toSourceImpl(ns.getPrefix(), ns.getUri(), sb);
        sb.append(')');
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Namespace.java,toSourceImpl,"    static void toSourceImpl(String prefix, String uri, StringBuffer sb)
    {
        sb.append(""new Namespace("");
        if (uri.length() == 0) {
            if (!"""".equals(prefix)) throw new IllegalArgumentException(prefix);
        } else {
            sb.append('\'');
            if (prefix != null) {
                sb.append(ScriptRuntime.escapeString(prefix, '\''));
                sb.append(""', '"");
            }
            sb.append(ScriptRuntime.escapeString(uri, '\''));
            sb.append('\'');
        }
        sb.append(')');
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,create,"    static QName create(XMLLibImpl lib, Scriptable scope, QName prototype, XmlNode.QName delegate) {
        QName rv = new QName();
        rv.lib = lib;
        rv.setParentScope(scope);
        rv.prototype = prototype;
        rv.setPrototype(prototype);
        rv.delegate = delegate;
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,exportAsJSClass,"    void exportAsJSClass(boolean sealed) {
        exportAsJSClass(MAX_PROTOTYPE_ID, getParentScope(), sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,toString,"    public String toString() {
        //    ECMA357 13.3.4.2
        if (delegate.getNamespace() == null) {
            return ""*::"" + localName();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,localName,"    public String localName() {
        if (delegate.getLocalName() == null) return ""*"";
        return delegate.getLocalName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,prefix,"    String prefix() {
        if (delegate.getNamespace() == null) return null;
        return delegate.getNamespace().getPrefix();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,uri,"    String uri() {
        if (delegate.getNamespace() == null) return null;
        return delegate.getNamespace().getUri();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,toNodeQname,"    final XmlNode.QName toNodeQname() {
        return delegate;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getDelegate,"    final XmlNode.QName getDelegate() {
        return delegate;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,equals,"    public boolean equals(Object obj) {
        if(!(obj instanceof QName)) return false;
        return equals((QName)obj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,equivalentValues,"    protected Object equivalentValues(Object value)
    {
        if(!(value instanceof QName)) return Scriptable.NOT_FOUND;
        boolean result = equals((QName)value);
        return result ? Boolean.TRUE : Boolean.FALSE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,equals,"    private boolean equals(QName q) {
        return this.delegate.isEqualTo(q.delegate);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getClassName,"    public String getClassName() {
        return ""QName"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getDefaultValue,"    public Object getDefaultValue(Class hint) {
        return toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return super.getMaxInstanceId() + MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s)
    {
        int id;
// #generated# Last update: 2007-08-20 08:21:41 EDT
        L0: { id = 0; String X = null;
            int s_length = s.length();
            if (s_length==3) { X=""uri"";id=Id_uri; }
            else if (s_length==9) { X=""localName"";id=Id_localName; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_localName:
          case Id_uri:
            attr = PERMANENT | READONLY;
            break;
          default: throw new IllegalStateException();
        }
        return instanceIdInfo(attr, super.getMaxInstanceId() + id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_localName: return ""localName"";
          case Id_uri: return ""uri"";
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_localName: return localName();
          case Id_uri: return uri();
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-08-20 08:21:41 EDT
        L0: { id = 0; String X = null; int c;
            int s_length = s.length();
            if (s_length==8) {
                c=s.charAt(3);
                if (c=='o') { X=""toSource"";id=Id_toSource; }
                else if (c=='t') { X=""toString"";id=Id_toString; }
            }
            else if (s_length==11) { X=""constructor"";id=Id_constructor; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_constructor: arity=2; s=""constructor""; break;
          case Id_toString:    arity=0; s=""toString"";    break;
          case Id_toSource:    arity=0; s=""toSource"";    break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(QNAME_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,execIdCall,"    public Object execIdCall(IdFunctionObject f,
                             Context cx,
                             Scriptable scope,
                             Scriptable thisObj,
                             Object[] args)
    {
        if (!f.hasTag(QNAME_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_constructor:
            return jsConstructor(cx, (thisObj == null), args);
          case Id_toString:
            return realThis(thisObj, f).toString();
          case Id_toSource:
            return realThis(thisObj, f).js_toSource();
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,realThis,"    private QName realThis(Scriptable thisObj, IdFunctionObject f)
    {
        if(!(thisObj instanceof QName))
            throw incompatibleCallError(f);
        return (QName)thisObj;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,newQName,"    QName newQName(XMLLibImpl lib, String q_uri, String q_localName, String q_prefix) {
        QName prototype = this.prototype;
        if (prototype == null) {
            prototype = this;
        }
        XmlNode.Namespace ns = null;
        if (q_prefix != null) {
            ns = XmlNode.Namespace.create(q_uri, q_prefix);
        } else if (q_uri != null) {
            ns = XmlNode.Namespace.create(q_uri);
        } else {
            ns = null;
        }
        if (q_localName != null && q_localName.equals(""*"")) q_localName = null;
        return create(lib, this.getParentScope(), prototype, XmlNode.QName.create(ns, q_localName));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,constructQName,"    QName constructQName(XMLLibImpl lib, Context cx, Object namespace, Object name) {
        String nameString = null;
        if (name instanceof QName) {
            if (namespace == Undefined.instance) {
                return (QName)name;
            } else {
                nameString = ((QName)name).localName();
            }
        }
        if (name == Undefined.instance) {
            nameString = """";
        } else {
            nameString = ScriptRuntime.toString(name);
        }

        if (namespace == Undefined.instance) {
            if (""*"".equals(nameString)) {
                namespace = null;
            } else {
                namespace = lib.getDefaultNamespace(cx);
            }
        }
        Namespace namespaceNamespace = null;
        if (namespace == null) {
            //    leave as null
        } else if (namespace instanceof Namespace) {
            namespaceNamespace = (Namespace)namespace;
        } else {
            namespaceNamespace = lib.newNamespace(ScriptRuntime.toString(namespace));
        }
        String q_localName = nameString;
        String q_uri;
        String q_prefix;
        if (namespace == null) {
            q_uri = null;
            q_prefix = null;    //    corresponds to undefined; see QName class
        } else {
            q_uri = namespaceNamespace.uri();
            q_prefix = namespaceNamespace.prefix();
        }
        return newQName(lib, q_uri, q_localName, q_prefix);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,constructQName,"    QName constructQName(XMLLibImpl lib, Context cx, Object nameValue) {
        return constructQName(lib, cx, Undefined.instance, nameValue);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,castToQName,"    QName castToQName(XMLLibImpl lib, Context cx, Object qnameValue) {
        if (qnameValue instanceof QName) {
            return (QName)qnameValue;
        }
        return constructQName(lib, cx, qnameValue);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,jsConstructor,"    private Object jsConstructor(Context cx, boolean inNewExpr, Object[] args) {
        //    See ECMA357 13.3.2
        if (!inNewExpr && args.length == 1) {
            return castToQName(lib, cx, args[0]);
        }
        if (args.length == 0) {
            return constructQName(lib, cx, Undefined.instance);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,js_toSource,"    private String js_toSource() {
        StringBuffer sb = new StringBuffer();
        sb.append('(');
        toSourceImpl(uri(), localName(), prefix(), sb);
        sb.append(')');
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,QName.java,toSourceImpl,"    private static void toSourceImpl(String uri, String localName, String prefix, StringBuffer sb) {
        sb.append(""new QName("");
        if (uri == null && prefix == null) {
            if (!""*"".equals(localName)) {
                sb.append(""null, "");
            }
        } else {
            Namespace.toSourceImpl(prefix, uri, sb);
            sb.append("", "");
        }
        sb.append('\'');
        sb.append(ScriptRuntime.escapeString(localName, '\''));
        sb.append(""')"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,initialize,"    void initialize(XmlNode node) {
        this.node = node;
        this.node.setXml(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getXML,"    final XML getXML() {
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,replaceWith,"    void replaceWith(XML value) {
        //    We use the underlying document structure if the node is not
        //    ""standalone,"" but we need to just replace the XmlNode instance
        //    otherwise
        if (this.node.parent() != null || false) {
            this.node.replaceWith(value.node);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,makeXmlFromString,"    XML makeXmlFromString(XMLName name, String value) {
        try {
            return newTextElementXML(this.node, name.toQname(), value.toString());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getAnnotation,"    XmlNode getAnnotation() {
        return node;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,get,"    public Object get(int index, Scriptable start) {
        if (index == 0) {
            return this;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,has,"    public boolean has(int index, Scriptable start) {
        return (index == 0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,put,"    public void put(int index, Scriptable start, Object value) {
        //    TODO    Clarify the following comment and add a reference to the spec
        //    The comment: Spec says assignment to indexed XML object should return type error
        throw ScriptRuntime.typeError(""Assignment to indexed XML is not allowed"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getIds,"    public Object[] getIds() {
        if (isPrototype()) {
            return new Object[0];",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,delete,"    public void delete(int index) {
        if (index == 0) {
            this.remove();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,hasXMLProperty,"    boolean hasXMLProperty(XMLName xmlName) {
        if (isPrototype()) {
            return getMethod(xmlName.localName()) != NOT_FOUND;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getXMLProperty,"    Object getXMLProperty(XMLName xmlName) {
        if (isPrototype()) {
            return getMethod(xmlName.localName());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getNodeQname,"    XmlNode.QName getNodeQname() {
        return this.node.getQname();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getChildren,"    XML[] getChildren() {
        if (!isElement()) return null;
        XmlNode[] children = this.node.getMatchingChildren(XmlNode.Filter.TRUE);
        XML[] rv = new XML[children.length];
        for (int i=0; i<rv.length; i++) {
            rv[i] = toXML(children[i]);
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getAttributes,"    XML[] getAttributes() {
        XmlNode[] attributes = this.node.getAttributes();
        XML[] rv = new XML[attributes.length];
        for (int i=0; i<rv.length; i++) {
            rv[i] = toXML(attributes[i]);
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getPropertyList,"    XMLList getPropertyList(XMLName name) {
        return name.getMyValueOn(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,deleteXMLProperty,"    void deleteXMLProperty(XMLName name) {
        XMLList list = getPropertyList(name);
        for (int i=0; i<list.length(); i++) {
            list.item(i).node.deleteMe();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,putXMLProperty,"    void putXMLProperty(XMLName xmlName, Object value) {
        if (isPrototype()) {
            //    TODO    Is this really a no-op?  Check the spec to be sure",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,hasOwnProperty,"    boolean hasOwnProperty(XMLName xmlName) {
        boolean hasProperty = false;

        if (isPrototype()) {
            String property = xmlName.localName();
            hasProperty = (0 != findPrototypeId(property));
        } else {
            hasProperty = (getPropertyList(xmlName).length() > 0);
        }

        return hasProperty;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,jsConstructor,"    protected Object jsConstructor(Context cx, boolean inNewExpr, Object[] args) {
        if (args.length == 0 || args[0] == null || args[0] == Undefined.instance) {
            args = new Object[] { """" };
        }
        //    ECMA 13.4.2 does not appear to specify what to do if multiple arguments are sent.
        XML toXml = ecmaToXml(args[0]);
        if (inNewExpr) {
            return toXml.copy();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getExtraMethodSource,"    public Scriptable getExtraMethodSource(Context cx) {
        if (hasSimpleContent()) {
            String src = toString();
            return ScriptRuntime.toObjectOrNull(cx, src);
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,removeChild,"    void removeChild(int index) {
        this.node.removeChild(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,normalize,"    void normalize() {
        this.node.normalize();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,toXML,"    private XML toXML(XmlNode node) {
        if (node.getXml() == null) {
            node.setXml(newXML(node));
        }
        return node.getXml();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setAttribute,"    void setAttribute(XMLName xmlName, Object value) {
        if (!isElement()) throw new IllegalStateException(""Can only set attributes on elements."");
        //    TODO    Is this legal, but just not ""supported""?  If so, support it.
        if (xmlName.uri() == null && xmlName.localName().equals(""*"")) {
            throw ScriptRuntime.typeError(""@* assignment not supported."");
        }
        this.node.setAttribute(xmlName.toQname(), ScriptRuntime.toString(value));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,remove,"    void remove() {
        this.node.deleteMe();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,addMatches,"    void addMatches(XMLList rv, XMLName name) {
        name.addMatches(rv, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,elements,"    XMLList elements(XMLName name) {
        XMLList rv = newXMLList();
        rv.setTargets(this, name.toQname());
        //    TODO    Should have an XMLNode.Filter implementation based on XMLName
        XmlNode[] elements = this.node.getMatchingChildren(XmlNode.Filter.ELEMENT);
        for (int i=0; i<elements.length; i++) {
            if (name.matches( toXML(elements[i]) )) {
                rv.addToList( toXML(elements[i]) );
            }
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,child,"    XMLList child(XMLName xmlName) {
        //    TODO    Right now I think this method would allow child( ""@xxx"" ) to return the xxx attribute, which is wrong

        XMLList rv = newXMLList();

        //    TODO    Should this also match processing instructions?  If so, we have to change the filter and also the XMLName
        //            class to add an acceptsProcessingInstruction() method

        XmlNode[] elements = this.node.getMatchingChildren(XmlNode.Filter.ELEMENT);
        for (int i=0; i<elements.length; i++) {
            if (xmlName.matchesElement(elements[i].getQname())) {
                rv.addToList( toXML(elements[i]) );
            }
        }
        rv.setTargets(this, xmlName.toQname());
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,replace,"    XML replace(XMLName xmlName, Object xml) {
        putXMLProperty(xmlName, xml);
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,children,"    XMLList children() {
        XMLList rv = newXMLList();
        XMLName all = XMLName.formStar();
        rv.setTargets(this, all.toQname());
        XmlNode[] children = this.node.getMatchingChildren(XmlNode.Filter.TRUE);
        for (int i=0; i<children.length; i++) {
            rv.addToList( toXML(children[i]) );
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,child,"    XMLList child(int index) {
        //    ECMA357 13.4.4.6 (numeric case)
        XMLList result = newXMLList();
        result.setTargets(this, null);
        if (index >= 0 && index < this.node.getChildCount()) {
            result.addToList(getXmlChild(index));
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getXmlChild,"    XML getXmlChild(int index) {
        XmlNode child = this.node.getChild(index);
        if (child.getXml() == null) {
            child.setXml(newXML(child));
        }
        return child.getXml();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,childIndex,"    int childIndex() {
        return this.node.getChildIndex();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,contains,"    boolean contains(Object xml) {
        if (xml instanceof XML) {
            return equivalentXml(xml);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,equivalentXml,"    boolean equivalentXml(Object target) {
        boolean result = false;

        if (target instanceof XML) {
            //    TODO    This is a horrifyingly inefficient way to do this so we should make it better.  It may also not work.
            return this.node.toXmlString(getProcessor()).equals( ((XML)target).node.toXmlString(getProcessor()) );
        } else if (target instanceof XMLList) {
            //    TODO    Is this right?  Check the spec ...
            XMLList otherList = (XMLList) target;

            if (otherList.length() == 1) {
                result = equivalentXml(otherList.getXML());
            }
        } else if (hasSimpleContent()) {
            String otherStr = ScriptRuntime.toString(target);

            result = toString().equals(otherStr);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,copy,"    XMLObjectImpl copy() {
        return newXML( this.node.copy() );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,hasSimpleContent,"    boolean hasSimpleContent() {
        if (isComment() || isProcessingInstruction()) return false;
        if (isText() || this.node.isAttributeType()) return true;
        return !this.node.hasChildElement();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,hasComplexContent,"    boolean hasComplexContent() {
        return !hasSimpleContent();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,length,"    int length() {
        return 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,is,"    boolean is(XML other) {
        return this.node.isSameNode(other.node);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,nodeKind,"    Object nodeKind() {
        return ecmaClass();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,parent,"    Object parent() {
        XmlNode parent = this.node.parent();
        if (parent == null) return null;
        return newXML(this.node.parent());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,propertyIsEnumerable,"    boolean propertyIsEnumerable(Object name)
    {
        boolean result;
        if (name instanceof Integer) {
            result = (((Integer)name).intValue() == 0);
        } else if (name instanceof Number) {
            double x = ((Number)name).doubleValue();
            // Check that number is positive 0
            result = (x == 0.0 && 1.0 / x > 0);
        } else {
            result = ScriptRuntime.toString(name).equals(""0"");
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,valueOf,"    Object valueOf() {
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,comments,"    XMLList comments() {
        XMLList rv = newXMLList();
        this.node.addMatchingChildren(rv, XmlNode.Filter.COMMENT);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,text,"    XMLList text() {
        XMLList rv = newXMLList();
        this.node.addMatchingChildren(rv, XmlNode.Filter.TEXT);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,processingInstructions,"    XMLList processingInstructions(XMLName xmlName) {
        XMLList rv = newXMLList();
        this.node.addMatchingChildren(rv, XmlNode.Filter.PROCESSING_INSTRUCTION(xmlName));
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getNodesForInsert,"    private XmlNode[] getNodesForInsert(Object value) {
        if (value instanceof XML) {
            return new XmlNode[] { ((XML)value).node };",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,replace,"    XML replace(int index, Object xml) {
        XMLList xlChildToReplace = child(index);
        if (xlChildToReplace.length() > 0) {
            // One exists an that index
            XML childToReplace = xlChildToReplace.item(0);
            insertChildAfter(childToReplace, xml);
            removeChild(index);
        }
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,prependChild,"    XML prependChild(Object xml) {
        if (this.node.isParentType()) {
            this.node.insertChildrenAt(0, getNodesForInsert(xml));
        }
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,appendChild,"    XML appendChild(Object xml) {
        if (this.node.isParentType()) {
            XmlNode[] nodes = getNodesForInsert(xml);
            this.node.insertChildrenAt(this.node.getChildCount(), nodes);
        }
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getChildIndexOf,"    private int getChildIndexOf(XML child) {
        for (int i=0; i<this.node.getChildCount(); i++) {
            if (this.node.getChild(i).isSameNode(child.node)) {
                return i;
            }
        }
        return -1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,insertChildBefore,"    XML insertChildBefore(XML child, Object xml) {
        if (child == null) {
            // Spec says inserting before nothing is the same as appending
            appendChild(xml);
        } else {
            XmlNode[] toInsert = getNodesForInsert(xml);
            int index = getChildIndexOf(child);
            if (index != -1) {
                this.node.insertChildrenAt(index, toInsert);
            }
        }

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,insertChildAfter,"    XML insertChildAfter(XML child, Object xml) {
        if (child == null) {
            // Spec says inserting after nothing is the same as prepending
            prependChild(xml);
        } else {
            XmlNode[] toInsert = getNodesForInsert(xml);
            int index = getChildIndexOf(child);
            if (index != -1) {
                this.node.insertChildrenAt(index+1, toInsert);
            }
        }

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setChildren,"    XML setChildren(Object xml) {
        //    TODO    Have not carefully considered the spec but it seems to call for this
        if (!isElement()) return this;

        while(this.node.getChildCount() > 0) {
            this.node.removeChild(0);
        }
        XmlNode[] toInsert = getNodesForInsert(xml);
        // append new children
        this.node.insertChildrenAt(0, toInsert);

        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,addInScopeNamespace,"    private void addInScopeNamespace(Namespace ns) {
        if (!isElement()) {
            return;
        }
        //    See ECMA357 9.1.1.13
        //    in this implementation null prefix means ECMA undefined
        if (ns.prefix() != null) {
            if (ns.prefix().length() == 0 && ns.uri().length() == 0) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,inScopeNamespaces,"    Namespace[] inScopeNamespaces() {
        XmlNode.Namespace[] inScope = this.node.getInScopeNamespaces();
        return createNamespaces(inScope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,adapt,"    private XmlNode.Namespace adapt(Namespace ns) {
        if (ns.prefix() == null) {
            return XmlNode.Namespace.create(ns.uri());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,removeNamespace,"    XML removeNamespace(Namespace ns) {
        if (!isElement()) return this;
        this.node.removeNamespace(adapt(ns));
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,addNamespace,"    XML addNamespace(Namespace ns) {
        addInScopeNamespace(ns);
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,name,"    QName name() {
        if (isText() || isComment()) return null;
        if (isProcessingInstruction()) return newQName("""", this.node.getQname().getLocalName(), null);
        return newQName(node.getQname());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,namespaceDeclarations,"    Namespace[] namespaceDeclarations() {
        XmlNode.Namespace[] declarations = node.getNamespaceDeclarations();
        return createNamespaces(declarations);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,namespace,"    Namespace namespace(String prefix) {
        if (prefix == null) {
            return createNamespace( this.node.getNamespaceDeclaration() );",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,localName,"    String localName() {
        if (name() == null) return null;
        return name().localName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setLocalName,"    void setLocalName(String localName) {
        //    ECMA357 13.4.4.34
        if (isText() || isComment()) return;
        this.node.setLocalName(localName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setName,"    void setName(QName name) {
        //    See ECMA357 13.4.4.35
        if (isText() || isComment()) return;
        if (isProcessingInstruction()) {
            //    Spec says set the name URI to empty string and then set the [[Name]] property, but I understand this to do the same
            //    thing, unless we allow colons in processing instruction targets, which I think we do not.
            this.node.setLocalName(name.localName());
            return;
        }
        node.renameNode(name.getDelegate());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,setNamespace,"    void setNamespace(Namespace ns) {
        //    See ECMA357 13.4.4.36
        if (isText() || isComment() || isProcessingInstruction()) return;
        setName(newQName(ns.uri(), localName(), ns.prefix()));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,ecmaClass,"    final String ecmaClass() {
        //    See ECMA357 9.1

        //    TODO    See ECMA357 9.1.1 last paragraph for what defaults should be

        if (node.isTextType()) {
            return ""text"";",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,getClassName,"    public String getClassName() {
        //    TODO:    This appears to confuse the interpreter if we use the ""real"" class property from ECMA.  Otherwise this code
        //    would be:
        //    return ecmaClass();
        return ""XML"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,ecmaValue,"    private String ecmaValue() {
        return node.ecmaValue();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,ecmaToString,"    private String ecmaToString() {
        //    See ECMA357 10.1.1
        if (isAttribute() || isText()) {
            return ecmaValue();
        }
        if (this.hasSimpleContent()) {
            StringBuffer rv = new StringBuffer();
            for (int i=0; i < this.node.getChildCount(); i++) {
                XmlNode child = this.node.getChild(i);
                if (!child.isProcessingInstructionType() &&
                    !child.isCommentType())
                {
                    // TODO: Probably inefficient; taking clean non-optimized
                    // solution for now
                    XML x = new XML(getLib(), getParentScope(),
                                    (XMLObject)getPrototype(), child);
                    rv.append(x.toString());
                }
            }
            return rv.toString();
        }
        return toXMLString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,toString,"    public String toString() {
        return ecmaToString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,toXMLString,"    String toXMLString() {
        return this.node.ecmaToXMLString(getProcessor());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,isAttribute,"    final boolean isAttribute() {
        return node.isAttributeType();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,isComment,"    final boolean isComment() {
        return node.isCommentType();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,isText,"    final boolean isText() {
        return node.isTextType();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,isElement,"    final boolean isElement() {
        return node.isElementType();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,isProcessingInstruction,"    final boolean isProcessingInstruction() {
        return node.isProcessingInstructionType();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XML.java,toDomNode,"    org.w3c.dom.Node toDomNode() {
        return node.toDomNode();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,writeSetting,"    private void writeSetting(Scriptable target)
    {
        for (int i = 1; i <= MAX_INSTANCE_ID; ++i) {
            int id = super.getMaxInstanceId() + i;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,readSettings,"    private void readSettings(Scriptable source)
    {
        for (int i = 1; i <= MAX_INSTANCE_ID; ++i) {
            int id = super.getMaxInstanceId() + i;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,getMaxInstanceId,"    protected int getMaxInstanceId()
    {
        return super.getMaxInstanceId() + MAX_INSTANCE_ID;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,findInstanceIdInfo,"    protected int findInstanceIdInfo(String s) {
        int id;
// #generated# Last update: 2007-08-20 09:01:10 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 12: X=""prettyIndent"";id=Id_prettyIndent; break L;
            case 14: c=s.charAt(0);
                if (c=='i') { X=""ignoreComments"";id=Id_ignoreComments; }
                else if (c=='p') { X=""prettyPrinting"";id=Id_prettyPrinting; }
                break L;
            case 16: X=""ignoreWhitespace"";id=Id_ignoreWhitespace; break L;
            case 28: X=""ignoreProcessingInstructions"";id=Id_ignoreProcessingInstructions; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#

        if (id == 0) return super.findInstanceIdInfo(s);

        int attr;
        switch (id) {
          case Id_ignoreComments:
          case Id_ignoreProcessingInstructions:
          case Id_ignoreWhitespace:
          case Id_prettyIndent:
          case Id_prettyPrinting:
            attr = PERMANENT | DONTENUM;
            break;
          default: throw new IllegalStateException();
        }
        return instanceIdInfo(attr, super.getMaxInstanceId() + id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,getInstanceIdName,"    protected String getInstanceIdName(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_ignoreComments:               return ""ignoreComments"";
          case Id_ignoreProcessingInstructions: return ""ignoreProcessingInstructions"";
          case Id_ignoreWhitespace:             return ""ignoreWhitespace"";
          case Id_prettyIndent:                 return ""prettyIndent"";
          case Id_prettyPrinting:               return ""prettyPrinting"";
        }
        return super.getInstanceIdName(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,getInstanceIdValue,"    protected Object getInstanceIdValue(int id)
    {
        switch (id - super.getMaxInstanceId()) {
          case Id_ignoreComments:
            return ScriptRuntime.wrapBoolean(options.isIgnoreComments());
          case Id_ignoreProcessingInstructions:
            return ScriptRuntime.wrapBoolean(options.isIgnoreProcessingInstructions());
          case Id_ignoreWhitespace:
            return ScriptRuntime.wrapBoolean(options.isIgnoreWhitespace());
          case Id_prettyIndent:
            return ScriptRuntime.wrapInt(options.getPrettyIndent());
          case Id_prettyPrinting:
            return ScriptRuntime.wrapBoolean(options.isPrettyPrinting());
        }
        return super.getInstanceIdValue(id);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,setInstanceIdValue,"    protected void setInstanceIdValue(int id, Object value) {
        switch (id - super.getMaxInstanceId()) {
            case Id_ignoreComments:
                options.setIgnoreComments(ScriptRuntime.toBoolean(value));
                return;
            case Id_ignoreProcessingInstructions:
                options.setIgnoreProcessingInstructions(ScriptRuntime.toBoolean(value));
                return;
            case Id_ignoreWhitespace:
                options.setIgnoreWhitespace(ScriptRuntime.toBoolean(value));
                return;
            case Id_prettyIndent:
                options.setPrettyIndent(ScriptRuntime.toInt32(value));
                return;
            case Id_prettyPrinting:
                options.setPrettyPrinting(ScriptRuntime.toBoolean(value));
                return;
        }
        super.setInstanceIdValue(id, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,findPrototypeId,"    protected int findPrototypeId(String s)
    {
        int id;
// #generated# Last update: 2007-08-20 09:01:10 EDT
        L0: { id = 0; String X = null;
            int s_length = s.length();
            if (s_length==8) { X=""settings"";id=Id_settings; }
            else if (s_length==11) { X=""setSettings"";id=Id_setSettings; }
            else if (s_length==15) { X=""defaultSettings"";id=Id_defaultSettings; }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,initPrototypeId,"    protected void initPrototypeId(int id)
    {
        String s;
        int arity;
        switch (id) {
          case Id_defaultSettings:  arity=0; s=""defaultSettings"";  break;
          case Id_settings:         arity=0; s=""settings"";         break;
          case Id_setSettings:      arity=1; s=""setSettings"";      break;
          default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(XMLCTOR_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope,
                             Scriptable thisObj, Object[] args)
    {
        if (!f.hasTag(XMLCTOR_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        switch (id) {
          case Id_defaultSettings: {
            options.setDefault();
            Scriptable obj = cx.newObject(scope);
            writeSetting(obj);
            return obj;
          }
          case Id_settings: {
            Scriptable obj = cx.newObject(scope);
            writeSetting(obj);
            return obj;
          }
          case Id_setSettings: {
            if (args.length == 0
                || args[0] == null
                || args[0] == Undefined.instance)
            {
                options.setDefault();
            } else if (args[0] instanceof Scriptable) {
                readSettings((Scriptable)args[0]);
            }
            return Undefined.instance;
          }
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLCtor.java,hasInstance,"    public boolean hasInstance(Scriptable instance) {
        return (instance instanceof XML || instance instanceof XMLList);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toDomNode,"    public static org.w3c.dom.Node toDomNode(Object xmlObject) {
        //    Could return DocumentFragment for XMLList
        //    Probably a single node for XMLList with one element
        if (xmlObject instanceof XML) {
            return ((XML)xmlObject).toDomNode();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,init,"    public static void init(Context cx, Scriptable scope, boolean sealed) {
        XMLLibImpl lib = new XMLLibImpl(scope);
        XMLLib bound = lib.bindToScope(scope);
        if (bound == lib) {
            lib.exportToScope(sealed);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,qnamePrototype,"    QName qnamePrototype() {
        return qnamePrototype;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,globalScope,"    Scriptable globalScope() {
        return globalScope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,getProcessor,"    XmlProcessor getProcessor() {
        return options;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,exportToScope,"    private void exportToScope(boolean sealed) {
        xmlPrototype = newXML(XmlNode.createText(options, """"));
        xmlListPrototype = newXMLList();
        namespacePrototype = Namespace.create(this.globalScope, null, XmlNode.Namespace.GLOBAL);
        qnamePrototype = QName.create(this, this.globalScope, null, XmlNode.QName.create(XmlNode.Namespace.create(""""), """"));

        xmlPrototype.exportAsJSClass(sealed);
        xmlListPrototype.exportAsJSClass(sealed);
        namespacePrototype.exportAsJSClass(sealed);
        qnamePrototype.exportAsJSClass(sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toAttributeName,"    XMLName toAttributeName(Context cx, Object nameValue) {
        if (nameValue instanceof XMLName) {
            //    TODO    Will this always be an XMLName of type attribute name?",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,badXMLName,"    private static RuntimeException badXMLName(Object value)
    {
        String msg;
        if (value instanceof Number) {
            msg = ""Can not construct XML name from number: "";
        } else if (value instanceof Boolean) {
            msg = ""Can not construct XML name from boolean: "";
        } else if (value == Undefined.instance || value == null) {
            msg = ""Can not construct XML name from "";
        } else {
            throw new IllegalArgumentException(value.toString());
        }
        return ScriptRuntime.typeError(msg+ScriptRuntime.toString(value));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toXMLNameFromString,"    XMLName toXMLNameFromString(Context cx, String name) {
        return XMLName.create( getDefaultNamespaceURI(cx), name );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toXMLName,"    XMLName toXMLName(Context cx, Object nameValue) {
        XMLName result;

        if (nameValue instanceof XMLName) {
            result = (XMLName)nameValue;
        } else if (nameValue instanceof QName) {
            QName qname = (QName)nameValue;
            result = XMLName.formProperty(qname.uri(), qname.localName());
        } else if (nameValue instanceof String) {
            result = toXMLNameFromString(cx, (String)nameValue);
        } else if (nameValue instanceof Boolean
            || nameValue instanceof Number
            || nameValue == Undefined.instance
            || nameValue == null) {
            throw badXMLName(nameValue);
        } else {
            String name = ScriptRuntime.toString(nameValue);
            result = toXMLNameFromString(cx, name);
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toXMLNameOrIndex,"    XMLName toXMLNameOrIndex(Context cx, Object value)
    {
        XMLName result;

        if (value instanceof XMLName) {
            result = (XMLName)value;
        } else if (value instanceof String) {
            String str = (String)value;
            long test = ScriptRuntime.testUint32String(str);
            if (test >= 0) {
                ScriptRuntime.storeUint32Result(cx, test);
                result = null;
            } else {
                result = toXMLNameFromString(cx, str);
            }
        } else if (value instanceof Number) {
            double d = ((Number)value).doubleValue();
            long l = (long)d;
            if (l == d && 0 <= l && l <= 0xFFFFFFFFL) {
                ScriptRuntime.storeUint32Result(cx, l);
                result = null;
            } else {
                throw badXMLName(value);
            }
        } else if (value instanceof QName) {
            QName qname = (QName)value;
            String uri = qname.uri();
            boolean number = false;
            result = null;
            if (uri != null && uri.length() == 0) {
                // Only in this case qname.toString() can resemble uint32
                long test = ScriptRuntime.testUint32String(uri);
                if (test >= 0) {
                    ScriptRuntime.storeUint32Result(cx, test);
                    number = true;
                }
            }
            if (!number) {
                result = XMLName.formProperty(uri, qname.localName());
            }
        } else if (value instanceof Boolean
                   || value == Undefined.instance
                   || value == null)
        {
            throw badXMLName(value);
        } else {
            String str = ScriptRuntime.toString(value);
            long test = ScriptRuntime.testUint32String(str);
            if (test >= 0) {
                ScriptRuntime.storeUint32Result(cx, test);
                result = null;
            } else {
                result = toXMLNameFromString(cx, str);
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,addXMLObjects,"    Object addXMLObjects(Context cx, XMLObject obj1, XMLObject obj2)
    {
        XMLList listToAdd = newXMLList();

        if (obj1 instanceof XMLList) {
            XMLList list1 = (XMLList)obj1;
            if (list1.length() == 1) {
                listToAdd.addToList(list1.item(0));
            } else {
                // Might be xmlFragment + xmlFragment + xmlFragment + ...;
                // then the result will be an XMLList which we want to be an
                // rValue and allow it to be assigned to an lvalue.
                listToAdd = newXMLListFrom(obj1);
            }
        } else {
            listToAdd.addToList(obj1);
        }

        if (obj2 instanceof XMLList) {
            XMLList list2 = (XMLList)obj2;
            for (int i = 0; i < list2.length(); i++) {
                listToAdd.addToList(list2.item(i));
            }
        } else if (obj2 instanceof XML) {
            listToAdd.addToList(obj2);
        }

        return listToAdd;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,xmlPrimaryReference,"    private Ref xmlPrimaryReference(Context cx, XMLName xmlName, Scriptable scope) {
        XMLObjectImpl xmlObj;
        XMLObjectImpl firstXml = null;
        for (;;) {
            // XML object can only present on scope chain as a wrapper
            // of XMLWithScope
            if (scope instanceof XMLWithScope) {
                xmlObj = (XMLObjectImpl)scope.getPrototype();
                if (xmlObj.hasXMLProperty(xmlName)) {
                    break;
                }
                if (firstXml == null) {
                    firstXml = xmlObj;
                }
            }
            scope = scope.getParentScope();
            if (scope == null) {
                xmlObj = firstXml;
                break;
            }
        }

        // xmlObj == null corresponds to undefined as the target of
        // the reference
        if (xmlObj != null) {
            xmlName.initXMLObject(xmlObj);
        }
        return xmlName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,castToNamespace,"    Namespace castToNamespace(Context cx, Object namespaceObj) {
        return this.namespacePrototype.castToNamespace(namespaceObj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,getDefaultNamespaceURI,"    private String getDefaultNamespaceURI(Context cx) {
        return getDefaultNamespace(cx).uri();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,newNamespace,"    Namespace newNamespace(String uri) {
        return this.namespacePrototype.newNamespace(uri);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,getDefaultNamespace,"    Namespace getDefaultNamespace(Context cx) {
        if (cx == null) {
            cx = Context.getCurrentContext();
            if (cx == null) {
                return namespacePrototype;
            }
        }

        Object ns = ScriptRuntime.searchDefaultNamespace(cx);
        if (ns == null) {
            return namespacePrototype;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,createNamespaces,"    Namespace[] createNamespaces(XmlNode.Namespace[] declarations) {
        Namespace[] rv = new Namespace[declarations.length];
        for (int i=0; i<declarations.length; i++) {
            rv[i] = this.namespacePrototype.newNamespace(declarations[i].getPrefix(), declarations[i].getUri());
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,constructQName,"    QName constructQName(Context cx, Object namespace, Object name) {
        return this.qnamePrototype.constructQName(this, cx, namespace, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,newQName,"    QName newQName(String uri, String localName, String prefix) {
        return this.qnamePrototype.newQName(this, uri, localName, prefix);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,constructQName,"    QName constructQName(Context cx, Object nameValue) {
//        return constructQName(cx, Undefined.instance, nameValue);
        return this.qnamePrototype.constructQName(this, cx, nameValue);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,castToQName,"    QName castToQName(Context cx, Object qnameValue) {
        return this.qnamePrototype.castToQName(this, cx, qnameValue);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,newQName,"    QName newQName(XmlNode.QName qname) {
        return QName.create(this, this.globalScope, this.qnamePrototype, qname);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,newXML,"    XML newXML(XmlNode node) {
        return new XML(this, this.globalScope, this.xmlPrototype, node);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,newXMLFromJs,"    final XML newXMLFromJs(Object inputObject) {
        String frag;

        if (inputObject == null || inputObject == Undefined.instance) {
            frag = """";
        } else if (inputObject instanceof XMLObjectImpl) {
            // todo: faster way for XMLObjects?
            frag = ((XMLObjectImpl) inputObject).toXMLString();
        } else {
            frag = ScriptRuntime.toString(inputObject);
        }

        if (frag.trim().startsWith(""<>"")) {
            throw ScriptRuntime.typeError(""Invalid use of XML object anonymous tags <></>."");
        }

        if (frag.indexOf(""<"") == -1) {
            //    Solo text node
            return newXML(XmlNode.createText(options, frag));
        }
        return parse(frag);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,parse,"    private XML parse(String frag) {
        try {
            return newXML(XmlNode.createElement(options, getDefaultNamespaceURI(Context.getCurrentContext()), frag));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,ecmaToXml,"    final XML ecmaToXml(Object object) {
        //    See ECMA357 10.3
        if (object == null || object == Undefined.instance) throw ScriptRuntime.typeError(""Cannot convert "" + object + "" to XML"");
        if (object instanceof XML) return (XML)object;
        if (object instanceof XMLList) {
            XMLList list = (XMLList)object;
            if (list.getXML() != null) {
                return list.getXML();
            } else {
                throw ScriptRuntime.typeError(""Cannot convert list of >1 element to XML"");
            }
        }
        //    TODO    Technically we should fail on anything except a String, Number or Boolean
        //            See ECMA357 10.3
        // Extension: if object is a DOM node, use that to construct the XML
        // object.
        if (object instanceof Wrapper) {
            object = ((Wrapper) object).unwrap();
        }
        if (object instanceof org.w3c.dom.Node) {
            org.w3c.dom.Node node = (org.w3c.dom.Node) object;
            return newXML(XmlNode.createElementFromNode(node));
        }
        //    Instead we just blindly cast to a String and let them convert anything.
        String s = ScriptRuntime.toString(object);
        //    TODO    Could this get any uglier?
        if (s.length() > 0 && s.charAt(0) == '<') {
            return parse(s);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,newTextElementXML,"    final XML newTextElementXML(XmlNode reference, XmlNode.QName qname, String value) {
        return newXML(XmlNode.newElementWithText(options, reference, qname, value));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,newXMLList,"    XMLList newXMLList() {
        return new XMLList(this, this.globalScope, this.xmlListPrototype);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,newXMLListFrom,"    final XMLList newXMLListFrom(Object inputObject) {
        XMLList rv = newXMLList();

        if (inputObject == null || inputObject instanceof Undefined) {
            return rv;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toNodeQName,"    XmlNode.QName toNodeQName(Context cx, Object namespaceValue, Object nameValue) {
        // This is duplication of constructQName(cx, namespaceValue, nameValue)
        // but for XMLName

        String localName;

        if (nameValue instanceof QName) {
            QName qname = (QName)nameValue;
            localName = qname.localName();
        } else {
            localName = ScriptRuntime.toString(nameValue);
        }

        XmlNode.Namespace ns;
        if (namespaceValue == Undefined.instance) {
            if (""*"".equals(localName)) {
                ns = null;
            } else {
                ns = getDefaultNamespace(cx).getDelegate();
            }
        } else if (namespaceValue == null) {
            ns = null;
        } else if (namespaceValue instanceof Namespace) {
            ns = ((Namespace)namespaceValue).getDelegate();
        } else {
            ns = this.namespacePrototype.constructNamespace(namespaceValue).getDelegate();
        }

        if (localName != null && localName.equals(""*"")) localName = null;
        return XmlNode.QName.create(ns, localName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toNodeQName,"    XmlNode.QName toNodeQName(Context cx, String name, boolean attribute) {
        XmlNode.Namespace defaultNamespace = getDefaultNamespace(cx).getDelegate();
        if (name != null && name.equals(""*"")) {
            return XmlNode.QName.create(null, null);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toNodeQName,"    XmlNode.QName toNodeQName(Context cx, Object nameValue, boolean attribute) {
        if (nameValue instanceof XMLName) {
            return ((XMLName)nameValue).toQname();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,isXMLName,"    public boolean isXMLName(Context _cx, Object nameObj) {
        return XMLName.accept(nameObj);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,toDefaultXmlNamespace,"    public Object toDefaultXmlNamespace(Context cx, Object uriValue) {
        return this.namespacePrototype.constructNamespace(uriValue);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,escapeTextValue,"    public String escapeTextValue(Object o) {
        return options.escapeTextValue(o);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,escapeAttributeValue,"    public String escapeAttributeValue(Object o) {
        return options.escapeAttributeValue(o);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,nameRef,"    public Ref nameRef(Context cx, Object name, Scriptable scope, int memberTypeFlags) {
        if ((memberTypeFlags & Node.ATTRIBUTE_FLAG) == 0) {
            // should only be called foir cases like @name or @[expr]
            throw Kit.codeBug();
        }
        XMLName xmlName = toAttributeName(cx, name);
        return xmlPrimaryReference(cx, xmlName, scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLLibImpl.java,nameRef,"    public Ref nameRef(Context cx, Object namespace, Object name, Scriptable scope, int memberTypeFlags) {
        XMLName xmlName = XMLName.create(toNodeQName(cx, namespace, name), false, false);

        //    No idea what is coming in from the parser in this case; is it detecting the ""@""?
        if ((memberTypeFlags & Node.ATTRIBUTE_FLAG) != 0) {
            if (!xmlName.isAttributeName()) {
                xmlName.setAttributeName();
            }
        }

        return xmlPrimaryReference(cx, xmlName, scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getNodeList,"    XmlNode.List getNodeList() {
        return _annos;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,setTargets,"    void setTargets(XMLObjectImpl object, XmlNode.QName property) {
        targetObject = object;
        targetProperty = property;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getXmlFromAnnotation,"    private XML getXmlFromAnnotation(int index) {
        return getXML(_annos, index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getXML,"    XML getXML() {
        if (length() == 1) return getXmlFromAnnotation(0);
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,internalRemoveFromList,"    private void internalRemoveFromList(int index) {
        _annos.remove(index);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,replace,"    void replace(int index, XML xml) {
        if (index < length()) {
            XmlNode.List newAnnoList = new XmlNode.List();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,insert,"    private void insert(int index, XML xml) {
        if (index < length()) {
            XmlNode.List newAnnoList = new XmlNode.List();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getClassName,"    public String getClassName() {
        return ""XMLList"";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,get,"    public Object get(int index, Scriptable start) {
        //Log(""get index: "" + index);

        if (index >= 0 && index < length()) {
            return getXmlFromAnnotation(index);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,hasXMLProperty,"    boolean hasXMLProperty(XMLName xmlName) {
        boolean result = false;

        // Has now should return true if the property would have results > 0 or
        // if it's a method name
        String name = xmlName.localName();
        if ((getPropertyList(xmlName).length() > 0) ||
            (getMethod(name) != NOT_FOUND)) {
            result = true;
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,has,"    public boolean has(int index, Scriptable start) {
        return 0 <= index && index < length();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,putXMLProperty,"    void putXMLProperty(XMLName xmlName, Object value) {
        //Log(""put property: "" + name);

        // Special-case checks for undefined and null
        if (value == null) {
            value = ""null"";
        } else if (value instanceof Undefined) {
            value = ""undefined"";
        }

        if (length() > 1) {
            throw ScriptRuntime.typeError(""Assignment to lists with more than one item is not supported"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getXMLProperty,"    Object getXMLProperty(XMLName name) {
        return getPropertyList(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,replaceNode,"    private void replaceNode(XML xml, XML with) {
        xml.replaceWith(with);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,put,"    public void put(int index, Scriptable start, Object value) {
        Object parent = Undefined.instance;
        // Convert text into XML if needed.
        XMLObject xmlValue;

        // Special-case checks for undefined and null
        if (value == null) {
            value = ""null"";
        } else if (value instanceof Undefined) {
            value = ""undefined"";
        }

        if (value instanceof XMLObject) {
            xmlValue = (XMLObject) value;
        } else {
            if (targetProperty == null) {
                xmlValue = newXMLFromJs(value.toString());
            } else {
                //    Note that later in the code, we will use this as an argument to replace(int,value)
                //    So we will be ""replacing"" this element with itself
                //    There may well be a better way to do this
                //    TODO    Find a way to refactor this whole method and simplify it
                xmlValue = item(index);
                ((XML)xmlValue).setChildren(value);
            }
        }

        // Find the parent
        if (index < length()) {
            parent = item(index).parent();
        } else {
            // Appending
            parent = parent();
        }

        if (parent instanceof XML) {
            // found parent, alter doc",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getXML,"    private XML getXML(XmlNode.List _annos, int index) {
        if (index >= 0 && index < length()) {
            return xmlFromNode(_annos.item(index));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,deleteXMLProperty,"    void deleteXMLProperty(XMLName name) {
        for (int i = 0; i < length(); i++) {
            XML xml = getXmlFromAnnotation(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,delete,"    public void delete(int index) {
        if (index >= 0 && index < length()) {
            XML xml = getXmlFromAnnotation(index);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getIds,"    public Object[] getIds() {
        Object enumObjs[];

        if (isPrototype()) {
            enumObjs = new Object[0];
        } else {
            enumObjs = new Object[length()];

            for (int i = 0; i < enumObjs.length; i++) {
                enumObjs[i] = new Integer(i);
            }
        }

        return enumObjs;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getIdsForDebug,"    public Object[] getIdsForDebug() {
        return getIds();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,remove,"    void remove() {
        int nLen = length();
        for (int i = nLen - 1; i >= 0; i--) {
            XML xml = getXmlFromAnnotation(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,item,"    XML item(int index) {
        return _annos != null
            ? getXmlFromAnnotation(index) : createEmptyXML();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,setAttribute,"    private void setAttribute(XMLName xmlName, Object value) {
        for (int i = 0; i < length(); i++) {
            XML xml = getXmlFromAnnotation(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,addToList,"    void addToList(Object toAdd) {
        _annos.addToList(toAdd);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,child,"    XMLList child(int index) {
        XMLList result = newXMLList();

        for (int i = 0; i < length(); i++) {
            result.addToList(getXmlFromAnnotation(i).child(index));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,child,"    XMLList child(XMLName xmlName) {
        XMLList result = newXMLList();

        for (int i = 0; i < length(); i++) {
            result.addToList(getXmlFromAnnotation(i).child(xmlName));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,addMatches,"    void addMatches(XMLList rv, XMLName name) {
        for (int i=0; i<length(); i++) {
            getXmlFromAnnotation(i).addMatches(rv, name);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,children,"    XMLList children() {
        java.util.Vector v = new java.util.Vector();

        for (int i = 0; i < length(); i++) {
            XML xml = getXmlFromAnnotation(i);

            if (xml != null) {
                Object o = xml.children();
                if (o instanceof XMLList) {
                    XMLList childList = (XMLList)o;

                    int cChildren = childList.length();
                    for (int j = 0; j < cChildren; j++) {
                        v.addElement(childList.item(j));
                    }
                }
            }
        }

        XMLList allChildren = newXMLList();
        int sz = v.size();

        for (int i = 0; i < sz; i++) {
            allChildren.addToList(v.get(i));
        }

        return allChildren;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,comments,"    XMLList comments() {
        XMLList result = newXMLList();

        for (int i = 0; i < length(); i++) {
            XML xml = getXmlFromAnnotation(i);
            result.addToList(xml.comments());
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,elements,"    XMLList elements(XMLName name) {
        XMLList rv = newXMLList();
        for (int i=0; i<length(); i++) {
            XML xml = getXmlFromAnnotation(i);
            rv.addToList(xml.elements(name));
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,contains,"    boolean contains(Object xml) {
        boolean result = false;

        for (int i = 0; i < length(); i++) {
            XML member = getXmlFromAnnotation(i);

            if (member.equivalentXml(xml)) {
                result = true;
                break;
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,copy,"    XMLObjectImpl copy() {
        XMLList result = newXMLList();

        for (int i = 0; i < length(); i++) {
            XML xml = getXmlFromAnnotation(i);
            result.addToList(xml.copy());
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,hasOwnProperty,"    boolean hasOwnProperty(XMLName xmlName) {
        if (isPrototype()) {
            String property = xmlName.localName();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,hasComplexContent,"    boolean hasComplexContent() {
        boolean complexContent;
        int length = length();

        if (length == 0) {
            complexContent = false;
        } else if (length == 1) {
            complexContent = getXmlFromAnnotation(0).hasComplexContent();
        } else {
            complexContent = false;

            for (int i = 0; i < length; i++) {
                XML nextElement = getXmlFromAnnotation(i);
                if (nextElement.isElement()) {
                    complexContent = true;
                    break;
                }
            }
        }

        return complexContent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,hasSimpleContent,"    boolean hasSimpleContent() {
        if (length() == 0) {
            return true;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,length,"    int length() {
        int result = 0;

        if (_annos != null) {
            result = _annos.length();
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,normalize,"    void normalize() {
        for (int i = 0; i < length(); i++) {
            getXmlFromAnnotation(i).normalize();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,parent,"    Object parent() {
        if (length() == 0) return Undefined.instance;

        XML candidateParent = null;

        for (int i = 0; i < length(); i++) {
            Object currParent = getXmlFromAnnotation(i).parent();
            if (!(currParent instanceof XML)) return Undefined.instance;
            XML xml = (XML)currParent;
            if (i == 0) {
                // Set the first for the rest to compare to.
                candidateParent = xml;
            } else {
                if (candidateParent.is(xml)) {
                    //    keep looking
                } else {
                    return Undefined.instance;
                }
            }
        }
        return candidateParent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,processingInstructions,"    XMLList processingInstructions(XMLName xmlName) {
        XMLList result = newXMLList();

        for (int i = 0; i < length(); i++) {
            XML xml = getXmlFromAnnotation(i);

            result.addToList(xml.processingInstructions(xmlName));
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,propertyIsEnumerable,"    boolean propertyIsEnumerable(Object name) {
        long index;
        if (name instanceof Integer) {
            index = ((Integer)name).intValue();
        } else if (name instanceof Number) {
            double x = ((Number)name).doubleValue();
            index = (long)x;
            if (index != x) {
                return false;
            }
            if (index == 0 && 1.0 / x < 0) {
                // Negative 0
                return false;
            }
        } else {
            String s = ScriptRuntime.toString(name);
            index = ScriptRuntime.testUint32String(s);
        }
        return (0 <= index && index < length());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,text,"    XMLList text() {
        XMLList result = newXMLList();

        for (int i = 0; i < length(); i++) {
            result.addToList(getXmlFromAnnotation(i).text());
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,toString,"    public String toString() {
        //    ECMA357 10.1.2
        if (hasSimpleContent()) {
            StringBuffer sb = new StringBuffer();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,toXMLString,"    String toXMLString() {
        //    See ECMA 10.2.1
        StringBuffer sb = new StringBuffer();

        for (int i=0; i<length(); i++) {
            if (getProcessor().isPrettyPrinting() && i != 0) {
                sb.append('\n');
            }
            sb.append(getXmlFromAnnotation(i).toXMLString());
        }
        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,valueOf,"    Object valueOf() {
        return this;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,equivalentXml,"    boolean equivalentXml(Object target) {
        boolean result = false;

        // Zero length list should equate to undefined
        if (target instanceof Undefined && length() == 0) {
            result = true;
        } else if (length() == 1) {
            result = getXmlFromAnnotation(0).equivalentXml(target);
        } else if (target instanceof XMLList) {
            XMLList otherList = (XMLList) target;

            if (otherList.length() == length()) {
                result = true;

                for (int i = 0; i < length(); i++) {
                    if (!getXmlFromAnnotation(i).equivalentXml(otherList.getXmlFromAnnotation(i))) {
                        result = false;
                        break;
                    }
                }
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getPropertyList,"    private XMLList getPropertyList(XMLName name) {
        XMLList propertyList = newXMLList();
        XmlNode.QName qname = null;

        if (!name.isDescendants() && !name.isAttributeName()) {
            // Only set the targetProperty if this is a regular child get
            // and not a descendant or attribute get
            qname = name.toQname();
        }

        propertyList.setTargets(this, qname);

        for (int i = 0; i < length(); i++) {
            propertyList.addToList(
                getXmlFromAnnotation(i).getPropertyList(name));
        }

        return propertyList;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,applyOrCall,"    private Object applyOrCall(boolean isApply,
        Context cx, Scriptable scope,
        Scriptable thisObj, Object[] args) {
        String methodName = isApply ? ""apply"" : ""call"";
        if(!(thisObj instanceof XMLList) ||
            ((XMLList)thisObj).targetProperty == null)
            throw ScriptRuntime.typeError1(""msg.isnt.function"",
                methodName);

        return ScriptRuntime.applyOrCall(isApply, cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,jsConstructor,"    protected Object jsConstructor(Context cx, boolean inNewExpr,
        Object[] args) {
        if (args.length == 0) {
            return newXMLList();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,getExtraMethodSource,"    public Scriptable getExtraMethodSource(Context cx) {
        if (length() == 1) {
            return getXmlFromAnnotation(0);
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,call,"    public Object call(Context cx, Scriptable scope, Scriptable thisObj,
        Object[] args) {
        // This XMLList is being called as a Function.
        // Let's find the real Function object.
        if(targetProperty == null)
            throw ScriptRuntime.notFunctionError(this);

        String methodName = targetProperty.getLocalName();

        boolean isApply = methodName.equals(""apply"");
        if(isApply || methodName.equals(""call""))
            return applyOrCall(isApply, cx, scope, thisObj, args);

        Callable method = ScriptRuntime.getElemFunctionAndThis(
            this, methodName, cx);
        // Call lastStoredScriptable to clear stored thisObj
        // but ignore the result as the method should use the supplied
        // thisObj, not one from redirected call
        ScriptRuntime.lastStoredScriptable(cx);
        return method.call(cx, scope, thisObj, args);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLList.java,construct,"    public Scriptable construct(Context cx, Scriptable scope, Object[] args) {
        throw ScriptRuntime.typeError1(""msg.not.ctor"", ""XMLList"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,isNCNameStartChar,"    private static boolean isNCNameStartChar(int c) {
        if ((c & ~0x7F) == 0) {
            // Optimize for ASCII and use A..Z < _ < a..z
            if (c >= 'a') {
                return c <= 'z';
            } else if (c >= 'A') {
                if (c <= 'Z') {
                    return true;
                }
                return c == '_';
            }
        } else if ((c & ~0x1FFF) == 0) {
            return (0xC0 <= c && c <= 0xD6)
            || (0xD8 <= c && c <= 0xF6)
            || (0xF8 <= c && c <= 0x2FF)
            || (0x370 <= c && c <= 0x37D)
            || 0x37F <= c;
        }
        return (0x200C <= c && c <= 0x200D)
        || (0x2070 <= c && c <= 0x218F)",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,isNCNameChar,"    private static boolean isNCNameChar(int c) {
        if ((c & ~0x7F) == 0) {
            // Optimize for ASCII and use - < . < 0..9 < A..Z < _ < a..z
            if (c >= 'a') {
                return c <= 'z';
            } else if (c >= 'A') {
                if (c <= 'Z') {
                    return true;
                }
                return c == '_';
            } else if (c >= '0') {
                return c <= '9';
            } else {
                return c == '-' || c == '.';
            }
        } else if ((c & ~0x1FFF) == 0) {
            return isNCNameStartChar(c) || c == 0xB7
                || (0x300 <= c && c <= 0x36F);
        }
        return isNCNameStartChar(c) || (0x203F <= c && c <= 0x2040);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,accept,"    static boolean accept(Object nameObj) {
        String name;
        try {
            name = ScriptRuntime.toString(nameObj);
        } catch (EcmaError ee) {
            if (""TypeError"".equals(ee.getName())) {
                return false;
            }
            throw ee;
        }

        // See http://w3.org/TR/xml-names11/#NT-NCName
        int length = name.length();
        if (length != 0) {
            if (isNCNameStartChar(name.charAt(0))) {
                for (int i = 1; i != length; ++i) {
                    if (!isNCNameChar(name.charAt(i))) {
                        return false;
                    }
                }
                return true;
            }
        }

        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,formStar,"    static XMLName formStar() {
        XMLName rv = new XMLName();
        rv.qname = XmlNode.QName.create(null, null);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,formProperty,"    static XMLName formProperty(XmlNode.Namespace namespace, String localName) {
        if (localName != null && localName.equals(""*"")) localName = null;
        XMLName rv = new XMLName();
        rv.qname = XmlNode.QName.create(namespace, localName);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,formProperty,"    static XMLName formProperty(String uri, String localName) {
        return formProperty(XmlNode.Namespace.create(uri), localName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,create,"    static XMLName create(String defaultNamespaceUri, String name) {
        if (name == null)
            throw new IllegalArgumentException();

        int l = name.length();
        if (l != 0) {
            char firstChar = name.charAt(0);
            if (firstChar == '*') {
                if (l == 1) {
                    return XMLName.formStar();
                }
            } else if (firstChar == '@') {
                XMLName xmlName = XMLName.formProperty("""", name.substring(1));
                xmlName.setAttributeName();
                return xmlName;
            }
        }

        return XMLName.formProperty(defaultNamespaceUri, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,create,"    static XMLName create(XmlNode.QName qname, boolean attribute, boolean descendants) {
        XMLName rv = new XMLName();
        rv.qname = qname;
        rv.isAttributeName = attribute;
        rv.isDescendants = descendants;
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,create,"    static XMLName create(XmlNode.QName qname) {
        return create(qname, false, false);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,initXMLObject,"    void initXMLObject(XMLObjectImpl xmlObject) {
        if (xmlObject == null) throw new IllegalArgumentException();
        if (this.xmlObject != null) throw new IllegalStateException();
        this.xmlObject = xmlObject;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,uri,"    String uri() {
        if (qname.getNamespace() == null) return null;
        return qname.getNamespace().getUri();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,localName,"    String localName() {
        if (qname.getLocalName() == null) return ""*"";
        return qname.getLocalName();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,addDescendantChildren,"    private void addDescendantChildren(XMLList list, XML target) {
        XMLName xmlName = this;
        if (target.isElement()) {
            XML[] children = target.getChildren();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,addMatchingAttributes,"    void addMatchingAttributes(XMLList list, XML target) {
        XMLName name = this;
        if (target.isElement()) {
            XML[] attributes = target.getAttributes();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,addDescendantAttributes,"    private void addDescendantAttributes(XMLList list, XML target) {
        if (target.isElement()) {
            addMatchingAttributes(list, target);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,matchDescendantAttributes,"    XMLList matchDescendantAttributes(XMLList rv, XML target) {
        rv.setTargets(target, null);
        addDescendantAttributes(rv, target);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,matchDescendantChildren,"    XMLList matchDescendantChildren(XMLList rv, XML target) {
        rv.setTargets(target, null);
        addDescendantChildren(rv, target);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,addDescendants,"    void addDescendants(XMLList rv, XML target) {
        XMLName xmlName = this;
        if (xmlName.isAttributeName()) {
            matchDescendantAttributes(rv, target);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,addAttributes,"    private void addAttributes(XMLList rv, XML target) {
        addMatchingAttributes(rv, target);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,addMatches,"    void addMatches(XMLList rv, XML target) {
        if (isDescendants()) {
            addDescendants(rv, target);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,getMyValueOn,"    XMLList getMyValueOn(XML target) {
        XMLList rv = target.newXMLList();
        addMatches(rv, target);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,setMyValueOn,"    void setMyValueOn(XML target, Object value) {
        // Special-case checks for undefined and null
        if (value == null) {
            value = ""null"";
        } else if (value instanceof Undefined) {
            value = ""undefined"";
        }

        XMLName xmlName = this;
        // Get the named property
        if (xmlName.isAttributeName()) {
            target.setAttribute(xmlName, value);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,has,"    public boolean has(Context cx) {
        if (xmlObject == null) {
            return false;
        }
        return xmlObject.hasXMLProperty(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,get,"    public Object get(Context cx) {
        if (xmlObject == null) {
            throw ScriptRuntime.undefReadError(Undefined.instance,
                toString());
        }
        return xmlObject.getXMLProperty(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,set,"    public Object set(Context cx, Object value) {
        if (xmlObject == null) {
            throw ScriptRuntime.undefWriteError(Undefined.instance,
                toString(),
                value);
        }
        // Assignment to descendants causes parse error on bad reference
        // and this should not be called
        if (isDescendants) throw Kit.codeBug();
        xmlObject.putXMLProperty(this, value);
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,delete,"    public boolean delete(Context cx) {
        if (xmlObject == null) {
            return true;
        }
        xmlObject.deleteXMLProperty(this);
        return !xmlObject.hasXMLProperty(this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,toString,"    public String toString() {
        //return qname.localName();
        StringBuffer buff = new StringBuffer();
        if (isDescendants) buff.append("".."");
        if (isAttributeName) buff.append('@');
        if (uri() == null) {
            buff.append('*');
            if(localName().equals(""*"")) {
                return buff.toString();
            }
        } else {
            buff.append('""').append(uri()).append('""');
        }
        buff.append(':').append(localName());
        return buff.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,toQname,"    final XmlNode.QName toQname() {
        return this.qname;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,matchesLocalName,"    final boolean matchesLocalName(String localName) {
        return localName().equals(""*"") || localName().equals(localName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,matchesElement,"    final boolean matchesElement(XmlNode.QName qname) {
        if (this.uri() == null || this.uri().equals(qname.getNamespace().getUri())) {
            if (this.localName().equals(""*"") || this.localName().equals(qname.getLocalName())) {
                return true;
            }
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,matches,"    final boolean matches(XML node) {
        XmlNode.QName qname = node.getNodeQname();
        String nodeUri = null;
        if (qname.getNamespace() != null) {
            nodeUri = qname.getNamespace().getUri();
        }
        if (isAttributeName) {
            if (node.isAttribute()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,isAttributeName,"    boolean isAttributeName() {
        return isAttributeName;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,setAttributeName,"    void setAttributeName() {
//        if (isAttributeName) throw new IllegalStateException();
        isAttributeName = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,isDescendants,"    boolean isDescendants() {
        return isDescendants;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLName.java,setIsDescendants,"    void setIsDescendants() {
//        if (isDescendants) throw new IllegalStateException();
        isDescendants = true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,initialize,"    final void initialize(XMLLibImpl lib, Scriptable scope,
                          XMLObject prototype)
    {
        setParentScope(scope);
        setPrototype(prototype);
        prototypeFlag = (prototype == null);
        this.lib = lib;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,isPrototype,"    final boolean isPrototype() {
        return prototypeFlag;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getLib,"    XMLLibImpl getLib() {
        return lib;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,newXML,"    final XML newXML(XmlNode node) {
        return lib.newXML(node);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,xmlFromNode,"    XML xmlFromNode(XmlNode node) {
        if (node.getXml() == null) {
            node.setXml( newXML(node) );
        }
        return node.getXml();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,newXMLList,"    final XMLList newXMLList() {
        return lib.newXMLList();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,newXMLListFrom,"    final XMLList newXMLListFrom(Object o) {
        return lib.newXMLListFrom(o);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getProcessor,"    final XmlProcessor getProcessor() {
        return lib.getProcessor();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,newQName,"    final QName newQName(String uri, String localName, String prefix) {
        return lib.newQName(uri, localName, prefix);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,newQName,"    final QName newQName(XmlNode.QName name) {
        return lib.newQName(name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,createNamespace,"    final Namespace createNamespace(XmlNode.Namespace declaration) {
        if (declaration == null) return null;
        return lib.createNamespaces( new XmlNode.Namespace[] { declaration } )[0];
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,createNamespaces,"    final Namespace[] createNamespaces(XmlNode.Namespace[] declarations) {
        return lib.createNamespaces(declarations);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,get,"    public final Object get(String name, Scriptable start) {
        return super.get(name, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,has,"    public final boolean has(String name, Scriptable start) {
        return super.has(name, start);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,put,"    public final void put(String name, Scriptable start, Object value) {
        super.put(name, start, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,delete,"    public final void delete(String name) {
        //    TODO    I am not sure about this, but this is how I found it.  DPC
        throw new IllegalArgumentException(""String: ["" + name + ""]"");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getPrototype,"    public final Scriptable getPrototype() {
        return super.getPrototype();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,setPrototype,"    public final void setPrototype(Scriptable prototype) {
        super.setPrototype(prototype);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getParentScope,"    public final Scriptable getParentScope() {
        return super.getParentScope();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,setParentScope,"    public final void setParentScope(Scriptable parent) {
        super.setParentScope(parent);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getDefaultValue,"    public final Object getDefaultValue(Class hint) {
        return this.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,hasInstance,"    public final boolean hasInstance(Scriptable scriptable) {
        return super.hasInstance(scriptable);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getMatches,"    private XMLList getMatches(XMLName name) {
        XMLList rv = newXMLList();
        addMatches(rv, name);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,getMethod,"    final Object getMethod(String id) {
        return super.get(id, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,equivalentValues,"    protected final Object equivalentValues(Object value) {
        boolean result = equivalentXml(value);
        return result ? Boolean.TRUE : Boolean.FALSE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaHas,"    public final boolean ecmaHas(Context cx, Object id) {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this cast
            return has((int)index, this);
        }
        return hasXMLProperty(xmlName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaGet,"    public final Object ecmaGet(Context cx, Object id) {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this cast
            Object result = get((int)index, this);
            if (result == Scriptable.NOT_FOUND) {
                result = Undefined.instance;
            }
            return result;
        }
        return getXMLProperty(xmlName);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaPut,"    public final void ecmaPut(Context cx, Object id, Object value) {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this cast
            put((int)index, this, value);
            return;
        }
        putXMLProperty(xmlName, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaDelete,"    public final boolean ecmaDelete(Context cx, Object id) {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this
            delete((int)index);
            return true;
        }
        deleteXMLProperty(xmlName);
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,memberRef,"    public Ref memberRef(Context cx, Object elem, int memberTypeFlags) {
        boolean attribute = (memberTypeFlags & Node.ATTRIBUTE_FLAG) != 0;
        boolean descendants = (memberTypeFlags & Node.DESCENDANTS_FLAG) != 0;
        if (!attribute && !descendants) {
            // Code generation would use ecma(Get|Has|Delete|Set) for
            // normal name identifiers so one ATTRIBUTE_FLAG
            // or DESCENDANTS_FLAG has to be set
            throw Kit.codeBug();
        }
        XmlNode.QName qname = lib.toNodeQName(cx, elem, attribute);
        XMLName rv = XMLName.create(qname, attribute, descendants);
        rv.initXMLObject(this);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,memberRef,"    public Ref memberRef(Context cx, Object namespace, Object elem, int memberTypeFlags) {
        boolean attribute = (memberTypeFlags & Node.ATTRIBUTE_FLAG) != 0;
        boolean descendants = (memberTypeFlags & Node.DESCENDANTS_FLAG) != 0;
        XMLName rv = XMLName.create(lib.toNodeQName(cx, namespace, elem), attribute, descendants);
        rv.initXMLObject(this);
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,enterWith,"    public NativeWith enterWith(Scriptable scope) {
        return new XMLWithScope(lib, scope, this);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,enterDotQuery,"    public NativeWith enterDotQuery(Scriptable scope) {
        XMLWithScope xws = new XMLWithScope(lib, scope, this);
        xws.initAsDotQuery();
        return xws;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,addValues,"    public final Object addValues(Context cx, boolean thisIsLeft,
        Object value) {
        if (value instanceof XMLObject) {
            XMLObject v1, v2;
            if (thisIsLeft) {
                v1 = this;
                v2 = (XMLObject)value;
            } else {
                v1 = (XMLObject)value;
                v2 = this;
            }
            return lib.addXMLObjects(cx, v1, v2);
        }
        if (value == Undefined.instance) {
            // both ""xml + undefined"" and ""undefined + xml"" gives String(xml)
            return ScriptRuntime.toString(this);
        }

        return super.addValues(cx, thisIsLeft, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,exportAsJSClass,"    final void exportAsJSClass(boolean sealed) {
        prototypeFlag = true;
        exportAsJSClass(MAX_PROTOTYPE_ID, getParentScope(), sealed);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,findPrototypeId,"    protected int findPrototypeId(String s) {
        int id;
// #generated# Last update: 2007-08-20 09:04:06 EDT
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 4: c=s.charAt(0);
                if (c=='c') { X=""copy"";id=Id_copy; }
                else if (c=='n') { X=""name"";id=Id_name; }
                else if (c=='t') { X=""text"";id=Id_text; }
                break L;
            case 5: X=""child"";id=Id_child; break L;
            case 6: c=s.charAt(0);
                if (c=='l') { X=""length"";id=Id_length; }
                else if (c=='p') { X=""parent"";id=Id_parent; }
                break L;
            case 7: c=s.charAt(0);
                if (c=='r') { X=""replace"";id=Id_replace; }
                else if (c=='s') { X=""setName"";id=Id_setName; }
                else if (c=='v') { X=""valueOf"";id=Id_valueOf; }
                break L;
            case 8: switch (s.charAt(2)) {
                case 'S': X=""toString"";id=Id_toString; break L;
                case 'd': X=""nodeKind"";id=Id_nodeKind; break L;
                case 'e': X=""elements"";id=Id_elements; break L;
                case 'i': X=""children"";id=Id_children; break L;
                case 'm': X=""comments"";id=Id_comments; break L;
                case 'n': X=""contains"";id=Id_contains; break L;
                } break L;
            case 9: switch (s.charAt(2)) {
                case 'c': X=""localName"";id=Id_localName; break L;
                case 'm': X=""namespace"";id=Id_namespace; break L;
                case 'r': X=""normalize"";id=Id_normalize; break L;
                case 't': X=""attribute"";id=Id_attribute; break L;
                } break L;
            case 10: c=s.charAt(0);
                if (c=='a') { X=""attributes"";id=Id_attributes; }
                else if (c=='c') { X=""childIndex"";id=Id_childIndex; }
                break L;
            case 11: switch (s.charAt(0)) {
                case 'a': X=""appendChild"";id=Id_appendChild; break L;
                case 'c': X=""constructor"";id=Id_constructor; break L;
                case 'd': X=""descendants"";id=Id_descendants; break L;
                case 's': X=""setChildren"";id=Id_setChildren; break L;
                case 't': X=""toXMLString"";id=Id_toXMLString; break L;
                } break L;
            case 12: c=s.charAt(0);
                if (c=='a') { X=""addNamespace"";id=Id_addNamespace; }
                else if (c=='p') { X=""prependChild"";id=Id_prependChild; }
                else if (c=='s') {
                    c=s.charAt(3);
                    if (c=='L') { X=""setLocalName"";id=Id_setLocalName; }
                    else if (c=='N') { X=""setNamespace"";id=Id_setNamespace; }
                }
                break L;
            case 14: X=""hasOwnProperty"";id=Id_hasOwnProperty; break L;
            case 15: X=""removeNamespace"";id=Id_removeNamespace; break L;
            case 16: c=s.charAt(0);
                if (c=='h') { X=""hasSimpleContent"";id=Id_hasSimpleContent; }
                else if (c=='i') { X=""insertChildAfter"";id=Id_insertChildAfter; }
                break L;
            case 17: c=s.charAt(3);
                if (c=='C') { X=""hasComplexContent"";id=Id_hasComplexContent; }
                else if (c=='c') { X=""inScopeNamespaces"";id=Id_inScopeNamespaces; }
                else if (c=='e') { X=""insertChildBefore"";id=Id_insertChildBefore; }
                break L;
            case 20: X=""propertyIsEnumerable"";id=Id_propertyIsEnumerable; break L;
            case 21: X=""namespaceDeclarations"";id=Id_namespaceDeclarations; break L;
            case 22: X=""processingInstructions"";id=Id_processingInstructions; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
            break L0;
        }
// #/generated#
        return id;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,initPrototypeId,"    protected void initPrototypeId(int id) {
        String s;
        int arity;
        switch (id) {
            case Id_constructor: {
                IdFunctionObject ctor;
                if (this instanceof XML) {
                    ctor = new XMLCtor((XML)this, XMLOBJECT_TAG, id, 1);
                } else {
                    ctor = new IdFunctionObject(this, XMLOBJECT_TAG, id, 1);
                }
                initPrototypeConstructor(ctor);
                return;
            }

            case Id_addNamespace:      arity=1; s=""addNamespace"";      break;
            case Id_appendChild:       arity=1; s=""appendChild"";       break;
            case Id_attribute:         arity=1; s=""attribute"";         break;
            case Id_attributes:        arity=0; s=""attributes"";        break;
            case Id_child:             arity=1; s=""child"";             break;
            case Id_childIndex:        arity=0; s=""childIndex"";        break;
            case Id_children:          arity=0; s=""children"";          break;
            case Id_comments:          arity=0; s=""comments"";          break;
            case Id_contains:          arity=1; s=""contains"";          break;
            case Id_copy:              arity=0; s=""copy"";              break;
            case Id_descendants:       arity=1; s=""descendants"";       break;
            case Id_elements:          arity=1; s=""elements"";          break;
            case Id_hasComplexContent: arity=0; s=""hasComplexContent""; break;
            case Id_hasOwnProperty:    arity=1; s=""hasOwnProperty"";    break;
            case Id_hasSimpleContent:  arity=0; s=""hasSimpleContent"";  break;
            case Id_inScopeNamespaces: arity=0; s=""inScopeNamespaces""; break;
            case Id_insertChildAfter:  arity=2; s=""insertChildAfter"";  break;
            case Id_insertChildBefore: arity=2; s=""insertChildBefore""; break;
            case Id_length:            arity=0; s=""length"";            break;
            case Id_localName:         arity=0; s=""localName"";         break;
            case Id_name:              arity=0; s=""name"";              break;
            case Id_namespace:         arity=1; s=""namespace"";         break;
            case Id_namespaceDeclarations:
                arity=0; s=""namespaceDeclarations""; break;
            case Id_nodeKind:          arity=0; s=""nodeKind"";          break;
            case Id_normalize:         arity=0; s=""normalize"";         break;
            case Id_parent:            arity=0; s=""parent"";            break;
            case Id_prependChild:      arity=1; s=""prependChild"";      break;
            case Id_processingInstructions:
                arity=1; s=""processingInstructions""; break;
            case Id_propertyIsEnumerable:
                arity=1; s=""propertyIsEnumerable""; break;
            case Id_removeNamespace:   arity=1; s=""removeNamespace"";   break;
            case Id_replace:           arity=2; s=""replace"";           break;
            case Id_setChildren:       arity=1; s=""setChildren"";       break;
            case Id_setLocalName:      arity=1; s=""setLocalName"";      break;
            case Id_setName:           arity=1; s=""setName"";           break;
            case Id_setNamespace:      arity=1; s=""setNamespace"";      break;
            case Id_text:              arity=0; s=""text"";              break;
            case Id_toString:          arity=0; s=""toString"";          break;
            case Id_toXMLString:       arity=1; s=""toXMLString"";       break;
            case Id_valueOf:           arity=0; s=""valueOf"";           break;

            default: throw new IllegalArgumentException(String.valueOf(id));
        }
        initPrototypeMethod(XMLOBJECT_TAG, id, s, arity);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,toObjectArray,"    private Object[] toObjectArray(Object[] typed) {
        Object[] rv = new Object[typed.length];
        for (int i=0; i<rv.length; i++) {
            rv[i] = typed[i];
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,xmlMethodNotFound,"    private void xmlMethodNotFound(Object object, String name) {
        throw ScriptRuntime.notFunctionError(object, name);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,execIdCall,"    public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
        if (!f.hasTag(XMLOBJECT_TAG)) {
            return super.execIdCall(f, cx, scope, thisObj, args);
        }
        int id = f.methodId();
        if (id == Id_constructor) {
            return jsConstructor(cx, thisObj == null, args);
        }

        // All (XML|XMLList).prototype methods require thisObj to be XML
        if (!(thisObj instanceof XMLObjectImpl))
            throw incompatibleCallError(f);
        XMLObjectImpl realThis = (XMLObjectImpl)thisObj;

        XML xml = realThis.getXML();
        switch (id) {
            case Id_appendChild: {
                if (xml == null) xmlMethodNotFound(realThis, ""appendChild"");
                return xml.appendChild(arg(args, 0));
            }
            case Id_addNamespace: {
                if (xml == null) xmlMethodNotFound(realThis, ""addNamespace"");
                Namespace ns = lib.castToNamespace(cx, arg(args, 0));
                return xml.addNamespace(ns);
            }
            case Id_childIndex: {
                if (xml == null) xmlMethodNotFound(realThis, ""childIndex"");
                return ScriptRuntime.wrapInt(xml.childIndex());
            }
            case Id_inScopeNamespaces: {
                if (xml == null) xmlMethodNotFound(realThis, ""inScopeNamespaces"");
                return cx.newArray(scope, toObjectArray(xml.inScopeNamespaces()));
            }
            case Id_insertChildAfter: {
                if (xml == null) xmlMethodNotFound(realThis, ""insertChildAfter"");
                Object arg0 = arg(args, 0);
                if (arg0 == null || arg0 instanceof XML) {
                    return xml.insertChildAfter((XML)arg0, arg(args, 1));
                }
                return Undefined.instance;
            }
            case Id_insertChildBefore: {
                if (xml == null) xmlMethodNotFound(realThis, ""insertChildBefore"");
                Object arg0 = arg(args, 0);
                if (arg0 == null || arg0 instanceof XML) {
                    return xml.insertChildBefore((XML)arg0, arg(args, 1));
                }
                return Undefined.instance;
            }
            case Id_localName: {
                if (xml == null) xmlMethodNotFound(realThis, ""localName"");
                return xml.localName();
            }
            case Id_name: {
                if (xml == null) xmlMethodNotFound(realThis, ""name"");
                return xml.name();
            }
            case Id_namespace: {
                if (xml == null) xmlMethodNotFound(realThis, ""namespace"");
                String prefix = (args.length > 0) ? ScriptRuntime.toString(args[0]) : null;
                Namespace rv = xml.namespace(prefix);
                if (rv == null) {
                    return Undefined.instance;
                } else {
                    return rv;
                }
            }
            case Id_namespaceDeclarations: {
                if (xml == null) xmlMethodNotFound(realThis, ""namespaceDeclarations"");
                Namespace[] array = xml.namespaceDeclarations();
                return cx.newArray(scope, toObjectArray(array));
            }
            case Id_nodeKind: {
                if (xml == null) xmlMethodNotFound(realThis, ""nodeKind"");
                return xml.nodeKind();
            }
            case Id_prependChild: {
                if (xml == null) xmlMethodNotFound(realThis, ""prependChild"");
                return xml.prependChild(arg(args, 0));
            }
            case Id_removeNamespace: {
                if (xml == null) xmlMethodNotFound(realThis, ""removeNamespace"");
                Namespace ns = lib.castToNamespace(cx, arg(args, 0));
                return xml.removeNamespace(ns);
            }
            case Id_replace: {
                if (xml == null) xmlMethodNotFound(realThis, ""replace"");
                XMLName xmlName = lib.toXMLNameOrIndex(cx, arg(args, 0));
                Object arg1 = arg(args, 1);
                if (xmlName == null) {
                    //    I refuse to believe that this number will exceed 2^31
                    int index = (int)ScriptRuntime.lastUint32Result(cx);
                    return xml.replace(index, arg1);
                } else {
                    return xml.replace(xmlName, arg1);
                }
            }
            case Id_setChildren: {
                if (xml == null) xmlMethodNotFound(realThis, ""setChildren"");
                return xml.setChildren(arg(args, 0));
            }
            case Id_setLocalName: {
                if (xml == null) xmlMethodNotFound(realThis, ""setLocalName"");
                String localName;
                Object arg = arg(args, 0);
                if (arg instanceof QName) {
                    localName = ((QName)arg).localName();
                } else {
                    localName = ScriptRuntime.toString(arg);
                }
                xml.setLocalName(localName);
                return Undefined.instance;
            }
            case Id_setName: {
                if (xml == null) xmlMethodNotFound(realThis, ""setName"");
                Object arg = (args.length != 0) ? args[0] : Undefined.instance;
                QName qname = lib.constructQName(cx, arg);
                xml.setName(qname);
                return Undefined.instance;
            }
            case Id_setNamespace: {
                if (xml == null) xmlMethodNotFound(realThis, ""setNamespace"");
                Namespace ns = lib.castToNamespace(cx, arg(args, 0));
                xml.setNamespace(ns);
                return Undefined.instance;
            }

            case Id_attribute: {
                XMLName xmlName = XMLName.create( lib.toNodeQName(cx, arg(args, 0), true), true, false );
                return realThis.getMatches(xmlName);
            }
            case Id_attributes:
                return realThis.getMatches(XMLName.create(XmlNode.QName.create(null, null), true, false));
            case Id_child: {
                XMLName xmlName = lib.toXMLNameOrIndex(cx, arg(args, 0));
                if (xmlName == null) {
                    //    Two billion or so is a fine upper limit, so we cast to int
                    int index = (int)ScriptRuntime.lastUint32Result(cx);
                    return realThis.child(index);
                } else {
                    return realThis.child(xmlName);
                }
            }
            case Id_children:
                return realThis.children();
            case Id_comments:
                return realThis.comments();
            case Id_contains:
                return ScriptRuntime.wrapBoolean(
                    realThis.contains(arg(args, 0)));
            case Id_copy:
                return realThis.copy();
            case Id_descendants: {
                XmlNode.QName qname = (args.length == 0) ? XmlNode.QName.create(null, null) : lib.toNodeQName(cx, args[0], false);
                return realThis.getMatches( XMLName.create(qname, false, true) );
            }
            case Id_elements: {
                XMLName xmlName = (args.length == 0)
                ? XMLName.formStar()
                : lib.toXMLName(cx, args[0]);
                return realThis.elements(xmlName);
            }
            case Id_hasOwnProperty: {
                XMLName xmlName = lib.toXMLName(cx, arg(args, 0));
                return ScriptRuntime.wrapBoolean(
                    realThis.hasOwnProperty(xmlName));
            }
            case Id_hasComplexContent:
                return ScriptRuntime.wrapBoolean(realThis.hasComplexContent());
            case Id_hasSimpleContent:
                return ScriptRuntime.wrapBoolean(realThis.hasSimpleContent());
            case Id_length:
                return ScriptRuntime.wrapInt(realThis.length());
            case Id_normalize:
                realThis.normalize();
                return Undefined.instance;
            case Id_parent:
                return realThis.parent();
            case Id_processingInstructions: {
                XMLName xmlName = (args.length > 0)
                ? lib.toXMLName(cx, args[0])
                : XMLName.formStar();
                return realThis.processingInstructions(xmlName);
            }
            case Id_propertyIsEnumerable: {
                return ScriptRuntime.wrapBoolean(
                    realThis.propertyIsEnumerable(arg(args, 0)));
            }
            case Id_text:
                return realThis.text();
            case Id_toString:
                return realThis.toString();
            case Id_toXMLString: {
                return realThis.toXMLString();
            }
            case Id_valueOf:
                return realThis.valueOf();
        }
        throw new IllegalArgumentException(String.valueOf(id));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,arg,"    private static Object arg(Object[] args, int i) {
        return (i < args.length) ? args[i] : Undefined.instance;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,newTextElementXML,"    final XML newTextElementXML(XmlNode reference, XmlNode.QName qname, String value) {
        return lib.newTextElementXML(reference, qname, value);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,newXMLFromJs,"    final XML newXMLFromJs(Object inputObject) {
        return lib.newXMLFromJs(inputObject);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaToXml,"    final XML ecmaToXml(Object object) {
        return lib.ecmaToXml(object);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,ecmaEscapeAttributeValue,"    final String ecmaEscapeAttributeValue(String s) {
        //    TODO    Check this
        String quoted = lib.escapeAttributeValue(s);
        return quoted.substring(1, quoted.length() - 1);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLObjectImpl.java,createEmptyXML,"    final XML createEmptyXML() {
        return newXML(XmlNode.createEmpty(getProcessor()));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLWithScope.java,initAsDotQuery,"    void initAsDotQuery()
    {
        XMLObject prototype = (XMLObject)getPrototype();
        // XMLWithScope also handles the .(xxx) DotQuery for XML
        // basically DotQuery is a for/in/with statement and in
        // the following 3 statements we setup to signal it's
        // DotQuery,
        // the index and the object being looped over.  The
        // xws.setPrototype is the scope of the object which is
        // is a element of the lhs (XMLList).
        _currIndex = 0;
        _dqPrototype = prototype;
        if (prototype instanceof XMLList) {
            XMLList xl = (XMLList)prototype;
            if (xl.length() > 0) {
                setPrototype((Scriptable)(xl.get(0, null)));
            }
        }
        // Always return the outer-most type of XML lValue of
        // XML to left of dotQuery.
        _xmlList = lib.newXMLList();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XMLWithScope.java,updateDotQuery,"    protected Object updateDotQuery(boolean value)
    {
        // Return null to continue looping

        XMLObject seed = _dqPrototype;
        XMLList xmlL = _xmlList;

        if (seed instanceof XMLList) {
            // We're a list so keep testing each element of the list if the
            // result on the top of stack is true then that element is added
            // to our result list.  If false, we try the next element.
            XMLList orgXmlL = (XMLList)seed;

            int idx = _currIndex;

            if (value) {
                xmlL.addToList(orgXmlL.get(idx, null));
            }

            // More elements to test?
            if (++idx < orgXmlL.length()) {
                // Yes, set our new index, get the next element and
                // reset the expression to run with this object as
                // the WITH selector.
                _currIndex = idx;
                setPrototype((Scriptable)(orgXmlL.get(idx, null)));

                // continue looping
                return null;
            }
        } else {
            // If we're not a XMLList then there's no looping
            // just return DQPrototype if the result is true.
            if (value) {
              xmlL.addToList(seed);
            }
        }

        return xmlL;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getUserData,"    private static XmlNode getUserData(Node node) {
        if (DOM_LEVEL_3) {
            return (XmlNode)node.getUserData(USER_DATA_XMLNODE_KEY);
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,setUserData,"    private static void setUserData(Node node, XmlNode wrap) {
        if (DOM_LEVEL_3) {
            node.setUserData(USER_DATA_XMLNODE_KEY, wrap, wrap.events);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,createImpl,"    private static XmlNode createImpl(Node node) {
        if (node instanceof Document) throw new IllegalArgumentException();
        XmlNode rv = null;
        if (getUserData(node) == null) {
            rv = new XmlNode();
            rv.dom = node;
            setUserData(node, rv);
        } else {
            rv = getUserData(node);
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,newElementWithText,"    static XmlNode newElementWithText(XmlProcessor processor, XmlNode reference, XmlNode.QName qname, String value) {
        if (reference instanceof org.w3c.dom.Document) throw new IllegalArgumentException(""Cannot use Document node as reference"");
        Document document = null;
        if (reference != null) {
            document = reference.dom.getOwnerDocument();
        } else {
            document = processor.newDocument();
        }
        Node referenceDom = (reference != null) ? reference.dom : null;
        Element e = document.createElementNS(qname.getUri(), qname.qualify(referenceDom));
        if (value != null) {
            e.appendChild(document.createTextNode(value));
        }
        return XmlNode.createImpl(e);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,createText,"    static XmlNode createText(XmlProcessor processor, String value) {
        return createImpl( processor.newDocument().createTextNode(value) );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,createElementFromNode,"    static XmlNode createElementFromNode(Node node) {
        if (node instanceof Document)
            node = ((Document) node).getDocumentElement();
        return createImpl(node);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,createElement,"    static XmlNode createElement(XmlProcessor processor, String namespaceUri, String xml) throws org.xml.sax.SAXException {
        return createImpl( processor.toXml(namespaceUri, xml) );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,createEmpty,"    static XmlNode createEmpty(XmlProcessor processor) {
        return createText(processor, """");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,copy,"    private static XmlNode copy(XmlNode other) {
        return createImpl( other.dom.cloneNode(true) );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,debug,"    String debug() {
        XmlProcessor raw = new XmlProcessor();
        raw.setIgnoreComments(false);
        raw.setIgnoreProcessingInstructions(false);
        raw.setIgnoreWhitespace(false);
        raw.setPrettyPrinting(false);
        return raw.ecmaToXmlString(this.dom);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,toString,"    public String toString() {
        return ""XmlNode: type="" + dom.getNodeType() + "" dom="" + dom.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getXml,"    XML getXml() {
        return xml;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,setXml,"    void setXml(XML xml) {
        this.xml = xml;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getChildCount,"    int getChildCount() {
        return this.dom.getChildNodes().getLength();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,parent,"    XmlNode parent() {
        Node domParent = dom.getParentNode();
        if (domParent instanceof Document) return null;
        if (domParent == null) return null;
        return createImpl(domParent);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getChildIndex,"    int getChildIndex() {
        if (this.isAttributeType()) return -1;
        if (parent() == null) return -1;
        org.w3c.dom.NodeList siblings = this.dom.getParentNode().getChildNodes();
        for (int i=0; i<siblings.getLength(); i++) {
            if (siblings.item(i) == dom) {
                return i;
            }
        }
        //    Either the parent is -1 or one of the this node's parent's children is this node.
        throw new RuntimeException(""Unreachable."");
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,removeChild,"    void removeChild(int index) {
        this.dom.removeChild( this.dom.getChildNodes().item(index) );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,toXmlString,"    String toXmlString(XmlProcessor processor) {
        return processor.ecmaToXmlString(this.dom);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,ecmaValue,"    String ecmaValue() {
        //    TODO    See ECMA 357 Section 9.1
        if (isTextType()) {
            return ((org.w3c.dom.Text)dom).getData();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,deleteMe,"    void deleteMe() {
        if (dom instanceof Attr) {
            Attr attr = (Attr)this.dom;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,normalize,"    void normalize() {
        this.dom.normalize();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,insertChildAt,"    void insertChildAt(int index, XmlNode node) {
        Node parent = this.dom;
        Node child = parent.getOwnerDocument().importNode( node.dom, true );
        if (parent.getChildNodes().getLength() < index) {
            //    TODO    Check ECMA for what happens here
            throw new IllegalArgumentException(""index="" + index + "" length="" + parent.getChildNodes().getLength());
        }
        if (parent.getChildNodes().getLength() == index) {
            parent.appendChild(child);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,insertChildrenAt,"    void insertChildrenAt(int index, XmlNode[] nodes) {
        for (int i=0; i<nodes.length; i++) {
            insertChildAt(index+i, nodes[i]);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getChild,"    XmlNode getChild(int index) {
        Node child = dom.getChildNodes().item(index);
        return createImpl(child);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,hasChildElement,"    boolean hasChildElement() {
        org.w3c.dom.NodeList nodes = this.dom.getChildNodes();
        for (int i=0; i<nodes.getLength(); i++) {
            if (nodes.item(i).getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) return true;
        }
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isSameNode,"    boolean isSameNode(XmlNode other) {
        //    TODO    May need to be changed if we allow XmlNode to refer to several Node objects
        return this.dom == other.dom;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,toUri,"    private String toUri(String ns) {
        return (ns == null) ? """" : ns;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,addNamespaces,"    private void addNamespaces(Namespaces rv, Element element) {
        if (element == null) throw new RuntimeException(""element must not be null"");
        String myDefaultNamespace = toUri(element.lookupNamespaceURI(null));
        String parentDefaultNamespace = """";
        if (element.getParentNode() != null) {
            parentDefaultNamespace = toUri(element.getParentNode().lookupNamespaceURI(null));
        }
        if (!myDefaultNamespace.equals(parentDefaultNamespace) || !(element.getParentNode() instanceof Element) ) {
            rv.declare(Namespace.create("""", myDefaultNamespace));
        }
        NamedNodeMap attributes = element.getAttributes();
        for (int i=0; i<attributes.getLength(); i++) {
            Attr attr = (Attr)attributes.item(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getAllNamespaces,"    private Namespaces getAllNamespaces() {
        Namespaces rv = new Namespaces();

        Node target = this.dom;
        if (target instanceof Attr) {
            target = ((Attr)target).getOwnerElement();
        }
        while(target != null) {
            if (target instanceof Element) {
                addNamespaces(rv, (Element)target);
            }
            target = target.getParentNode();
        }
        //    Fallback in case no namespace was declared
        rv.declare(Namespace.create("""", """"));
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getInScopeNamespaces,"    Namespace[] getInScopeNamespaces() {
        Namespaces rv = getAllNamespaces();
        return rv.getNamespaces();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNamespaceDeclarations,"    Namespace[] getNamespaceDeclarations() {
        //    ECMA357 13.4.4.24
        if (this.dom instanceof Element) {
            Namespaces rv = new Namespaces();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNamespaceDeclaration,"    Namespace getNamespaceDeclaration(String prefix) {
        if (prefix.equals("""") && dom instanceof Attr) {
            //    Default namespaces do not apply to attributes; see XML Namespaces section 5.2
            return Namespace.create("""", """");
        }
        Namespaces rv = getAllNamespaces();
        return rv.getNamespace(prefix);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNamespaceDeclaration,"    Namespace getNamespaceDeclaration() {
        if (dom.getPrefix() == null) return getNamespaceDeclaration("""");
        return getNamespaceDeclaration(dom.getPrefix());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,declare,"        void declare(Namespace n) {
            if (map.get(n.prefix) == null) {
                map.put(n.prefix, n.uri);
            }
            //    TODO    I think this is analogous to the other way, but have not really thought it through ... should local scope
            //            matter more than outer scope?
            if (uriToPrefix.get(n.uri) == null) {
                uriToPrefix.put(n.uri, n.prefix);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNamespaceByUri,"        Namespace getNamespaceByUri(String uri) {
            if (uriToPrefix.get(uri) == null) return null;
            return Namespace.create(uri, (String)uriToPrefix.get(uri));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNamespace,"        Namespace getNamespace(String prefix) {
            if (map.get(prefix) == null) return null;
            return Namespace.create(prefix, (String)map.get(prefix));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNamespaces,"        Namespace[] getNamespaces() {
            Iterator i = map.keySet().iterator();
            ArrayList rv = new ArrayList();
            while(i.hasNext()) {
                String prefix = (String)i.next();
                String uri = (String)map.get(prefix);
                Namespace n = Namespace.create(prefix, uri);
                if (!n.isEmpty()) {
                    rv.add( n );
                }
            }
            return (Namespace[])rv.toArray(new Namespace[0]);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,copy,"    final XmlNode copy() {
        return copy( this );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isParentType,"    final boolean isParentType() {
        return isElementType();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isTextType,"    final boolean isTextType() {
        return dom.getNodeType() == Node.TEXT_NODE || dom.getNodeType() == Node.CDATA_SECTION_NODE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isAttributeType,"    final boolean isAttributeType() {
        return dom.getNodeType() == Node.ATTRIBUTE_NODE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isProcessingInstructionType,"    final boolean isProcessingInstructionType() {
        return dom.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isCommentType,"    final boolean isCommentType() {
        return dom.getNodeType() == Node.COMMENT_NODE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isElementType,"    final boolean isElementType() {
        return dom.getNodeType() == Node.ELEMENT_NODE;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,renameNode,"    final void renameNode(QName qname) {
        this.dom = dom.getOwnerDocument().renameNode(dom, qname.getUri(), qname.qualify(dom));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,invalidateNamespacePrefix,"    void invalidateNamespacePrefix() {
        if (!(dom instanceof Element)) throw new IllegalStateException();
        String prefix = this.dom.getPrefix();
        QName after = QName.create(this.dom.getNamespaceURI(), this.dom.getLocalName(), null);
        renameNode(after);
        NamedNodeMap attrs = this.dom.getAttributes();
        for (int i=0; i<attrs.getLength(); i++) {
            if (attrs.item(i).getPrefix().equals(prefix)) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,declareNamespace,"    private void declareNamespace(Element e, String prefix, String uri) {
        if (prefix.length() > 0) {
            e.setAttributeNS(XML_NAMESPACES_NAMESPACE_URI, ""xmlns:"" + prefix, uri);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,declareNamespace,"    void declareNamespace(String prefix, String uri) {
        if (!(dom instanceof Element)) throw new IllegalStateException();
        if (dom.lookupNamespaceURI(uri) != null && dom.lookupNamespaceURI(uri).equals(prefix)) {
            //    do nothing",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getDefaultNamespace,"    private Namespace getDefaultNamespace() {
        String prefix = """";
        String uri = (dom.lookupNamespaceURI(null) == null) ? """" : dom.lookupNamespaceURI(null);
        return Namespace.create(prefix, uri);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getExistingPrefixFor,"    private String getExistingPrefixFor(Namespace namespace) {
        if (getDefaultNamespace().getUri().equals(namespace.getUri())) {
            return """";
        }
        return dom.lookupPrefix(namespace.getUri());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNodeNamespace,"    private Namespace getNodeNamespace() {
        String uri = dom.getNamespaceURI();
        String prefix = dom.getPrefix();
        if (uri == null) uri = """";
        if (prefix == null) prefix = """";
        return Namespace.create(prefix, uri);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNamespace,"    Namespace getNamespace() {
        return getNodeNamespace();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,removeNamespace,"    void removeNamespace(Namespace namespace) {
        Namespace current = getNodeNamespace();

        //    Do not remove in-use namespace
        if (namespace.is(current)) return;
        NamedNodeMap attrs = this.dom.getAttributes();
        for (int i=0; i<attrs.getLength(); i++) {
            XmlNode attr = XmlNode.createImpl(attrs.item(i));
            if (namespace.is(attr.getNodeNamespace())) return;
        }

        //    TODO    I must confess I am not sure I understand the spec fully.  See ECMA357 13.4.4.31
        String existingPrefix = getExistingPrefixFor(namespace);
        if (existingPrefix != null) {
            if (namespace.isUnspecifiedPrefix()) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,setProcessingInstructionName,"    private void setProcessingInstructionName(String localName) {
        org.w3c.dom.ProcessingInstruction pi = (ProcessingInstruction)this.dom;
        //    We cannot set the node name; Document.renameNode() only supports elements and attributes.  So we replace it
        pi.getParentNode().replaceChild(
            pi,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,setLocalName,"    final void setLocalName(String localName) {
        if (dom instanceof ProcessingInstruction) {
            setProcessingInstructionName(localName);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getQname,"    final QName getQname() {
        String uri = (dom.getNamespaceURI()) == null ? """" : dom.getNamespaceURI();
        String prefix = (dom.getPrefix() == null) ? """" : dom.getPrefix();
        return QName.create( uri, dom.getLocalName(), prefix );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,addMatchingChildren,"    void addMatchingChildren(XMLList result, XmlNode.Filter filter) {
        Node node = this.dom;
        NodeList children = node.getChildNodes();
        for(int i=0; i<children.getLength(); i++) {
            Node childnode = children.item(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getMatchingChildren,"    XmlNode[] getMatchingChildren(Filter filter) {
        ArrayList rv = new ArrayList();
        NodeList nodes = this.dom.getChildNodes();
        for (int i=0; i<nodes.getLength(); i++) {
            Node node = nodes.item(i);
            if (filter.accept(node)) {
                rv.add( createImpl(node) );
            }
        }
        return (XmlNode[])rv.toArray(new XmlNode[0]);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getAttributes,"    XmlNode[] getAttributes() {
        NamedNodeMap attrs = this.dom.getAttributes();
        //    TODO    Or could make callers handle null?
        if (attrs == null) throw new IllegalStateException(""Must be element."");
        XmlNode[] rv = new XmlNode[attrs.getLength()];
        for (int i=0; i<attrs.getLength(); i++) {
            rv[i] = createImpl( attrs.item(i) );
        }
        return rv;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getAttributeValue,"    String getAttributeValue() {
        return ((Attr)dom).getValue();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,setAttribute,"    void setAttribute(QName name, String value) {
        if (!(dom instanceof Element)) throw new IllegalStateException(""Can only set attribute on elements."");
        name.setAttribute( (Element)dom, value );
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,replaceWith,"    void replaceWith(XmlNode other) {
        Node replacement = other.dom;
        if (replacement.getOwnerDocument() != this.dom.getOwnerDocument()) {
            replacement = this.dom.getOwnerDocument().importNode(replacement, true);
        }
        this.dom.getParentNode().replaceChild(replacement, this.dom);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,ecmaToXMLString,"    String ecmaToXMLString(XmlProcessor processor) {
        if (this.isElementType()) {
            Element copy = (Element)this.dom.cloneNode(true);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,create,"        static Namespace create(String prefix, String uri) {
            if (prefix == null) throw new IllegalArgumentException(""Empty string represents default namespace prefix"");
            if (uri == null) throw new IllegalArgumentException(""Namespace may not lack a URI"");
            Namespace rv = new Namespace();
            rv.prefix = prefix;
            rv.uri = uri;
            return rv;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,create,"        static Namespace create(String uri) {
            Namespace rv = new Namespace();
            rv.uri = uri;
            return rv;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,toString,"        public String toString() {
            if (prefix == null) return ""XmlNode.Namespace ["" + uri + ""]"";
            return ""XmlNode.Namespace ["" + prefix + ""{"" + uri + ""}]"";
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isUnspecifiedPrefix,"        boolean isUnspecifiedPrefix() {
            return prefix == null;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,is,"        boolean is(Namespace other) {
            return this.prefix != null && other.prefix != null && this.prefix.equals(other.prefix) && this.uri.equals(other.uri);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isEmpty,"        boolean isEmpty() {
            return prefix != null && prefix.equals("""") && uri.equals("""");
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isDefault,"        boolean isDefault() {
            return prefix != null && prefix.equals("""");
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isGlobal,"        boolean isGlobal() {
            return uri != null && uri.equals("""");
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,setPrefix,"        private void setPrefix(String prefix) {
            if (prefix == null) throw new IllegalArgumentException();
            this.prefix = prefix;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getPrefix,"        String getPrefix() {
            return prefix;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getUri,"        String getUri() {
            return uri;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,create,"        static QName create(Namespace namespace, String localName) {
            //    A null namespace indicates a wild-card match for any namespace
            //    A null localName indicates ""*"" from the point of view of ECMA357
            if (localName != null && localName.equals(""*"")) throw new RuntimeException(""* is not valid localName"");
            QName rv = new QName();
            rv.namespace = namespace;
            rv.localName = localName;
            return rv;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,create,"        static QName create(String uri, String localName, String prefix) {
            return create(Namespace.create(prefix, uri), localName);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,qualify,"        static String qualify(String prefix, String localName) {
            if (prefix == null) throw new IllegalArgumentException(""prefix must not be null"");
            if (prefix.length() > 0) return prefix + "":"" + localName;
            return localName;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,toString,"        public String toString() {
            return ""XmlNode.QName ["" + localName + "","" + namespace + ""]"";
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,equals,"        private boolean equals(String one, String two) {
            if (one == null && two == null) return true;
            if (one == null || two == null) return false;
            return one.equals(two);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,namespacesEqual,"        private boolean namespacesEqual(Namespace one, Namespace two) {
            if (one == null && two == null) return true;
            if (one == null || two == null) return false;
            return equals(one.getUri(), two.getUri());
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,isEqualTo,"        final boolean isEqualTo(QName other) {
            if (!namespacesEqual(this.namespace, other.namespace)) return false;
            if (!equals(this.localName, other.localName)) return false;
            return true;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,lookupPrefix,"        void lookupPrefix(org.w3c.dom.Node node) {
            if (node == null) throw new IllegalArgumentException(""node must not be null"");
            String prefix = node.lookupPrefix(namespace.getUri());
            if (prefix == null) {
                //    check to see if we match the default namespace
                String defaultNamespace = node.lookupNamespaceURI(null);
                if (defaultNamespace == null) defaultNamespace = """";
                String nodeNamespace = namespace.getUri();
                if (nodeNamespace.equals(defaultNamespace)) {
                    prefix = """";
                }
            }
            int i = 0;
            while(prefix == null) {
                String generatedPrefix = ""e4x_"" + i++;
                String generatedUri = node.lookupNamespaceURI(generatedPrefix);
                if (generatedUri == null) {
                    prefix = generatedPrefix;
                    org.w3c.dom.Node top = node;
                    while(top.getParentNode() != null && top.getParentNode() instanceof org.w3c.dom.Element) {
                        top = top.getParentNode();
                    }
                    ((org.w3c.dom.Element)top).setAttributeNS(""http://www.w3.org/2000/xmlns/"", ""xmlns:"" + prefix, namespace.getUri());
                }
            }
            namespace.setPrefix(prefix);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,qualify,"        String qualify(org.w3c.dom.Node node) {
            if (namespace.getPrefix() == null) {
                if (node != null) {
                    lookupPrefix(node);
                } else {
                    if (namespace.getUri().equals("""")) {
                        namespace.setPrefix("""");
                    } else {
                        //    TODO    I am not sure this is right, but if we are creating a standalone node, I think we can set the
                        //            default namespace on the node itself and not worry about setting a prefix for that namespace.
                        namespace.setPrefix("""");
                    }
                }
            }
            return qualify(namespace.getPrefix(), localName);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,setAttribute,"        void setAttribute(org.w3c.dom.Element element, String value) {
            if (namespace.getPrefix() == null) lookupPrefix(element);
            element.setAttributeNS(namespace.getUri(), qualify(namespace.getPrefix(), localName), value);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getUri,"        String getUri() {
            return namespace.getUri();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getPrefix,"        String getPrefix() {
            return namespace.getPrefix();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getNamespace,"        Namespace getNamespace() {
            return namespace;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,getLocalName,"        String getLocalName() {
            return localName;
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,_add,"        private void _add(XmlNode n) {
            v.add(n);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,item,"        XmlNode item(int index) {
            return (XmlNode)(v.get(index));
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,remove,"        void remove(int index) {
            v.remove(index);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,add,"        void add(List other) {
            for (int i=0; i<other.length(); i++) {
                _add(other.item(i));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,add,"        void add(List from, int startInclusive, int endExclusive) {
            for (int i=startInclusive; i<endExclusive; i++) {
                _add(from.item(i));",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,add,"        void add(XmlNode node) {
            _add(node);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,add,"        void add(XML xml) {
            _add(xml.getAnnotation());
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,addToList,"        void addToList(Object toAdd) {
            if (toAdd instanceof Undefined) {
                // Missing argument do nothing...
                return;
            }

            if (toAdd instanceof XMLList) {
                XMLList xmlSrc = (XMLList)toAdd;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,length,"        int length() {
            return v.size();
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,accept,"            boolean accept(Node node) {
                return node.getNodeType() == Node.COMMENT_NODE;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,accept,"            boolean accept(Node node) {
                return node.getNodeType() == Node.TEXT_NODE;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,PROCESSING_INSTRUCTION,"        static Filter PROCESSING_INSTRUCTION(final XMLName name) {
            return new Filter() {
                boolean accept(Node node) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,accept,"                boolean accept(Node node) {
                    if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                        ProcessingInstruction pi = (ProcessingInstruction)node;
                        return name.matchesLocalName(pi.getTarget());
                    }
                    return false;
                }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,accept,"            boolean accept(Node node) {
                return node.getNodeType() == Node.ELEMENT_NODE;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,accept,"            boolean accept(Node node) {
                return true;
            }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlNode.java,toDomNode,"    org.w3c.dom.Node toDomNode() {
        return this.dom;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,throwError,"        private void throwError(SAXParseException e) {
            throw ScriptRuntime.constructError(""TypeError"", e.getMessage(),
                e.getLineNumber() - 1);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,error,"        public void error(SAXParseException e) {
            throwError(e);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,fatalError,"        public void fatalError(SAXParseException e) {
            throwError(e);
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,warning,"        public void warning(SAXParseException e) {
            Context.reportWarning(e.getMessage());
        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,setDefault,"    final void setDefault() {
        this.setIgnoreComments(true);
        this.setIgnoreProcessingInstructions(true);
        this.setIgnoreWhitespace(true);
        this.setPrettyPrinting(true);
        this.setPrettyIndent(2);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,setIgnoreComments,"    final void setIgnoreComments(boolean b) {
        this.ignoreComments = b;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,setIgnoreWhitespace,"    final void setIgnoreWhitespace(boolean b) {
        this.ignoreWhitespace = b;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,setIgnoreProcessingInstructions,"    final void setIgnoreProcessingInstructions(boolean b) {
        this.ignoreProcessingInstructions = b;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,setPrettyPrinting,"    final void setPrettyPrinting(boolean b) {
        this.prettyPrint = b;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,setPrettyIndent,"    final void setPrettyIndent(int i) {
        this.prettyIndent = i;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,isIgnoreComments,"    final boolean isIgnoreComments() {
        return ignoreComments;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,isIgnoreProcessingInstructions,"    final boolean isIgnoreProcessingInstructions() {
        return ignoreProcessingInstructions;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,isIgnoreWhitespace,"    final boolean isIgnoreWhitespace() {
        return ignoreWhitespace;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,isPrettyPrinting,"    final boolean isPrettyPrinting() {
        return prettyPrint;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,getPrettyIndent,"    final int getPrettyIndent() {
        return prettyIndent;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,toXmlNewlines,"    private String toXmlNewlines(String rv) {
        StringBuffer nl = new StringBuffer();
        for (int i=0; i<rv.length(); i++) {
            if (rv.charAt(i) == '\r') {
                if (rv.charAt(i+1) == '\n') {
                    //    DOS, do nothing and skip the \r
                } else {
                    //    Macintosh, substitute \n
                    nl.append('\n');
                }
            } else {
                nl.append(rv.charAt(i));
            }
        }
        return nl.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,getDomFactory,"    private javax.xml.parsers.DocumentBuilderFactory getDomFactory() {
        return dom;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,getDocumentBuilderFromPool,"    private synchronized DocumentBuilder getDocumentBuilderFromPool()
        throws javax.xml.parsers.ParserConfigurationException
    {
        DocumentBuilder result;
        if (documentBuilder == null) {
            javax.xml.parsers.DocumentBuilderFactory factory = getDomFactory();
            result = factory.newDocumentBuilder();
        } else {
            result = documentBuilder;
            documentBuilder = null;
        }
        result.setErrorHandler(errorHandler);
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,returnDocumentBuilderToPool,"    private synchronized void returnDocumentBuilderToPool(DocumentBuilder db) {
        if (documentBuilder == null) {
            documentBuilder = db;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,addProcessingInstructionsTo,"    private void addProcessingInstructionsTo(java.util.Vector v, Node node) {
        if (node instanceof ProcessingInstruction) {
            v.add(node);
        }
        if (node.getChildNodes() != null) {
            for (int i=0; i<node.getChildNodes().getLength(); i++) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,addCommentsTo,"    private void addCommentsTo(java.util.Vector v, Node node) {
        if (node instanceof Comment) {
            v.add(node);
        }
        if (node.getChildNodes() != null) {
            for (int i=0; i<node.getChildNodes().getLength(); i++) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,addTextNodesToRemoveAndTrim,"    private void addTextNodesToRemoveAndTrim(java.util.Vector toRemove, Node node) {
        if (node instanceof Text) {
            Text text = (Text)node;
            boolean BUG_369394_IS_VALID = false;
            if (!BUG_369394_IS_VALID) {
                text.setData(text.getData().trim());
            } else {
                if (text.getData().trim().length() == 0) {
                    text.setData("""");
                }
            }
            if (text.getData().length() == 0) {
                toRemove.add(node);
            }
        }
        if (node.getChildNodes() != null) {
            for (int i=0; i<node.getChildNodes().getLength(); i++) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,toXml,"    final Node toXml(String defaultNamespaceUri, String xml) throws org.xml.sax.SAXException {
        //    See ECMA357 10.3.1
        DocumentBuilder builder = null;
        try {
            String syntheticXml = ""<parent xmlns=\"""" + defaultNamespaceUri +",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,newDocument,"    Document newDocument() {
        DocumentBuilder builder = null;
        try {
            //    TODO    Should this use XML settings?",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,toString,"    private String toString(Node node) {
        javax.xml.transform.dom.DOMSource source = new javax.xml.transform.dom.DOMSource(node);
        java.io.StringWriter writer = new java.io.StringWriter();
        javax.xml.transform.stream.StreamResult result = new javax.xml.transform.stream.StreamResult(writer);
        try {
            javax.xml.transform.Transformer transformer = xform.newTransformer();
            transformer.setOutputProperty(javax.xml.transform.OutputKeys.OMIT_XML_DECLARATION, ""yes"");
            transformer.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, ""no"");
            transformer.setOutputProperty(javax.xml.transform.OutputKeys.METHOD, ""xml"");
            transformer.transform(source, result);
        } catch (javax.xml.transform.TransformerConfigurationException ex) {
            //    TODO    How to handle these runtime errors?
            throw new RuntimeException(ex);
        } catch (javax.xml.transform.TransformerException ex) {
            //    TODO    How to handle these runtime errors?
            throw new RuntimeException(ex);
        }
        return toXmlNewlines(writer.toString());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,escapeAttributeValue,"    String escapeAttributeValue(Object value) {
        String text = ScriptRuntime.toString(value);

        if (text.length() == 0) return """";

        Document dom = newDocument();
        Element e = dom.createElement(""a"");
        e.setAttribute(""b"", text);
        String elementText = toString(e);
        int begin = elementText.indexOf('""');
        int end = elementText.lastIndexOf('""');
        return elementText.substring(begin+1,end);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,escapeTextValue,"    String escapeTextValue(Object value) {
        if (value instanceof XMLObjectImpl) {
            return ((XMLObjectImpl)value).toXMLString();
        }

        String text = ScriptRuntime.toString(value);

        if (text.length() == 0) return text;

        Document dom = newDocument();
        Element e = dom.createElement(""a"");
        e.setTextContent(text);
        String elementText = toString(e);

        int begin = elementText.indexOf('>') + 1;
        int end = elementText.lastIndexOf('<');
        return (begin < end) ? elementText.substring(begin, end) : """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,escapeElementValue,"    private String escapeElementValue(String s) {
        //    TODO    Check this
        return escapeTextValue(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,elementToXmlString,"    private String elementToXmlString(Element element) {
        //    TODO    My goodness ECMA is complicated (see 10.2.1).  We'll try this first.
        Element copy = (Element)element.cloneNode(true);
        if (prettyPrint) {
            beautifyElement(copy, 0);
        }
        return toString(copy);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,ecmaToXmlString,"    final String ecmaToXmlString(Node node) {
        //    See ECMA 357 Section 10.2.1
        StringBuffer s = new StringBuffer();
        int indentLevel = 0;
        if (prettyPrint) {
            for (int i=0; i<indentLevel; i++) {
                s.append(' ');
            }
        }
        if (node instanceof Text) {
            String data = ((Text)node).getData();
            //    TODO Does Java trim() work same as XMLWhitespace?
            String v = (prettyPrint) ? data.trim() : data;
            s.append(escapeElementValue(v));
            return s.toString();
        }
        if (node instanceof Attr) {
            String value = ((Attr)node).getValue();
            s.append(escapeAttributeValue(value));
            return s.toString();
        }
        if (node instanceof Comment) {
            s.append(""<!--"" + ((Comment)node).getNodeValue() + ""-->"");
            return s.toString();
        }
        if (node instanceof ProcessingInstruction) {
            ProcessingInstruction pi = (ProcessingInstruction)node;
            s.append(""<?"" + pi.getTarget() + "" "" + pi.getData() + ""?>"");
            return s.toString();
        }
        s.append(elementToXmlString((Element)node));
        return s.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,XmlProcessor.java,beautifyElement,"    private void beautifyElement(Element e, int indent) {
        StringBuffer s = new StringBuffer();
        s.append('\n');
        for (int i=0; i<indent; i++) {
            s.append(' ');
        }
        String afterContent = s.toString();
        for (int i=0; i<prettyIndent; i++) {
            s.append(' ');
        }
        String beforeContent = s.toString();

        //    We ""mark"" all the nodes first; if we tried to do this loop otherwise, it would behave unexpectedly (the inserted nodes
        //    would contribute to the length and it might never terminate).
        java.util.Vector toIndent = new java.util.Vector();
        boolean indentChildren = false;
        for (int i=0; i<e.getChildNodes().getLength(); i++) {
            if (i == 1) indentChildren = true;
            if (e.getChildNodes().item(i) instanceof Text) {
                toIndent.add(e.getChildNodes().item(i));
            } else {
                indentChildren = true;
                toIndent.add(e.getChildNodes().item(i));
            }
        }
        if (indentChildren) {
            for (int i=0; i<toIndent.size(); i++) {
                e.insertBefore( e.getOwnerDocument().createTextNode(beforeContent), (Node)toIndent.elementAt(i) );
            }
        }
        NodeList nodes = e.getChildNodes();
        java.util.Vector v = new java.util.Vector();
        for (int i=0; i<nodes.getLength(); i++) {
            if (nodes.item(i) instanceof Element) {
                v.add( nodes.item(i) );
            }
        }
        for (int i=0; i<v.size(); i++) {
            beautifyElement( (Element)v.elementAt(i), indent + prettyIndent );
        }
        if (indentChildren) {
            e.appendChild( e.getOwnerDocument().createTextNode(afterContent) );",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Bootstrap.java,main,"    public static void main(String args[]) throws Exception {
        ClassLoader loader = new JarClassLoader();
        Thread.currentThread().setContextClassLoader(loader);
        Class c = loader.loadClass(YUICompressor.class.getName());
        Method main = c.getMethod(""main"", new Class[]{String[].class});
        main.invoke(null, new Object[]{args});
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,CssCompressor.java,compress,"    public void compress(Writer out, int linebreakpos)
            throws IOException {

        Pattern p;
        Matcher m;
        String css;
        StringBuffer sb;
        int startIndex, endIndex;

        // Remove all comment blocks...
        startIndex = 0;
        boolean iemac = false;
        boolean preserve = false;
        sb = new StringBuffer(srcsb.toString());
        while ((startIndex = sb.indexOf(""/*"", startIndex)) >= 0) {
            preserve = sb.length() > startIndex + 2 && sb.charAt(startIndex + 2) == '!';
            endIndex = sb.indexOf(""*/"", startIndex + 2);
            if (endIndex < 0) {
                if (!preserve) {
                    sb.delete(startIndex, sb.length());
                }
            } else if (endIndex >= startIndex + 2) {
                if (sb.charAt(endIndex-1) == '\\') {
                    // Looks like a comment to hide rules from IE Mac.
                    // Leave this comment, and the following one, alone...
                    startIndex = endIndex + 2;
                    iemac = true;
                } else if (iemac) {
                    startIndex = endIndex + 2;
                    iemac = false;
                } else if (!preserve) {
                    sb.delete(startIndex, endIndex + 2);
                } else {
                    startIndex = endIndex + 2;
                }
            }
        }

        css = sb.toString();

        // Normalize all whitespace strings to single spaces. Easier to work with that way.
        css = css.replaceAll(""\\s+"", "" "");

        // Make a pseudo class for the Box Model Hack
        css = css.replaceAll(""\""\\\\\""}\\\\\""\"""", ""___PSEUDOCLASSBMH___"");

        // Remove the spaces before the things that should not have spaces before them.
        // But, be careful not to turn ""p :link {...}"" into ""p:link{...}""
        // Swap out any pseudo-class colons with the token, and then swap back.
        sb = new StringBuffer();
        p = Pattern.compile(""(^|\\})(([^\\{:])+:)+([^\\{]*\\{)"");
        m = p.matcher(css);
        while (m.find()) {
            String s = m.group();
            s = s.replaceAll("":"", ""___PSEUDOCLASSCOLON___"");
            m.appendReplacement(sb, s);
        }
        m.appendTail(sb);
        css = sb.toString();
        css = css.replaceAll(""\\s+([!{};:>+\\(\\)\\],])"", ""$1"");
        css = css.replaceAll(""___PSEUDOCLASSCOLON___"", "":"");

        // Remove the spaces after the things that should not have spaces after them.
        css = css.replaceAll(""([!{}:;>+\\(\\[,])\\s+"", ""$1"");

        // Add the semicolon where it's missing.
        css = css.replaceAll(""([^;\\}])}"", ""$1;}"");

        // Replace 0(px,em,%) with 0.
        css = css.replaceAll(""([\\s:])(0)(px|em|%|in|cm|mm|pc|pt|ex)"", ""$1$2"");

        // Replace 0 0 0 0; with 0.
        css = css.replaceAll("":0 0 0 0;"", "":0;"");
        css = css.replaceAll("":0 0 0;"", "":0;"");
        css = css.replaceAll("":0 0;"", "":0;"");
        // Replace background-position:0; with background-position:0 0;
        css = css.replaceAll(""background-position:0;"", ""background-position:0 0;"");

        // Replace 0.6 to .6, but only when preceded by : or a white-space
        css = css.replaceAll(""(:|\\s)0+\\.(\\d+)"", ""$1.$2"");

        // Shorten colors from rgb(51,102,153) to #336699
        // This makes it more likely that it'll get further compressed in the next step.
        p = Pattern.compile(""rgb\\s*\\(\\s*([0-9,\\s]+)\\s*\\)"");
        m = p.matcher(css);
        sb = new StringBuffer();
        while (m.find()) {
            String[] rgbcolors = m.group(1).split("","");
            StringBuffer hexcolor = new StringBuffer(""#"");
            for (int i = 0; i < rgbcolors.length; i++) {
                int val = Integer.parseInt(rgbcolors[i]);
                if (val < 16) {
                    hexcolor.append(""0"");
                }
                hexcolor.append(Integer.toHexString(val));
            }
            m.appendReplacement(sb, hexcolor.toString());
        }
        m.appendTail(sb);
        css = sb.toString();

        // Shorten colors from #AABBCC to #ABC. Note that we want to make sure
        // the color is not preceded by either "", "" or =. Indeed, the property
        //     filter: chroma(color=""#FFFFFF"");
        // would become
        //     filter: chroma(color=""#FFF"");
        // which makes the filter break in IE.
        p = Pattern.compile(""([^\""'=\\s])(\\s*)#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])"");
        m = p.matcher(css);
        sb = new StringBuffer();
        while (m.find()) {
            // Test for AABBCC pattern
            if (m.group(3).equalsIgnoreCase(m.group(4)) &&
                    m.group(5).equalsIgnoreCase(m.group(6)) &&
                    m.group(7).equalsIgnoreCase(m.group(8))) {
                m.appendReplacement(sb, m.group(1) + m.group(2) + ""#"" + m.group(3) + m.group(5) + m.group(7));
            } else {
                m.appendReplacement(sb, m.group());
            }
        }
        m.appendTail(sb);
        css = sb.toString();

        // Remove empty rules.
        css = css.replaceAll(""[^\\}]+\\{;\\}"", """");

        if (linebreakpos >= 0) {
            // Some source control tools don't like it when files containing lines longer
            // than, say 8000 characters, are checked in. The linebreak option is used in
            // that case to split long lines after a specific column.
            int i = 0;
            int linestartpos = 0;
            sb = new StringBuffer(css);
            while (i < sb.length()) {
                char c = sb.charAt(i++);
                if (c == '}' && i - linestartpos > linebreakpos) {
                    sb.insert(i, '\n');
                    linestartpos = i;
                }
            }

            css = sb.toString();
        }

        // Replace the pseudo class for the Box Model Hack
        css = css.replaceAll(""___PSEUDOCLASSBMH___"", ""\""\\\\\""}\\\\\""\"""");

        // Replace multiple semi-colons in a row by a single one
        // See SF bug #1980989
        css = css.replaceAll("";;+"", "";"");

        // Trim the final string (for any leading or trailing white spaces)
        css = css.trim();

        // Write the output...
        out.write(css);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JarClassLoader.java,loadClass,"    public Class loadClass(String name) throws ClassNotFoundException {

        // First check if the class is already loaded
        Class c = findLoadedClass(name);
        if (c == null) {
            c = findClass(name);
        }

        if (c == null) {
            c = ClassLoader.getSystemClassLoader().loadClass(name);
        }

        return c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JarClassLoader.java,getJarPath,"    private static String getJarPath() {

        if (jarPath != null) {
            return jarPath;
        }

        String classname = JarClassLoader.class.getName().replace('.', '/') + "".class"";
        String classpath = System.getProperty(""java.class.path"");
        String classpaths[] = classpath.split(System.getProperty(""path.separator""));

        for (int i = 0; i < classpaths.length; i++) {

            String path = classpaths[i];
            JarFile jarFile = null;
            JarEntry jarEntry = null;

            try {
                jarFile = new JarFile(path);
                jarEntry = findJarEntry(jarFile, classname);
            } catch (IOException ioe) {
                /* ignore */
            } finally {
                if (jarFile != null) {
                    try {
                        jarFile.close();
                    } catch (IOException ioe) {
                        /* ignore */
                    }
                }
            }

            if (jarEntry != null) {
                jarPath = path;
                break;
            }
        }

        return jarPath;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JarClassLoader.java,findJarEntry,"    private static JarEntry findJarEntry(JarFile jarFile, String entryName) {

        Enumeration entries = jarFile.entries();

        while (entries.hasMoreElements()) {
            JarEntry entry = (JarEntry) entries.nextElement();
            if (entry.getName().equals(entryName)) {
                return entry;
            }
        }

        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JarClassLoader.java,findClass,"    protected Class findClass(String name) {

        Class c = null;
        String jarPath = getJarPath();

        if (jarPath != null) {
            JarFile jarFile = null;
            try {
                jarFile = new JarFile(jarPath);
                c = loadClassData(jarFile, name);
            } catch (IOException ioe) {
                /* ignore */
            } finally {
                if (jarFile != null) {
                    try {
                        jarFile.close();
                    } catch (IOException ioe) {
                        /* ignore */
                    }
                }
            }
        }

        return c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JarClassLoader.java,loadClassData,"    private Class loadClassData(JarFile jarFile, String className) {

        String entryName = className.replace('.', '/') + "".class"";
        JarEntry jarEntry = findJarEntry(jarFile, entryName);
        if (jarEntry == null) {
            return null;
        }

        // Create the necessary package if needed...
        int index = className.lastIndexOf('.');
        if (index >= 0) {
            String packageName = className.substring(0, index);
            if (getPackage(packageName) == null) {
                definePackage(packageName, """", """", """", """", """", """", null);
            }
        }

        // Read the Jar File entry and define the class...
        Class c = null;
        try {
            InputStream is = jarFile.getInputStream(jarEntry);
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            copy(is, os);
            byte[] bytes = os.toByteArray();
            c = defineClass(className, bytes, 0, bytes.length);
        } catch (IOException ioe) {
            /* ignore */
        }

        return c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JarClassLoader.java,copy,"    private void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[1024];
        while (true) {
            int len = in.read(buf);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,countChar,"    private static int countChar(String haystack, char needle) {
        int idx = 0;
        int count = 0;
        int length = haystack.length();
        while (idx < length) {
            char c = haystack.charAt(idx++);
            if (c == needle) {
                count++;
            }
        }
        return count;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,printSourceString,"    private static int printSourceString(String source, int offset, StringBuffer sb) {
        int length = source.charAt(offset);
        ++offset;
        if ((0x8000 & length) != 0) {
            length = ((0x7FFF & length) << 16) | source.charAt(offset);
            ++offset;
        }
        if (sb != null) {
            String str = source.substring(offset, offset + length);
            sb.append(str);
        }
        return offset + length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,printSourceNumber,"    private static int printSourceNumber(String source,
            int offset, StringBuffer sb) {
        double number = 0.0;
        char type = source.charAt(offset);
        ++offset;
        if (type == 'S') {
            if (sb != null) {
                number = source.charAt(offset);
            }
            ++offset;
        } else if (type == 'J' || type == 'D') {
            if (sb != null) {
                long lbits;
                lbits = (long) source.charAt(offset) << 48;
                lbits |= (long) source.charAt(offset + 1) << 32;
                lbits |= (long) source.charAt(offset + 2) << 16;
                lbits |= (long) source.charAt(offset + 3);
                if (type == 'J') {
                    number = lbits;
                } else {
                    number = Double.longBitsToDouble(lbits);
                }
            }
            offset += 4;
        } else {
            // Bad source
            throw new RuntimeException();
        }
        if (sb != null) {
            sb.append(ScriptRuntime.numberToString(number, 10));
        }
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,parse,"    private static ArrayList parse(Reader in, ErrorReporter reporter)
            throws IOException, EvaluatorException {

        CompilerEnvirons env = new CompilerEnvirons();
        Parser parser = new Parser(env, reporter);
        parser.parse(in, null, 1);
        String source = parser.getEncodedSource();

        int offset = 0;
        int length = source.length();
        ArrayList tokens = new ArrayList();
        StringBuffer sb = new StringBuffer();

        while (offset < length) {
            int tt = source.charAt(offset++);
            switch (tt) {

                case Token.SPECIALCOMMENT:
                case Token.NAME:
                case Token.REGEXP:
                case Token.STRING:
                    sb.setLength(0);
                    offset = printSourceString(source, offset, sb);
                    tokens.add(new JavaScriptToken(tt, sb.toString()));
                    break;

                case Token.NUMBER:
                    sb.setLength(0);
                    offset = printSourceNumber(source, offset, sb);
                    tokens.add(new JavaScriptToken(tt, sb.toString()));
                    break;

                default:
                    String literal = (String) literals.get(new Integer(tt));
                    if (literal != null) {
                        tokens.add(new JavaScriptToken(tt, literal));
                    }
                    break;
            }
        }

        return tokens;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,processStringLiterals,"    private static void processStringLiterals(ArrayList tokens, boolean merge) {

        String tv;
        int i, length = tokens.size();
        JavaScriptToken token, prevToken, nextToken;

        if (merge) {

            // Concatenate string literals that are being appended wherever
            // it is safe to do so. Note that we take care of the case:
            //     ""a"" + ""b"".toUpperCase()

            for (i = 0; i < length; i++) {
                token = (JavaScriptToken) tokens.get(i);
                switch (token.getType()) {

                    case Token.ADD:
                        if (i > 0 && i < length) {
                            prevToken = (JavaScriptToken) tokens.get(i - 1);
                            nextToken = (JavaScriptToken) tokens.get(i + 1);
                            if (prevToken.getType() == Token.STRING && nextToken.getType() == Token.STRING &&
                                    (i == length - 1 || ((JavaScriptToken) tokens.get(i + 2)).getType() != Token.DOT)) {
                                tokens.set(i - 1, new JavaScriptToken(Token.STRING,
                                        prevToken.getValue() + nextToken.getValue()));
                                tokens.remove(i + 1);
                                tokens.remove(i);
                                i = i - 1;
                                length = length - 2;
                                break;
                            }
                        }
                }
            }

        }

        // Second pass...

        for (i = 0; i < length; i++) {
	    // APPJET modifications in this loop",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,escapeString,"    private static String escapeString(String s, char quotechar) {

        assert quotechar == '""' || quotechar == '\'';

        if (s == null) {
            return null;
        }

        StringBuffer sb = new StringBuffer();
        for (int i = 0, L = s.length(); i < L; i++) {
            int c = s.charAt(i);
            if (c == quotechar) {
                sb.append(""\\"");
            }
            sb.append((char) c);
        }

        return sb.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,isValidIdentifier,"    private static boolean isValidIdentifier(String s) {
        Matcher m = SIMPLE_IDENTIFIER_NAME_PATTERN.matcher(s);
        return (m.matches() && !reserved.contains(s));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,optimizeObjectMemberAccess,"    private static void optimizeObjectMemberAccess(ArrayList tokens) {

        String tv;
        int i, length;
        JavaScriptToken token;

        for (i = 0, length = tokens.size(); i < length; i++) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,optimizeObjLitMemberDecl,"    private static void optimizeObjLitMemberDecl(ArrayList tokens) {

        String tv;
        int i, length;
        JavaScriptToken token;

        for (i = 0, length = tokens.size(); i < length; i++) {
            if (((JavaScriptToken) tokens.get(i)).getType() == Token.OBJECTLIT &&",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,compress,"    public void compress(Writer out, int linebreak, boolean munge, boolean verbose,
            boolean preserveAllSemiColons, boolean disableOptimizations)
            throws IOException {

        this.munge = munge;
        this.verbose = verbose;

        processStringLiterals(this.tokens, !disableOptimizations);

        if (!disableOptimizations) {
            optimizeObjectMemberAccess(this.tokens);
            optimizeObjLitMemberDecl(this.tokens);
        }

        buildSymbolTree();
        // DO NOT TOUCH this.tokens BETWEEN THESE TWO PHASES (BECAUSE OF this.indexedScopes)
        mungeSymboltree();
        StringBuffer sb = printSymbolTree(linebreak, preserveAllSemiColons);

        out.write(sb.toString());
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,getCurrentScope,"    private ScriptOrFnScope getCurrentScope() {
        return (ScriptOrFnScope) scopes.peek();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,enterScope,"    private void enterScope(ScriptOrFnScope scope) {
        scopes.push(scope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,leaveCurrentScope,"    private void leaveCurrentScope() {
        scopes.pop();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,consumeToken,"    private JavaScriptToken consumeToken() {
        return (JavaScriptToken) tokens.get(offset++);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,getToken,"    private JavaScriptToken getToken(int delta) {
        return (JavaScriptToken) tokens.get(offset + delta);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,getIdentifier,"    private JavaScriptIdentifier getIdentifier(String symbol, ScriptOrFnScope scope) {
        JavaScriptIdentifier identifier;
        while (scope != null) {
            identifier = scope.getIdentifier(symbol);
            if (identifier != null) {
                return identifier;
            }
            scope = scope.getParentScope();
        }
        return null;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,protectScopeFromObfuscation,"    private void protectScopeFromObfuscation(ScriptOrFnScope scope) {
        assert scope != null;

        if (scope == globalScope) {
            // The global scope does not get obfuscated,
            // so we don't need to worry about it...
            return;
        }

        // Find the highest local scope containing the specified scope.
        while (scope.getParentScope() != globalScope) {
            scope = scope.getParentScope();
        }

        assert scope.getParentScope() == globalScope;
        scope.preventMunging();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,getDebugString,"    private String getDebugString(int max) {
        assert max > 0;
        StringBuffer result = new StringBuffer();
        int start = Math.max(offset - max, 0);
        int end = Math.min(offset + max, tokens.size());
        for (int i = start; i < end; i++) {
            JavaScriptToken token = (JavaScriptToken) tokens.get(i);
            if (i == offset - 1) {
                result.append("" ---> "");
            }
            result.append(token.getValue());
            if (i == offset - 1) {
                result.append("" <--- "");
            }
        }
        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,warn,"    private void warn(String message, boolean showDebugString) {
        if (verbose) {
            if (showDebugString) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,parseFunctionDeclaration,"    private void parseFunctionDeclaration() {

        String symbol;
        JavaScriptToken token;
        ScriptOrFnScope currentScope, fnScope;
        JavaScriptIdentifier identifier;

        currentScope = getCurrentScope();

        token = consumeToken();
        if (token.getType() == Token.NAME) {
            if (mode == BUILDING_SYMBOL_TREE) {
                // Get the name of the function and declare it in the current scope.
                symbol = token.getValue();
                if (currentScope.getIdentifier(symbol) != null) {
                    warn(""The function "" + symbol + "" has already been declared in the same scope..."", true);
                }
                currentScope.declareIdentifier(symbol);
            }
            token = consumeToken();
        }

        assert token.getType() == Token.LP;
        if (mode == BUILDING_SYMBOL_TREE) {
            fnScope = new ScriptOrFnScope(braceNesting, currentScope);
            indexedScopes.put(new Integer(offset), fnScope);
        } else {
            fnScope = (ScriptOrFnScope) indexedScopes.get(new Integer(offset));
        }

        // Parse function arguments.
        int argpos = 0;
        while ((token = consumeToken()).getType() != Token.RP) {
            assert token.getType() == Token.NAME ||
                    token.getType() == Token.COMMA;
            if (token.getType() == Token.NAME && mode == BUILDING_SYMBOL_TREE) {
                symbol = token.getValue();
                identifier = fnScope.declareIdentifier(symbol);
                if (symbol.equals(""$super"") && argpos == 0) {
                    // Exception for Prototype 1.6...
                    identifier.preventMunging();
                }
                argpos++;
            }
        }

        token = consumeToken();
        assert token.getType() == Token.LC;
        braceNesting++;

        token = getToken(0);
        if (token.getType() == Token.STRING &&
                getToken(1).getType() == Token.SEMI) {
            // This is a hint. Hints are empty statements that look like
            // ""localvar1:nomunge, localvar2:nomunge""; They allow developers
            // to prevent specific symbols from getting obfuscated (some heretic
            // implementations, such as Prototype 1.6, require specific variable
            // names, such as $super for example, in order to work appropriately.
            // Note: right now, only ""nomunge"" is supported in the right hand side
            // of a hint. However, in the future, the right hand side may contain
            // other values.
            consumeToken();
            String hints = token.getValue();
            // Remove the leading and trailing quotes...
            hints = hints.substring(1, hints.length() - 1).trim();
            StringTokenizer st1 = new StringTokenizer(hints, "","");
            while (st1.hasMoreTokens()) {
                String hint = st1.nextToken();
                int idx = hint.indexOf(':');
                if (idx <= 0 || idx >= hint.length() - 1) {
                    if (mode == BUILDING_SYMBOL_TREE) {
                        // No need to report the error twice, hence the test...
                        warn(""Invalid hint syntax: "" + hint, true);
                    }
                    break;
                }
                String variableName = hint.substring(0, idx).trim();
                String variableType = hint.substring(idx + 1).trim();
                if (mode == BUILDING_SYMBOL_TREE) {
                    fnScope.addHint(variableName, variableType);
                } else if (mode == CHECKING_SYMBOL_TREE) {
                    identifier = fnScope.getIdentifier(variableName);
                    if (identifier != null) {
                        if (variableType.equals(""nomunge"")) {
                            identifier.preventMunging();
                        } else {
                            warn(""Unsupported hint value: "" + hint, true);
                        }
                    } else {
                        warn(""Hint refers to an unknown identifier: "" + hint, true);
                    }
                }
            }
        }

        parseScope(fnScope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,parseCatch,"    private void parseCatch() {

        String symbol;
        JavaScriptToken token;
        ScriptOrFnScope currentScope;
        JavaScriptIdentifier identifier;

        token = getToken(-1);
        assert token.getType() == Token.CATCH;
        token = consumeToken();
        assert token.getType() == Token.LP;
        token = consumeToken();
        assert token.getType() == Token.NAME;

        symbol = token.getValue();
        currentScope = getCurrentScope();

        if (mode == BUILDING_SYMBOL_TREE) {
            // We must declare the exception identifier in the containing function
            // scope to avoid errors related to the obfuscation process. No need to
            // display a warning if the symbol was already declared here...
            currentScope.declareIdentifier(symbol);
        } else {
            identifier = getIdentifier(symbol, currentScope);
            identifier.incrementRefcount();
        }

        token = consumeToken();
        assert token.getType() == Token.RP;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,parseExpression,"    private void parseExpression() {

        // Parse the expression until we encounter a comma or a semi-colon
        // in the same brace nesting, bracket nesting and paren nesting.
        // Parse functions if any...

        String symbol;
        JavaScriptToken token;
        ScriptOrFnScope currentScope;
        JavaScriptIdentifier identifier;

        int expressionBraceNesting = braceNesting;
        int bracketNesting = 0;
        int parensNesting = 0;

        int length = tokens.size();

        while (offset < length) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,parseScope,"    private void parseScope(ScriptOrFnScope scope) {

        String symbol;
        JavaScriptToken token;
        JavaScriptIdentifier identifier;

        int length = tokens.size();

        enterScope(scope);

        while (offset < length) {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,buildSymbolTree,"    private void buildSymbolTree() {
        offset = 0;
        braceNesting = 0;
        scopes.clear();
        indexedScopes.clear();
        indexedScopes.put(new Integer(0), globalScope);
        mode = BUILDING_SYMBOL_TREE;
        parseScope(globalScope);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,mungeSymboltree,"    private void mungeSymboltree() {

        if (!munge) {
            return;
        }

        // One problem with obfuscation resides in the use of undeclared
        // and un-namespaced global symbols that are 3 characters or less
        // in length. Here is an example:
        //
        //     var declaredGlobalVar;
        //
        //     function declaredGlobalFn() {
        //         var localvar;
        //         localvar = abc; // abc is an undeclared global symbol
        //     }
        //
        // In the example above, there is a slim chance that localvar may be
        // munged to 'abc', conflicting with the undeclared global symbol
        // abc, creating a potential bug. The following code detects such
        // global symbols. This must be done AFTER the entire file has been
        // parsed, and BEFORE munging the symbol tree. Note that declaring
        // extra symbols in the global scope won't hurt.
        //
        // Note: Since we go through all the tokens to do this, we also use
        // the opportunity to count how many times each identifier is used.

        offset = 0;
        braceNesting = 0;
        scopes.clear();
        mode = CHECKING_SYMBOL_TREE;
        parseScope(globalScope);
        globalScope.munge();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptCompressor.java,printSymbolTree,"    private StringBuffer printSymbolTree(int linebreakpos, boolean preserveAllSemiColons)
            throws IOException {

        offset = 0;
        braceNesting = 0;
        scopes.clear();

        String symbol;
        JavaScriptToken token;
        ScriptOrFnScope currentScope;
        JavaScriptIdentifier identifier;

        int length = tokens.size();
        StringBuffer result = new StringBuffer();

        int linestartpos = 0;

        enterScope(globalScope);

        while (offset < length) {

            token = consumeToken();
            symbol = token.getValue();
            currentScope = getCurrentScope();

            switch (token.getType()) {

                case Token.NAME:

                    if (offset >= 2 && getToken(-2).getType() == Token.DOT ||
                            getToken(0).getType() == Token.OBJECTLIT) {

                        result.append(symbol);

                    } else {

                        identifier = getIdentifier(symbol, currentScope);
                        if (identifier != null) {
                            if (identifier.getMungedValue() != null) {
                                result.append(identifier.getMungedValue());
                            } else {
                                result.append(symbol);
                            }
                            if (currentScope != globalScope && identifier.getRefcount() == 0) {
                                warn(""The symbol "" + symbol + "" is declared but is apparently never used.\nThis code can probably be written in a more compact way."", true);
                            }
                        } else {
                            result.append(symbol);
                        }
                    }
                    break;

                case Token.REGEXP:
                case Token.NUMBER:
                case Token.STRING:
                    result.append(symbol);
                    break;

                case Token.ADD:
                case Token.SUB:
                    result.append((String) literals.get(new Integer(token.getType())));
                    if (offset < length) {
                        token = getToken(0);
                        if (token.getType() == Token.INC ||
                                token.getType() == Token.DEC ||
                                token.getType() == Token.ADD ||
                                token.getType() == Token.DEC) {
                            // Handle the case x +/- ++/-- y
                            // We must keep a white space here. Otherwise, x +++ y would be
                            // interpreted as x ++ + y by the compiler, which is a bug (due
                            // to the implicit assignment being done on the wrong variable)
                            result.append(' ');
                        } else if (token.getType() == Token.POS && getToken(-1).getType() == Token.ADD ||
                                token.getType() == Token.NEG && getToken(-1).getType() == Token.SUB) {
                            // Handle the case x + + y and x - - y
                            result.append(' ');
                        }
                    }
                    break;

                case Token.FUNCTION:
                    result.append(""function"");
                    token = consumeToken();
                    if (token.getType() == Token.NAME) {
                        result.append(' ');
                        symbol = token.getValue();
                        identifier = getIdentifier(symbol, currentScope);
                        assert identifier != null;
                        if (identifier.getMungedValue() != null) {
                            result.append(identifier.getMungedValue());
                        } else {
                            result.append(symbol);
                        }
                        if (currentScope != globalScope && identifier.getRefcount() == 0) {
                            warn(""The symbol "" + symbol + "" is declared but is apparently never used.\nThis code can probably be written in a more compact way."", true);
                        }
                        token = consumeToken();
                    }
                    assert token.getType() == Token.LP;
                    result.append('(');
                    currentScope = (ScriptOrFnScope) indexedScopes.get(new Integer(offset));
                    enterScope(currentScope);
                    while ((token = consumeToken()).getType() != Token.RP) {
                        assert token.getType() == Token.NAME || token.getType() == Token.COMMA;
                        if (token.getType() == Token.NAME) {
                            symbol = token.getValue();
                            identifier = getIdentifier(symbol, currentScope);
                            assert identifier != null;
                            if (identifier.getMungedValue() != null) {
                                result.append(identifier.getMungedValue());
                            } else {
                                result.append(symbol);
                            }
                        } else if (token.getType() == Token.COMMA) {
                            result.append(',');
                        }
                    }
                    result.append(')');
                    token = consumeToken();
                    assert token.getType() == Token.LC;
                    result.append('{');
                    braceNesting++;
                    token = getToken(0);
                    if (token.getType() == Token.STRING &&
                            getToken(1).getType() == Token.SEMI) {
                        // This is a hint. Skip it!
                        consumeToken();
                        consumeToken();
                    }
                    break;

                case Token.RETURN:
                case Token.TYPEOF:
                    result.append(literals.get(new Integer(token.getType())));
                    // No space needed after 'return' and 'typeof' when followed
                    // by '(', '[', '{', a string or a regexp.
                    if (offset < length) {
                        token = getToken(0);
                        if (token.getType() != Token.LP &&
                                token.getType() != Token.LB &&
                                token.getType() != Token.LC &&
                                token.getType() != Token.STRING &&
                                token.getType() != Token.REGEXP &&
                                token.getType() != Token.SEMI) {
                            result.append(' ');
                        }
                    }
                    break;

                case Token.CASE:
                case Token.THROW:
                    result.append(literals.get(new Integer(token.getType())));
                    // White-space needed after 'case' and 'throw' when not followed by a string.
                    if (offset < length && getToken(0).getType() != Token.STRING) {
                        result.append(' ');
                    }
                    break;

                case Token.BREAK:
                case Token.CONTINUE:
                    result.append(literals.get(new Integer(token.getType())));
                    if (offset < length && getToken(0).getType() != Token.SEMI) {
                        // If 'break' or 'continue' is not followed by a semi-colon, it must
                        // be followed by a label, hence the need for a white space.
                        result.append(' ');
                    }
                    break;

                case Token.LC:
                    result.append('{');
                    braceNesting++;
                    break;

                case Token.RC:
                    result.append('}');
                    braceNesting--;
                    assert braceNesting >= currentScope.getBraceNesting();
                    if (braceNesting == currentScope.getBraceNesting()) {
                        leaveCurrentScope();
                    }
                    break;

                case Token.SEMI:
                    // No need to output a semi-colon if the next character is a right-curly...
                    if (preserveAllSemiColons || offset < length && getToken(0).getType() != Token.RC) {
                        result.append(';');
                    }

                    if (linebreakpos >= 0 && result.length() - linestartpos > linebreakpos) {
                        // Some source control tools don't like it when files containing lines longer
                        // than, say 8000 characters, are checked in. The linebreak option is used in
                        // that case to split long lines after a specific column.
                        result.append('\n');
                        linestartpos = result.length();
                    }
                    break;

                case Token.SPECIALCOMMENT:
                    if (result.length() > 0 && result.charAt(result.length() - 1) != '\n') {
                        result.append(""\n"");
                    }
                    result.append(""/*"");
                    result.append(symbol);
                    result.append(""*/\n"");
                    break;

                default:
                    String literal = (String) literals.get(new Integer(token.getType()));
                    if (literal != null) {
                        result.append(literal);
                    } else {
                        warn(""This symbol cannot be printed: "" + symbol, true);
                    }
                    break;
            }
        }

        // Append a semi-colon at the end, even if unnecessary semi-colons are
        // supposed to be removed. This is especially useful when concatenating
        // several minified files (the absence of an ending semi-colon at the
        // end of one file may very likely cause a syntax error)
        if (!preserveAllSemiColons && result.length() > 0) {
            if (result.charAt(result.length() - 1) == '\n') {
                result.setCharAt(result.length() - 1, ';');
            } else {
                result.append(';');
            }
        }

        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptIdentifier.java,getDeclaredScope,"    ScriptOrFnScope getDeclaredScope() {
        return declaredScope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptIdentifier.java,setMungedValue,"    void setMungedValue(String value) {
        mungedValue = value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptIdentifier.java,getMungedValue,"    String getMungedValue() {
        return mungedValue;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptIdentifier.java,preventMunging,"    void preventMunging() {
        markedForMunging = false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptIdentifier.java,isMarkedForMunging,"    boolean isMarkedForMunging() {
        return markedForMunging;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptIdentifier.java,incrementRefcount,"    void incrementRefcount() {
        refcount++;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptIdentifier.java,getRefcount,"    int getRefcount() {
        return refcount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptToken.java,getType,"    int getType() {
        return type;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,JavaScriptToken.java,getValue,"    String getValue() {
        return value;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,getBraceNesting,"    int getBraceNesting() {
        return braceNesting;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,getParentScope,"    ScriptOrFnScope getParentScope() {
        return parentScope;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,declareIdentifier,"    JavaScriptIdentifier declareIdentifier(String symbol) {
        JavaScriptIdentifier identifier = (JavaScriptIdentifier) identifiers.get(symbol);
        if (identifier == null) {
            identifier = new JavaScriptIdentifier(symbol, this);
            identifiers.put(symbol, identifier);
        }
        return identifier;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,getIdentifier,"    JavaScriptIdentifier getIdentifier(String symbol) {
        return (JavaScriptIdentifier) identifiers.get(symbol);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,addHint,"    void addHint(String variableName, String variableType) {
        hints.put(variableName, variableType);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,preventMunging,"    void preventMunging() {
        if (parentScope != null) {
            // The symbols in the global scope don't get munged,",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,getUsedSymbols,"    private ArrayList getUsedSymbols() {
        ArrayList result = new ArrayList();
        Enumeration elements = identifiers.elements();
        while (elements.hasMoreElements()) {
            JavaScriptIdentifier identifier = (JavaScriptIdentifier) elements.nextElement();
            String mungedValue = identifier.getMungedValue();
            if (mungedValue == null) {
                mungedValue = identifier.getValue();
            }
            result.add(mungedValue);
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,getAllUsedSymbols,"    private ArrayList getAllUsedSymbols() {
        ArrayList result = new ArrayList();
        ScriptOrFnScope scope = this;
        while (scope != null) {
            result.addAll(scope.getUsedSymbols());
            scope = scope.parentScope;
        }
        return result;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,incrementVarCount,"    int incrementVarCount() {
        varcount++;
        return varcount;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,munge,"    void munge() {

        if (!markedForMunging) {
            // Stop right here if this scope was flagged as unsafe for munging.
            return;
        }

        int pickFromSet = 1;

        // Do not munge symbols in the global scope!
        if (parentScope != null) {

            ArrayList freeSymbols = new ArrayList();

            freeSymbols.addAll(JavaScriptCompressor.ones);
            freeSymbols.removeAll(getAllUsedSymbols());
            if (freeSymbols.size() == 0) {
                pickFromSet = 2;
                freeSymbols.addAll(JavaScriptCompressor.twos);
                freeSymbols.removeAll(getAllUsedSymbols());
            }
            if (freeSymbols.size() == 0) {
                pickFromSet = 3;
                freeSymbols.addAll(JavaScriptCompressor.threes);
                freeSymbols.removeAll(getAllUsedSymbols());
            }
            if (freeSymbols.size() == 0) {
                throw new IllegalStateException(""The YUI Compressor ran out of symbols. Aborting..."");
            }

	    // APPJET: sort identifiers by popularity
	    JavaScriptIdentifier idArray[] = ((Hashtable<String,JavaScriptIdentifier>)identifiers).values().toArray(new JavaScriptIdentifier[0]);
	    java.util.Arrays.sort(idArray, new java.util.Comparator<JavaScriptIdentifier>() {
		    public int compare(JavaScriptIdentifier i1, JavaScriptIdentifier i2) {
			return i2.getRefcount() - i1.getRefcount(); // positive if i2 is more popular, indicating i2 should come first
		    }
		});
	    java.util.Iterator<JavaScriptIdentifier> elements = java.util.Arrays.asList(idArray).iterator();
	    
	    //Enumeration elements = identifiers.elements();
            while (elements.hasNext()) {
                if (freeSymbols.size() == 0) {
                    pickFromSet++;
                    if (pickFromSet == 2) {
                        freeSymbols.addAll(JavaScriptCompressor.twos);
                    } else if (pickFromSet == 3) {
                        freeSymbols.addAll(JavaScriptCompressor.threes);
                    } else {
                        throw new IllegalStateException(""The YUI Compressor ran out of symbols. Aborting..."");
                    }
                    // It is essential to remove the symbols already used in
                    // the containing scopes, or some of the variables declared
                    // in the containing scopes will be redeclared, which can
                    // lead to errors.
                    freeSymbols.removeAll(getAllUsedSymbols());
                }

                String mungedValue;
                JavaScriptIdentifier identifier = (JavaScriptIdentifier) elements.next();
                if (identifier.isMarkedForMunging()) {
                    mungedValue = (String) freeSymbols.remove(0);
                } else {
                    mungedValue = identifier.getValue();
                }
                identifier.setMungedValue(mungedValue);
            }
        }

        for (int i = 0; i < subScopes.size(); i++) {
            ScriptOrFnScope scope = (ScriptOrFnScope) subScopes.get(i);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,ScriptOrFnScope.java,compare,"		    public int compare(JavaScriptIdentifier i1, JavaScriptIdentifier i2) {
			return i2.getRefcount() - i1.getRefcount(); // positive if i2 is more popular, indicating i2 should come first
		    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,YUICompressor.java,main,"    public static void main(String args[]) {

        CmdLineParser parser = new CmdLineParser();
        CmdLineParser.Option typeOpt = parser.addStringOption(""type"");
        CmdLineParser.Option verboseOpt = parser.addBooleanOption('v', ""verbose"");
        CmdLineParser.Option nomungeOpt = parser.addBooleanOption(""nomunge"");
        CmdLineParser.Option linebreakOpt = parser.addStringOption(""line-break"");
        CmdLineParser.Option preserveSemiOpt = parser.addBooleanOption(""preserve-semi"");
        CmdLineParser.Option disableOptimizationsOpt = parser.addBooleanOption(""disable-optimizations"");
        CmdLineParser.Option helpOpt = parser.addBooleanOption('h', ""help"");
        CmdLineParser.Option charsetOpt = parser.addStringOption(""charset"");
        CmdLineParser.Option outputFilenameOpt = parser.addStringOption('o', ""output"");

        Reader in = null;
        Writer out = null;

        try {
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,YUICompressor.java,warning,"                        public void warning(String message, String sourceName,
                                int line, String lineSource, int lineOffset) {
                            if (line < 0) {
                                System.err.println(""\n[WARNING] "" + message);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,YUICompressor.java,error,"                        public void error(String message, String sourceName,
                                int line, String lineSource, int lineOffset) {
                            if (line < 0) {
                                System.err.println(""\n[ERROR] "" + message);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,YUICompressor.java,runtimeError,"                        public EvaluatorException runtimeError(String message, String sourceName,
                                int line, String lineSource, int lineOffset) {
                            error(message, sourceName, line, lineSource, lineOffset);
                            return new EvaluatorException(message);
                        }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,YUICompressor.java,usage,"    private static void usage() {
        System.out.println(
                ""\nUsage: java -jar yuicompressor-x.y.z.jar [options] [input file]\n\n""",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,getEncodedSource,"    String getEncodedSource()
    {
        return sourceToString(0);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,getCurrentOffset,"    int getCurrentOffset()
    {
        return sourceTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,markFunctionStart,"    int markFunctionStart(int functionType)
    {
        int savedOffset = getCurrentOffset();
        addToken(Token.FUNCTION);
        append((char)functionType);
        return savedOffset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,markFunctionEnd,"    int markFunctionEnd(int functionStart)
    {
        int offset = getCurrentOffset();
        append((char)FUNCTION_END);
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addToken,"    void addToken(int token)
    {
        if (!(0 <= token && token <= Token.LAST_TOKEN))
            throw new IllegalArgumentException();

        append((char)token);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addEOL,"    void addEOL(int token)
    {
        if (!(0 <= token && token <= Token.LAST_TOKEN))
            throw new IllegalArgumentException();

        append((char)token);
        append((char)Token.EOL);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addName,"    void addName(String str)
    {
        addToken(Token.NAME);
        appendString(str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addString,"    void addString(String str)
    {
        addToken(Token.STRING);
        appendString(str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addRegexp,"    void addRegexp(String regexp, String flags)
    {
        addToken(Token.REGEXP);
        appendString('/' + regexp + '/' + flags);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addJScriptConditionalComment,"    void addJScriptConditionalComment(String str)
    {
        addToken(Token.SPECIALCOMMENT);
        appendString(str);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,addNumber,"    void addNumber(double n)
    {
        addToken(Token.NUMBER);

        /* encode the number in the source stream.
         * Save as NUMBER type (char | char char char char)
         * where type is
         * 'D' - double, 'S' - short, 'J' - long.

         * We need to retain float vs. integer type info to keep the
         * behavior of liveconnect type-guessing the same after
         * decompilation.  (Liveconnect tries to present 1.0 to Java
         * as a float/double)
         * OPT: This is no longer true. We could compress the format.

         * This may not be the most space-efficient encoding;
         * the chars created below may take up to 3 bytes in
         * constant pool UTF-8 encoding, so a Double could take
         * up to 12 bytes.
         */

        long lbits = (long)n;
        if (lbits != n) {
            // if it's floating point, save as a Double bit pattern.",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,appendString,"    private void appendString(String str)
    {
        int L = str.length();
        int lengthEncodingSize = 1;
        if (L >= 0x8000) {
            lengthEncodingSize = 2;
        }
        int nextTop = sourceTop + lengthEncodingSize + L;
        if (nextTop > sourceBuffer.length) {
            increaseSourceCapacity(nextTop);
        }
        if (L >= 0x8000) {
            // Use 2 chars to encode strings exceeding 32K, were the highest
            // bit in the first char indicates presence of the next byte
            sourceBuffer[sourceTop] = (char)(0x8000 | (L >>> 16));
            ++sourceTop;
        }
        sourceBuffer[sourceTop] = (char)L;
        ++sourceTop;
        str.getChars(0, L, sourceBuffer, sourceTop);
        sourceTop = nextTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,append,"    private void append(char c)
    {
        if (sourceTop == sourceBuffer.length) {
            increaseSourceCapacity(sourceTop + 1);
        }
        sourceBuffer[sourceTop] = c;
        ++sourceTop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,increaseSourceCapacity,"    private void increaseSourceCapacity(int minimalCapacity)
    {
        // Call this only when capacity increase is must
        if (minimalCapacity <= sourceBuffer.length) Kit.codeBug();
        int newCapacity = sourceBuffer.length * 2;
        if (newCapacity < minimalCapacity) {
            newCapacity = minimalCapacity;
        }
        char[] tmp = new char[newCapacity];
        System.arraycopy(sourceBuffer, 0, tmp, 0, sourceTop);
        sourceBuffer = tmp;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,sourceToString,"    private String sourceToString(int offset)
    {
        if (offset < 0 || sourceTop < offset) Kit.codeBug();
        return new String(sourceBuffer, offset, sourceTop - offset);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,decompile,"    public static String decompile(String source, int flags,
                                   UintMap properties)
    {
        int length = source.length();
        if (length == 0) { return """"; }

        int indent = properties.getInt(INITIAL_INDENT_PROP, 0);
        if (indent < 0) throw new IllegalArgumentException();
        int indentGap = properties.getInt(INDENT_GAP_PROP, 4);
        if (indentGap < 0) throw new IllegalArgumentException();
        int caseGap = properties.getInt(CASE_GAP_PROP, 2);
        if (caseGap < 0) throw new IllegalArgumentException();

        StringBuffer result = new StringBuffer();
        boolean justFunctionBody = (0 != (flags & Decompiler.ONLY_BODY_FLAG));
        boolean toSource = (0 != (flags & Decompiler.TO_SOURCE_FLAG));

        // Spew tokens in source, for debugging.
        // as TYPE number char
        if (printSource) {
            System.err.println(""length:"" + length);
            for (int i = 0; i < length; ++i) {
                // Note that tokenToName will fail unless Context.printTrees
                // is true.
                String tokenname = null;
                if (Token.printNames) {
                    tokenname = Token.name(source.charAt(i));
                }
                if (tokenname == null) {
                    tokenname = ""---"";
                }
                String pad = tokenname.length() > 7
                    ? ""\t""
                    : ""\t\t"";
                System.err.println
                    (tokenname
                     + pad + (int)source.charAt(i)
                     + ""\t'"" + ScriptRuntime.escapeString
                     (source.substring(i, i+1))
                     + ""'"");
            }
            System.err.println();
        }

        int braceNesting = 0;
        boolean afterFirstEOL = false;
        int i = 0;
        int topFunctionType;
        if (source.charAt(i) == Token.SCRIPT) {
            ++i;
            topFunctionType = -1;
        } else {
            topFunctionType = source.charAt(i + 1);
        }

        if (!toSource) {
            // add an initial newline to exactly match js.
            result.append('\n');
            for (int j = 0; j < indent; j++)
                result.append(' ');
        } else {
            if (topFunctionType == FunctionNode.FUNCTION_EXPRESSION) {
                result.append('(');
            }
        }

        while (i < length) {
            switch(source.charAt(i)) {
            case Token.GET:
            case Token.SET:
                result.append(source.charAt(i) == Token.GET ? ""get "" : ""set "");
                ++i;
                i = printSourceString(source, i + 1, false, result);
                // Now increment one more to get past the FUNCTION token
                ++i;
                break;

            case Token.NAME:
            case Token.REGEXP:  // re-wrapped in '/'s in parser...
                i = printSourceString(source, i + 1, false, result);
                continue;

            case Token.STRING:
                i = printSourceString(source, i + 1, true, result);
                continue;

            case Token.NUMBER:
                i = printSourceNumber(source, i + 1, result);
                continue;

            case Token.TRUE:
                result.append(""true"");
                break;

            case Token.FALSE:
                result.append(""false"");
                break;

            case Token.NULL:
                result.append(""null"");
                break;

            case Token.THIS:
                result.append(""this"");
                break;

            case Token.FUNCTION:
                ++i; // skip function type
                result.append(""function "");
                break;

            case FUNCTION_END:
                // Do nothing
                break;

            case Token.COMMA:
                result.append("", "");
                break;

            case Token.LC:
                ++braceNesting;
                if (Token.EOL == getNext(source, length, i))
                    indent += indentGap;
                result.append('{');
                break;

            case Token.RC: {
                --braceNesting;
                /* don't print the closing RC if it closes the
                 * toplevel function and we're called from
                 * decompileFunctionBody.
                 */
                if (justFunctionBody && braceNesting == 0)
                    break;

                result.append('}');
                switch (getNext(source, length, i)) {
                    case Token.EOL:
                    case FUNCTION_END:
                        indent -= indentGap;
                        break;
                    case Token.WHILE:
                    case Token.ELSE:
                        indent -= indentGap;
                        result.append(' ');
                        break;
                }
                break;
            }
            case Token.LP:
                result.append('(');
                break;

            case Token.RP:
                result.append(')');
                if (Token.LC == getNext(source, length, i))
                    result.append(' ');
                break;

            case Token.LB:
                result.append('[');
                break;

            case Token.RB:
                result.append(']');
                break;

            case Token.EOL: {
                if (toSource) break;
                boolean newLine = true;
                if (!afterFirstEOL) {
                    afterFirstEOL = true;
                    if (justFunctionBody) {
                        /* throw away just added 'function name(...) {'
                         * and restore the original indent
                         */
                        result.setLength(0);
                        indent -= indentGap;
                        newLine = false;
                    }
                }
                if (newLine) {
                    result.append('\n');
                }

                /* add indent if any tokens remain,
                 * less setback if next token is
                 * a label, case or default.
                 */
                if (i + 1 < length) {
                    int less = 0;
                    int nextToken = source.charAt(i + 1);
                    if (nextToken == Token.CASE
                        || nextToken == Token.DEFAULT)
                    {
                        less = indentGap - caseGap;
                    } else if (nextToken == Token.RC) {
                        less = indentGap;
                    }

                    /* elaborate check against label... skip past a
                     * following inlined NAME and look for a COLON.
                     */
                    else if (nextToken == Token.NAME) {
                        int afterName = getSourceStringEnd(source, i + 2);
                        if (source.charAt(afterName) == Token.COLON)
                            less = indentGap;
                    }

                    for (; less < indent; less++)
                        result.append(' ');
                }
                break;
            }
            case Token.DOT:
                result.append('.');
                break;

            case Token.NEW:
                result.append(""new "");
                break;

            case Token.DELPROP:
                result.append(""delete "");
                break;

            case Token.IF:
                result.append(""if "");
                break;

            case Token.ELSE:
                result.append(""else "");
                break;

            case Token.FOR:
                result.append(""for "");
                break;

            case Token.IN:
                result.append("" in "");
                break;

            case Token.WITH:
                result.append(""with "");
                break;

            case Token.WHILE:
                result.append(""while "");
                break;

            case Token.DO:
                result.append(""do "");
                break;

            case Token.TRY:
                result.append(""try "");
                break;

            case Token.CATCH:
                result.append(""catch "");
                break;

            case Token.FINALLY:
                result.append(""finally "");
                break;

            case Token.THROW:
                result.append(""throw "");
                break;

            case Token.SWITCH:
                result.append(""switch "");
                break;

            case Token.BREAK:
                result.append(""break"");
                if (Token.NAME == getNext(source, length, i))
                    result.append(' ');
                break;

            case Token.CONTINUE:
                result.append(""continue"");
                if (Token.NAME == getNext(source, length, i))
                    result.append(' ');
                break;

            case Token.CASE:
                result.append(""case "");
                break;

            case Token.DEFAULT:
                result.append(""default"");
                break;

            case Token.RETURN:
                result.append(""return"");
                if (Token.SEMI != getNext(source, length, i))
                    result.append(' ');
                break;

            case Token.VAR:
                result.append(""var "");
                break;

            case Token.SEMI:
                result.append(';');
                if (Token.EOL != getNext(source, length, i)) {
                    // separators in FOR
                    result.append(' ');
                }
                break;

            case Token.ASSIGN:
                result.append("" = "");
                break;

            case Token.ASSIGN_ADD:
                result.append("" += "");
                break;

            case Token.ASSIGN_SUB:
                result.append("" -= "");
                break;

            case Token.ASSIGN_MUL:
                result.append("" *= "");
                break;

            case Token.ASSIGN_DIV:
                result.append("" /= "");
                break;

            case Token.ASSIGN_MOD:
                result.append("" %= "");
                break;

            case Token.ASSIGN_BITOR:
                result.append("" |= "");
                break;

            case Token.ASSIGN_BITXOR:
                result.append("" ^= "");
                break;

            case Token.ASSIGN_BITAND:
                result.append("" &= "");
                break;

            case Token.ASSIGN_LSH:
                result.append("" <<= "");
                break;

            case Token.ASSIGN_RSH:
                result.append("" >>= "");
                break;

            case Token.ASSIGN_URSH:
                result.append("" >>>= "");
                break;

            case Token.HOOK:
                result.append("" ? "");
                break;

            case Token.OBJECTLIT:
                // pun OBJECTLIT to mean colon in objlit property
                // initialization.
                // This needs to be distinct from COLON in the general case
                // to distinguish from the colon in a ternary... which needs
                // different spacing.
                result.append(':');
                break;

            case Token.COLON:
                if (Token.EOL == getNext(source, length, i))
                    // it's the end of a label
                    result.append(':');
                else
                    // it's the middle part of a ternary
                    result.append("" : "");
                break;

            case Token.OR:
                result.append("" || "");
                break;

            case Token.AND:
                result.append("" && "");
                break;

            case Token.BITOR:
                result.append("" | "");
                break;

            case Token.BITXOR:
                result.append("" ^ "");
                break;

            case Token.BITAND:
                result.append("" & "");
                break;

            case Token.SHEQ:
                result.append("" === "");
                break;

            case Token.SHNE:
                result.append("" !== "");
                break;

            case Token.EQ:
                result.append("" == "");
                break;

            case Token.NE:
                result.append("" != "");
                break;

            case Token.LE:
                result.append("" <= "");
                break;

            case Token.LT:
                result.append("" < "");
                break;

            case Token.GE:
                result.append("" >= "");
                break;

            case Token.GT:
                result.append("" > "");
                break;

            case Token.INSTANCEOF:
                result.append("" instanceof "");
                break;

            case Token.LSH:
                result.append("" << "");
                break;

            case Token.RSH:
                result.append("" >> "");
                break;

            case Token.URSH:
                result.append("" >>> "");
                break;

            case Token.TYPEOF:
                result.append(""typeof "");
                break;

            case Token.VOID:
                result.append(""void "");
                break;

            case Token.CONST:
                result.append(""const "");
                break;

            case Token.NOT:
                result.append('!');
                break;

            case Token.BITNOT:
                result.append('~');
                break;

            case Token.POS:
                result.append('+');
                break;

            case Token.NEG:
                result.append('-');
                break;

            case Token.INC:
                result.append(""++"");
                break;

            case Token.DEC:
                result.append(""--"");
                break;

            case Token.ADD:
                result.append("" + "");
                break;

            case Token.SUB:
                result.append("" - "");
                break;

            case Token.MUL:
                result.append("" * "");
                break;

            case Token.DIV:
                result.append("" / "");
                break;

            case Token.MOD:
                result.append("" % "");
                break;

            case Token.COLONCOLON:
                result.append(""::"");
                break;

            case Token.DOTDOT:
                result.append("".."");
                break;

            case Token.DOTQUERY:
                result.append("".("");
                break;

            case Token.XMLATTR:
                result.append('@');
                break;

            default:
                // If we don't know how to decompile it, raise an exception.
                throw new RuntimeException(""Token: "" +
                                               Token.name(source.charAt(i)));
            }
            ++i;
        }

        if (!toSource) {
            // add that trailing newline if it's an outermost function.
            if (!justFunctionBody)
                result.append('\n');
        } else {
            if (topFunctionType == FunctionNode.FUNCTION_EXPRESSION) {
                result.append(')');
            }
        }

        return result.toString();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,getNext,"    private static int getNext(String source, int length, int i)
    {
        return (i + 1 < length) ? source.charAt(i + 1) : Token.EOF;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,getSourceStringEnd,"    private static int getSourceStringEnd(String source, int offset)
    {
        return printSourceString(source, offset, false, null);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,printSourceString,"    private static int printSourceString(String source, int offset,
                                         boolean asQuotedString,
                                         StringBuffer sb)
    {
        int length = source.charAt(offset);
        ++offset;
        if ((0x8000 & length) != 0) {
            length = ((0x7FFF & length) << 16) | source.charAt(offset);
            ++offset;
        }
        if (sb != null) {
            String str = source.substring(offset, offset + length);
            if (!asQuotedString) {
                sb.append(str);
            } else {
                sb.append('""');
                sb.append(ScriptRuntime.escapeString(str));
                sb.append('""');
            }
        }
        return offset + length;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Decompiler.java,printSourceNumber,"    private static int printSourceNumber(String source, int offset,
                                         StringBuffer sb)
    {
        double number = 0.0;
        char type = source.charAt(offset);
        ++offset;
        if (type == 'S') {
            if (sb != null) {
                int ival = source.charAt(offset);
                number = ival;
            }
            ++offset;
        } else if (type == 'J' || type == 'D') {
            if (sb != null) {
                long lbits;
                lbits = (long)source.charAt(offset) << 48;
                lbits |= (long)source.charAt(offset + 1) << 32;
                lbits |= (long)source.charAt(offset + 2) << 16;
                lbits |= source.charAt(offset + 3);
                if (type == 'J') {
                    number = lbits;
                } else {
                    number = Double.longBitsToDouble(lbits);
                }
            }
            offset += 4;
        } else {
            // Bad source
            throw new RuntimeException();
        }
        if (sb != null) {
            sb.append(ScriptRuntime.numberToString(number, 10));
        }
        return offset;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,createDecompiler,"    protected Decompiler createDecompiler(CompilerEnvirons compilerEnv)
    {
        return new Decompiler();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addStrictWarning,"    void addStrictWarning(String messageId, String messageArg)
    {
        if (compilerEnv.isStrictMode())
            addWarning(messageId, messageArg);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addWarning,"    void addWarning(String messageId, String messageArg)
    {
        String message = ScriptRuntime.getMessage1(messageId, messageArg);
        if (compilerEnv.reportWarningAsError()) {
            ++syntaxErrorCount;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addError,"    void addError(String messageId)
    {
        ++syntaxErrorCount;
        String message = ScriptRuntime.getMessage0(messageId);
        errorReporter.error(message, sourceURI, ts.getLineno(),
                            ts.getLine(), ts.getOffset());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addError,"    void addError(String messageId, String messageArg)
    {
        ++syntaxErrorCount;
        String message = ScriptRuntime.getMessage1(messageId, messageArg);
        errorReporter.error(message, sourceURI, ts.getLineno(),
                            ts.getLine(), ts.getOffset());",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,reportError,"    RuntimeException reportError(String messageId)
    {
        addError(messageId);

        // Throw a ParserException exception to unwind the recursive descent
        // parse.
        throw new ParserException();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,peekToken,"    private int peekToken()
        throws IOException
    {
        int tt = currentFlaggedToken;
        if (tt == Token.EOF) {

            while ((tt = ts.getToken()) == Token.SPECIALCOMMENT) {
                /* Support for JScript conditional comments */
                decompiler.addJScriptConditionalComment(ts.getString());
            }

            if (tt == Token.EOL) {
                do {
                    tt = ts.getToken();

                    if (tt == Token.SPECIALCOMMENT) {
                        /* Support for JScript conditional comments */
                        decompiler.addJScriptConditionalComment(ts.getString());
                    }

                } while (tt == Token.EOL || tt == Token.SPECIALCOMMENT);
                tt |= TI_AFTER_EOL;
            }
            currentFlaggedToken = tt;
        }
        return tt & CLEAR_TI_MASK;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,peekFlaggedToken,"    private int peekFlaggedToken()
        throws IOException
    {
        peekToken();
        return currentFlaggedToken;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,consumeToken,"    private void consumeToken()
    {
        currentFlaggedToken = Token.EOF;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,nextToken,"    private int nextToken()
        throws IOException
    {
        int tt = peekToken();
        consumeToken();
        return tt;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,nextFlaggedToken,"    private int nextFlaggedToken()
        throws IOException
    {
        peekToken();
        int ttFlagged = currentFlaggedToken;
        consumeToken();
        return ttFlagged;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,matchToken,"    private boolean matchToken(int toMatch)
        throws IOException
    {
        int tt = peekToken();
        if (tt != toMatch) {
            return false;
        }
        consumeToken();
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,peekTokenOrEOL,"    private int peekTokenOrEOL()
        throws IOException
    {
        int tt = peekToken();
        // Check for last peeked token flags
        if ((currentFlaggedToken & TI_AFTER_EOL) != 0) {
            tt = Token.EOL;
        }
        return tt;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,setCheckForLabel,"    private void setCheckForLabel()
    {
        if ((currentFlaggedToken & CLEAR_TI_MASK) != Token.NAME)
            throw Kit.codeBug();
        currentFlaggedToken |= TI_CHECK_LABEL;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,mustMatchToken,"    private void mustMatchToken(int toMatch, String messageId)
        throws IOException, ParserException
    {
        if (!matchToken(toMatch)) {
            reportError(messageId);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,mustHaveXML,"    private void mustHaveXML()
    {
        if (!compilerEnv.isXmlAvailable()) {
            reportError(""msg.XML.not.available"");",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,getEncodedSource,"    public String getEncodedSource()
    {
        return encodedSource;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,eof,"    public boolean eof()
    {
        return ts.eof();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,insideFunction,"    boolean insideFunction()
    {
        return nestingOfFunction != 0;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,enterLoop,"    private Node enterLoop(Node loopLabel)
    {
        Node loop = nf.createLoopNode(loopLabel, ts.getLineno());
        if (loopSet == null) {
            loopSet = new ObjArray();
            if (loopAndSwitchSet == null) {
                loopAndSwitchSet = new ObjArray();
            }
        }
        loopSet.push(loop);
        loopAndSwitchSet.push(loop);
        return loop;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,exitLoop,"    private void exitLoop()
    {
        loopSet.pop();
        loopAndSwitchSet.pop();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,enterSwitch,"    private Node enterSwitch(Node switchSelector, int lineno)
    {
        Node switchNode = nf.createSwitch(switchSelector, lineno);
        if (loopAndSwitchSet == null) {
            loopAndSwitchSet = new ObjArray();
        }
        loopAndSwitchSet.push(switchNode);
        return switchNode;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,exitSwitch,"    private void exitSwitch()
    {
        loopAndSwitchSet.pop();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,parse,"    public ScriptOrFnNode parse(String sourceString,
                                String sourceURI, int lineno)
    {
        this.sourceURI = sourceURI;
        this.ts = new TokenStream(this, null, sourceString, lineno);
        try {
            return parse();",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,parse,"    public ScriptOrFnNode parse(Reader sourceReader,
                                String sourceURI, int lineno)
        throws IOException
    {
        this.sourceURI = sourceURI;
        this.ts = new TokenStream(this, sourceReader, null, lineno);
        return parse();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,parse,"    private ScriptOrFnNode parse()
        throws IOException
    {
        this.decompiler = createDecompiler(compilerEnv);
        this.nf = new IRFactory(this);
        currentScriptOrFn = nf.createScript();
        int sourceStartOffset = decompiler.getCurrentOffset();
        this.encodedSource = null;
        decompiler.addToken(Token.SCRIPT);

        this.currentFlaggedToken = Token.EOF;
        this.syntaxErrorCount = 0;

        int baseLineno = ts.getLineno();  // line number where source starts

        /* so we have something to add nodes to until
         * we've collected all the source */
        Node pn = nf.createLeaf(Token.BLOCK);

        try {
            for (;;) {
                int tt = peekToken();

                if (tt <= Token.EOF) {
                    break;
                }

                Node n;
                if (tt == Token.FUNCTION) {
                    consumeToken();
                    try {
                        n = function(calledByCompileFunction
                                     ? FunctionNode.FUNCTION_EXPRESSION
                                     : FunctionNode.FUNCTION_STATEMENT);
                    } catch (ParserException e) {
                        break;
                    }
                } else {
                    n = statement();
                }
                nf.addChildToBack(pn, n);
            }
        } catch (StackOverflowError ex) {
            String msg = ScriptRuntime.getMessage0(
                ""msg.too.deep.parser.recursion"");
            throw Context.reportRuntimeError(msg, sourceURI,
                                             ts.getLineno(), null, 0);
        }

        if (this.syntaxErrorCount != 0) {
            String msg = String.valueOf(this.syntaxErrorCount);
            msg = ScriptRuntime.getMessage1(""msg.got.syntax.errors"", msg);
            throw errorReporter.runtimeError(msg, sourceURI, baseLineno,
                                             null, 0);
        }

        currentScriptOrFn.setSourceName(sourceURI);
        currentScriptOrFn.setBaseLineno(baseLineno);
        currentScriptOrFn.setEndLineno(ts.getLineno());

        int sourceEndOffset = decompiler.getCurrentOffset();
        currentScriptOrFn.setEncodedSourceBounds(sourceStartOffset,
                                                 sourceEndOffset);

        nf.initScript(currentScriptOrFn, pn);

        if (compilerEnv.isGeneratingSource()) {
            encodedSource = decompiler.getEncodedSource();
        }
        this.decompiler = null; // It helps GC

        return currentScriptOrFn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,parseFunctionBody,"    private Node parseFunctionBody()
        throws IOException
    {
        ++nestingOfFunction;
        Node pn = nf.createBlock(ts.getLineno());
        try {
            bodyLoop: for (;;) {
                Node n;
                int tt = peekToken();
                switch (tt) {
                  case Token.ERROR:
                  case Token.EOF:
                  case Token.RC:
                    break bodyLoop;

                  case Token.FUNCTION:
                    consumeToken();
                    n = function(FunctionNode.FUNCTION_STATEMENT);
                    break;
                  default:
                    n = statement();
                    break;
                }
                nf.addChildToBack(pn, n);
            }
        } catch (ParserException e) {
            // Ignore it
        } finally {
            --nestingOfFunction;
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,function,"    private Node function(int functionType)
        throws IOException, ParserException
    {
        int syntheticType = functionType;
        int baseLineno = ts.getLineno();  // line number where source starts

        int functionSourceStart = decompiler.markFunctionStart(functionType);
        String name;
        Node memberExprNode = null;
        if (matchToken(Token.NAME)) {
            name = ts.getString();
            decompiler.addName(name);
            if (!matchToken(Token.LP)) {
                if (compilerEnv.isAllowMemberExprAsFunctionName()) {
                    // Extension to ECMA: if 'function <name>' does not follow
                    // by '(', assume <name> starts memberExpr
                    Node memberExprHead = nf.createName(name);
                    name = """";
                    memberExprNode = memberExprTail(false, memberExprHead);
                }
                mustMatchToken(Token.LP, ""msg.no.paren.parms"");
            }
        } else if (matchToken(Token.LP)) {
            // Anonymous function
            name = """";
        } else {
            name = """";
            if (compilerEnv.isAllowMemberExprAsFunctionName()) {
                // Note that memberExpr can not start with '(' like
                // in function (1+2).toString(), because 'function (' already
                // processed as anonymous function
                memberExprNode = memberExpr(false);
            }
            mustMatchToken(Token.LP, ""msg.no.paren.parms"");
        }

        if (memberExprNode != null) {
            syntheticType = FunctionNode.FUNCTION_EXPRESSION;
        }

        boolean nested = insideFunction();

        FunctionNode fnNode = nf.createFunction(name);
        if (nested || nestingOfWith > 0) {
            // 1. Nested functions are not affected by the dynamic scope flag
            // as dynamic scope is already a parent of their scope.
            // 2. Functions defined under the with statement also immune to
            // this setup, in which case dynamic scope is ignored in favor
            // of with object.
            fnNode.itsIgnoreDynamicScope = true;
        }

        int functionIndex = currentScriptOrFn.addFunction(fnNode);

        int functionSourceEnd;

        ScriptOrFnNode savedScriptOrFn = currentScriptOrFn;
        currentScriptOrFn = fnNode;
        int savedNestingOfWith = nestingOfWith;
        nestingOfWith = 0;
        Hashtable savedLabelSet = labelSet;
        labelSet = null;
        ObjArray savedLoopSet = loopSet;
        loopSet = null;
        ObjArray savedLoopAndSwitchSet = loopAndSwitchSet;
        loopAndSwitchSet = null;
        boolean savedHasReturnValue = hasReturnValue;
        int savedFunctionEndFlags = functionEndFlags;

        Node body;
        try {
            decompiler.addToken(Token.LP);
            if (!matchToken(Token.RP)) {
                boolean first = true;
                do {
                    if (!first)
                        decompiler.addToken(Token.COMMA);
                    first = false;
                    mustMatchToken(Token.NAME, ""msg.no.parm"");
                    String s = ts.getString();
                    if (fnNode.hasParamOrVar(s)) {
                        addWarning(""msg.dup.parms"", s);
                    }
                    fnNode.addParam(s);
                    decompiler.addName(s);
                } while (matchToken(Token.COMMA));

                mustMatchToken(Token.RP, ""msg.no.paren.after.parms"");
            }
            decompiler.addToken(Token.RP);

            mustMatchToken(Token.LC, ""msg.no.brace.body"");
            decompiler.addEOL(Token.LC);
            body = parseFunctionBody();
            mustMatchToken(Token.RC, ""msg.no.brace.after.body"");

            if (compilerEnv.isStrictMode() && !body.hasConsistentReturnUsage())
            {
              String msg = name.length() > 0 ? ""msg.no.return.value""
                                             : ""msg.anon.no.return.value"";
              addStrictWarning(msg, name);
            }

            decompiler.addToken(Token.RC);
            functionSourceEnd = decompiler.markFunctionEnd(functionSourceStart);
            if (functionType != FunctionNode.FUNCTION_EXPRESSION) {
                // Add EOL only if function is not part of expression
                // since it gets SEMI + EOL from Statement in that case
                decompiler.addToken(Token.EOL);
            }
        }
        finally {
            hasReturnValue = savedHasReturnValue;
            functionEndFlags = savedFunctionEndFlags;
            loopAndSwitchSet = savedLoopAndSwitchSet;
            loopSet = savedLoopSet;
            labelSet = savedLabelSet;
            nestingOfWith = savedNestingOfWith;
            currentScriptOrFn = savedScriptOrFn;
        }

        fnNode.setEncodedSourceBounds(functionSourceStart, functionSourceEnd);
        fnNode.setSourceName(sourceURI);
        fnNode.setBaseLineno(baseLineno);
        fnNode.setEndLineno(ts.getLineno());

        if (name != null) {
          int index = currentScriptOrFn.getParamOrVarIndex(name);
          if (index >= 0 && index < currentScriptOrFn.getParamCount())
            addStrictWarning(""msg.var.hides.arg"", name);
        }

        Node pn = nf.initFunction(fnNode, functionIndex, body, syntheticType);
        if (memberExprNode != null) {
            pn = nf.createAssignment(Token.ASSIGN, memberExprNode, pn);
            if (functionType != FunctionNode.FUNCTION_EXPRESSION) {
                // XXX check JScript behavior: should it be createExprStatement?
                pn = nf.createExprStatementNoReturn(pn, baseLineno);
            }
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,statements,"    private Node statements()
        throws IOException
    {
        Node pn = nf.createBlock(ts.getLineno());

        int tt;
        while((tt = peekToken()) > Token.EOF && tt != Token.RC) {
            nf.addChildToBack(pn, statement());
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,condition,"    private Node condition()
        throws IOException, ParserException
    {
        mustMatchToken(Token.LP, ""msg.no.paren.cond"");
        decompiler.addToken(Token.LP);
        Node pn = expr(false);
        mustMatchToken(Token.RP, ""msg.no.paren.after.cond"");
        decompiler.addToken(Token.RP);

        // Report strict warning on code like ""if (a = 7) ..."". Suppress the
        // warning if the condition is parenthesized, like ""if ((a = 7)) ..."".
        if (pn.getProp(Node.PARENTHESIZED_PROP) == null &&
            (pn.getType() == Token.SETNAME || pn.getType() == Token.SETPROP ||
             pn.getType() == Token.SETELEM))
        {
            addStrictWarning(""msg.equal.as.assign"", """");
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,matchJumpLabelName,"    private Node matchJumpLabelName()
        throws IOException, ParserException
    {
        Node label = null;

        int tt = peekTokenOrEOL();
        if (tt == Token.NAME) {
            consumeToken();
            String name = ts.getString();
            decompiler.addName(name);
            if (labelSet != null) {
                label = (Node)labelSet.get(name);
            }
            if (label == null) {
                reportError(""msg.undef.label"");
            }
        }

        return label;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,statement,"    private Node statement()
        throws IOException
    {
        try {
            Node pn = statementHelper(null);
            if (pn != null) {
                if (compilerEnv.isStrictMode() && !pn.hasSideEffects())
                    addStrictWarning(""msg.no.side.effects"", """");
                return pn;
            }
        } catch (ParserException e) { }

        // skip to end of statement
        int lineno = ts.getLineno();
        guessingStatementEnd: for (;;) {
            int tt = peekTokenOrEOL();
            consumeToken();
            switch (tt) {
              case Token.ERROR:
              case Token.EOF:
              case Token.EOL:
              case Token.SEMI:
                break guessingStatementEnd;
            }
        }
        return nf.createExprStatement(nf.createName(""error""), lineno);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,statementHelper,"    private Node statementHelper(Node statementLabel)
        throws IOException, ParserException
    {
        Node pn = null;

        int tt;

        tt = peekToken();

        switch(tt) {
          case Token.IF: {
            consumeToken();

            decompiler.addToken(Token.IF);
            int lineno = ts.getLineno();
            Node cond = condition();
            decompiler.addEOL(Token.LC);
            Node ifTrue = statement();
            Node ifFalse = null;
            if (matchToken(Token.ELSE)) {
                decompiler.addToken(Token.RC);
                decompiler.addToken(Token.ELSE);
                decompiler.addEOL(Token.LC);
                ifFalse = statement();
            }
            decompiler.addEOL(Token.RC);
            pn = nf.createIf(cond, ifTrue, ifFalse, lineno);
            return pn;
          }

          case Token.SWITCH: {
            consumeToken();

            decompiler.addToken(Token.SWITCH);
            int lineno = ts.getLineno();
            mustMatchToken(Token.LP, ""msg.no.paren.switch"");
            decompiler.addToken(Token.LP);
            pn = enterSwitch(expr(false), lineno);
            try {
                mustMatchToken(Token.RP, ""msg.no.paren.after.switch"");
                decompiler.addToken(Token.RP);
                mustMatchToken(Token.LC, ""msg.no.brace.switch"");
                decompiler.addEOL(Token.LC);

                boolean hasDefault = false;
                switchLoop: for (;;) {
                    tt = nextToken();
                    Node caseExpression;
                    switch (tt) {
                      case Token.RC:
                        break switchLoop;

                      case Token.CASE:
                        decompiler.addToken(Token.CASE);
                        caseExpression = expr(false);
                        mustMatchToken(Token.COLON, ""msg.no.colon.case"");
                        decompiler.addEOL(Token.COLON);
                        break;

                      case Token.DEFAULT:
                        if (hasDefault) {
                            reportError(""msg.double.switch.default"");
                        }
                        decompiler.addToken(Token.DEFAULT);
                        hasDefault = true;
                        caseExpression = null;
                        mustMatchToken(Token.COLON, ""msg.no.colon.case"");
                        decompiler.addEOL(Token.COLON);
                        break;

                      default:
                        reportError(""msg.bad.switch"");
                        break switchLoop;
                    }

                    Node block = nf.createLeaf(Token.BLOCK);
                    while ((tt = peekToken()) != Token.RC
                           && tt != Token.CASE
                           && tt != Token.DEFAULT
                           && tt != Token.EOF)
                    {
                        nf.addChildToBack(block, statement());
                    }

                    // caseExpression == null => add default lable
                    nf.addSwitchCase(pn, caseExpression, block);
                }
                decompiler.addEOL(Token.RC);
                nf.closeSwitch(pn);
            } finally {
                exitSwitch();
            }
            return pn;
          }

          case Token.WHILE: {
            consumeToken();
            decompiler.addToken(Token.WHILE);

            Node loop = enterLoop(statementLabel);
            try {
                Node cond = condition();
                decompiler.addEOL(Token.LC);
                Node body = statement();
                decompiler.addEOL(Token.RC);
                pn = nf.createWhile(loop, cond, body);
            } finally {
                exitLoop();
            }
            return pn;
          }

          case Token.DO: {
            consumeToken();
            decompiler.addToken(Token.DO);
            decompiler.addEOL(Token.LC);

            Node loop = enterLoop(statementLabel);
            try {
                Node body = statement();
                decompiler.addToken(Token.RC);
                mustMatchToken(Token.WHILE, ""msg.no.while.do"");
                decompiler.addToken(Token.WHILE);
                Node cond = condition();
                pn = nf.createDoWhile(loop, body, cond);
            } finally {
                exitLoop();
            }
            // Always auto-insert semicon to follow SpiderMonkey:
            // It is required by EMAScript but is ignored by the rest of
            // world, see bug 238945
            matchToken(Token.SEMI);
            decompiler.addEOL(Token.SEMI);
            return pn;
          }

          case Token.FOR: {
            consumeToken();
            boolean isForEach = false;
            decompiler.addToken(Token.FOR);

            Node loop = enterLoop(statementLabel);
            try {

                Node init;  // Node init is also foo in 'foo in Object'
                Node cond;  // Node cond is also object in 'foo in Object'
                Node incr = null; // to kill warning
                Node body;

                // See if this is a for each () instead of just a for ()
                if (matchToken(Token.NAME)) {
                    decompiler.addName(ts.getString());
                    if (ts.getString().equals(""each"")) {
                        isForEach = true;
                    } else {
                        reportError(""msg.no.paren.for"");
                    }
                }

                mustMatchToken(Token.LP, ""msg.no.paren.for"");
                decompiler.addToken(Token.LP);
                tt = peekToken();
                if (tt == Token.SEMI) {
                    init = nf.createLeaf(Token.EMPTY);
                } else {
                    if (tt == Token.VAR) {
                        // set init to a var list or initial
                        consumeToken();    // consume the 'var' token
                        init = variables(Token.FOR);
                    }
                    else {
                        init = expr(true);
                    }
                }

                if (matchToken(Token.IN)) {
                    decompiler.addToken(Token.IN);
                    // 'cond' is the object over which we're iterating
                    cond = expr(false);
                } else {  // ordinary for loop
                    mustMatchToken(Token.SEMI, ""msg.no.semi.for"");
                    decompiler.addToken(Token.SEMI);
                    if (peekToken() == Token.SEMI) {
                        // no loop condition
                        cond = nf.createLeaf(Token.EMPTY);
                    } else {
                        cond = expr(false);
                    }

                    mustMatchToken(Token.SEMI, ""msg.no.semi.for.cond"");
                    decompiler.addToken(Token.SEMI);
                    if (peekToken() == Token.RP) {
                        incr = nf.createLeaf(Token.EMPTY);
                    } else {
                        incr = expr(false);
                    }
                }

                mustMatchToken(Token.RP, ""msg.no.paren.for.ctrl"");
                decompiler.addToken(Token.RP);
                decompiler.addEOL(Token.LC);
                body = statement();
                decompiler.addEOL(Token.RC);

                if (incr == null) {
                    // cond could be null if 'in obj' got eaten
                    // by the init node.
                    pn = nf.createForIn(loop, init, cond, body, isForEach);
                } else {
                    pn = nf.createFor(loop, init, cond, incr, body);
                }
            } finally {
                exitLoop();
            }
            return pn;
          }

          case Token.TRY: {
            consumeToken();
            int lineno = ts.getLineno();

            Node tryblock;
            Node catchblocks = null;
            Node finallyblock = null;

            decompiler.addToken(Token.TRY);
            decompiler.addEOL(Token.LC);
            tryblock = statement();
            decompiler.addEOL(Token.RC);

            catchblocks = nf.createLeaf(Token.BLOCK);

            boolean sawDefaultCatch = false;
            int peek = peekToken();
            if (peek == Token.CATCH) {
                while (matchToken(Token.CATCH)) {
                    if (sawDefaultCatch) {
                        reportError(""msg.catch.unreachable"");
                    }
                    decompiler.addToken(Token.CATCH);
                    mustMatchToken(Token.LP, ""msg.no.paren.catch"");
                    decompiler.addToken(Token.LP);

                    mustMatchToken(Token.NAME, ""msg.bad.catchcond"");
                    String varName = ts.getString();
                    decompiler.addName(varName);

                    Node catchCond = null;
                    if (matchToken(Token.IF)) {
                        decompiler.addToken(Token.IF);
                        catchCond = expr(false);
                    } else {
                        sawDefaultCatch = true;
                    }

                    mustMatchToken(Token.RP, ""msg.bad.catchcond"");
                    decompiler.addToken(Token.RP);
                    mustMatchToken(Token.LC, ""msg.no.brace.catchblock"");
                    decompiler.addEOL(Token.LC);

                    nf.addChildToBack(catchblocks,
                        nf.createCatch(varName, catchCond,
                                       statements(),
                                       ts.getLineno()));

                    mustMatchToken(Token.RC, ""msg.no.brace.after.body"");
                    decompiler.addEOL(Token.RC);
                }
            } else if (peek != Token.FINALLY) {
                mustMatchToken(Token.FINALLY, ""msg.try.no.catchfinally"");
            }

            if (matchToken(Token.FINALLY)) {
                decompiler.addToken(Token.FINALLY);
                decompiler.addEOL(Token.LC);
                finallyblock = statement();
                decompiler.addEOL(Token.RC);
            }

            pn = nf.createTryCatchFinally(tryblock, catchblocks,
                                          finallyblock, lineno);

            return pn;
          }

          case Token.THROW: {
            consumeToken();
            if (peekTokenOrEOL() == Token.EOL) {
                // ECMAScript does not allow new lines before throw expression,
                // see bug 256617
                reportError(""msg.bad.throw.eol"");
            }

            int lineno = ts.getLineno();
            decompiler.addToken(Token.THROW);
            pn = nf.createThrow(expr(false), lineno);
            break;
          }

          case Token.BREAK: {
            consumeToken();
            int lineno = ts.getLineno();

            decompiler.addToken(Token.BREAK);

            // matchJumpLabelName only matches if there is one
            Node breakStatement = matchJumpLabelName();
            if (breakStatement == null) {
                if (loopAndSwitchSet == null || loopAndSwitchSet.size() == 0) {
                    reportError(""msg.bad.break"");
                    return null;
                }
                breakStatement = (Node)loopAndSwitchSet.peek();
            }
            pn = nf.createBreak(breakStatement, lineno);
            break;
          }

          case Token.CONTINUE: {
            consumeToken();
            int lineno = ts.getLineno();

            decompiler.addToken(Token.CONTINUE);

            Node loop;
            // matchJumpLabelName only matches if there is one
            Node label = matchJumpLabelName();
            if (label == null) {
                if (loopSet == null || loopSet.size() == 0) {
                    reportError(""msg.continue.outside"");
                    return null;
                }
                loop = (Node)loopSet.peek();
            } else {
                loop = nf.getLabelLoop(label);
                if (loop == null) {
                    reportError(""msg.continue.nonloop"");
                    return null;
                }
            }
            pn = nf.createContinue(loop, lineno);
            break;
          }

          case Token.WITH: {
            consumeToken();

            decompiler.addToken(Token.WITH);
            int lineno = ts.getLineno();
            mustMatchToken(Token.LP, ""msg.no.paren.with"");
            decompiler.addToken(Token.LP);
            Node obj = expr(false);
            mustMatchToken(Token.RP, ""msg.no.paren.after.with"");
            decompiler.addToken(Token.RP);
            decompiler.addEOL(Token.LC);

            ++nestingOfWith;
            Node body;
            try {
                body = statement();
            } finally {
                --nestingOfWith;
            }

            decompiler.addEOL(Token.RC);

            pn = nf.createWith(obj, body, lineno);
            return pn;
          }

          case Token.CONST:
          case Token.VAR: {
            consumeToken();
            pn = variables(tt);
            break;
          }

          case Token.RETURN: {
            if (!insideFunction()) {
                reportError(""msg.bad.return"");
            }
            consumeToken();
            decompiler.addToken(Token.RETURN);
            int lineno = ts.getLineno();

            Node retExpr;
            /* This is ugly, but we don't want to require a semicolon. */
            tt = peekTokenOrEOL();
            switch (tt) {
              case Token.SEMI:
              case Token.RC:
              case Token.EOF:
              case Token.EOL:
              case Token.ERROR:
                retExpr = null;
                break;
              default:
                retExpr = expr(false);
                hasReturnValue = true;
            }
            pn = nf.createReturn(retExpr, lineno);

            // see if we need a strict mode warning
            if (retExpr == null) {
                if (functionEndFlags == Node.END_RETURNS_VALUE)
                    addStrictWarning(""msg.return.inconsistent"", """");

                functionEndFlags |= Node.END_RETURNS;
            } else {
                if (functionEndFlags == Node.END_RETURNS)
                    addStrictWarning(""msg.return.inconsistent"", """");

                functionEndFlags |= Node.END_RETURNS_VALUE;
            }

            break;
          }

          case Token.LC:
            consumeToken();
            if (statementLabel != null) {
                decompiler.addToken(Token.LC);
            }
            pn = statements();
            mustMatchToken(Token.RC, ""msg.no.brace.block"");
            if (statementLabel != null) {
                decompiler.addEOL(Token.RC);
            }
            return pn;

          case Token.ERROR:
            // Fall thru, to have a node for error recovery to work on
          case Token.SEMI:
            consumeToken();
            pn = nf.createLeaf(Token.EMPTY);
            return pn;

          case Token.FUNCTION: {
            consumeToken();
            pn = function(FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
            return pn;
          }

          case Token.DEFAULT :
            consumeToken();
            mustHaveXML();

            decompiler.addToken(Token.DEFAULT);
            int nsLine = ts.getLineno();

            if (!(matchToken(Token.NAME)
                  && ts.getString().equals(""xml"")))
            {
                reportError(""msg.bad.namespace"");
            }
            decompiler.addName("" xml"");

            if (!(matchToken(Token.NAME)
                  && ts.getString().equals(""namespace"")))
            {
                reportError(""msg.bad.namespace"");
            }
            decompiler.addName("" namespace"");

            if (!matchToken(Token.ASSIGN)) {
                reportError(""msg.bad.namespace"");
            }
            decompiler.addToken(Token.ASSIGN);

            Node expr = expr(false);
            pn = nf.createDefaultNamespace(expr, nsLine);
            break;

          case Token.NAME: {
            int lineno = ts.getLineno();
            String name = ts.getString();
            setCheckForLabel();
            pn = expr(false);
            if (pn.getType() != Token.LABEL) {
                pn = nf.createExprStatement(pn, lineno);
            } else {
                // Parsed the label: push back token should be
                // colon that primaryExpr left untouched.
                if (peekToken() != Token.COLON) Kit.codeBug();
                consumeToken();
                // depend on decompiling lookahead to guess that that
                // last name was a label.
                decompiler.addName(name);
                decompiler.addEOL(Token.COLON);

                if (labelSet == null) {
                    labelSet = new Hashtable();
                } else if (labelSet.containsKey(name)) {
                    reportError(""msg.dup.label"");
                }

                boolean firstLabel;
                if (statementLabel == null) {
                    firstLabel = true;
                    statementLabel = pn;
                } else {
                    // Discard multiple label nodes and use only
                    // the first: it allows to simplify IRFactory
                    firstLabel = false;
                }
                labelSet.put(name, statementLabel);
                try {
                    pn = statementHelper(statementLabel);
                } finally {
                    labelSet.remove(name);
                }
                if (firstLabel) {
                    pn = nf.createLabeledStatement(statementLabel, pn);
                }
                return pn;
            }
            break;
          }

          default: {
            int lineno = ts.getLineno();
            pn = expr(false);
            pn = nf.createExprStatement(pn, lineno);
            break;
          }
        }

        int ttFlagged = peekFlaggedToken();
        switch (ttFlagged & CLEAR_TI_MASK) {
          case Token.SEMI:
            // Consume ';' as a part of expression
            consumeToken();
            break;
          case Token.ERROR:
          case Token.EOF:
          case Token.RC:
            // Autoinsert ;
            break;
          default:
            if ((ttFlagged & TI_AFTER_EOL) == 0) {
                // Report error if no EOL or autoinsert ; otherwise
                reportError(""msg.no.semi.stmt"");
            }
            break;
        }
        decompiler.addEOL(Token.SEMI);

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,variables,"    private Node variables(int context)
        throws IOException, ParserException
    {
        Node pn;
        boolean first = true;

        if (context == Token.CONST){
            pn = nf.createVariables(Token.CONST, ts.getLineno());
            decompiler.addToken(Token.CONST);
        } else {
            pn = nf.createVariables(Token.VAR, ts.getLineno());
            decompiler.addToken(Token.VAR);
        }

        for (;;) {
            Node name;
            Node init;
            mustMatchToken(Token.NAME, ""msg.bad.var"");
            String s = ts.getString();

            if (!first)
                decompiler.addToken(Token.COMMA);
            first = false;

            decompiler.addName(s);

            if (context == Token.CONST) {
                if (!currentScriptOrFn.addConst(s)) {
                    // We know it's already defined, since addConst passes if
                    // it's not defined at all.  The addVar call just confirms
                    // what it is.
                    if (currentScriptOrFn.addVar(s) != ScriptOrFnNode.DUPLICATE_CONST)
                        addError(""msg.var.redecl"", s);
                    else
                        addError(""msg.const.redecl"", s);
                }
            } else {
                int dupState = currentScriptOrFn.addVar(s);
                if (dupState == ScriptOrFnNode.DUPLICATE_CONST)
                    addError(""msg.const.redecl"", s);
                else if (dupState == ScriptOrFnNode.DUPLICATE_PARAMETER)
                    addStrictWarning(""msg.var.hides.arg"", s);
                else if (dupState == ScriptOrFnNode.DUPLICATE_VAR)
                    addStrictWarning(""msg.var.redecl"", s);
            }
            name = nf.createName(s);

            // omitted check for argument hiding

            if (matchToken(Token.ASSIGN)) {
                decompiler.addToken(Token.ASSIGN);

                init = assignExpr(context == Token.FOR);
                nf.addChildToBack(name, init);
            }
            nf.addChildToBack(pn, name);
            if (!matchToken(Token.COMMA))
                break;
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,expr,"    private Node expr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = assignExpr(inForInit);
        while (matchToken(Token.COMMA)) {
            decompiler.addToken(Token.COMMA);
            if (compilerEnv.isStrictMode() && !pn.hasSideEffects())
                addStrictWarning(""msg.no.side.effects"", """");
            pn = nf.createBinary(Token.COMMA, pn, assignExpr(inForInit));
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,assignExpr,"    private Node assignExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = condExpr(inForInit);

        int tt = peekToken();
        if (Token.FIRST_ASSIGN <= tt && tt <= Token.LAST_ASSIGN) {
            consumeToken();
            decompiler.addToken(tt);
            pn = nf.createAssignment(tt, pn, assignExpr(inForInit));
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,condExpr,"    private Node condExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = orExpr(inForInit);

        if (matchToken(Token.HOOK)) {
            decompiler.addToken(Token.HOOK);
            Node ifTrue = assignExpr(false);
            mustMatchToken(Token.COLON, ""msg.no.colon.cond"");
            decompiler.addToken(Token.COLON);
            Node ifFalse = assignExpr(inForInit);
            return nf.createCondExpr(pn, ifTrue, ifFalse);
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,orExpr,"    private Node orExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = andExpr(inForInit);
        if (matchToken(Token.OR)) {
            decompiler.addToken(Token.OR);
            pn = nf.createBinary(Token.OR, pn, orExpr(inForInit));
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,andExpr,"    private Node andExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = bitOrExpr(inForInit);
        if (matchToken(Token.AND)) {
            decompiler.addToken(Token.AND);
            pn = nf.createBinary(Token.AND, pn, andExpr(inForInit));
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,bitOrExpr,"    private Node bitOrExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = bitXorExpr(inForInit);
        while (matchToken(Token.BITOR)) {
            decompiler.addToken(Token.BITOR);
            pn = nf.createBinary(Token.BITOR, pn, bitXorExpr(inForInit));
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,bitXorExpr,"    private Node bitXorExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = bitAndExpr(inForInit);
        while (matchToken(Token.BITXOR)) {
            decompiler.addToken(Token.BITXOR);
            pn = nf.createBinary(Token.BITXOR, pn, bitAndExpr(inForInit));
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,bitAndExpr,"    private Node bitAndExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = eqExpr(inForInit);
        while (matchToken(Token.BITAND)) {
            decompiler.addToken(Token.BITAND);
            pn = nf.createBinary(Token.BITAND, pn, eqExpr(inForInit));
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,eqExpr,"    private Node eqExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = relExpr(inForInit);
        for (;;) {
            int tt = peekToken();
            switch (tt) {
              case Token.EQ:
              case Token.NE:
              case Token.SHEQ:
              case Token.SHNE:
                consumeToken();
                int decompilerToken = tt;
                int parseToken = tt;
                if (compilerEnv.getLanguageVersion() == Context.VERSION_1_2) {
                    // JavaScript 1.2 uses shallow equality for == and != .
                    // In addition, convert === and !== for decompiler into
                    // == and != since the decompiler is supposed to show
                    // canonical source and in 1.2 ===, !== are allowed
                    // only as an alias to ==, !=.
                    switch (tt) {
                      case Token.EQ:
                        parseToken = Token.SHEQ;
                        break;
                      case Token.NE:
                        parseToken = Token.SHNE;
                        break;
                      case Token.SHEQ:
                        decompilerToken = Token.EQ;
                        break;
                      case Token.SHNE:
                        decompilerToken = Token.NE;
                        break;
                    }
                }
                decompiler.addToken(decompilerToken);
                pn = nf.createBinary(parseToken, pn, relExpr(inForInit));
                continue;
            }
            break;
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,relExpr,"    private Node relExpr(boolean inForInit)
        throws IOException, ParserException
    {
        Node pn = shiftExpr();
        for (;;) {
            int tt = peekToken();
            switch (tt) {
              case Token.IN:
                if (inForInit)
                    break;
                // fall through
              case Token.INSTANCEOF:
              case Token.LE:
              case Token.LT:
              case Token.GE:
              case Token.GT:
                consumeToken();
                decompiler.addToken(tt);
                pn = nf.createBinary(tt, pn, shiftExpr());
                continue;
            }
            break;
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,shiftExpr,"    private Node shiftExpr()
        throws IOException, ParserException
    {
        Node pn = addExpr();
        for (;;) {
            int tt = peekToken();
            switch (tt) {
              case Token.LSH:
              case Token.URSH:
              case Token.RSH:
                consumeToken();
                decompiler.addToken(tt);
                pn = nf.createBinary(tt, pn, addExpr());
                continue;
            }
            break;
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,addExpr,"    private Node addExpr()
        throws IOException, ParserException
    {
        Node pn = mulExpr();
        for (;;) {
            int tt = peekToken();
            if (tt == Token.ADD || tt == Token.SUB) {
                consumeToken();
                decompiler.addToken(tt);
                // flushNewLines
                pn = nf.createBinary(tt, pn, mulExpr());
                continue;
            }
            break;
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,mulExpr,"    private Node mulExpr()
        throws IOException, ParserException
    {
        Node pn = unaryExpr();
        for (;;) {
            int tt = peekToken();
            switch (tt) {
              case Token.MUL:
              case Token.DIV:
              case Token.MOD:
                consumeToken();
                decompiler.addToken(tt);
                pn = nf.createBinary(tt, pn, unaryExpr());
                continue;
            }
            break;
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,unaryExpr,"    private Node unaryExpr()
        throws IOException, ParserException
    {
        int tt;

        tt = peekToken();

        switch(tt) {
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.TYPEOF:
            consumeToken();
            decompiler.addToken(tt);
            return nf.createUnary(tt, unaryExpr());

        case Token.ADD:
            consumeToken();
            // Convert to special POS token in decompiler and parse tree
            decompiler.addToken(Token.POS);
            return nf.createUnary(Token.POS, unaryExpr());

        case Token.SUB:
            consumeToken();
            // Convert to special NEG token in decompiler and parse tree
            decompiler.addToken(Token.NEG);
            return nf.createUnary(Token.NEG, unaryExpr());

        case Token.INC:
        case Token.DEC:
            consumeToken();
            decompiler.addToken(tt);
            return nf.createIncDec(tt, false, memberExpr(true));

        case Token.DELPROP:
            consumeToken();
            decompiler.addToken(Token.DELPROP);
            return nf.createUnary(Token.DELPROP, unaryExpr());

        case Token.ERROR:
            consumeToken();
            break;

        // XML stream encountered in expression.
        case Token.LT:
            if (compilerEnv.isXmlAvailable()) {
                consumeToken();
                Node pn = xmlInitializer();
                return memberExprTail(true, pn);
            }
            // Fall thru to the default handling of RELOP

        default:
            Node pn = memberExpr(true);

            // Don't look across a newline boundary for a postfix incop.
            tt = peekTokenOrEOL();
            if (tt == Token.INC || tt == Token.DEC) {
                consumeToken();
                decompiler.addToken(tt);
                return nf.createIncDec(tt, true, pn);
            }
            return pn;
        }
        return nf.createName(""err""); // Only reached on error.  Try to continue.
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,xmlInitializer,"    private Node xmlInitializer() throws IOException
    {
        int tt = ts.getFirstXMLToken();
        if (tt != Token.XML && tt != Token.XMLEND) {
            reportError(""msg.syntax"");
            return null;
        }

        /* Make a NEW node to append to. */
        Node pnXML = nf.createLeaf(Token.NEW);

        String xml = ts.getString();
        boolean fAnonymous = xml.trim().startsWith(""<>"");

        Node pn = nf.createName(fAnonymous ? ""XMLList"" : ""XML"");
        nf.addChildToBack(pnXML, pn);

        pn = null;
        Node expr;
        for (;;tt = ts.getNextXMLToken()) {
            switch (tt) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,argumentList,"    private void argumentList(Node listNode)
        throws IOException, ParserException
    {
        boolean matched;
        matched = matchToken(Token.RP);
        if (!matched) {
            boolean first = true;
            do {
                if (!first)
                    decompiler.addToken(Token.COMMA);
                first = false;
                nf.addChildToBack(listNode, assignExpr(false));
            } while (matchToken(Token.COMMA));

            mustMatchToken(Token.RP, ""msg.no.paren.arg"");
        }
        decompiler.addToken(Token.RP);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,memberExpr,"    private Node memberExpr(boolean allowCallSyntax)
        throws IOException, ParserException
    {
        int tt;

        Node pn;

        /* Check for new expressions. */
        tt = peekToken();
        if (tt == Token.NEW) {
            /* Eat the NEW token. */
            consumeToken();
            decompiler.addToken(Token.NEW);

            /* Make a NEW node to append to. */
            pn = nf.createCallOrNew(Token.NEW, memberExpr(false));

            if (matchToken(Token.LP)) {
                decompiler.addToken(Token.LP);
                /* Add the arguments to pn, if any are supplied. */
                argumentList(pn);
            }

            /* XXX there's a check in the C source against
             * ""too many constructor arguments"" - how many
             * do we claim to support?
             */

            /* Experimental syntax:  allow an object literal to follow a new expression,
             * which will mean a kind of anonymous class built with the JavaAdapter.
             * the object literal will be passed as an additional argument to the constructor.
             */
            tt = peekToken();
            if (tt == Token.LC) {
                nf.addChildToBack(pn, primaryExpr());
            }
        } else {
            pn = primaryExpr();
        }

        return memberExprTail(allowCallSyntax, pn);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,memberExprTail,"    private Node memberExprTail(boolean allowCallSyntax, Node pn)
        throws IOException, ParserException
    {
      tailLoop:
        for (;;) {
            int tt = peekToken();
            switch (tt) {

              case Token.DOT:
              case Token.DOTDOT:
                {
                    int memberTypeFlags;
                    String s;

                    consumeToken();
                    decompiler.addToken(tt);
                    memberTypeFlags = 0;
                    if (tt == Token.DOTDOT) {
                        mustHaveXML();
                        memberTypeFlags = Node.DESCENDANTS_FLAG;
                    }
                    if (!compilerEnv.isXmlAvailable()) {
                        mustMatchToken(Token.NAME, ""msg.no.name.after.dot"");
                        s = ts.getString();
                        decompiler.addName(s);
                        pn = nf.createPropertyGet(pn, null, s, memberTypeFlags);
                        break;
                    }

                    tt = nextToken();
                    switch (tt) {
                      // handles: name, ns::name, ns::*, ns::[expr]
                      case Token.NAME:
                        s = ts.getString();
                        decompiler.addName(s);
                        pn = propertyName(pn, s, memberTypeFlags);
                        break;

                      // handles: *, *::name, *::*, *::[expr]
                      case Token.MUL:
                        decompiler.addName(""*"");
                        pn = propertyName(pn, ""*"", memberTypeFlags);
                        break;

                      // handles: '@attr', '@ns::attr', '@ns::*', '@ns::*',
                      //          '@::attr', '@::*', '@*', '@*::attr', '@*::*'
                      case Token.XMLATTR:
                        decompiler.addToken(Token.XMLATTR);
                        pn = attributeAccess(pn, memberTypeFlags);
                        break;

                      default:
                        reportError(""msg.no.name.after.dot"");
                    }
                }
                break;

              case Token.DOTQUERY:
                consumeToken();
                mustHaveXML();
                decompiler.addToken(Token.DOTQUERY);
                pn = nf.createDotQuery(pn, expr(false), ts.getLineno());
                mustMatchToken(Token.RP, ""msg.no.paren"");
                decompiler.addToken(Token.RP);
                break;

              case Token.LB:
                consumeToken();
                decompiler.addToken(Token.LB);
                pn = nf.createElementGet(pn, null, expr(false), 0);
                mustMatchToken(Token.RB, ""msg.no.bracket.index"");
                decompiler.addToken(Token.RB);
                break;

              case Token.LP:
                if (!allowCallSyntax) {
                    break tailLoop;
                }
                consumeToken();
                decompiler.addToken(Token.LP);
                pn = nf.createCallOrNew(Token.CALL, pn);
                /* Add the arguments to pn, if any are supplied. */
                argumentList(pn);
                break;

              default:
                break tailLoop;
            }
        }
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,attributeAccess,"    private Node attributeAccess(Node pn, int memberTypeFlags)
        throws IOException
    {
        memberTypeFlags |= Node.ATTRIBUTE_FLAG;
        int tt = nextToken();

        switch (tt) {
          // handles: @name, @ns::name, @ns::*, @ns::[expr]
          case Token.NAME:
            {
                String s = ts.getString();
                decompiler.addName(s);
                pn = propertyName(pn, s, memberTypeFlags);
            }
            break;

          // handles: @*, @*::name, @*::*, @*::[expr]
          case Token.MUL:
            decompiler.addName(""*"");
            pn = propertyName(pn, ""*"", memberTypeFlags);
            break;

          // handles @[expr]
          case Token.LB:
            decompiler.addToken(Token.LB);
            pn = nf.createElementGet(pn, null, expr(false), memberTypeFlags);
            mustMatchToken(Token.RB, ""msg.no.bracket.index"");
            decompiler.addToken(Token.RB);
            break;

          default:
            reportError(""msg.no.name.after.xmlAttr"");
            pn = nf.createPropertyGet(pn, null, ""?"", memberTypeFlags);
            break;
        }

        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,propertyName,"    private Node propertyName(Node pn, String name, int memberTypeFlags)
        throws IOException, ParserException
    {
        String namespace = null;
        if (matchToken(Token.COLONCOLON)) {
            decompiler.addToken(Token.COLONCOLON);
            namespace = name;

            int tt = nextToken();
            switch (tt) {
              // handles name::name
              case Token.NAME:
                name = ts.getString();
                decompiler.addName(name);
                break;

              // handles name::*
              case Token.MUL:
                decompiler.addName(""*"");
                name = ""*"";
                break;

              // handles name::[expr]
              case Token.LB:
                decompiler.addToken(Token.LB);
                pn = nf.createElementGet(pn, namespace, expr(false),
                                         memberTypeFlags);
                mustMatchToken(Token.RB, ""msg.no.bracket.index"");
                decompiler.addToken(Token.RB);
                return pn;

              default:
                reportError(""msg.no.name.after.coloncolon"");
                name = ""?"";
            }
        }

        pn = nf.createPropertyGet(pn, namespace, name, memberTypeFlags);
        return pn;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,primaryExpr,"    private Node primaryExpr()
        throws IOException, ParserException
    {
        Node pn;

        int ttFlagged = nextFlaggedToken();
        int tt = ttFlagged & CLEAR_TI_MASK;

        switch(tt) {

          case Token.FUNCTION:
            return function(FunctionNode.FUNCTION_EXPRESSION);

          case Token.LB: {
            ObjArray elems = new ObjArray();
            int skipCount = 0;
            decompiler.addToken(Token.LB);
            boolean after_lb_or_comma = true;
            for (;;) {
                tt = peekToken();

                if (tt == Token.COMMA) {
                    consumeToken();
                    decompiler.addToken(Token.COMMA);
                    if (!after_lb_or_comma) {
                        after_lb_or_comma = true;
                    } else {
                        elems.add(null);
                        ++skipCount;
                    }
                } else if (tt == Token.RB) {
                    consumeToken();
                    decompiler.addToken(Token.RB);
                    break;
                } else {
                    if (!after_lb_or_comma) {
                        reportError(""msg.no.bracket.arg"");
                    }
                    elems.add(assignExpr(false));
                    after_lb_or_comma = false;
                }
            }
            return nf.createArrayLiteral(elems, skipCount);
          }

          case Token.LC: {
            ObjArray elems = new ObjArray();
            decompiler.addToken(Token.LC);
            if (!matchToken(Token.RC)) {

                boolean first = true;
            commaloop:
                do {
                    Object property;

                    if (!first)
                        decompiler.addToken(Token.COMMA);
                    else
                        first = false;

                    tt = peekToken();
                    switch(tt) {
                      case Token.NAME:
                      case Token.STRING:
                        consumeToken();
                        // map NAMEs to STRINGs in object literal context
                        // but tell the decompiler the proper type
                        String s = ts.getString();
                        if (tt == Token.NAME) {
                            if (s.equals(""get"") &&
                                peekToken() == Token.NAME) {
                                decompiler.addToken(Token.GET);
                                consumeToken();
                                s = ts.getString();
                                decompiler.addName(s);
                                property = ScriptRuntime.getIndexObject(s);
                                if (!getterSetterProperty(elems, property,
                                                          true))
                                    break commaloop;
                                break;
                            } else if (s.equals(""set"") &&
                                       peekToken() == Token.NAME) {
                                decompiler.addToken(Token.SET);
                                consumeToken();
                                s = ts.getString();
                                decompiler.addName(s);
                                property = ScriptRuntime.getIndexObject(s);
                                if (!getterSetterProperty(elems, property,
                                                          false))
                                    break commaloop;
                                break;
                            }
                            decompiler.addName(s);
                        } else {
                            decompiler.addString(s);
                        }
                        property = ScriptRuntime.getIndexObject(s);
                        plainProperty(elems, property);
                        break;

                      case Token.NUMBER:
                        consumeToken();
                        double n = ts.getNumber();
                        decompiler.addNumber(n);
                        property = ScriptRuntime.getIndexObject(n);
                        plainProperty(elems, property);
                        break;

                      case Token.RC:
                        // trailing comma is OK.
                        break commaloop;
                    default:
                        reportError(""msg.bad.prop"");
                        break commaloop;
                    }
                } while (matchToken(Token.COMMA));

                mustMatchToken(Token.RC, ""msg.no.brace.prop"");
            }
            decompiler.addToken(Token.RC);
            return nf.createObjectLiteral(elems);
          }

          case Token.LP:

            /* Brendan's IR-jsparse.c makes a new node tagged with
             * TOK_LP here... I'm not sure I understand why.  Isn't
             * the grouping already implicit in the structure of the
             * parse tree?  also TOK_LP is already overloaded (I
             * think) in the C IR as 'function call.'  */
            decompiler.addToken(Token.LP);
            pn = expr(false);
            pn.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);
            decompiler.addToken(Token.RP);
            mustMatchToken(Token.RP, ""msg.no.paren"");
            return pn;

          case Token.XMLATTR:
            mustHaveXML();
            decompiler.addToken(Token.XMLATTR);
            pn = attributeAccess(null, 0);
            return pn;

          case Token.NAME: {
            String name = ts.getString();
            if ((ttFlagged & TI_CHECK_LABEL) != 0) {
                if (peekToken() == Token.COLON) {
                    // Do not consume colon, it is used as unwind indicator
                    // to return to statementHelper.
                    // XXX Better way?
                    return nf.createLabel(ts.getLineno());
                }
            }

            decompiler.addName(name);
            if (compilerEnv.isXmlAvailable()) {
                pn = propertyName(null, name, 0);
            } else {
                pn = nf.createName(name);
            }
            return pn;
          }

          case Token.NUMBER: {
            double n = ts.getNumber();
            decompiler.addNumber(n);
            return nf.createNumber(n);
          }

          case Token.STRING: {
            String s = ts.getString();
            decompiler.addString(s);
            return nf.createString(s);
          }

          case Token.DIV:
          case Token.ASSIGN_DIV: {
            // Got / or /= which should be treated as regexp in fact
            ts.readRegExp(tt);
            String flags = ts.regExpFlags;
            ts.regExpFlags = null;
            String re = ts.getString();
            decompiler.addRegexp(re, flags);
            int index = currentScriptOrFn.addRegexp(re, flags);
            return nf.createRegExp(index);
          }

          case Token.NULL:
          case Token.THIS:
          case Token.FALSE:
          case Token.TRUE:
            decompiler.addToken(tt);
            return nf.createLeaf(tt);

          case Token.RESERVED:
            reportError(""msg.reserved.id"");
            break;

          case Token.ERROR:
            /* the scanner or one of its subroutines reported the error. */
            break;

          case Token.EOF:
            reportError(""msg.unexpected.eof"");
            break;

          default:
            reportError(""msg.syntax"");
            break;
        }
        return null;    // should never reach here
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,plainProperty,"    private void plainProperty(ObjArray elems, Object property)
            throws IOException {
        mustMatchToken(Token.COLON, ""msg.no.colon.prop"");

        // OBJLIT is used as ':' in object literal for
        // decompilation to solve spacing ambiguity.
        decompiler.addToken(Token.OBJECTLIT);
        elems.add(property);
        elems.add(assignExpr(false));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Parser.java,getterSetterProperty,"    private boolean getterSetterProperty(ObjArray elems, Object property,
                                         boolean isGetter) throws IOException {
        Node f = function(FunctionNode.FUNCTION_EXPRESSION);
        if (f.getType() != Token.FUNCTION) {
            reportError(""msg.bad.prop"");
            return false;
        }
        int fnIndex = f.getExistingIntProp(Node.FUNCTION_PROP);
        FunctionNode fn = currentScriptOrFn.getFunctionNode(fnIndex);
        if (fn.getFunctionName().length() != 0) {
            reportError(""msg.bad.prop"");
            return false;
        }
        elems.add(property);
        if (isGetter) {
            elems.add(nf.createUnary(Token.GET, f));
        } else {
            elems.add(nf.createUnary(Token.SET, f));
        }
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,Token.java,name,"    public static String name(int token)
    {
        if (!printNames) {
            return String.valueOf(token);
        }
        switch (token) {
          case ERROR:           return ""ERROR"";
          case EOF:             return ""EOF"";
          case EOL:             return ""EOL"";
          case ENTERWITH:       return ""ENTERWITH"";
          case LEAVEWITH:       return ""LEAVEWITH"";
          case RETURN:          return ""RETURN"";
          case GOTO:            return ""GOTO"";
          case IFEQ:            return ""IFEQ"";
          case IFNE:            return ""IFNE"";
          case SETNAME:         return ""SETNAME"";
          case BITOR:           return ""BITOR"";
          case BITXOR:          return ""BITXOR"";
          case BITAND:          return ""BITAND"";
          case EQ:              return ""EQ"";
          case NE:              return ""NE"";
          case LT:              return ""LT"";
          case LE:              return ""LE"";
          case GT:              return ""GT"";
          case GE:              return ""GE"";
          case LSH:             return ""LSH"";
          case RSH:             return ""RSH"";
          case URSH:            return ""URSH"";
          case ADD:             return ""ADD"";
          case SUB:             return ""SUB"";
          case MUL:             return ""MUL"";
          case DIV:             return ""DIV"";
          case MOD:             return ""MOD"";
          case NOT:             return ""NOT"";
          case BITNOT:          return ""BITNOT"";
          case POS:             return ""POS"";
          case NEG:             return ""NEG"";
          case NEW:             return ""NEW"";
          case DELPROP:         return ""DELPROP"";
          case TYPEOF:          return ""TYPEOF"";
          case GETPROP:         return ""GETPROP"";
          case SETPROP:         return ""SETPROP"";
          case GETELEM:         return ""GETELEM"";
          case SETELEM:         return ""SETELEM"";
          case CALL:            return ""CALL"";
          case NAME:            return ""NAME"";
          case NUMBER:          return ""NUMBER"";
          case STRING:          return ""STRING"";
          case NULL:            return ""NULL"";
          case THIS:            return ""THIS"";
          case FALSE:           return ""FALSE"";
          case TRUE:            return ""TRUE"";
          case SHEQ:            return ""SHEQ"";
          case SHNE:            return ""SHNE"";
          case REGEXP:          return ""OBJECT"";
          case BINDNAME:        return ""BINDNAME"";
          case THROW:           return ""THROW"";
          case RETHROW:         return ""RETHROW"";
          case IN:              return ""IN"";
          case INSTANCEOF:      return ""INSTANCEOF"";
          case LOCAL_LOAD:      return ""LOCAL_LOAD"";
          case GETVAR:          return ""GETVAR"";
          case SETVAR:          return ""SETVAR"";
          case CATCH_SCOPE:     return ""CATCH_SCOPE"";
          case ENUM_INIT_KEYS:  return ""ENUM_INIT_KEYS"";
          case ENUM_INIT_VALUES:  return ""ENUM_INIT_VALUES"";
          case ENUM_NEXT:       return ""ENUM_NEXT"";
          case ENUM_ID:         return ""ENUM_ID"";
          case THISFN:          return ""THISFN"";
          case RETURN_RESULT:   return ""RETURN_RESULT"";
          case ARRAYLIT:        return ""ARRAYLIT"";
          case OBJECTLIT:       return ""OBJECTLIT"";
          case GET_REF:         return ""GET_REF"";
          case SET_REF:         return ""SET_REF"";
          case DEL_REF:         return ""DEL_REF"";
          case REF_CALL:        return ""REF_CALL"";
          case REF_SPECIAL:     return ""REF_SPECIAL"";
          case DEFAULTNAMESPACE:return ""DEFAULTNAMESPACE"";
          case ESCXMLTEXT:      return ""ESCXMLTEXT"";
          case ESCXMLATTR:      return ""ESCXMLATTR"";
          case REF_MEMBER:      return ""REF_MEMBER"";
          case REF_NS_MEMBER:   return ""REF_NS_MEMBER"";
          case REF_NAME:        return ""REF_NAME"";
          case REF_NS_NAME:     return ""REF_NS_NAME"";
          case TRY:             return ""TRY"";
          case SEMI:            return ""SEMI"";
          case LB:              return ""LB"";
          case RB:              return ""RB"";
          case LC:              return ""LC"";
          case RC:              return ""RC"";
          case LP:              return ""LP"";
          case RP:              return ""RP"";
          case COMMA:           return ""COMMA"";
          case ASSIGN:          return ""ASSIGN"";
          case ASSIGN_BITOR:    return ""ASSIGN_BITOR"";
          case ASSIGN_BITXOR:   return ""ASSIGN_BITXOR"";
          case ASSIGN_BITAND:   return ""ASSIGN_BITAND"";
          case ASSIGN_LSH:      return ""ASSIGN_LSH"";
          case ASSIGN_RSH:      return ""ASSIGN_RSH"";
          case ASSIGN_URSH:     return ""ASSIGN_URSH"";
          case ASSIGN_ADD:      return ""ASSIGN_ADD"";
          case ASSIGN_SUB:      return ""ASSIGN_SUB"";
          case ASSIGN_MUL:      return ""ASSIGN_MUL"";
          case ASSIGN_DIV:      return ""ASSIGN_DIV"";
          case ASSIGN_MOD:      return ""ASSIGN_MOD"";
          case HOOK:            return ""HOOK"";
          case COLON:           return ""COLON"";
          case OR:              return ""OR"";
          case AND:             return ""AND"";
          case INC:             return ""INC"";
          case DEC:             return ""DEC"";
          case DOT:             return ""DOT"";
          case FUNCTION:        return ""FUNCTION"";
          case EXPORT:          return ""EXPORT"";
          case IMPORT:          return ""IMPORT"";
          case IF:              return ""IF"";
          case ELSE:            return ""ELSE"";
          case SWITCH:          return ""SWITCH"";
          case CASE:            return ""CASE"";
          case DEFAULT:         return ""DEFAULT"";
          case WHILE:           return ""WHILE"";
          case DO:              return ""DO"";
          case FOR:             return ""FOR"";
          case BREAK:           return ""BREAK"";
          case CONTINUE:        return ""CONTINUE"";
          case VAR:             return ""VAR"";
          case WITH:            return ""WITH"";
          case CATCH:           return ""CATCH"";
          case FINALLY:         return ""FINALLY"";
          case RESERVED:        return ""RESERVED"";
          case EMPTY:           return ""EMPTY"";
          case BLOCK:           return ""BLOCK"";
          case LABEL:           return ""LABEL"";
          case TARGET:          return ""TARGET"";
          case LOOP:            return ""LOOP"";
          case EXPR_VOID:       return ""EXPR_VOID"";
          case EXPR_RESULT:     return ""EXPR_RESULT"";
          case JSR:             return ""JSR"";
          case SCRIPT:          return ""SCRIPT"";
          case TYPEOFNAME:      return ""TYPEOFNAME"";
          case USE_STACK:       return ""USE_STACK"";
          case SETPROP_OP:      return ""SETPROP_OP"";
          case SETELEM_OP:      return ""SETELEM_OP"";
          case LOCAL_BLOCK:     return ""LOCAL_BLOCK"";
          case SET_REF_OP:      return ""SET_REF_OP"";
          case DOTDOT:          return ""DOTDOT"";
          case COLONCOLON:      return ""COLONCOLON"";
          case XML:             return ""XML"";
          case DOTQUERY:        return ""DOTQUERY"";
          case XMLATTR:         return ""XMLATTR"";
          case XMLEND:          return ""XMLEND"";
          case TO_OBJECT:       return ""TO_OBJECT"";
          case TO_DOUBLE:       return ""TO_DOUBLE"";
          case GET:             return ""GET"";
          case SET:             return ""SET"";
          case CONST:           return ""CONST"";
          case SETCONST:        return ""SETCONST"";
        }

        // Token without name
        throw new IllegalStateException(String.valueOf(token));
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,tokenToString,"    String tokenToString(int token)
    {
        if (Token.printTrees) {
            String name = Token.name(token);

            switch (token) {
            case Token.STRING:
            case Token.REGEXP:
            case Token.NAME:
                return name + "" `"" + this.string + ""'"";

            case Token.NUMBER:
                return ""NUMBER "" + this.number;
            }

            return name;
        }
        return """";
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isKeyword,"    static boolean isKeyword(String s)
    {
        return Token.EOF != stringToKeyword(s);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,stringToKeyword,"    private static int stringToKeyword(String name)
    {
// #string_id_map#
// The following assumes that Token.EOF == 0
        final int
            Id_break         = Token.BREAK,
            Id_case          = Token.CASE,
            Id_continue      = Token.CONTINUE,
            Id_default       = Token.DEFAULT,
            Id_delete        = Token.DELPROP,
            Id_do            = Token.DO,
            Id_else          = Token.ELSE,
            Id_export        = Token.EXPORT,
            Id_false         = Token.FALSE,
            Id_for           = Token.FOR,
            Id_function      = Token.FUNCTION,
            Id_if            = Token.IF,
            Id_in            = Token.IN,
            Id_new           = Token.NEW,
            Id_null          = Token.NULL,
            Id_return        = Token.RETURN,
            Id_switch        = Token.SWITCH,
            Id_this          = Token.THIS,
            Id_true          = Token.TRUE,
            Id_typeof        = Token.TYPEOF,
            Id_var           = Token.VAR,
            Id_void          = Token.VOID,
            Id_while         = Token.WHILE,
            Id_with          = Token.WITH,

            // the following are #ifdef RESERVE_JAVA_KEYWORDS in jsscan.c
            Id_abstract      = Token.RESERVED,
            Id_boolean       = Token.RESERVED,
            Id_byte          = Token.RESERVED,
            Id_catch         = Token.CATCH,
            Id_char          = Token.RESERVED,
            Id_class         = Token.RESERVED,
            Id_const         = Token.CONST,
            Id_debugger      = Token.RESERVED,
            Id_double        = Token.RESERVED,
            Id_enum          = Token.RESERVED,
            Id_extends       = Token.RESERVED,
            Id_final         = Token.RESERVED,
            Id_finally       = Token.FINALLY,
            Id_float         = Token.RESERVED,
            Id_goto          = Token.RESERVED,
            Id_implements    = Token.RESERVED,
            Id_import        = Token.IMPORT,
            Id_instanceof    = Token.INSTANCEOF,
            Id_int           = Token.RESERVED,
            Id_interface     = Token.RESERVED,
            Id_long          = Token.RESERVED,
            Id_native        = Token.RESERVED,
            Id_package       = Token.RESERVED,
            Id_private       = Token.RESERVED,
            Id_protected     = Token.RESERVED,
            Id_public        = Token.RESERVED,
            Id_short         = Token.RESERVED,
            Id_static        = Token.RESERVED,
            Id_super         = Token.RESERVED,
            Id_synchronized  = Token.RESERVED,
            Id_throw         = Token.THROW,
            Id_throws        = Token.RESERVED,
            Id_transient     = Token.RESERVED,
            Id_try           = Token.TRY,
            Id_volatile      = Token.RESERVED;

        int id;
        String s = name;
// #generated# Last update: 2001-06-01 17:45:01 CEST
        L0: { id = 0; String X = null; int c;
            L: switch (s.length()) {
            case 2: c=s.charAt(1);
                if (c=='f') { if (s.charAt(0)=='i') {id=Id_if; break L0;} }
                else if (c=='n') { if (s.charAt(0)=='i') {id=Id_in; break L0;} }
                else if (c=='o') { if (s.charAt(0)=='d') {id=Id_do; break L0;} }
                break L;
            case 3: switch (s.charAt(0)) {
                case 'f': if (s.charAt(2)=='r' && s.charAt(1)=='o') {id=Id_for; break L0;} break L;
                case 'i': if (s.charAt(2)=='t' && s.charAt(1)=='n') {id=Id_int; break L0;} break L;
                case 'n': if (s.charAt(2)=='w' && s.charAt(1)=='e') {id=Id_new; break L0;} break L;
                case 't': if (s.charAt(2)=='y' && s.charAt(1)=='r') {id=Id_try; break L0;} break L;
                case 'v': if (s.charAt(2)=='r' && s.charAt(1)=='a') {id=Id_var; break L0;} break L;
                } break L;
            case 4: switch (s.charAt(0)) {
                case 'b': X=""byte"";id=Id_byte; break L;
                case 'c': c=s.charAt(3);
                    if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='a') {id=Id_case; break L0;} }
                    else if (c=='r') { if (s.charAt(2)=='a' && s.charAt(1)=='h') {id=Id_char; break L0;} }
                    break L;
                case 'e': c=s.charAt(3);
                    if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='l') {id=Id_else; break L0;} }
                    else if (c=='m') { if (s.charAt(2)=='u' && s.charAt(1)=='n') {id=Id_enum; break L0;} }
                    break L;
                case 'g': X=""goto"";id=Id_goto; break L;
                case 'l': X=""long"";id=Id_long; break L;
                case 'n': X=""null"";id=Id_null; break L;
                case 't': c=s.charAt(3);
                    if (c=='e') { if (s.charAt(2)=='u' && s.charAt(1)=='r') {id=Id_true; break L0;} }
                    else if (c=='s') { if (s.charAt(2)=='i' && s.charAt(1)=='h') {id=Id_this; break L0;} }
                    break L;
                case 'v': X=""void"";id=Id_void; break L;
                case 'w': X=""with"";id=Id_with; break L;
                } break L;
            case 5: switch (s.charAt(2)) {
                case 'a': X=""class"";id=Id_class; break L;
                case 'e': X=""break"";id=Id_break; break L;
                case 'i': X=""while"";id=Id_while; break L;
                case 'l': X=""false"";id=Id_false; break L;
                case 'n': c=s.charAt(0);
                    if (c=='c') { X=""const"";id=Id_const; }
                    else if (c=='f') { X=""final"";id=Id_final; }
                    break L;
                case 'o': c=s.charAt(0);
                    if (c=='f') { X=""float"";id=Id_float; }
                    else if (c=='s') { X=""short"";id=Id_short; }
                    break L;
                case 'p': X=""super"";id=Id_super; break L;
                case 'r': X=""throw"";id=Id_throw; break L;
                case 't': X=""catch"";id=Id_catch; break L;
                } break L;
            case 6: switch (s.charAt(1)) {
                case 'a': X=""native"";id=Id_native; break L;
                case 'e': c=s.charAt(0);
                    if (c=='d') { X=""delete"";id=Id_delete; }
                    else if (c=='r') { X=""return"";id=Id_return; }
                    break L;
                case 'h': X=""throws"";id=Id_throws; break L;
                case 'm': X=""import"";id=Id_import; break L;
                case 'o': X=""double"";id=Id_double; break L;
                case 't': X=""static"";id=Id_static; break L;
                case 'u': X=""public"";id=Id_public; break L;
                case 'w': X=""switch"";id=Id_switch; break L;
                case 'x': X=""export"";id=Id_export; break L;
                case 'y': X=""typeof"";id=Id_typeof; break L;
                } break L;
            case 7: switch (s.charAt(1)) {
                case 'a': X=""package"";id=Id_package; break L;
                case 'e': X=""default"";id=Id_default; break L;
                case 'i': X=""finally"";id=Id_finally; break L;
                case 'o': X=""boolean"";id=Id_boolean; break L;
                case 'r': X=""private"";id=Id_private; break L;
                case 'x': X=""extends"";id=Id_extends; break L;
                } break L;
            case 8: switch (s.charAt(0)) {
                case 'a': X=""abstract"";id=Id_abstract; break L;
                case 'c': X=""continue"";id=Id_continue; break L;
                case 'd': X=""debugger"";id=Id_debugger; break L;
                case 'f': X=""function"";id=Id_function; break L;
                case 'v': X=""volatile"";id=Id_volatile; break L;
                } break L;
            case 9: c=s.charAt(0);
                if (c=='i') { X=""interface"";id=Id_interface; }
                else if (c=='p') { X=""protected"";id=Id_protected; }
                else if (c=='t') { X=""transient"";id=Id_transient; }
                break L;
            case 10: c=s.charAt(1);
                if (c=='m') { X=""implements"";id=Id_implements; }
                else if (c=='n') { X=""instanceof"";id=Id_instanceof; }
                break L;
            case 12: X=""synchronized"";id=Id_synchronized; break L;
            }
            if (X!=null && X!=s && !X.equals(s)) id = 0;
        }
// #/generated#
// #/string_id_map#
        if (id == 0) { return Token.EOF; }
        return id & 0xff;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getLineno,"    final int getLineno() { return lineno; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getString,"    final String getString() { return string; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getNumber,"    final double getNumber() { return number; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,eof,"    final boolean eof() { return hitEOF; }
",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getToken,"    final int getToken() throws IOException
    {
        int c;

    retry:
        for (;;) {",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isAlpha,"    private static boolean isAlpha(int c)
    {
        // Use 'Z' < 'a'
        if (c <= 'Z') {
            return 'A' <= c;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isDigit,"    static boolean isDigit(int c)
    {
        return '0' <= c && c <= '9';
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isJSSpace,"    static boolean isJSSpace(int c)
    {
        if (c <= 127) {
            return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isJSFormatChar,"    private static boolean isJSFormatChar(int c)
    {
        return c > 127 && Character.getType((char)c) == Character.FORMAT;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readRegExp,"    void readRegExp(int startToken)
        throws IOException
    {
        stringBufferTop = 0;
        if (startToken == Token.ASSIGN_DIV) {
            // Miss-scanned /=
            addToString('=');
        } else {
            if (startToken != Token.DIV) Kit.codeBug();
        }

        int c;
        boolean inClass = false;
        while ((c = getChar()) != '/' || inClass) {
            if (c == '\n' || c == EOF_CHAR) {
                ungetChar(c);
                throw parser.reportError(""msg.unterminated.re.lit"");
            }
            if (c == '\\') {
                addToString(c);
                c = getChar();
            } else if (c == '[') {
                inClass = true;
            } else if (c == ']') {
                inClass = false;
            }

            addToString(c);
        }
        int reEnd = stringBufferTop;

        while (true) {
            if (matchChar('g'))
                addToString('g');
            else if (matchChar('i'))
                addToString('i');
            else if (matchChar('m'))
                addToString('m');
            else
                break;
        }

        if (isAlpha(peekChar())) {
            throw parser.reportError(""msg.invalid.re.flag"");
        }

        this.string = new String(stringBuffer, 0, reEnd);
        this.regExpFlags = new String(stringBuffer, reEnd,
                                      stringBufferTop - reEnd);",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,isXMLAttribute,"    boolean isXMLAttribute()
    {
        return xmlIsAttribute;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getFirstXMLToken,"    int getFirstXMLToken() throws IOException
    {
        xmlOpenTagsCount = 0;
        xmlIsAttribute = false;
        xmlIsTagContent = false;
        ungetChar('<');
        return getNextXMLToken();
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getNextXMLToken,"    int getNextXMLToken() throws IOException
    {
        stringBufferTop = 0; // remember the XML

        for (int c = getChar(); c != EOF_CHAR; c = getChar()) {
            if (xmlIsTagContent) {
                switch (c) {
                case '>':
                    addToString(c);
                    xmlIsTagContent = false;
                    xmlIsAttribute = false;
                    break;
                case '/':
                    addToString(c);
                    if (peekChar() == '>') {
                        c = getChar();
                        addToString(c);
                        xmlIsTagContent = false;
                        xmlOpenTagsCount--;
                    }
                    break;
                case '{':
                    ungetChar(c);
                    this.string = getStringFromBuffer();
                    return Token.XML;
                case '\'':
                case '""':
                    addToString(c);
                    if (!readQuotedString(c)) return Token.ERROR;
                    break;
                case '=':
                    addToString(c);
                    xmlIsAttribute = true;
                    break;
                case ' ':
                case '\t':
                case '\r':
                case '\n':
                    addToString(c);
                    break;
                default:
                    addToString(c);
                    xmlIsAttribute = false;
                    break;
                }

                if (!xmlIsTagContent && xmlOpenTagsCount == 0) {
                    this.string = getStringFromBuffer();
                    return Token.XMLEND;
                }
            } else {
                switch (c) {
                case '<':
                    addToString(c);
                    c = peekChar();
                    switch (c) {
                    case '!':
                        c = getChar(); // Skip !
                        addToString(c);
                        c = peekChar();
                        switch (c) {
                        case '-':
                            c = getChar(); // Skip -
                            addToString(c);
                            c = getChar();
                            if (c == '-') {
                                addToString(c);
                                if(!readXmlComment()) return Token.ERROR;
                            } else {
                                // throw away the string in progress
                                stringBufferTop = 0;
                                this.string = null;
                                parser.addError(""msg.XML.bad.form"");
                                return Token.ERROR;
                            }
                            break;
                        case '[':
                            c = getChar(); // Skip [
                            addToString(c);
                            if (getChar() == 'C' &&
                                getChar() == 'D' &&
                                getChar() == 'A' &&
                                getChar() == 'T' &&
                                getChar() == 'A' &&
                                getChar() == '[')
                            {
                                addToString('C');
                                addToString('D');
                                addToString('A');
                                addToString('T');
                                addToString('A');
                                addToString('[');
                                if (!readCDATA()) return Token.ERROR;

                            } else {
                                // throw away the string in progress
                                stringBufferTop = 0;
                                this.string = null;
                                parser.addError(""msg.XML.bad.form"");
                                return Token.ERROR;
                            }
                            break;
                        default:
                            if(!readEntity()) return Token.ERROR;
                            break;
                        }
                        break;
                    case '?':
                        c = getChar(); // Skip ?
                        addToString(c);
                        if (!readPI()) return Token.ERROR;
                        break;
                    case '/':
                        // End tag
                        c = getChar(); // Skip /
                        addToString(c);
                        if (xmlOpenTagsCount == 0) {
                            // throw away the string in progress
                            stringBufferTop = 0;
                            this.string = null;
                            parser.addError(""msg.XML.bad.form"");
                            return Token.ERROR;
                        }
                        xmlIsTagContent = true;
                        xmlOpenTagsCount--;
                        break;
                    default:
                        // Start tag
                        xmlIsTagContent = true;
                        xmlOpenTagsCount++;
                        break;
                    }
                    break;
                case '{':
                    ungetChar(c);
                    this.string = getStringFromBuffer();
                    return Token.XML;
                default:
                    addToString(c);
                    break;
                }
            }
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return Token.ERROR;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readQuotedString,"    private boolean readQuotedString(int quote) throws IOException
    {
        for (int c = getChar(); c != EOF_CHAR; c = getChar()) {
            addToString(c);
            if (c == quote) return true;
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readXmlComment,"    private boolean readXmlComment() throws IOException
    {
        for (int c = getChar(); c != EOF_CHAR;) {
            addToString(c);
            if (c == '-' && peekChar() == '-') {
                c = getChar();
                addToString(c);
                if (peekChar() == '>') {
                    c = getChar(); // Skip >
                    addToString(c);
                    return true;
                } else {
                    continue;
                }
            }
            c = getChar();
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readCDATA,"    private boolean readCDATA() throws IOException
    {
        for (int c = getChar(); c != EOF_CHAR;) {
            addToString(c);
            if (c == ']' && peekChar() == ']') {
                c = getChar();
                addToString(c);
                if (peekChar() == '>') {
                    c = getChar(); // Skip >
                    addToString(c);
                    return true;
                } else {
                    continue;
                }
            }
            c = getChar();
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readEntity,"    private boolean readEntity() throws IOException
    {
        int declTags = 1;
        for (int c = getChar(); c != EOF_CHAR; c = getChar()) {
            addToString(c);
            switch (c) {
            case '<':
                declTags++;
                break;
            case '>':
                declTags--;
                if (declTags == 0) return true;
                break;
            }
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,readPI,"    private boolean readPI() throws IOException
    {
        for (int c = getChar(); c != EOF_CHAR; c = getChar()) {
            addToString(c);
            if (c == '?' && peekChar() == '>') {
                c = getChar(); // Skip >
                addToString(c);
                return true;
            }
        }

        stringBufferTop = 0; // throw away the string in progress
        this.string = null;
        parser.addError(""msg.XML.bad.form"");
        return false;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getStringFromBuffer,"    private String getStringFromBuffer()
    {
        return new String(stringBuffer, 0, stringBufferTop);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,addToString,"    private void addToString(int c)
    {
        int N = stringBufferTop;
        if (N == stringBuffer.length) {
            char[] tmp = new char[stringBuffer.length * 2];
            System.arraycopy(stringBuffer, 0, tmp, 0, N);
            stringBuffer = tmp;
        }
        stringBuffer[N] = (char)c;
        stringBufferTop = N + 1;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,ungetChar,"    private void ungetChar(int c)
    {
        // can not unread past across line boundary
        if (ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\n')
            Kit.codeBug();
        ungetBuffer[ungetCursor++] = c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,matchChar,"    private boolean matchChar(int test) throws IOException
    {
        int c = getChar();
        if (c == test) {
            return true;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,peekChar,"    private int peekChar() throws IOException
    {
        int c = getChar();
        ungetChar(c);
        return c;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getChar,"    private int getChar() throws IOException
    {
        if (ungetCursor != 0) {
            return ungetBuffer[--ungetCursor];
        }

        for(;;) {
            int c;",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,skipLine,"    private void skipLine() throws IOException
    {
        // skip to end of line
        int c;
        while ((c = getChar()) != EOF_CHAR && c != '\n') { }
        ungetChar(c);
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getOffset,"    final int getOffset()
    {
        int n = sourceCursor - lineStart;
        if (lineEndChar >= 0) { --n; }
        return n;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,getLine,"    final String getLine()
    {
        if (sourceString != null) {
            // String case",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
4a596eda3437b6e7bf3018170d1187badddfe81b,TokenStream.java,fillSourceBuffer,"    private boolean fillSourceBuffer() throws IOException
    {
        if (sourceString != null) Kit.codeBug();
        if (sourceEnd == sourceBuffer.length) {
            if (lineStart != 0) {
                System.arraycopy(sourceBuffer, lineStart, sourceBuffer, 0,
                                 sourceEnd - lineStart);
                sourceEnd -= lineStart;
                sourceCursor -= lineStart;
                lineStart = 0;
            } else {
                char[] tmp = new char[sourceBuffer.length * 2];
                System.arraycopy(sourceBuffer, 0, tmp, 0, sourceEnd);
                sourceBuffer = tmp;
            }
        }
        int n = sourceReader.read(sourceBuffer, sourceEnd,
                                  sourceBuffer.length - sourceEnd);
        if (n < 0) {
            return false;
        }
        sourceEnd += n;
        return true;
    }",https://www.github.com/ether/pad/commit/4a596eda3437b6e7bf3018170d1187badddfe81b
3de6b03821a0e3e366df26b41933b12668aa9f36,pdf.java,getSize,"    public static float[] getSize(String filename)
        throws Exception {
        String myFilename = filename + ""[0]"";
        
        ProcessBuilder pb = new ProcessBuilder(""identify"",""-format"", ""%[fx:w]\n%[fx:h]"",myFilename);
        Process p = pb.start();
        InputStream is = p.getInputStream();
        BufferedReader d = new BufferedReader(new InputStreamReader(is));
        String w = d.readLine();
        String h = d.readLine();
        p.waitFor();
        float res[] =  {Float.parseFloat(w), Float.parseFloat(h)};
        return res;
    }",https://www.github.com/ether/pad/commit/3de6b03821a0e3e366df26b41933b12668aa9f36
3de6b03821a0e3e366df26b41933b12668aa9f36,pdf.java,convert,"    public static void convert(String filename, int page, String out, int offset[], int size[], int pixelSize[]) 
        throws Exception {
        String myFilename = filename + ""[""+(page-1)+""]"";
        String myScale = """" + pixelSize[0]+""x"" + pixelSize[1];
        String myCrop = """" + size[0]+""x"" + size[1] + ""+"" + offset[0] + ""+"" + offset[1];
        ProcessBuilder pb = new ProcessBuilder(""convert"", ""-crop"", myCrop, ""-scale"", myScale, myFilename, out);
        Process p = pb.start();
        p.waitFor();
    }",https://www.github.com/ether/pad/commit/3de6b03821a0e3e366df26b41933b12668aa9f36
3de6b03821a0e3e366df26b41933b12668aa9f36,pdf.java,main,"    public static void main(String arg[])
        throws Exception { 
        System.out.println(pdf.getSize(""test.pdf"")[0]);
        System.out.println(pdf.getSize(""test.pdf"")[1]);
        int offset[] =  {400, 500};
        int size[] =  {500, 500};
        int pSize[] =  {200,200};
        pdf.convert(""test.pdf"", 1, ""test.png"", offset, size, pSize);
   }",https://www.github.com/ether/pad/commit/3de6b03821a0e3e366df26b41933b12668aa9f36
